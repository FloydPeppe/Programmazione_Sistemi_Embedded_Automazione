
Experiments.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e47c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800e650  0800e650  0001e650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e970  0800e970  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e970  0800e970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e978  0800e978  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e978  0800e978  0001e978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e97c  0800e97c  0001e97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800e980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  2000007c  0800e9fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052d8  0800e9fc  000252d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bde  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000449b  00000000  00000000  00044c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00049128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  0004a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016525  00000000  00000000  0004bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008cbd  00000000  00000000  00062455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006b112  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006c0c  00000000  00000000  0006b168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e634 	.word	0x0800e634

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800e634 	.word	0x0800e634

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2uiz>:
 8000b38:	004a      	lsls	r2, r1, #1
 8000b3a:	d211      	bcs.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b40:	d211      	bcs.n	8000b66 <__aeabi_d2uiz+0x2e>
 8000b42:	d50d      	bpl.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b4c:	d40e      	bmi.n	8000b6c <__aeabi_d2uiz+0x34>
 8000b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_d2uiz+0x3a>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b96e 	b.w	8000f0c <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8083 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d947      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b142      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	f1c2 0020 	rsb	r0, r2, #32
 8000c68:	fa24 f000 	lsr.w	r0, r4, r0
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4097      	lsls	r7, r2
 8000c70:	ea40 0c01 	orr.w	ip, r0, r1
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c80:	fa1f fe87 	uxth.w	lr, r7
 8000c84:	fb08 c116 	mls	r1, r8, r6, ip
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9a:	f080 8119 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8116 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc6:	f080 8105 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8102 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d150      	bne.n	8000d9c <__udivmoddi4+0x154>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2601      	movs	r6, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	1879      	adds	r1, r7, r1
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	f200 80e9 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d9 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7bf      	b.n	8000cde <__udivmoddi4+0x96>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x12e>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80b1 	beq.w	8000eca <__udivmoddi4+0x282>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0x140>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80b8 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	468c      	mov	ip, r1
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0a8      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f603 	lsr.w	r6, r0, r3
 8000da4:	4097      	lsls	r7, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	4330      	orrs	r0, r6
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db8:	fa1f f887 	uxth.w	r8, r7
 8000dbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb06 f108 	mul.w	r1, r6, r8
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dd6:	f080 808d 	bcs.w	8000ef4 <__udivmoddi4+0x2ac>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 808a 	bls.w	8000ef4 <__udivmoddi4+0x2ac>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b281      	uxth	r1, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e02:	d273      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d971      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4439      	add	r1, r7
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c6 0c20 	rsb	ip, r6, #32
 8000e18:	fa03 f406 	lsl.w	r4, r3, r6
 8000e1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e20:	431c      	orrs	r4, r3
 8000e22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0c3b      	lsrs	r3, r7, #16
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fa1f f884 	uxth.w	r8, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e46:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4a:	458a      	cmp	sl, r1
 8000e4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e50:	fa00 f306 	lsl.w	r3, r0, r6
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x220>
 8000e56:	1861      	adds	r1, r4, r1
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e5c:	d248      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	d946      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4421      	add	r1, r4
 8000e68:	eba1 010a 	sub.w	r1, r1, sl
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x24a>
 8000e82:	19e7      	adds	r7, r4, r7
 8000e84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e88:	d22e      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d92c      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4427      	add	r7, r4
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba7 0708 	sub.w	r7, r7, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454f      	cmp	r7, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	d31a      	bcc.n	8000edc <__udivmoddi4+0x294>
 8000ea6:	d017      	beq.n	8000ed8 <__udivmoddi4+0x290>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x27a>
 8000eaa:	ebb3 020e 	subs.w	r2, r3, lr
 8000eae:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eb6:	40f2      	lsrs	r2, r6
 8000eb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ebc:	40f7      	lsrs	r7, r6
 8000ebe:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e70b      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6fd      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000ed8:	4543      	cmp	r3, r8
 8000eda:	d2e5      	bcs.n	8000ea8 <__udivmoddi4+0x260>
 8000edc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7df      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e7d2      	b.n	8000e92 <__udivmoddi4+0x24a>
 8000eec:	4660      	mov	r0, ip
 8000eee:	e78d      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	e7b9      	b.n	8000e68 <__udivmoddi4+0x220>
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	e775      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e74a      	b.n	8000d92 <__udivmoddi4+0x14a>
 8000efc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f00:	4439      	add	r1, r7
 8000f02:	e713      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	443c      	add	r4, r7
 8000f08:	e724      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f004 f8a5 	bl	8005064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f88b 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 fadf 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f22:	f000 fabd 	bl	80014a0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f26:	f000 f99b 	bl	8001260 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f2a:	f000 f8f1 	bl	8001110 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f2e:	f000 f9eb 	bl	8001308 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f32:	f000 fa37 	bl	80013a4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000f36:	f000 fa89 	bl	800144c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initializing my libraries
  MAIN_DIFFDRIVE_Init();
 8000f3a:	f000 fb9b 	bl	8001674 <MAIN_DIFFDRIVE_Init>
  MAIN_DATASTREAM_Init();
 8000f3e:	f000 fb7d 	bl	800163c <MAIN_DATASTREAM_Init>
  MAIN_MAF_Init();
 8000f42:	f000 fc73 	bl	800182c <MAIN_MAF_Init>

  // Using the flag "wait_button" to start MCU with WIFI disabled
  // if blue button is pressed during reset. It's useful to avoid
  // battery leakage
  bool wait_for_button= false;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <main+0xf8>)
 8000f50:	f004 ff22 	bl	8005d98 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11a      	bne.n	8000f90 <main+0x80>
   	wait_for_button= true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]
   	// Show pressed button
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f5e:	e006      	b.n	8000f6e <main+0x5e>
   		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f60:	2120      	movs	r1, #32
 8000f62:	482a      	ldr	r0, [pc, #168]	; (800100c <main+0xfc>)
 8000f64:	f004 ff49 	bl	8005dfa <HAL_GPIO_TogglePin>
   		HAL_Delay(50);
 8000f68:	2032      	movs	r0, #50	; 0x32
 8000f6a:	f004 f8bd 	bl	80050e8 <HAL_Delay>
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f72:	4825      	ldr	r0, [pc, #148]	; (8001008 <main+0xf8>)
 8000f74:	f004 ff10 	bl	8005d98 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <main+0x50>
   	}
   	// Turn on LED
   	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	4822      	ldr	r0, [pc, #136]	; (800100c <main+0xfc>)
 8000f84:	f004 ff20 	bl	8005dc8 <HAL_GPIO_WritePin>
   	// Debouncing released button
   	HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f004 f8ac 	bl	80050e8 <HAL_Delay>
  }

  // Reset ESP-8266
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2101      	movs	r1, #1
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <main+0xf8>)
 8000f96:	f004 ff17 	bl	8005dc8 <HAL_GPIO_WritePin>

  // Wait for blue button if this option is on
  if( wait_for_button )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <main+0xa2>
	  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8000fa0:	bf00      	nop
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <main+0xf8>)
 8000fa8:	f004 fef6 	bl	8005d98 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f7      	bne.n	8000fa2 <main+0x92>
		  	  ;

  HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f004 f897 	bl	80050e8 <HAL_Delay>

  // Start ESP
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4812      	ldr	r0, [pc, #72]	; (8001008 <main+0xf8>)
 8000fc0:	f004 ff02 	bl	8005dc8 <HAL_GPIO_WritePin>

  // Wait a bit for ESP initialization
  HAL_Delay(3000);
 8000fc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fc8:	f004 f88e 	bl	80050e8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f007 fe7e 	bl	8008ccc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DiffDriveTask */
  DiffDriveTaskHandle = osThreadNew(MoveDifferentialDrive, NULL, &DiffDriveTask_attributes);
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <main+0x100>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <main+0x104>)
 8000fd6:	f007 fed8 	bl	8008d8a <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <main+0x108>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(TxStream, NULL, &TxTask_attributes);
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <main+0x10c>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <main+0x110>)
 8000fe6:	f007 fed0 	bl	8008d8a <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <main+0x114>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of RxTask */
  RxTaskHandle = osThreadNew(RxStream, NULL, &RxTask_attributes);
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <main+0x118>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <main+0x11c>)
 8000ff6:	f007 fec8 	bl	8008d8a <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <main+0x120>)
 8000ffe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001000:	f007 fe88 	bl	8008d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0xf4>
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000
 8001010:	0800e6b4 	.word	0x0800e6b4
 8001014:	080018b1 	.word	0x080018b1
 8001018:	200049cc 	.word	0x200049cc
 800101c:	0800e6d8 	.word	0x0800e6d8
 8001020:	08001a8d 	.word	0x08001a8d
 8001024:	20004abc 	.word	0x20004abc
 8001028:	0800e6fc 	.word	0x0800e6fc
 800102c:	08001d85 	.word	0x08001d85
 8001030:	20004d10 	.word	0x20004d10

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00b fa32 	bl	800c4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <SystemClock_Config+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <SystemClock_Config+0xd8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <SystemClock_Config+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a8:	2310      	movs	r3, #16
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 f9b2 	bl	800642c <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ce:	f001 f84b 	bl	8002168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fe9e 	bl	8005e30 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010fa:	f001 f835 	bl	8002168 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b092      	sub	sp, #72	; 0x48
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00b f9b6 	bl	800c4ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_TIM1_Init+0x148>)
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <MX_TIM1_Init+0x14c>)
 8001144:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <MX_TIM1_Init+0x148>)
 8001148:	2208      	movs	r2, #8
 800114a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <MX_TIM1_Init+0x148>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_TIM1_Init+0x148>)
 8001154:	f242 7210 	movw	r2, #10000	; 0x2710
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <MX_TIM1_Init+0x148>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001160:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <MX_TIM1_Init+0x148>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MX_TIM1_Init+0x148>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <MX_TIM1_Init+0x148>)
 800116e:	f005 fcf7 	bl	8006b60 <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f000 fff6 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	4619      	mov	r1, r3
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <MX_TIM1_Init+0x148>)
 800118c:	f006 fdc2 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001196:	f000 ffe7 	bl	8002168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_TIM1_Init+0x148>)
 80011c0:	f006 f85c 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011ca:	f000 ffcd 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2204      	movs	r2, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_TIM1_Init+0x148>)
 80011d8:	f006 f850 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011e2:	f000 ffc1 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	2208      	movs	r2, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_TIM1_Init+0x148>)
 80011f0:	f006 f844 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80011fa:	f000 ffb5 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM1_Init+0x148>)
 8001208:	f006 f838 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001212:	f000 ffa9 	bl	8002168 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM1_Init+0x148>)
 800123a:	f006 fde7 	bl	8007e0c <HAL_TIMEx_ConfigBreakDeadTime>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001244:	f000 ff90 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM1_Init+0x148>)
 800124a:	f001 f885 	bl	8002358 <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3748      	adds	r7, #72	; 0x48
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20004c5c 	.word	0x20004c5c
 800125c:	40010000 	.word	0x40010000

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f00b f91c 	bl	800c4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM2_Init+0xa4>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM2_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80012b4:	230f      	movs	r3, #15
 80012b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80012c4:	230f      	movs	r3, #15
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012d0:	f005 fd6a 	bl	8006da8 <HAL_TIM_Encoder_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012da:	f000 ff45 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ec:	f006 fd12 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012f6:	f000 ff37 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20004d14 	.word	0x20004d14

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM3_Init+0x94>)
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM3_Init+0x98>)
 8001328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0x94>)
 800132c:	f240 3247 	movw	r2, #839	; 0x347
 8001330:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM3_Init+0x94>)
 800133a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800133e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM3_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM3_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM3_Init+0x94>)
 800134e:	f005 fb0b 	bl	8006968 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 ff06 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM3_Init+0x94>)
 800136a:	f006 f849 	bl	8007400 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fef8 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM3_Init+0x94>)
 8001386:	f006 fcc5 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 feea 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20004b74 	.word	0x20004b74
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00b f87a 	bl	800c4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM5_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013f6:	230f      	movs	r3, #15
 80013f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001406:	230f      	movs	r3, #15
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM5_Init+0xa0>)
 8001412:	f005 fcc9 	bl	8006da8 <HAL_TIM_Encoder_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 fea4 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM5_Init+0xa0>)
 800142e:	f006 fc71 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fe96 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20004ac0 	.word	0x20004ac0
 8001448:	40000c00 	.word	0x40000c00

0800144c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART3_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001458:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800145c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001484:	f006 fd32 	bl	8007eec <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 fe6b 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20004a48 	.word	0x20004a48
 800149c:	40004800 	.word	0x40004800

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DMA_Init+0x3c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MX_DMA_Init+0x3c>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x3c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	200c      	movs	r0, #12
 80014c8:	f003 ff25 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f003 ff3e 	bl	800534e <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <MX_GPIO_Init+0x150>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <MX_GPIO_Init+0x150>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <MX_GPIO_Init+0x150>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <MX_GPIO_Init+0x150>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a45      	ldr	r2, [pc, #276]	; (8001630 <MX_GPIO_Init+0x150>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <MX_GPIO_Init+0x150>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <MX_GPIO_Init+0x150>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a3e      	ldr	r2, [pc, #248]	; (8001630 <MX_GPIO_Init+0x150>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <MX_GPIO_Init+0x150>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_GPIO_Init+0x150>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <MX_GPIO_Init+0x150>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_GPIO_Init+0x150>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x154>)
 800156c:	f004 fc2c 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2130      	movs	r1, #48	; 0x30
 8001574:	4830      	ldr	r0, [pc, #192]	; (8001638 <MX_GPIO_Init+0x158>)
 8001576:	f004 fc27 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001580:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <MX_GPIO_Init+0x154>)
 8001592:	f004 fa6d 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <MX_GPIO_Init+0x154>)
 80015ae:	f004 fa5f 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b2:	230c      	movs	r3, #12
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	481a      	ldr	r0, [pc, #104]	; (8001638 <MX_GPIO_Init+0x158>)
 80015ce:	f004 fa4f 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 80015d2:	2330      	movs	r3, #48	; 0x30
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_GPIO_Init+0x158>)
 80015ea:	f004 fa41 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_GPIO_Init+0x154>)
 8001602:	f004 fa35 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001618:	2308      	movs	r3, #8
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_GPIO_Init+0x158>)
 8001624:	f004 fa24 	bl	8005a70 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000

0800163c <MAIN_DATASTREAM_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DATASTREAM_Init(){
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0

	DATASTREAM_InitTypeDef DATASTREAM_InitStruct;

	DATASTREAM_InitStruct.DMA_Rx_Enable= true;
 8001642:	2301      	movs	r3, #1
 8001644:	723b      	strb	r3, [r7, #8]
	DATASTREAM_InitStruct.DMA_Rx_Stream_IRQn= DMA1_Stream1_IRQn;
 8001646:	230c      	movs	r3, #12
 8001648:	60fb      	str	r3, [r7, #12]
	DATASTREAM_InitStruct.huart= &huart3;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MAIN_DATASTREAM_Init+0x30>)
 800164c:	607b      	str	r3, [r7, #4]

	hstream.Init= DATASTREAM_InitStruct;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MAIN_DATASTREAM_Init+0x34>)
 8001650:	461c      	mov	r4, r3
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001658:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	DATASTREAM_Init(&hstream);
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MAIN_DATASTREAM_Init+0x34>)
 800165e:	f001 f827 	bl	80026b0 <DATASTREAM_Init>

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	20004a48 	.word	0x20004a48
 8001670:	20004c40 	.word	0x20004c40

08001674 <MAIN_DIFFDRIVE_Init>:


static void MAIN_DIFFDRIVE_Init(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

	float Ts= 0.01f;
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t max_sample= 1400u;
 800167e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001682:	847b      	strh	r3, [r7, #34]	; 0x22

	hdiffdrive.Init.timing_htim= &htim3;
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001686:	4a5b      	ldr	r2, [pc, #364]	; (80017f4 <MAIN_DIFFDRIVE_Init+0x180>)
 8001688:	64da      	str	r2, [r3, #76]	; 0x4c
	hdiffdrive.Init.timing_time_step= Ts;
 800168a:	4a59      	ldr	r2, [pc, #356]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	6513      	str	r3, [r2, #80]	; 0x50

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001692:	4a59      	ldr	r2, [pc, #356]	; (80017f8 <MAIN_DIFFDRIVE_Init+0x184>)
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <MAIN_DIFFDRIVE_Init+0x188>)
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_tim_channel[left ]= TIM_CHANNEL_1;
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_tim_channel[right]= TIM_CHANNEL_1;
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
	hdiffdrive.Init.encoder_tim_arr_resolution[left ]= 32;
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.encoder_tim_arr_resolution[right]= 32;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 80016b8:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <MAIN_DIFFDRIVE_Init+0x18c>)
 80016bc:	665a      	str	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 80016be:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016c0:	4a4f      	ldr	r2, [pc, #316]	; (8001800 <MAIN_DIFFDRIVE_Init+0x18c>)
 80016c2:	669a      	str	r2, [r3, #104]	; 0x68

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016c6:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016c8:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016cc:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016ce:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 80016d0:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016d2:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016d4:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016da:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 80016dc:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 80016ee:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016f0:	220c      	movs	r2, #12
 80016f2:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	 MOTOR_MAX_VOLTAGE;
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016f6:	4a44      	ldr	r2, [pc, #272]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	 MOTOR_MAX_VOLTAGE;
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80016fc:	4a42      	ldr	r2, [pc, #264]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	 MOTOR_MIN_VOLTAGE;
 8001700:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	 MOTOR_MIN_VOLTAGE;
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=  SUPPLY_VOLTAGE;
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 8001714:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]= SUPPLY_VOLTAGE;
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001718:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 800171c:	4a3b      	ldr	r2, [pc, #236]	; (800180c <MAIN_DIFFDRIVE_Init+0x198>)
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	ca07      	ldmia	r2, {r0, r1, r2}
 8001724:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001728:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001730:	4a37      	ldr	r2, [pc, #220]	; (8001810 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	ca07      	ldmia	r2, {r0, r1, r2}
 8001738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800173c:	4a2c      	ldr	r2, [pc, #176]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <MAIN_DIFFDRIVE_Init+0x1a4>)
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001756:	463b      	mov	r3, r7
 8001758:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800175e:	2203      	movs	r2, #3
 8001760:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001766:	2203      	movs	r2, #3
 8001768:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800176e:	2201      	movs	r2, #1
 8001770:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001776:	2201      	movs	r2, #1
 8001778:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800177e:	2202      	movs	r2, #2
 8001780:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001786:	2202      	movs	r2, #2
 8001788:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	hdiffdrive.Init.control_pid_P[left ]= 20.0f;  //33.3;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_P[right]= 20.0f;  //33.3;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001796:	4a21      	ldr	r2, [pc, #132]	; (800181c <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_I[left ]= 8.0f;   //7.6;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800179e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80017a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_I[right]= 8.0f;   //7.6;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80017ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	hdiffdrive.Init.control_pid_D[left ]= 0.0f;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	hdiffdrive.Init.control_pid_D[right]= 0.0f;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	hdiffdrive.Init.history_max_sample= max_sample;
 80017c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	// --- Mechanical parameters (from real model) --- //

	hdiffdrive.Init.mech_prmtr_l=                 0.155f/2.0f; // Distance between wheels.
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <MAIN_DIFFDRIVE_Init+0x1ac>)
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.mech_prmtr_r=                 0.069f/2.0f; // Wheels radius.
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <MAIN_DIFFDRIVE_Init+0x1b0>)
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58

	hdiffdrive.Init.mech_prmtr_max_wheel_speed=   10.0f; // Radiant each seconds (rad/s). DC motors and gears specifics,
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MAIN_DIFFDRIVE_Init+0x1b4>)
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60
										     	      // motor specifics (on STM32CubeIDE press CTRL and then click):
												     //
  												    // https://wiki.dfrobot.com/Micro_DC_Motor_with_Encoder-SJ02_SKU__FIT0458
												   //
	// --- Initialize handle --- //
	DIFFDRIVE_Init(&hdiffdrive);
 80017de:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017e0:	f001 fa32 	bl	8002c48 <DIFFDRIVE_Init>

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	3c23d70a 	.word	0x3c23d70a
 80017f0:	20004dc8 	.word	0x20004dc8
 80017f4:	20004b74 	.word	0x20004b74
 80017f8:	20004d14 	.word	0x20004d14
 80017fc:	20004ac0 	.word	0x20004ac0
 8001800:	44ed8000 	.word	0x44ed8000
 8001804:	20004c5c 	.word	0x20004c5c
 8001808:	40f00000 	.word	0x40f00000
 800180c:	0800e670 	.word	0x0800e670
 8001810:	0800e67c 	.word	0x0800e67c
 8001814:	3a237e1b 	.word	0x3a237e1b
 8001818:	3a21a280 	.word	0x3a21a280
 800181c:	41a00000 	.word	0x41a00000
 8001820:	3d9eb852 	.word	0x3d9eb852
 8001824:	3d0d4fdf 	.word	0x3d0d4fdf
 8001828:	41200000 	.word	0x41200000

0800182c <MAIN_MAF_Init>:

// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

	int filtr_a_size=  1;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_th_size= 1;
 8001836:	2301      	movs	r3, #1
 8001838:	623b      	str	r3, [r7, #32]

	int filtr_infrared_size= 100;
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_a  = MAF_Create(filtr_a_size,  weights_buff);
 8001842:	4c18      	ldr	r4, [pc, #96]	; (80018a4 <MAIN_MAF_Init+0x78>)
 8001844:	463b      	mov	r3, r7
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	4618      	mov	r0, r3
 800184c:	f003 f8ae 	bl	80049ac <MAF_Create>
 8001850:	4625      	mov	r5, r4
 8001852:	463c      	mov	r4, r7
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185c:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th = MAF_Create(filtr_th_size, weights_buff);
 8001860:	4c11      	ldr	r4, [pc, #68]	; (80018a8 <MAIN_MAF_Init+0x7c>)
 8001862:	463b      	mov	r3, r7
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	6a39      	ldr	r1, [r7, #32]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f89f 	bl	80049ac <MAF_Create>
 800186e:	4625      	mov	r5, r4
 8001870:	463c      	mov	r4, r7
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187a:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 800187e:	4c0b      	ldr	r4, [pc, #44]	; (80018ac <MAIN_MAF_Init+0x80>)
 8001880:	463b      	mov	r3, r7
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f890 	bl	80049ac <MAF_Create>
 800188c:	4625      	mov	r5, r4
 800188e:	463c      	mov	r4, r7
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001898:	e885 0003 	stmia.w	r5, {r0, r1}

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	20005020 	.word	0x20005020
 80018a8:	20004c28 	.word	0x20004c28
 80018ac:	200049d0 	.word	0x200049d0

080018b0 <MoveDifferentialDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MoveDifferentialDrive */
void MoveDifferentialDrive(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// Trajectory speeds (linear and angular speed)
	float v= 0, om= 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
	// Trajectory speed limits (theoretically computed below)
	float v_max, om_max;

	// Extracting Max wheels speed (radiant each second)
	float wheel_speed[2];
	float wheel_speed_max= hdiffdrive.mech_prmtr.max_wheel_speed;
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 80018c6:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
	wheel_speed[left ]= wheel_speed_max;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	60fb      	str	r3, [r7, #12]
	wheel_speed[right]= wheel_speed_max;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	613b      	str	r3, [r7, #16]

	// Delta_a_max computation (linear variation, is max when wheels rotate at max speed on same direction)
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v_max, NULL, wheel_speed);
 80018d4:	f107 020c 	add.w	r2, r7, #12
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 ff0c 	bl	80046fc <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	v_max *= 1; // Here you could modulate max value
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	61bb      	str	r3, [r7, #24]

	// Delta_th_max computation (angular variation, is max when wheel rotate at max speed on opposite direction)
	wheel_speed[left]= -wheel_speed_max;
 80018e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ec:	eef1 7a67 	vneg.f32	s15, s15
 80018f0:	edc7 7a03 	vstr	s15, [r7, #12]
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(NULL, &om_max, wheel_speed);
 80018f4:	f107 020c 	add.w	r2, r7, #12
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	2000      	movs	r0, #0
 8001900:	f002 fefc 	bl	80046fc <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	om_max *= 1; // Here you could modulate max value
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	617b      	str	r3, [r7, #20]
	float IR_val;
	float IR_thres= 0.3;
#endif

	// Setting Global flag to indicate that Diff Drive is going to move
	diffDrive_stopped= false;
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

	// Start control
	DIFFDRIVE_TrackingStart();
 800190e:	f002 ffe3 	bl	80048d8 <DIFFDRIVE_TrackingStart>

	/* Infinite loop */
	for(;;){

		// If movement is enabled
		if( diffDrive_enabled ){
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <MoveDifferentialDrive+0x1c0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808c 	beq.w	8001a36 <MoveDifferentialDrive+0x186>

			v=  linear;
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <MoveDifferentialDrive+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
			om= angular;
 8001924:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <MoveDifferentialDrive+0x1c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28

			// Enroll angular speed to a fixed range
			if(fabsf(om) > om_max)
 800192a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800192e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001932:	edd7 7a05 	vldr	s15, [r7, #20]
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	dd0d      	ble.n	800195c <MoveDifferentialDrive+0xac>
				// x/|x| == sign(x)
				om = om_max*om/fabsf(om);
 8001940:	ed97 7a05 	vldr	s14, [r7, #20]
 8001944:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001948:	ee67 6a27 	vmul.f32	s13, s14, s15
 800194c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001950:	eeb0 7ae7 	vabs.f32	s14, s15
 8001954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001958:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			// have just to find the max or min v value (min is -max) with the constraints of omega fixed and
			// wheel_speed between the fixed range:
			//
			// https://github.com/FloydPeppe/Progetto_Sistemi_Embedded/blob/main/Tesina/Tesina_Progetto_Embedded.pdf
			//
			float l = hdiffdrive.mech_prmtr.l;
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 800195e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8001962:	623b      	str	r3, [r7, #32]
			float r = hdiffdrive.mech_prmtr.r;
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 8001966:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800196a:	61fb      	str	r3, [r7, #28]
			if( om >= 0 )
 800196c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	db10      	blt.n	800199c <MoveDifferentialDrive+0xec>
				v_max = r * wheel_speed_max - om * l;
 800197a:	ed97 7a07 	vldr	s14, [r7, #28]
 800197e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001986:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800198a:	edd7 7a08 	vldr	s15, [r7, #32]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	edc7 7a06 	vstr	s15, [r7, #24]
 800199a:	e00f      	b.n	80019bc <MoveDifferentialDrive+0x10c>
			else
				v_max = r * wheel_speed_max + om * l;
 800199c:	ed97 7a07 	vldr	s14, [r7, #28]
 80019a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80019ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	edc7 7a06 	vstr	s15, [r7, #24]

			// Enroll linear speed to fixed range
			if(fabsf(v) > v_max)
 80019bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019c0:	eeb0 7ae7 	vabs.f32	s14, s15
 80019c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd0d      	ble.n	80019ee <MoveDifferentialDrive+0x13e>
				// x/|x| == sign(x)
				v = v_max*v/fabsf(v);
 80019d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80019d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

			// Update filters to smooth a bit input trajectory
			MAF_Update(&hfilter_a,  v);
 80019ee:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80019f2:	4822      	ldr	r0, [pc, #136]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 80019f4:	f003 f829 	bl	8004a4a <MAF_Update>
			MAF_Update(&hfilter_th, om);
 80019f8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80019fc:	4820      	ldr	r0, [pc, #128]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 80019fe:	f003 f824 	bl	8004a4a <MAF_Update>

			// Get current values
			v=  __MAF_GET_VAL(&hfilter_a);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
			om= __MAF_GET_VAL(&hfilter_th);
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			// If diff drive has been previously stopped
			if( diffDrive_stopped ){
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <MoveDifferentialDrive+0x172>
				// Restart control
				DIFFDRIVE_TrackingResume();
 8001a18:	f002 ff6c 	bl	80048f4 <DIFFDRIVE_TrackingResume>
				// Set flag to indicate that is going to move
				diffDrive_stopped= false;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
					v = 0;
			}
#endif

			// Timing the external transmitter periodically setting this flag
			allow_new_msg= true;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MoveDifferentialDrive+0x1d4>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]

			// Make step control
			DIFFDRIVE_TrackingStep(v, om);
 8001a28:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001a2c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001a30:	f002 ff6c 	bl	800490c <DIFFDRIVE_TrackingStep>
 8001a34:	e76d      	b.n	8001912 <MoveDifferentialDrive+0x62>

		}
		// if movement is disabled and diffDrive is moving
		else if( !diffDrive_stopped ){
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f43f af65 	beq.w	8001912 <MoveDifferentialDrive+0x62>
			// Suspend control (stop diff drive)
			DIFFDRIVE_TrackingSuspend();
 8001a48:	f002 ff5a 	bl	8004900 <DIFFDRIVE_TrackingSuspend>

			// Reset filters
			MAF_Reset(&hfilter_a,  0);
 8001a4c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001a88 <MoveDifferentialDrive+0x1d8>
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 8001a52:	f002 ffd2 	bl	80049fa <MAF_Reset>
			MAF_Reset(&hfilter_th, 0);
 8001a56:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001a88 <MoveDifferentialDrive+0x1d8>
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 8001a5c:	f002 ffcd 	bl	80049fa <MAF_Reset>

			// Set global flag to indicate that diff drive is now stopped
			diffDrive_stopped= true;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
		if( diffDrive_enabled ){
 8001a66:	e754      	b.n	8001912 <MoveDifferentialDrive+0x62>
 8001a68:	20004dc8 	.word	0x20004dc8
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200000a0 	.word	0x200000a0
 8001a74:	20000098 	.word	0x20000098
 8001a78:	2000009c 	.word	0x2000009c
 8001a7c:	20005020 	.word	0x20005020
 8001a80:	20004c28 	.word	0x20004c28
 8001a84:	200000a2 	.word	0x200000a2
 8001a88:	00000000 	.word	0x00000000

08001a8c <TxStream>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TxStream */
void TxStream(void *argument)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b0d4      	sub	sp, #336	; 0x150
 8001a92:	af1c      	add	r7, sp, #112	; 0x70
 8001a94:	6578      	str	r0, [r7, #84]	; 0x54
	  // When this thread is active I use HAL_Delay(ms) and not osDelay(ms), because during Tx stream
	  // I suspend other theads, so I don't need os timing. Moreover, osDelay sometimes hangs forever
	  // without no reason, I guess 'cause other threads are suspended and scheduler try to wait for them.

	  // If blue button is pressed
	  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	48ae      	ldr	r0, [pc, #696]	; (8001d54 <TxStream+0x2c8>)
 8001a9c:	f004 f97c 	bl	8005d98 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f7      	bne.n	8001a96 <TxStream+0xa>

		  // Stop Rx stream
		  RxStream_enabled= false;
 8001aa6:	4bac      	ldr	r3, [pc, #688]	; (8001d58 <TxStream+0x2cc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

		  // Wait until Rx is stream is stopped
		  while( !RxStream_stopped )
 8001aac:	bf00      	nop
 8001aae:	4bab      	ldr	r3, [pc, #684]	; (8001d5c <TxStream+0x2d0>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f083 0301 	eor.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f7      	bne.n	8001aae <TxStream+0x22>
			  ;

		  // Stop Differential Drive motion
		  diffDrive_enabled= false;
 8001abe:	4ba8      	ldr	r3, [pc, #672]	; (8001d60 <TxStream+0x2d4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

		  // Wait until diff drive is still
		  while( !diffDrive_stopped )
 8001ac4:	bf00      	nop
 8001ac6:	4ba7      	ldr	r3, [pc, #668]	; (8001d64 <TxStream+0x2d8>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f7      	bne.n	8001ac6 <TxStream+0x3a>
			  ;

		  // Suspend other threads while sending values
		  osThreadSuspend(DiffDriveTaskHandle);
 8001ad6:	4ba4      	ldr	r3, [pc, #656]	; (8001d68 <TxStream+0x2dc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f007 f9e7 	bl	8008eae <osThreadSuspend>
#ifdef OBSTACLE_AVOIDANCE
		  osThreadSuspend(InfraredTaskHandle);
#endif
		  osThreadSuspend(RxTaskHandle);
 8001ae0:	4ba2      	ldr	r3, [pc, #648]	; (8001d6c <TxStream+0x2e0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 f9e2 	bl	8008eae <osThreadSuspend>

		  // Turn on LED
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	48a0      	ldr	r0, [pc, #640]	; (8001d70 <TxStream+0x2e4>)
 8001af0:	f004 f96a 	bl	8005dc8 <HAL_GPIO_WritePin>

		  // Reset ESP-8266
		  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2101      	movs	r1, #1
 8001af8:	4896      	ldr	r0, [pc, #600]	; (8001d54 <TxStream+0x2c8>)
 8001afa:	f004 f965 	bl	8005dc8 <HAL_GPIO_WritePin>

		  HAL_Delay(400);
 8001afe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b02:	f003 faf1 	bl	80050e8 <HAL_Delay>

		  // Send values forever
		  for(;;){

			  // If blue button is pressed again
			  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0a:	4892      	ldr	r0, [pc, #584]	; (8001d54 <TxStream+0x2c8>)
 8001b0c:	f004 f944 	bl	8005d98 <HAL_GPIO_ReadPin>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f7      	bne.n	8001b06 <TxStream+0x7a>

				  // Enable ESP-8266
				  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2101      	movs	r1, #1
 8001b1a:	488e      	ldr	r0, [pc, #568]	; (8001d54 <TxStream+0x2c8>)
 8001b1c:	f004 f954 	bl	8005dc8 <HAL_GPIO_WritePin>

				  // Rapidly flash led to show MCU ready to send values
				  for(int i=0; i<20; i++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b26:	e00b      	b.n	8001b40 <TxStream+0xb4>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b28:	2120      	movs	r1, #32
 8001b2a:	4891      	ldr	r0, [pc, #580]	; (8001d70 <TxStream+0x2e4>)
 8001b2c:	f004 f965 	bl	8005dfa <HAL_GPIO_TogglePin>
					  HAL_Delay(50);
 8001b30:	2032      	movs	r0, #50	; 0x32
 8001b32:	f003 fad9 	bl	80050e8 <HAL_Delay>
				  for(int i=0; i<20; i++){
 8001b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b44:	2b13      	cmp	r3, #19
 8001b46:	ddef      	ble.n	8001b28 <TxStream+0x9c>
				  }

				  // Turn off LED
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	4888      	ldr	r0, [pc, #544]	; (8001d70 <TxStream+0x2e4>)
 8001b4e:	f004 f93b 	bl	8005dc8 <HAL_GPIO_WritePin>

				  // Wait for 10 received chars
				  char ch[10];
				  HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8001b52:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	4885      	ldr	r0, [pc, #532]	; (8001d74 <TxStream+0x2e8>)
 8001b5e:	f006 fab1 	bl	80080c4 <HAL_UART_Receive>

				  // Wait a bit
				  HAL_Delay(2000);
 8001b62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b66:	f003 fabf 	bl	80050e8 <HAL_Delay>

				  // Histroy variable
				  DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <TxStream+0x2ec>)
 8001b6c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001b70:	f503 7510 	add.w	r5, r3, #576	; 0x240
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b7c:	e884 0003 	stmia.w	r4, {r0, r1}

				  // Number of saved samples
				  int N_sample;
				  if( tmphist.sample_cnt < tmphist.max_sample )
 8001b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d204      	bcs.n	8001b96 <TxStream+0x10a>
					  N_sample=  tmphist.sample_cnt;
 8001b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b94:	e003      	b.n	8001b9e <TxStream+0x112>
				  else
					  N_sample=  tmphist.max_sample;
 8001b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

				  // First values send is the actual number of samples
				  DATASTREAM_Print(&hstream, int_csv, 1, (double)N_sample);
 8001b9e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001ba2:	f7fe fc87 	bl	80004b4 <__aeabi_i2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9cd 2300 	strd	r2, r3, [sp]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4872      	ldr	r0, [pc, #456]	; (8001d7c <TxStream+0x2f0>)
 8001bb4:	f000 fe24 	bl	8002800 <DATASTREAM_Print>
				  // Bit of transfer delay
				  HAL_Delay(5);
 8001bb8:	2005      	movs	r0, #5
 8001bba:	f003 fa95 	bl	80050e8 <HAL_Delay>

				  // Init History Get function
				  DIFFDRIVE_HISTORY_Get_Init();
 8001bbe:	f002 fa4b 	bl	8004058 <DIFFDRIVE_HISTORY_Get_Init>

				  for(int k= 0; k < N_sample; k++){
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001bc8:	e0b2      	b.n	8001d30 <TxStream+0x2a4>
					  // Temporary variables
					  DIFFDRIVE_STATE_TypeDef state_measure, state_target;

					  // Get one state sample from history
					  DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 8001bca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fa67 	bl	80040a8 <DIFFDRIVE_HISTORY_Get_Sample>

					  // Send values to serial connected to ESP WiFi module
					  DATASTREAM_Print(
							  &hstream, float_csv, 14,
							  state_measure.input[left], state_measure.input[right],
 8001bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
					  DATASTREAM_Print(
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc7b 	bl	80004d8 <__aeabi_f2d>
 8001be2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
							  state_measure.input[left], state_measure.input[right],
 8001be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
					  DATASTREAM_Print(
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc74 	bl	80004d8 <__aeabi_f2d>
 8001bf0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
							  state_target .input[left], state_target .input[right],
 8001bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
					  DATASTREAM_Print(
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fc6d 	bl	80004d8 <__aeabi_f2d>
 8001bfe:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							  state_target .input[left], state_target .input[right],
 8001c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
					  DATASTREAM_Print(
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc66 	bl	80004d8 <__aeabi_f2d>
 8001c0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
							  state_measure.wheel[left], state_measure.wheel[right],
 8001c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
					  DATASTREAM_Print(
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc60 	bl	80004d8 <__aeabi_f2d>
 8001c18:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							  state_measure.wheel[left], state_measure.wheel[right],
 8001c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
					  DATASTREAM_Print(
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc5a 	bl	80004d8 <__aeabi_f2d>
 8001c24:	e9c7 0108 	strd	r0, r1, [r7, #32]
							  state_target .wheel[left], state_target .wheel[right],
 8001c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
					  DATASTREAM_Print(
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc53 	bl	80004d8 <__aeabi_f2d>
 8001c32:	e9c7 0106 	strd	r0, r1, [r7, #24]
							  state_target .wheel[left], state_target .wheel[right],
 8001c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
					  DATASTREAM_Print(
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc4c 	bl	80004d8 <__aeabi_f2d>
 8001c40:	e9c7 0104 	strd	r0, r1, [r7, #16]
							  state_measure.pose.x_a,    state_measure.pose.y_a,
 8001c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
					  DATASTREAM_Print(
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc46 	bl	80004d8 <__aeabi_f2d>
 8001c4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
							  state_measure.pose.x_a,    state_measure.pose.y_a,
 8001c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
					  DATASTREAM_Print(
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc40 	bl	80004d8 <__aeabi_f2d>
 8001c58:	e9c7 0100 	strd	r0, r1, [r7]
							  state_measure.pose.theta,
 8001c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
					  DATASTREAM_Print(
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc3a 	bl	80004d8 <__aeabi_f2d>
 8001c64:	4682      	mov	sl, r0
 8001c66:	468b      	mov	fp, r1
							  state_target .pose.x_a,    state_target.pose.y_a,
 8001c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
					  DATASTREAM_Print(
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc33 	bl	80004d8 <__aeabi_f2d>
 8001c72:	4680      	mov	r8, r0
 8001c74:	4689      	mov	r9, r1
							  state_target .pose.x_a,    state_target.pose.y_a,
 8001c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
					  DATASTREAM_Print(
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc2c 	bl	80004d8 <__aeabi_f2d>
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
							  state_target .pose.theta
 8001c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
					  DATASTREAM_Print(
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc25 	bl	80004d8 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001c96:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001c9a:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001c9e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8001ca2:	ed97 7b00 	vldr	d7, [r7]
 8001ca6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001caa:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cae:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001cb2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001cb6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001cba:	ed97 7b06 	vldr	d7, [r7, #24]
 8001cbe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001cc2:	ed97 7b08 	vldr	d7, [r7, #32]
 8001cc6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001cca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001cce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001cd2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001cd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001cda:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001cde:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ce2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001ce6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001cea:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001cee:	ed8d 7b00 	vstr	d7, [sp]
 8001cf2:	220e      	movs	r2, #14
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4821      	ldr	r0, [pc, #132]	; (8001d7c <TxStream+0x2f0>)
 8001cf8:	f000 fd82 	bl	8002800 <DATASTREAM_Print>
					  );
					  // Bit of transfer delay
					  HAL_Delay(5);
 8001cfc:	2005      	movs	r0, #5
 8001cfe:	f003 f9f3 	bl	80050e8 <HAL_Delay>
					  // Toggling led to show data transfer operation
					  if( !(k%50) )
 8001d02:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <TxStream+0x2f4>)
 8001d08:	fb83 1302 	smull	r1, r3, r3, r2
 8001d0c:	1119      	asrs	r1, r3, #4
 8001d0e:	17d3      	asrs	r3, r2, #31
 8001d10:	1acb      	subs	r3, r1, r3
 8001d12:	2132      	movs	r1, #50	; 0x32
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <TxStream+0x29a>
						  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d1e:	2120      	movs	r1, #32
 8001d20:	4813      	ldr	r0, [pc, #76]	; (8001d70 <TxStream+0x2e4>)
 8001d22:	f004 f86a 	bl	8005dfa <HAL_GPIO_TogglePin>
				  for(int k= 0; k < N_sample; k++){
 8001d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f6ff af46 	blt.w	8001bca <TxStream+0x13e>
				  }

				  // Turn off LED
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2120      	movs	r1, #32
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <TxStream+0x2e4>)
 8001d44:	f004 f840 	bl	8005dc8 <HAL_GPIO_WritePin>

				  // Reset ESP-8266
				  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4801      	ldr	r0, [pc, #4]	; (8001d54 <TxStream+0x2c8>)
 8001d4e:	f004 f83b 	bl	8005dc8 <HAL_GPIO_WritePin>
			  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001d52:	e6d8      	b.n	8001b06 <TxStream+0x7a>
 8001d54:	40020800 	.word	0x40020800
 8001d58:	20000001 	.word	0x20000001
 8001d5c:	200000a1 	.word	0x200000a1
 8001d60:	200000a0 	.word	0x200000a0
 8001d64:	20000000 	.word	0x20000000
 8001d68:	200049cc 	.word	0x200049cc
 8001d6c:	20004d10 	.word	0x20004d10
 8001d70:	40020000 	.word	0x40020000
 8001d74:	20004a48 	.word	0x20004a48
 8001d78:	20004dc8 	.word	0x20004dc8
 8001d7c:	20004c40 	.word	0x20004c40
 8001d80:	51eb851f 	.word	0x51eb851f

08001d84 <RxStream>:

//#define STOP_WHEN_ZERO_ENTRY_

/* USER CODE END Header_RxStream */
void RxStream(void *argument)
{
 8001d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d88:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8001d8c:	af06      	add	r7, sp, #24
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RxStream */
	/* Infinite loop */

	// Debug array
	uint32_t running_time[100]={0};
 8001d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d96:	4618      	mov	r0, r3
 8001d98:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f00a fb84 	bl	800c4ac <memset>
	int k_= 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	// Communication timeout of milliseconds
	uint32_t timeout_time= 2000;
 8001daa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	char curr_str[]=   "value"; //"gravity";
#else
#ifdef BINARY_PACKET

	// Float values expected to extract
	uint8_t n_values= 2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3

	// Repetition of the packet
	uint8_t packet_repeat=2 ;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2

	// Actual number of float received (n_values+1 because one float is an "inf" to show where the packet start)
	uint8_t n_float= (n_values+1)*packet_repeat;
 8001dbe:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f897 21e2 	ldrb.w	r2, [r7, #482]	; 0x1e2
 8001dca:	fb12 f303 	smulbb	r3, r2, r3
 8001dce:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1

	// Number of byte
	uint8_t n_byte= n_float*sizeof(float);;
 8001dd2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0

	// Data buffer in byte
	uint8_t data[n_byte];
 8001ddc:	f897 41e0 	ldrb.w	r4, [r7, #480]	; 0x1e0
 8001de0:	4623      	mov	r3, r4
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001de8:	b2e0      	uxtb	r0, r4
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	00cb      	lsls	r3, r1, #3
 8001df8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dfc:	00c2      	lsls	r2, r0, #3
 8001dfe:	b2e0      	uxtb	r0, r4
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	00cb      	lsls	r3, r1, #3
 8001e0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e12:	00c2      	lsls	r2, r0, #3
 8001e14:	4623      	mov	r3, r4
 8001e16:	3307      	adds	r3, #7
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e20:	ab06      	add	r3, sp, #24
 8001e22:	3300      	adds	r3, #0
 8001e24:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
#endif /* CSV_PACKET    */
#endif /* JSON_PACKET   */
#endif /* BINARY_PACKET */

	// Keep LED on to show that data transfer is down
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	48ba      	ldr	r0, [pc, #744]	; (8002118 <RxStream+0x394>)
 8001e2e:	f003 ffcb 	bl	8005dc8 <HAL_GPIO_WritePin>

	// Start DMA Rx (Rx_flag will be connected with the flag inside datastream handle struct)
	DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8001e32:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001e36:	4622      	mov	r2, r4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	48b8      	ldr	r0, [pc, #736]	; (800211c <RxStream+0x398>)
 8001e3c:	f000 fc8e 	bl	800275c <DATASTREAM_ReceiveDMA>

	// Wait for a received input
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001e40:	e000      	b.n	8001e44 <RxStream+0xc0>
		__NOP();
 8001e42:	bf00      	nop
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001e44:	4bb5      	ldr	r3, [pc, #724]	; (800211c <RxStream+0x398>)
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f6      	bne.n	8001e42 <RxStream+0xbe>

	// LED off to show that data transfer is up
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2120      	movs	r1, #32
 8001e58:	48af      	ldr	r0, [pc, #700]	; (8002118 <RxStream+0x394>)
 8001e5a:	f003 ffb5 	bl	8005dc8 <HAL_GPIO_WritePin>

	// Setting Global flag to enable Diff Drive
	diffDrive_enabled= true;
 8001e5e:	4bb0      	ldr	r3, [pc, #704]	; (8002120 <RxStream+0x39c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]

	// Measure time
	uint32_t tic= osKernelGetTickCount();
 8001e64:	f006 ff7c 	bl	8008d60 <osKernelGetTickCount>
 8001e68:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
	DIFFDRIVE_STATE_TypeDef state_measure;

	for(;;){

		// If data is received
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8001e6c:	4bab      	ldr	r3, [pc, #684]	; (800211c <RxStream+0x398>)
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80b5 	beq.w	8001fe2 <RxStream+0x25e>
 8001e78:	466b      	mov	r3, sp
 8001e7a:	461e      	mov	r6, r3

			// Debug time
			if( k_ < sizeof(running_time)/sizeof(*running_time) )
 8001e7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e80:	2b63      	cmp	r3, #99	; 0x63
 8001e82:	d80e      	bhi.n	8001ea2 <RxStream+0x11e>
				running_time[k_++]= osKernelGetTickCount()-tic;
 8001e84:	f006 ff6c 	bl	8008d60 <osKernelGetTickCount>
 8001e88:	4601      	mov	r1, r0
 8001e8a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 8001e94:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001e98:	1a89      	subs	r1, r1, r2
 8001e9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef BINARY_PACKET

			uint8_t tmp_data[n_byte];
 8001ea2:	f897 51e0 	ldrb.w	r5, [r7, #480]	; 0x1e0
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001eae:	b2e8      	uxtb	r0, r5
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	00cb      	lsls	r3, r1, #3
 8001ebe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ec2:	00c2      	lsls	r2, r0, #3
 8001ec4:	b2e8      	uxtb	r0, r5
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	00cb      	lsls	r3, r1, #3
 8001ed4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ed8:	00c2      	lsls	r2, r0, #3
 8001eda:	462b      	mov	r3, r5
 8001edc:	3307      	adds	r3, #7
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee6:	ab06      	add	r3, sp, #24
 8001ee8:	3300      	adds	r3, #0
 8001eea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			float curr_val;
			// FLip array of byte data (I guess the transmitter send with different endiannes)
			for( int i=0; i<n_byte; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001ef4:	e013      	b.n	8001f1e <RxStream+0x19a>
				tmp_data[n_byte-1-i]= data[i];
 8001ef6:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8001f06:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001f0a:	440a      	add	r2, r1
 8001f0c:	7811      	ldrb	r1, [r2, #0]
 8001f0e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001f12:	54d1      	strb	r1, [r2, r3]
			for( int i=0; i<n_byte; i++)
 8001f14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001f1e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8001f22:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbe5      	blt.n	8001ef6 <RxStream+0x172>

			// Find the index where the "inf" values is, the packet start from there
			int i=0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
			while( i < n_byte && !isinf(curr_val= *((float*)(tmp_data+i++))) )
 8001f30:	bf00      	nop
 8001f32:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8001f36:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	da1d      	bge.n	8001f7a <RxStream+0x1f6>
 8001f3e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001f54:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 8001f58:	eef0 7ae7 	vabs.f32	s15, s15
 8001f5c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002124 <RxStream+0x3a0>
 8001f60:	eef4 7a47 	vcmp.f32	s15, s14
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	bfd4      	ite	le
 8001f6a:	2301      	movle	r3, #1
 8001f6c:	2300      	movgt	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f083 0301 	eor.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0db      	beq.n	8001f32 <RxStream+0x1ae>
				;

			// If the data, read from the found index, contain 2 float
			if( --i < n_byte-sizeof(float)*n_values ){
 8001f7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001f84:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001f88:	f897 11e0 	ldrb.w	r1, [r7, #480]	; 0x1e0
 8001f8c:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	1acb      	subs	r3, r1, r3
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d218      	bcs.n	8001fca <RxStream+0x246>
				// First value I send is the last I receive (from Transmitter I send first linear and then angular
				// here I receive first angular and then linear)
				angular= *((float*)(tmp_data+i+(n_values-1)*sizeof(float)));
 8001f98:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001f9c:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fa8:	440b      	add	r3, r1
 8001faa:	4413      	add	r3, r2
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <RxStream+0x3a4>)
 8001fb0:	6013      	str	r3, [r2, #0]
				linear=  *((float*)(tmp_data+i+(n_values-0)*sizeof(float)));
 8001fb2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001fb6:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8001fba:	0099      	lsls	r1, r3, #2
 8001fbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fc0:	440b      	add	r3, r1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a59      	ldr	r2, [pc, #356]	; (800212c <RxStream+0x3a8>)
 8001fc8:	6013      	str	r3, [r2, #0]

			// Try resetting
			//DATASTREAM_ReceiveDMA_Reset(&hstream);

			// Ready for receive new messages
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8001fca:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001fce:	4622      	mov	r2, r4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4852      	ldr	r0, [pc, #328]	; (800211c <RxStream+0x398>)
 8001fd4:	f000 fbc2 	bl	800275c <DATASTREAM_ReceiveDMA>

			// Get current time
			tic= osKernelGetTickCount();
 8001fd8:	f006 fec2 	bl	8008d60 <osKernelGetTickCount>
 8001fdc:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
 8001fe0:	46b5      	mov	sp, r6
		}


		// Blocking the external transmitter until a new message is allowed. DiffDrive task periodically set true
		// the below flag (the external transmitter must be set to wait until received data before to send new more)
		if( allow_new_msg ){
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <RxStream+0x3ac>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d032      	beq.n	8002052 <RxStream+0x2ce>
		//while( !allow_new_msg )
			//;
		//{

			// Get current history sample
			DIFFDRIVE_HISTORY_Get_Sample(&state_measure,NULL);
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 f858 	bl	80040a8 <DIFFDRIVE_HISTORY_Get_Sample>

			// Send diffDrive current pose to serial connected to ESP WiFi module (this trigger the external transmitter
			// to send new data)
			DATASTREAM_Print(
					&hstream, float_csv, 3,
					state_measure.pose.x_a,    state_measure.pose.y_a,
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	681b      	ldr	r3, [r3, #0]
			DATASTREAM_Print(
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa6a 	bl	80004d8 <__aeabi_f2d>
 8002004:	4680      	mov	r8, r0
 8002006:	4689      	mov	r9, r1
					state_measure.pose.x_a,    state_measure.pose.y_a,
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	685b      	ldr	r3, [r3, #4]
			DATASTREAM_Print(
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa62 	bl	80004d8 <__aeabi_f2d>
 8002014:	4682      	mov	sl, r0
 8002016:	468b      	mov	fp, r1
					state_measure.pose.theta
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	689b      	ldr	r3, [r3, #8]
			DATASTREAM_Print(
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa5a 	bl	80004d8 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800202c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002030:	e9cd 8900 	strd	r8, r9, [sp]
 8002034:	2203      	movs	r2, #3
 8002036:	2101      	movs	r1, #1
 8002038:	4838      	ldr	r0, [pc, #224]	; (800211c <RxStream+0x398>)
 800203a:	f000 fbe1 	bl	8002800 <DATASTREAM_Print>
			);

			// Resetting the flag
			allow_new_msg= false;
 800203e:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <RxStream+0x3ac>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
		}


		// Stopping Rx if flag is at reset value
		while( !RxStream_enabled ){
 8002044:	e005      	b.n	8002052 <RxStream+0x2ce>
			DATASTREAM_ReceiveDMA_Reset(&hstream);
 8002046:	4835      	ldr	r0, [pc, #212]	; (800211c <RxStream+0x398>)
 8002048:	f000 fbb4 	bl	80027b4 <DATASTREAM_ReceiveDMA_Reset>
			RxStream_stopped= true;
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <RxStream+0x3b0>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
		while( !RxStream_enabled ){
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <RxStream+0x3b4>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f1      	bne.n	8002046 <RxStream+0x2c2>
		}

		// If data aren't received for a fixed period of time
		if( (toc= osKernelGetTickCount()-tic) > timeout_time ){
 8002062:	f006 fe7d 	bl	8008d60 <osKernelGetTickCount>
 8002066:	4602      	mov	r2, r0
 8002068:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002072:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8002076:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800207a:	429a      	cmp	r2, r3
 800207c:	f67f aef6 	bls.w	8001e6c <RxStream+0xe8>

			// Stop Differential Drive motion
			diffDrive_enabled= false;
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <RxStream+0x39c>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]

			// Wait until diff drive is still
			while( !diffDrive_stopped )
 8002086:	bf00      	nop
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <RxStream+0x3b8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f7      	bne.n	8002088 <RxStream+0x304>
				;


			// Turn on LED to show that connection is down
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2120      	movs	r1, #32
 800209c:	481e      	ldr	r0, [pc, #120]	; (8002118 <RxStream+0x394>)
 800209e:	f003 fe93 	bl	8005dc8 <HAL_GPIO_WritePin>

			// Try resetting uart Rx and DMA interrupt
			DATASTREAM_ReceiveDMA_Reset(&hstream);
 80020a2:	481e      	ldr	r0, [pc, #120]	; (800211c <RxStream+0x398>)
 80020a4:	f000 fb86 	bl	80027b4 <DATASTREAM_ReceiveDMA_Reset>

			// Try to start a new DMA receiving request
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 80020a8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80020ac:	4622      	mov	r2, r4
 80020ae:	4619      	mov	r1, r3
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <RxStream+0x398>)
 80020b2:	f000 fb53 	bl	800275c <DATASTREAM_ReceiveDMA>

			// Wait for input
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 80020b6:	e019      	b.n	80020ec <RxStream+0x368>

				// While receiving is disabled keep loop here before to reset
				while( !RxStream_enabled )
					RxStream_stopped= true;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <RxStream+0x3b0>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
				while( !RxStream_enabled )
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <RxStream+0x3b4>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f4      	bne.n	80020b8 <RxStream+0x334>

				// If more time elapses, without received data, reset system
				if( (osKernelGetTickCount()-tic) > 3*timeout_time ){
 80020ce:	f006 fe47 	bl	8008d60 <osKernelGetTickCount>
 80020d2:	4602      	mov	r2, r0
 80020d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80020d8:	1ad1      	subs	r1, r2, r3
 80020da:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d901      	bls.n	80020ec <RxStream+0x368>
					// Reset MCU
					HAL_NVIC_SystemReset();
 80020e8:	f003 f94d 	bl	8005386 <HAL_NVIC_SystemReset>
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <RxStream+0x398>)
 80020ee:	7e1b      	ldrb	r3, [r3, #24]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e0      	bne.n	80020be <RxStream+0x33a>
				}
			}

			// Turn on LED to show that connection is up
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2120      	movs	r1, #32
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <RxStream+0x394>)
 8002102:	f003 fe61 	bl	8005dc8 <HAL_GPIO_WritePin>

			// Resume other threads
			osThreadResume(DiffDriveTaskHandle);
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <RxStream+0x3bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f006 fef0 	bl	8008ef0 <osThreadResume>
#ifdef OBSTACLE_AVOIDANCE
			osThreadResume(InfraredTaskHandle);
#endif
			// Enable diffDrive
			diffDrive_enabled= true;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <RxStream+0x39c>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8002116:	e6a9      	b.n	8001e6c <RxStream+0xe8>
 8002118:	40020000 	.word	0x40020000
 800211c:	20004c40 	.word	0x20004c40
 8002120:	200000a0 	.word	0x200000a0
 8002124:	7f7fffff 	.word	0x7f7fffff
 8002128:	2000009c 	.word	0x2000009c
 800212c:	20000098 	.word	0x20000098
 8002130:	200000a2 	.word	0x200000a2
 8002134:	200000a1 	.word	0x200000a1
 8002138:	20000001 	.word	0x20000001
 800213c:	20000000 	.word	0x20000000
 8002140:	200049cc 	.word	0x200049cc

08002144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002156:	f002 ffa7 	bl	80050a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40001000 	.word	0x40001000

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	e7fe      	b.n	8002170 <Error_Handler+0x8>
	...

08002174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_MspInit+0x54>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_MspInit+0x54>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_MspInit+0x54>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_MspInit+0x54>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_MspInit+0x54>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_MspInit+0x54>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	210f      	movs	r1, #15
 80021b6:	f06f 0001 	mvn.w	r0, #1
 80021ba:	f003 f8ac 	bl	8005316 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_TIM_PWM_MspInit+0x3c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10d      	bne.n	80021fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_PWM_MspInit+0x40>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_TIM_PWM_MspInit+0x40>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_TIM_PWM_MspInit+0x40>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002230:	d12d      	bne.n	800228e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 800226a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800227c:	2301      	movs	r3, #1
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	481d      	ldr	r0, [pc, #116]	; (80022fc <HAL_TIM_Encoder_MspInit+0xec>)
 8002288:	f003 fbf2 	bl	8005a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800228c:	e030      	b.n	80022f0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d12b      	bne.n	80022f0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 80022d0:	2303      	movs	r3, #3
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <HAL_TIM_Encoder_MspInit+0xf4>)
 80022ec:	f003 fbc0 	bl	8005a70 <HAL_GPIO_Init>
}
 80022f0:	bf00      	nop
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40000c00 	.word	0x40000c00
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_TIM_Base_MspInit+0x48>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d115      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_TIM_Base_MspInit+0x4c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_TIM_Base_MspInit+0x4c>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_TIM_Base_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2105      	movs	r1, #5
 800233a:	201d      	movs	r0, #29
 800233c:	f002 ffeb 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002340:	201d      	movs	r0, #29
 8002342:	f003 f804 	bl	800534e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40000400 	.word	0x40000400
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_TIM_MspPostInit+0x68>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d11e      	bne.n	80023b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 8002396:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800239a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_TIM_MspPostInit+0x70>)
 80023b4:	f003 fb5c 	bl	8005a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023b8:	bf00      	nop
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a40      	ldr	r2, [pc, #256]	; (80024ec <HAL_UART_MspInit+0x120>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d179      	bne.n	80024e2 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_UART_MspInit+0x124>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <HAL_UART_MspInit+0x124>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <HAL_UART_MspInit+0x124>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <HAL_UART_MspInit+0x124>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a37      	ldr	r2, [pc, #220]	; (80024f0 <HAL_UART_MspInit+0x124>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_UART_MspInit+0x124>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_UART_MspInit+0x124>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_UART_MspInit+0x124>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_UART_MspInit+0x124>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002442:	2320      	movs	r3, #32
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002452:	2307      	movs	r3, #7
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4825      	ldr	r0, [pc, #148]	; (80024f4 <HAL_UART_MspInit+0x128>)
 800245e:	f003 fb07 	bl	8005a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002474:	2307      	movs	r3, #7
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	481e      	ldr	r0, [pc, #120]	; (80024f8 <HAL_UART_MspInit+0x12c>)
 8002480:	f003 faf6 	bl	8005a70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_UART_MspInit+0x130>)
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_UART_MspInit+0x134>)
 8002488:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_UART_MspInit+0x130>)
 800248c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002490:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_UART_MspInit+0x130>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_UART_MspInit+0x130>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024c6:	480d      	ldr	r0, [pc, #52]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024c8:	f002 ff62 	bl	8005390 <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80024d2:	f7ff fe49 	bl	8002168 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <HAL_UART_MspInit+0x130>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40004800 	.word	0x40004800
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020400 	.word	0x40020400
 80024fc:	200049e8 	.word	0x200049e8
 8002500:	40026028 	.word	0x40026028

08002504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	2036      	movs	r0, #54	; 0x36
 800251a:	f002 fefc 	bl	8005316 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800251e:	2036      	movs	r0, #54	; 0x36
 8002520:	f002 ff15 	bl	800534e <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_InitTick+0xa4>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_InitTick+0xa4>)
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_InitTick+0xa4>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002540:	f107 0210 	add.w	r2, r7, #16
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fd8a 	bl	8006064 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002550:	f003 fd60 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 8002554:	4603      	mov	r3, r0
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_InitTick+0xa8>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0c9b      	lsrs	r3, r3, #18
 8002564:	3b01      	subs	r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_InitTick+0xac>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_InitTick+0xb0>)
 800256c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_InitTick+0xac>)
 8002570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002574:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_InitTick+0xac>)
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_InitTick+0xac>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_InitTick+0xac>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002588:	4809      	ldr	r0, [pc, #36]	; (80025b0 <HAL_InitTick+0xac>)
 800258a:	f004 f9ed 	bl	8006968 <HAL_TIM_Base_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002594:	4806      	ldr	r0, [pc, #24]	; (80025b0 <HAL_InitTick+0xac>)
 8002596:	f004 fa43 	bl	8006a20 <HAL_TIM_Base_Start_IT>
 800259a:	4603      	mov	r3, r0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3730      	adds	r7, #48	; 0x30
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	20005038 	.word	0x20005038
 80025b4:	40001000 	.word	0x40001000

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <NMI_Handler+0x4>

080025be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <MemManage_Handler+0x4>

080025ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA1_Stream1_IRQHandler+0x10>)
 80025ea:	f002 ffd7 	bl	800559c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200049e8 	.word	0x200049e8

080025f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM3_IRQHandler+0x10>)
 80025fe:	f004 fd15 	bl	800702c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20004b74 	.word	0x20004b74

0800260c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM6_DAC_IRQHandler+0x10>)
 8002612:	f004 fd0b 	bl	800702c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20005038 	.word	0x20005038

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f009 fef4 	bl	800c43c <__errno>
 8002654:	4603      	mov	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <_sbrk+0x64>)
 8002670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20020000 	.word	0x20020000
 8002680:	00000400 	.word	0x00000400
 8002684:	200000a4 	.word	0x200000a4
 8002688:	200052d8 	.word	0x200052d8

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <DATASTREAM_Init>:


/* ----------------- Functions definition --------------------- */

// Setting up streaming
DATASTREAM_StatusTypeDef DATASTREAM_Init(DATASTREAM_HandleTypeDef* hstream){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new stream
	if( glbl_idx < MAX_STREAMS ){
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <DATASTREAM_Init+0x9c>)
 80026ba:	f993 3000 	ldrsb.w	r3, [r3]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	dc2e      	bgt.n	8002720 <DATASTREAM_Init+0x70>

		// Realloc array of handles pointers
		hdatastream= (DATASTREAM_HandleTypeDef**)realloc(hdatastream, glbl_idx*sizeof(DATASTREAM_HandleTypeDef*));
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <DATASTREAM_Init+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <DATASTREAM_Init+0x9c>)
 80026c8:	f992 2000 	ldrsb.w	r2, [r2]
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 ffad 	bl	800c630 <realloc>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <DATASTREAM_Init+0xa0>)
 80026da:	6013      	str	r3, [r2, #0]

		// Connect current handle with input handle using pointers
		hdatastream[glbl_idx]= hstream;
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <DATASTREAM_Init+0xa0>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <DATASTREAM_Init+0x9c>)
 80026e2:	f993 3000 	ldrsb.w	r3, [r3]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
	else
		// Return failure
		return DATASTREAM_ERROR;

	// Assign handle id and increment global index
	hstream->id= glbl_idx++;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <DATASTREAM_Init+0x9c>)
 80026f0:	f993 2000 	ldrsb.w	r2, [r3]
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	3301      	adds	r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	b259      	sxtb	r1, r3
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <DATASTREAM_Init+0x9c>)
 80026fe:	7019      	strb	r1, [r3, #0]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	765a      	strb	r2, [r3, #25]

	// Local UART handle
	hstream->huart=              hstream->Init.huart;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
	// DMA Enable
	hstream->DMA_Rx_Enable=      hstream->Init.DMA_Rx_Enable;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	791a      	ldrb	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	741a      	strb	r2, [r3, #16]

	if( hstream->DMA_Rx_Enable ){
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7c1b      	ldrb	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <DATASTREAM_Init+0x8a>
 800271e:	e001      	b.n	8002724 <DATASTREAM_Init+0x74>
		return DATASTREAM_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00f      	b.n	8002744 <DATASTREAM_Init+0x94>
		// DMA Interrupt Request "id"
		hstream->DMA_Rx_Stream_IRQn= hstream->Init.DMA_Rx_Stream_IRQn;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	615a      	str	r2, [r3, #20]
		// Assign Rx callback
		hstream->huart->RxCpltCallback= DATASTREAM_RxCpltCallback;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a08      	ldr	r2, [pc, #32]	; (8002754 <DATASTREAM_Init+0xa4>)
 8002732:	651a      	str	r2, [r3, #80]	; 0x50
		// Assign default true value to flag
		hstream->RxCpltFlag= true;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	761a      	strb	r2, [r3, #24]
	}

	// Assign Error callback
	hstream->huart->ErrorCallback=  DATASTREAM_ErrorCallback;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4a06      	ldr	r2, [pc, #24]	; (8002758 <DATASTREAM_Init+0xa8>)
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

	// Return success
	return DATASTREAM_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200000a8 	.word	0x200000a8
 8002750:	200050ec 	.word	0x200050ec
 8002754:	0800297d 	.word	0x0800297d
 8002758:	080029dd 	.word	0x080029dd

0800275c <DATASTREAM_ReceiveDMA>:
	free(hdatastream);
}


// Receive Data in DMA mode, setting a flag when data is received
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA(DATASTREAM_HandleTypeDef* hstream, uint8_t *data, uint32_t data_size){
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]

	// If flag is false it means that a previous DMA receive is still hanging. Also
	// if DMA is not enabled return error
	if( !hstream->RxCpltFlag || !hstream->DMA_Rx_Enable )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f083 0301 	eor.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <DATASTREAM_ReceiveDMA+0x2a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	7c1b      	ldrb	r3, [r3, #16]
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <DATASTREAM_ReceiveDMA+0x2e>
		return DATASTREAM_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e010      	b.n	80027ac <DATASTREAM_ReceiveDMA+0x50>

	// Assign false to Rx complete flag
	hstream->RxCpltFlag= false;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	761a      	strb	r2, [r3, #24]

	// Start DMA receiving (if HAL error occurred return failure)
	if( HAL_UART_Receive_DMA(hstream->huart, data, data_size) != HAL_OK )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	b292      	uxth	r2, r2
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f005 fd34 	bl	8008208 <HAL_UART_Receive_DMA>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <DATASTREAM_ReceiveDMA+0x4e>
		return DATASTREAM_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <DATASTREAM_ReceiveDMA+0x50>

	// Return success
	return DATASTREAM_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <DATASTREAM_ReceiveDMA_Reset>:


// Function to reset Rx with DMA communication
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA_Reset(DATASTREAM_HandleTypeDef* hstream){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

	// If DMA is not enabled return error
	if( !hstream->DMA_Rx_Enable )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7c1b      	ldrb	r3, [r3, #16]
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <DATASTREAM_ReceiveDMA_Reset+0x1a>
		return DATASTREAM_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e014      	b.n	80027f8 <DATASTREAM_ReceiveDMA_Reset+0x44>

	// Assign default true to flag
	hstream->RxCpltFlag= true;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	761a      	strb	r2, [r3, #24]

	// Try resetting uart Rx and DMA interrupt
	HAL_NVIC_DisableIRQ(hstream->DMA_Rx_Stream_IRQn);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fdc5 	bl	800536a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(hstream->DMA_Rx_Stream_IRQn);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fdb1 	bl	800534e <HAL_NVIC_EnableIRQ>

	// Set Uart Rx Ready
	hstream->huart->RxState= HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return DATASTREAM_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DATASTREAM_Print>:


// Do send values into serial, using a Variadic function. This version is for freeRTOS that doesn't support
// printf and sprintf
void DATASTREAM_Print(DATASTREAM_HandleTypeDef* hstream, DATASTREAM_PrintMode mode, int vargn, ...){
 8002800:	b40c      	push	{r2, r3}
 8002802:	b580      	push	{r7, lr}
 8002804:	b094      	sub	sp, #80	; 0x50
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	70fb      	strb	r3, [r7, #3]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 800280e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38

	// Timeout of ms
	uint32_t timeout= 1;
 8002814:	2301      	movs	r3, #1
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(mode){
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	2b03      	cmp	r3, #3
 800281c:	f200 80a6 	bhi.w	800296c <DATASTREAM_Print+0x16c>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DATASTREAM_Print+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	080028df 	.word	0x080028df
 800282c:	08002839 	.word	0x08002839
 8002830:	0800296d 	.word	0x0800296d
 8002834:	0800296d 	.word	0x0800296d
		// ------------ Streaming values in csv format --------------------
		// (Using this mode I send N values separated by comma character,
		//  each stream is ended with a newline)
		case float_csv:

			for(int i=0; i<vargn; i++){
 8002838:	2300      	movs	r3, #0
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800283c:	e03e      	b.n	80028bc <DATASTREAM_Print+0xbc>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 800283e:	2300      	movs	r3, #0
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
 8002842:	e008      	b.n	8002856 <DATASTREAM_Print+0x56>
					data_buff[k]= '\0';
 8002844:	f107 0220 	add.w	r2, r7, #32
 8002848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284a:	4413      	add	r3, r2
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	3301      	adds	r3, #1
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	2b0e      	cmp	r3, #14
 800285a:	d9f3      	bls.n	8002844 <DATASTREAM_Print+0x44>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), data_buff, 7);
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	3307      	adds	r3, #7
 8002860:	f023 0307 	bic.w	r3, r3, #7
 8002864:	f103 0208 	add.w	r2, r3, #8
 8002868:	63ba      	str	r2, [r7, #56]	; 0x38
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f7fe f981 	bl	8000b78 <__aeabi_d2f>
 8002876:	4602      	mov	r2, r0
 8002878:	f107 0320 	add.w	r3, r7, #32
 800287c:	2107      	movs	r1, #7
 800287e:	4618      	mov	r0, r3
 8002880:	ee00 2a10 	vmov	s0, r2
 8002884:	f000 f940 	bl	8002b08 <ftoa>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68d8      	ldr	r0, [r3, #12]
 800288c:	f107 0120 	add.w	r1, r7, #32
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	220f      	movs	r2, #15
 8002894:	f005 fb84 	bl	8007fa0 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	3b01      	subs	r3, #1
 800289c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d009      	beq.n	80028b6 <DATASTREAM_Print+0xb6>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68d8      	ldr	r0, [r3, #12]
 80028a6:	232c      	movs	r3, #44	; 0x2c
 80028a8:	773b      	strb	r3, [r7, #28]
 80028aa:	f107 011c 	add.w	r1, r7, #28
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2201      	movs	r2, #1
 80028b2:	f005 fb75 	bl	8007fa0 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 80028b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b8:	3301      	adds	r3, #1
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbbc      	blt.n	800283e <DATASTREAM_Print+0x3e>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68d8      	ldr	r0, [r3, #12]
 80028c8:	230a      	movs	r3, #10
 80028ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80028ce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d6:	2201      	movs	r2, #1
 80028d8:	f005 fb62 	bl	8007fa0 <HAL_UART_Transmit>

			break;
 80028dc:	e047      	b.n	800296e <DATASTREAM_Print+0x16e>

		case int_csv:

			for(int i=0; i<vargn; i++){
 80028de:	2300      	movs	r3, #0
 80028e0:	647b      	str	r3, [r7, #68]	; 0x44
 80028e2:	e032      	b.n	800294a <DATASTREAM_Print+0x14a>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
 80028e8:	e008      	b.n	80028fc <DATASTREAM_Print+0xfc>
					data_buff[k]= '\0';
 80028ea:	f107 020c 	add.w	r2, r7, #12
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	4413      	add	r3, r2
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 80028f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f8:	3301      	adds	r3, #1
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40
 80028fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fe:	2b0e      	cmp	r3, #14
 8002900:	d9f3      	bls.n	80028ea <DATASTREAM_Print+0xea>

				// Float to Array!
				itostr(va_arg(vargp, int), data_buff, 0);
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	1d1a      	adds	r2, r3, #4
 8002906:	63ba      	str	r2, [r7, #56]	; 0x38
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f89d 	bl	8002a50 <itostr>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68d8      	ldr	r0, [r3, #12]
 800291a:	f107 010c 	add.w	r1, r7, #12
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	220f      	movs	r2, #15
 8002922:	f005 fb3d 	bl	8007fa0 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002928:	3b01      	subs	r3, #1
 800292a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800292c:	429a      	cmp	r2, r3
 800292e:	d009      	beq.n	8002944 <DATASTREAM_Print+0x144>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68d8      	ldr	r0, [r3, #12]
 8002934:	232c      	movs	r3, #44	; 0x2c
 8002936:	723b      	strb	r3, [r7, #8]
 8002938:	f107 0108 	add.w	r1, r7, #8
 800293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293e:	2201      	movs	r2, #1
 8002940:	f005 fb2e 	bl	8007fa0 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	3301      	adds	r3, #1
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
 800294a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294e:	429a      	cmp	r2, r3
 8002950:	dbc8      	blt.n	80028e4 <DATASTREAM_Print+0xe4>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68d8      	ldr	r0, [r3, #12]
 8002956:	230a      	movs	r3, #10
 8002958:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800295c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002964:	2201      	movs	r2, #1
 8002966:	f005 fb1b 	bl	8007fa0 <HAL_UART_Transmit>

			break;
 800296a:	e000      	b.n	800296e <DATASTREAM_Print+0x16e>

		case int_binary:
			break;

		default:
			break;
 800296c:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 800296e:	bf00      	nop
 8002970:	3750      	adds	r7, #80	; 0x50
 8002972:	46bd      	mov	sp, r7
 8002974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002978:	b002      	add	sp, #8
 800297a:	4770      	bx	lr

0800297c <DATASTREAM_RxCpltCallback>:


// --- Rx Callback --- //

void DATASTREAM_RxCpltCallback(UART_HandleTypeDef *huart){
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

	// Checking which stream caused the callback, then assign true value to Rx complete flag
	for(int i=0; i<glbl_idx; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e015      	b.n	80029b6 <DATASTREAM_RxCpltCallback+0x3a>
		if(hdatastream[i]->huart == huart){
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <DATASTREAM_RxCpltCallback+0x58>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d108      	bne.n	80029b0 <DATASTREAM_RxCpltCallback+0x34>
			hdatastream[i]->RxCpltFlag= true;
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <DATASTREAM_RxCpltCallback+0x58>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	761a      	strb	r2, [r3, #24]
			break;
 80029ae:	e00a      	b.n	80029c6 <DATASTREAM_RxCpltCallback+0x4a>
	for(int i=0; i<glbl_idx; i++)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <DATASTREAM_RxCpltCallback+0x5c>)
 80029b8:	f993 3000 	ldrsb.w	r3, [r3]
 80029bc:	461a      	mov	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	dbe2      	blt.n	800298a <DATASTREAM_RxCpltCallback+0xe>
		}

}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	200050ec 	.word	0x200050ec
 80029d8:	200000a8 	.word	0x200000a8

080029dc <DATASTREAM_ErrorCallback>:


// --- Error callback --- //

void DATASTREAM_ErrorCallback(UART_HandleTypeDef *huart){
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	__NOP();
 80029e4:	bf00      	nop
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002a06:	e018      	b.n	8002a3a <reverse+0x48>
        temp = str[i];
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	441a      	add	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	440b      	add	r3, r1
 8002a1e:	7812      	ldrb	r2, [r2, #0]
 8002a20:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
        i++;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
        j--;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dbe2      	blt.n	8002a08 <reverse+0x16>
    }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <itostr>:

int itostr(int x, char str[], int d){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
    int neg= 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da23      	bge.n	8002ab2 <itostr+0x62>
    	x= -x;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 8002a74:	e01d      	b.n	8002ab2 <itostr+0x62>
        str[i++] = (x % 10) + '0';
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <itostr+0xb4>)
 8002a7a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a7e:	1099      	asrs	r1, r3, #2
 8002a80:	17d3      	asrs	r3, r2, #31
 8002a82:	1ac9      	subs	r1, r1, r3
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	1ad1      	subs	r1, r2, r3
 8002a8e:	b2ca      	uxtb	r2, r1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	6179      	str	r1, [r7, #20]
 8002a96:	4619      	mov	r1, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3230      	adds	r2, #48	; 0x30
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <itostr+0xb4>)
 8002aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aaa:	1092      	asrs	r2, r2, #2
 8002aac:	17db      	asrs	r3, r3, #31
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1de      	bne.n	8002a76 <itostr+0x26>
    }

    while (i < d)
 8002ab8:	e007      	b.n	8002aca <itostr+0x7a>
        str[i++] = '0';
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	617a      	str	r2, [r7, #20]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	2230      	movs	r2, #48	; 0x30
 8002ac8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dbf3      	blt.n	8002aba <itostr+0x6a>

    if(neg)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <itostr+0x98>
    	str[i++]= '-';
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	617a      	str	r2, [r7, #20]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	222d      	movs	r2, #45	; 0x2d
 8002ae6:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 8002ae8:	6979      	ldr	r1, [r7, #20]
 8002aea:	68b8      	ldr	r0, [r7, #8]
 8002aec:	f7ff ff81 	bl	80029f2 <reverse>

    str[i] = '\0';
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4413      	add	r3, r2
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

    return i;
 8002afa:	697b      	ldr	r3, [r7, #20]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	66666667 	.word	0x66666667

08002b08 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b12:	60b8      	str	r0, [r7, #8]
 8002b14:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1e:	ee17 3a90 	vmov	r3, s15
 8002b22:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 8002b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d50d      	bpl.n	8002b4e <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b44:	eef1 7a67 	vneg.f32	s15, s15
 8002b48:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b4c:	e00a      	b.n	8002b64 <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b58:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b60:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 8002b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	d50c      	bpl.n	8002b90 <ftoa+0x88>
 8002b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	dd05      	ble.n	8002b90 <ftoa+0x88>
    	res[0]= '0';
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2230      	movs	r2, #48	; 0x30
 8002b88:	701a      	strb	r2, [r3, #0]
    	i= 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e01f      	b.n	8002bd0 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 8002b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d512      	bpl.n	8002bc4 <ftoa+0xbc>
 8002b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	dd09      	ble.n	8002bc4 <ftoa+0xbc>
    	res[0]= '-';
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	222d      	movs	r2, #45	; 0x2d
 8002bb4:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	2230      	movs	r2, #48	; 0x30
 8002bbc:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e005      	b.n	8002bd0 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f7ff ff41 	bl	8002a50 <itostr>
 8002bce:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d030      	beq.n	8002c38 <ftoa+0x130>
        res[i] = '.';
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4413      	add	r3, r2
 8002bdc:	222e      	movs	r2, #46	; 0x2e
 8002bde:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002be0:	69f8      	ldr	r0, [r7, #28]
 8002be2:	f7fd fc79 	bl	80004d8 <__aeabi_f2d>
 8002be6:	4604      	mov	r4, r0
 8002be8:	460d      	mov	r5, r1
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fc62 	bl	80004b4 <__aeabi_i2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	ec43 2b11 	vmov	d1, r2, r3
 8002bf8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002c40 <ftoa+0x138>
 8002bfc:	f009 fe10 	bl	800c820 <pow>
 8002c00:	ec53 2b10 	vmov	r2, r3, d0
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7fd fcbe 	bl	8000588 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ffb0 	bl	8000b78 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8002c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	3301      	adds	r3, #1
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	ee17 0a90 	vmov	r0, s15
 8002c34:	f7ff ff0c 	bl	8002a50 <itostr>
    }
}
 8002c38:	bf00      	nop
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c40:	00000000 	.word	0x00000000
 8002c44:	40240000 	.word	0x40240000

08002c48 <DIFFDRIVE_Init>:
#endif

/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002c50:	4a83      	ldr	r2, [pc, #524]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002c5e:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002c60:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b7e      	ldr	r3, [pc, #504]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b7b      	ldr	r3, [pc, #492]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8002c7c:	4b78      	ldr	r3, [pc, #480]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c86:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 8002c8a:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c94:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8002c98:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002ca2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cac:	e273      	b.n	8003196 <DIFFDRIVE_Init+0x54e>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002cba:	2068      	movs	r0, #104	; 0x68
 8002cbc:	fb00 f202 	mul.w	r2, r0, r2
 8002cc0:	6a38      	ldr	r0, [r7, #32]
 8002cc2:	4402      	add	r2, r0
 8002cc4:	3334      	adds	r3, #52	; 0x34
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	889b      	ldrh	r3, [r3, #4]
 8002ccc:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8002cce:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cda:	2068      	movs	r0, #104	; 0x68
 8002cdc:	fb00 f303 	mul.w	r3, r0, r3
 8002ce0:	6a38      	ldr	r0, [r7, #32]
 8002ce2:	4403      	add	r3, r0
 8002ce4:	3138      	adds	r1, #56	; 0x38
 8002ce6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002cea:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2068      	movs	r0, #104	; 0x68
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	4403      	add	r3, r0
 8002d02:	311e      	adds	r1, #30
 8002d04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d08:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d16:	2068      	movs	r0, #104	; 0x68
 8002d18:	fb00 f303 	mul.w	r3, r0, r3
 8002d1c:	6a38      	ldr	r0, [r7, #32]
 8002d1e:	4403      	add	r3, r0
 8002d20:	3120      	adds	r1, #32
 8002d22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d26:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d34:	2068      	movs	r0, #104	; 0x68
 8002d36:	fb00 f202 	mul.w	r2, r0, r2
 8002d3a:	6a38      	ldr	r0, [r7, #32]
 8002d3c:	4402      	add	r2, r0
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	440b      	add	r3, r1
 8002d44:	889b      	ldrh	r3, [r3, #4]
 8002d46:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4c:	2268      	movs	r2, #104	; 0x68
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	4413      	add	r3, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 ff02 	bl	8004b60 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 8002d5c:	4b40      	ldr	r3, [pc, #256]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d68:	2068      	movs	r0, #104	; 0x68
 8002d6a:	fb00 f303 	mul.w	r3, r0, r3
 8002d6e:	6a38      	ldr	r0, [r7, #32]
 8002d70:	4403      	add	r3, r0
 8002d72:	3222      	adds	r2, #34	; 0x22
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	440a      	add	r2, r1
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d88:	2068      	movs	r0, #104	; 0x68
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	6a38      	ldr	r0, [r7, #32]
 8002d90:	4403      	add	r3, r0
 8002d92:	3224      	adds	r2, #36	; 0x24
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	440a      	add	r2, r1
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da8:	2068      	movs	r0, #104	; 0x68
 8002daa:	fb00 f303 	mul.w	r3, r0, r3
 8002dae:	6a38      	ldr	r0, [r7, #32]
 8002db0:	4403      	add	r3, r0
 8002db2:	3226      	adds	r2, #38	; 0x26
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	440a      	add	r2, r1
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc4:	2168      	movs	r1, #104	; 0x68
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	6a39      	ldr	r1, [r7, #32]
 8002dcc:	440b      	add	r3, r1
 8002dce:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 8002dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd8:	2268      	movs	r2, #104	; 0x68
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	6a3a      	ldr	r2, [r7, #32]
 8002de0:	4413      	add	r3, r2
 8002de2:	3334      	adds	r3, #52	; 0x34
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 f862 	bl	8004eae <PID_Init>

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	4402      	add	r2, r0
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	202c      	movs	r0, #44	; 0x2c
 8002e04:	fb00 f303 	mul.w	r3, r0, r3
 8002e08:	440b      	add	r3, r1
 8002e0a:	33c0      	adds	r3, #192	; 0xc0
 8002e0c:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1e:	320a      	adds	r2, #10
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4402      	add	r2, r0
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	202c      	movs	r0, #44	; 0x2c
 8002e28:	fb00 f303 	mul.w	r3, r0, r3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	33c4      	adds	r3, #196	; 0xc4
 8002e30:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <DIFFDRIVE_Init+0x218>)
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e42:	320c      	adds	r2, #12
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4402      	add	r2, r0
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	202c      	movs	r0, #44	; 0x2c
 8002e4c:	fb00 f303 	mul.w	r3, r0, r3
 8002e50:	440b      	add	r3, r1
 8002e52:	33c8      	adds	r3, #200	; 0xc8
 8002e54:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e5c:	e05c      	b.n	8002f18 <DIFFDRIVE_Init+0x2d0>
 8002e5e:	bf00      	nop
 8002e60:	20005280 	.word	0x20005280
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 8002e64:	4bab      	ldr	r3, [pc, #684]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002e6c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002e70:	4aa8      	ldr	r2, [pc, #672]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e78:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002e7c:	006d      	lsls	r5, r5, #1
 8002e7e:	4428      	add	r0, r5
 8002e80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4423      	add	r3, r4
 8002e90:	332c      	adds	r3, #44	; 0x2c
 8002e92:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 8002e96:	4b9f      	ldr	r3, [pc, #636]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002e9e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002ea2:	4a9c      	ldr	r2, [pc, #624]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002ea4:	6811      	ldr	r1, [r2, #0]
 8002ea6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002eaa:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002eae:	006d      	lsls	r5, r5, #1
 8002eb0:	4428      	add	r0, r5
 8002eb2:	3004      	adds	r0, #4
 8002eb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4423      	add	r3, r4
 8002ec4:	332e      	adds	r3, #46	; 0x2e
 8002ec6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8002eca:	4b92      	ldr	r3, [pc, #584]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ed2:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	332c      	adds	r3, #44	; 0x2c
 8002ee4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002ee8:	4b8a      	ldr	r3, [pc, #552]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ef0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	4403      	add	r3, r0
 8002f00:	332e      	adds	r3, #46	; 0x2e
 8002f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f003 fe85 	bl	8006c18 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f12:	3301      	adds	r3, #1
 8002f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d9a1      	bls.n	8002e64 <DIFFDRIVE_Init+0x21c>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002f20:	4b7c      	ldr	r3, [pc, #496]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	33c0      	adds	r3, #192	; 0xc0
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	33c8      	adds	r3, #200	; 0xc8
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 8002f4c:	4b71      	ldr	r3, [pc, #452]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	33c4      	adds	r3, #196	; 0xc4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	33b0      	adds	r3, #176	; 0xb0
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	4b60      	ldr	r3, [pc, #384]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9e:	ee17 0a90 	vmov	r0, s15
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	33cc      	adds	r3, #204	; 0xcc
 8002fac:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 8002fae:	4b59      	ldr	r3, [pc, #356]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	33b0      	adds	r3, #176	; 0xb0
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fde:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	33d0      	adds	r3, #208	; 0xd0
 8002ff8:	6018      	str	r0, [r3, #0]

		// Encoder Sensors
		hdiffdrv->encoder[side].htim=               hdiffdrv->Init.encoder_htim[side];
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003002:	4a44      	ldr	r2, [pc, #272]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8003004:	6810      	ldr	r0, [r2, #0]
 8003006:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800300a:	310e      	adds	r1, #14
 800300c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4403      	add	r3, r0
 800301a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800301e:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].tim_channel=        hdiffdrv->Init.encoder_tim_channel[side];
 8003020:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003028:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 800302a:	6810      	ldr	r0, [r2, #0]
 800302c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003030:	3110      	adds	r1, #16
 8003032:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4403      	add	r3, r0
 8003040:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003044:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution=         hdiffdrv->Init.encoder_resolution[side];
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304e:	4a31      	ldr	r2, [pc, #196]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8003050:	6810      	ldr	r0, [r2, #0]
 8003052:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003056:	3318      	adds	r3, #24
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4403      	add	r3, r0
 800306a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800306e:	6019      	str	r1, [r3, #0]

		// AutoReloadRegister bit resolution
		hdiffdrv->encoder[side].tim_arr_resolution= hdiffdrv->Init.encoder_tim_arr_resolution[side];
 8003070:	4b28      	ldr	r3, [pc, #160]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 800307a:	6811      	ldr	r1, [r2, #0]
 800307c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003080:	4403      	add	r3, r0
 8003082:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003094:	4602      	mov	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]

		// Setting up encoders' timers
		__HAL_TIM_SET_PRESCALER(hdiffdrv->encoder[side].htim, 0);
 8003098:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28

		// Set max autoreload value
		if( hdiffdrv->encoder[side].tim_arr_resolution == 32 )
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d122      	bne.n	8003118 <DIFFDRIVE_Init+0x4d0>
			// 32 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffffffu);
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <DIFFDRIVE_Init+0x4cc>)
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e021      	b.n	8003156 <DIFFDRIVE_Init+0x50e>
 8003112:	bf00      	nop
 8003114:	20005280 	.word	0x20005280
		else
			// Default 16 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffu);
 8003118:	4bb9      	ldr	r3, [pc, #740]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
 8003138:	4bb1      	ldr	r3, [pc, #708]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003154:	60da      	str	r2, [r3, #12]

		// Starting Encoder Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].tim_channel);
 8003156:	4baa      	ldr	r3, [pc, #680]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	4ba4      	ldr	r3, [pc, #656]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	f003 fec2 	bl	8006f10 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800318c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003190:	3301      	adds	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800319a:	2b01      	cmp	r3, #1
 800319c:	f67f ad87 	bls.w	8002cae <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   =  0;
 80031a0:	4b97      	ldr	r3, [pc, #604]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hdiffdrv->state.pose.y_a   =  0;
 80031ac:	4b94      	ldr	r3, [pc, #592]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	hdiffdrv->state.pose.theta =  0;
 80031b8:	4b91      	ldr	r3, [pc, #580]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80031cc:	4b8c      	ldr	r3, [pc, #560]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80031d4:	4b8a      	ldr	r3, [pc, #552]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80031dc:	4a88      	ldr	r2, [pc, #544]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031de:	6814      	ldr	r4, [r2, #0]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f009 f922 	bl	800c42c <calloc>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80031ee:	4b84      	ldr	r3, [pc, #528]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80031f6:	4a82      	ldr	r2, [pc, #520]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 80031f8:	6814      	ldr	r4, [r2, #0]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	4618      	mov	r0, r3
 80031fe:	f009 f915 	bl	800c42c <calloc>
 8003202:	4603      	mov	r3, r0
 8003204:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

	// Initializing time index
	hdiffdrv->history.index= 0;
 8003208:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	hdiffdrv->history.sample_cnt= 0;
 8003212:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <DIFFDRIVE_Init+0x7b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	33a4      	adds	r3, #164	; 0xa4
 8003222:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a76      	ldr	r2, [pc, #472]	; (8003404 <DIFFDRIVE_Init+0x7bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d017      	beq.n	8003260 <DIFFDRIVE_Init+0x618>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a74      	ldr	r2, [pc, #464]	; (8003408 <DIFFDRIVE_Init+0x7c0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d011      	beq.n	8003260 <DIFFDRIVE_Init+0x618>
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a72      	ldr	r2, [pc, #456]	; (800340c <DIFFDRIVE_Init+0x7c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <DIFFDRIVE_Init+0x618>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a70      	ldr	r2, [pc, #448]	; (8003410 <DIFFDRIVE_Init+0x7c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d005      	beq.n	8003260 <DIFFDRIVE_Init+0x618>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <DIFFDRIVE_Init+0x7cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d11b      	bne.n	8003298 <DIFFDRIVE_Init+0x650>
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <DIFFDRIVE_Init+0x7d0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <DIFFDRIVE_Init+0x63a>
 800326c:	f002 fee6 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8003270:	4602      	mov	r2, r0
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f90a 	bl	8000494 <__aeabi_ui2d>
 8003280:	e025      	b.n	80032ce <DIFFDRIVE_Init+0x686>
 8003282:	f002 fedb 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8003286:	4602      	mov	r2, r0
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f8ff 	bl	8000494 <__aeabi_ui2d>
 8003296:	e01a      	b.n	80032ce <DIFFDRIVE_Init+0x686>
 8003298:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <DIFFDRIVE_Init+0x7d0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <DIFFDRIVE_Init+0x672>
 80032a4:	f002 feb6 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f8ee 	bl	8000494 <__aeabi_ui2d>
 80032b8:	e009      	b.n	80032ce <DIFFDRIVE_Init+0x686>
 80032ba:	f002 feab 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 80032be:	4602      	mov	r2, r0
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8e3 	bl	8000494 <__aeabi_ui2d>
 80032ce:	a34a      	add	r3, pc, #296	; (adr r3, 80033f8 <DIFFDRIVE_Init+0x7b0>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd fa82 	bl	80007dc <__aeabi_ddiv>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	4b4d      	ldr	r3, [pc, #308]	; (800341c <DIFFDRIVE_Init+0x7d4>)
 80032e6:	f7fc ff97 	bl	8000218 <__aeabi_dsub>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7fd fc21 	bl	8000b38 <__aeabi_d2uiz>
 80032f6:	4603      	mov	r3, r0
 80032f8:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a40      	ldr	r2, [pc, #256]	; (8003404 <DIFFDRIVE_Init+0x7bc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d017      	beq.n	8003336 <DIFFDRIVE_Init+0x6ee>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3e      	ldr	r2, [pc, #248]	; (8003408 <DIFFDRIVE_Init+0x7c0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d011      	beq.n	8003336 <DIFFDRIVE_Init+0x6ee>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3c      	ldr	r2, [pc, #240]	; (800340c <DIFFDRIVE_Init+0x7c4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <DIFFDRIVE_Init+0x6ee>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3a      	ldr	r2, [pc, #232]	; (8003410 <DIFFDRIVE_Init+0x7c8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d005      	beq.n	8003336 <DIFFDRIVE_Init+0x6ee>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a38      	ldr	r2, [pc, #224]	; (8003414 <DIFFDRIVE_Init+0x7cc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d115      	bne.n	8003362 <DIFFDRIVE_Init+0x71a>
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <DIFFDRIVE_Init+0x7d0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <DIFFDRIVE_Init+0x708>
 8003342:	f002 fe7b 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8003346:	ee07 0a90 	vmov	s15, r0
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	e01d      	b.n	800338c <DIFFDRIVE_Init+0x744>
 8003350:	f002 fe74 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8003354:	4603      	mov	r3, r0
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	e014      	b.n	800338c <DIFFDRIVE_Init+0x744>
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <DIFFDRIVE_Init+0x7d0>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <DIFFDRIVE_Init+0x734>
 800336e:	f002 fe51 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 8003372:	ee07 0a90 	vmov	s15, r0
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	e007      	b.n	800338c <DIFFDRIVE_Init+0x744>
 800337c:	f002 fe4a 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 8003380:	4603      	mov	r3, r0
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	3301      	adds	r3, #1
 8003390:	ee07 3a10 	vmov	s14, r3
 8003394:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	ed93 7a01 	vldr	s14, [r3, #4]
 800339e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80033a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80033aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b2:	ee17 3a90 	vmov	r3, s15
 80033b6:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	8b7a      	ldrh	r2, [r7, #26]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	8b3a      	ldrh	r2, [r7, #24]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	8b3a      	ldrh	r2, [r7, #24]
 80033d2:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_PeriodElapsedCallback;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <DIFFDRIVE_Init+0x7d8>)
 80033da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifdef DIFFDRIVE_RTOS_V_
	  /* Creation of diffDrive_semaphore */
	  timing->semaphore_id = osSemaphoreNew(1, 1, &diffDrive_semaphore_attributes);
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <DIFFDRIVE_Init+0x7dc>)
 80033e0:	2101      	movs	r1, #1
 80033e2:	2001      	movs	r0, #1
 80033e4:	f005 fda5 	bl	8008f32 <osSemaphoreNew>
 80033e8:	4602      	mov	r2, r0
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	609a      	str	r2, [r3, #8]
#else
	// Reset timing flag
	timing->flag= false;
#endif

}
 80033ee:	bf00      	nop
 80033f0:	3728      	adds	r7, #40	; 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	00000000 	.word	0x00000000
 80033fc:	412e8480 	.word	0x412e8480
 8003400:	20005280 	.word	0x20005280
 8003404:	40010000 	.word	0x40010000
 8003408:	40010400 	.word	0x40010400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	40023800 	.word	0x40023800
 800341c:	3ff00000 	.word	0x3ff00000
 8003420:	08004989 	.word	0x08004989
 8003424:	0800e738 	.word	0x0800e738

08003428 <DIFFDRIVE_MOTOR_Stop>:
	osSemaphoreDelete(hdiffdrv->timing.semaphore_id);
#endif
}


void DIFFDRIVE_MOTOR_Stop(){
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	463b      	mov	r3, r7
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f805 	bl	800344c <DIFFDRIVE_MOTOR_SetPWMs>

}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8003454:	4bb4      	ldr	r3, [pc, #720]	; (8003728 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	33b0      	adds	r3, #176	; 0xb0
 800345a:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e0c8      	b.n	80035f4 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	441a      	add	r2, r3
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f107 0120 	add.w	r1, r7, #32
 8003474:	440b      	add	r3, r1
 8003476:	3b14      	subs	r3, #20
 8003478:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	222c      	movs	r2, #44	; 0x2c
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f107 0220 	add.w	r2, r7, #32
 8003492:	4413      	add	r3, r2
 8003494:	3b14      	subs	r3, #20
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	dd09      	ble.n	80034b8 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	222c      	movs	r2, #44	; 0x2c
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4413      	add	r3, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80034b6:	e027      	b.n	8003508 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f107 0220 	add.w	r2, r7, #32
 80034c0:	4413      	add	r3, r2
 80034c2:	3b14      	subs	r3, #20
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	d51a      	bpl.n	8003508 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	222c      	movs	r2, #44	; 0x2c
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f107 0220 	add.w	r2, r7, #32
 80034ec:	4413      	add	r3, r2
 80034ee:	3b14      	subs	r3, #20
 80034f0:	edd3 7a00 	vldr	s15, [r3]
 80034f4:	7ffb      	ldrb	r3, [r7, #31]
 80034f6:	eef1 7a67 	vneg.f32	s15, s15
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	f107 0220 	add.w	r2, r7, #32
 8003500:	4413      	add	r3, r2
 8003502:	3b14      	subs	r3, #20
 8003504:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003508:	7ffb      	ldrb	r3, [r7, #31]
 800350a:	222c      	movs	r2, #44	; 0x2c
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f107 0220 	add.w	r2, r7, #32
 800352a:	4413      	add	r3, r2
 800352c:	3b14      	subs	r3, #20
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003536:	ed97 7a05 	vldr	s14, [r7, #20]
 800353a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	222c      	movs	r2, #44	; 0x2c
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354e:	ee17 2a90 	vmov	r2, s15
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8003554:	7ffb      	ldrb	r3, [r7, #31]
 8003556:	222c      	movs	r2, #44	; 0x2c
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	222c      	movs	r2, #44	; 0x2c
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	202c      	movs	r0, #44	; 0x2c
 8003574:	fb00 f303 	mul.w	r3, r0, r3
 8003578:	69b8      	ldr	r0, [r7, #24]
 800357a:	4403      	add	r3, r0
 800357c:	440a      	add	r2, r1
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8003580:	7ffb      	ldrb	r3, [r7, #31]
 8003582:	222c      	movs	r2, #44	; 0x2c
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	440b      	add	r3, r1
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	429a      	cmp	r2, r3
 800359e:	d90e      	bls.n	80035be <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
 80035a2:	222c      	movs	r2, #44	; 0x2c
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	441a      	add	r2, r3
 80035ac:	7ffb      	ldrb	r3, [r7, #31]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	440b      	add	r3, r1
 80035b8:	6a12      	ldr	r2, [r2, #32]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
 80035bc:	e017      	b.n	80035ee <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	222c      	movs	r2, #44	; 0x2c
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	7ffb      	ldrb	r3, [r7, #31]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	69b9      	ldr	r1, [r7, #24]
 80035d6:	440b      	add	r3, r1
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d107      	bne.n	80035ee <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	222c      	movs	r2, #44	; 0x2c
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4413      	add	r3, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	3301      	adds	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f67f af33 	bls.w	8003462 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	77bb      	strb	r3, [r7, #30]
 8003600:	e14f      	b.n	80038a2 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003602:	7fbb      	ldrb	r3, [r7, #30]
 8003604:	222c      	movs	r2, #44	; 0x2c
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	7fba      	ldrb	r2, [r7, #30]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f202 	mul.w	r2, r1, r2
 8003616:	69b9      	ldr	r1, [r7, #24]
 8003618:	440a      	add	r2, r1
 800361a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800361e:	2a00      	cmp	r2, #0
 8003620:	bf0c      	ite	eq
 8003622:	2201      	moveq	r2, #1
 8003624:	2200      	movne	r2, #0
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	3202      	adds	r2, #2
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8003632:	7fbb      	ldrb	r3, [r7, #30]
 8003634:	222c      	movs	r2, #44	; 0x2c
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	7fba      	ldrb	r2, [r7, #30]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f202 	mul.w	r2, r1, r2
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	440a      	add	r2, r1
 800364a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800364e:	2a00      	cmp	r2, #0
 8003650:	bf0c      	ite	eq
 8003652:	2201      	moveq	r2, #1
 8003654:	2200      	movne	r2, #0
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
 8003662:	e07b      	b.n	800375c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003664:	7fbb      	ldrb	r3, [r7, #30]
 8003666:	222c      	movs	r2, #44	; 0x2c
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	7fba      	ldrb	r2, [r7, #30]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f202 	mul.w	r2, r1, r2
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	440a      	add	r2, r1
 800367c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003680:	2a00      	cmp	r2, #0
 8003682:	bf0c      	ite	eq
 8003684:	2201      	moveq	r2, #1
 8003686:	2200      	movne	r2, #0
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	3202      	adds	r2, #2
 800368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d118      	bne.n	80036c6 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003694:	7fbb      	ldrb	r3, [r7, #30]
 8003696:	222c      	movs	r2, #44	; 0x2c
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	7fba      	ldrb	r2, [r7, #30]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f202 	mul.w	r2, r1, r2
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	440a      	add	r2, r1
 80036ac:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2201      	moveq	r2, #1
 80036b6:	2200      	movne	r2, #0
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	6393      	str	r3, [r2, #56]	; 0x38
 80036c4:	e04a      	b.n	800375c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 80036c6:	7fbb      	ldrb	r3, [r7, #30]
 80036c8:	222c      	movs	r2, #44	; 0x2c
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	7fba      	ldrb	r2, [r7, #30]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f202 	mul.w	r2, r1, r2
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	440a      	add	r2, r1
 80036de:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	bf0c      	ite	eq
 80036e6:	2201      	moveq	r2, #1
 80036e8:	2200      	movne	r2, #0
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	3202      	adds	r2, #2
 80036ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11a      	bne.n	800372c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 80036f6:	7fbb      	ldrb	r3, [r7, #30]
 80036f8:	222c      	movs	r2, #44	; 0x2c
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	7fba      	ldrb	r2, [r7, #30]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f202 	mul.w	r2, r1, r2
 800370a:	69b9      	ldr	r1, [r7, #24]
 800370c:	440a      	add	r2, r1
 800370e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003712:	2a00      	cmp	r2, #0
 8003714:	bf0c      	ite	eq
 8003716:	2201      	moveq	r2, #1
 8003718:	2200      	movne	r2, #0
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003726:	e019      	b.n	800375c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003728:	20005280 	.word	0x20005280
 800372c:	7fbb      	ldrb	r3, [r7, #30]
 800372e:	222c      	movs	r2, #44	; 0x2c
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	7fba      	ldrb	r2, [r7, #30]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f202 	mul.w	r2, r1, r2
 8003740:	69b9      	ldr	r1, [r7, #24]
 8003742:	440a      	add	r2, r1
 8003744:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003748:	2a00      	cmp	r2, #0
 800374a:	bf0c      	ite	eq
 800374c:	2201      	moveq	r2, #1
 800374e:	2200      	movne	r2, #0
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 800375c:	7fbb      	ldrb	r3, [r7, #30]
 800375e:	222c      	movs	r2, #44	; 0x2c
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4413      	add	r3, r2
 8003768:	7fba      	ldrb	r2, [r7, #30]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f202 	mul.w	r2, r1, r2
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	440a      	add	r2, r1
 8003774:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003778:	3202      	adds	r2, #2
 800377a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d119      	bne.n	80037b6 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8003782:	7fbb      	ldrb	r3, [r7, #30]
 8003784:	222c      	movs	r2, #44	; 0x2c
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	441a      	add	r2, r3
 800378e:	7fbb      	ldrb	r3, [r7, #30]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	440b      	add	r3, r1
 800379a:	7fb9      	ldrb	r1, [r7, #30]
 800379c:	202c      	movs	r0, #44	; 0x2c
 800379e:	fb00 f101 	mul.w	r1, r0, r1
 80037a2:	69b8      	ldr	r0, [r7, #24]
 80037a4:	4401      	add	r1, r0
 80037a6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80037aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b2:	635a      	str	r2, [r3, #52]	; 0x34
 80037b4:	e072      	b.n	800389c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80037b6:	7fbb      	ldrb	r3, [r7, #30]
 80037b8:	222c      	movs	r2, #44	; 0x2c
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	7fba      	ldrb	r2, [r7, #30]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f202 	mul.w	r2, r1, r2
 80037ca:	69b9      	ldr	r1, [r7, #24]
 80037cc:	440a      	add	r2, r1
 80037ce:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80037d2:	3202      	adds	r2, #2
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d119      	bne.n	8003810 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 80037dc:	7fbb      	ldrb	r3, [r7, #30]
 80037de:	222c      	movs	r2, #44	; 0x2c
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	7fba      	ldrb	r2, [r7, #30]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f202 	mul.w	r2, r1, r2
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	440a      	add	r2, r1
 80037f4:	7fb9      	ldrb	r1, [r7, #30]
 80037f6:	202c      	movs	r0, #44	; 0x2c
 80037f8:	fb00 f101 	mul.w	r1, r0, r1
 80037fc:	69b8      	ldr	r0, [r7, #24]
 80037fe:	4401      	add	r1, r0
 8003800:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003804:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	6393      	str	r3, [r2, #56]	; 0x38
 800380e:	e045      	b.n	800389c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003810:	7fbb      	ldrb	r3, [r7, #30]
 8003812:	222c      	movs	r2, #44	; 0x2c
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	7fba      	ldrb	r2, [r7, #30]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f202 	mul.w	r2, r1, r2
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	440a      	add	r2, r1
 8003828:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800382c:	3202      	adds	r2, #2
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d119      	bne.n	800386a <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8003836:	7fbb      	ldrb	r3, [r7, #30]
 8003838:	222c      	movs	r2, #44	; 0x2c
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	7fba      	ldrb	r2, [r7, #30]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f202 	mul.w	r2, r1, r2
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	440a      	add	r2, r1
 800384e:	7fb9      	ldrb	r1, [r7, #30]
 8003850:	202c      	movs	r0, #44	; 0x2c
 8003852:	fb00 f101 	mul.w	r1, r0, r1
 8003856:	69b8      	ldr	r0, [r7, #24]
 8003858:	4401      	add	r1, r0
 800385a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800385e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003868:	e018      	b.n	800389c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 800386a:	7fbb      	ldrb	r3, [r7, #30]
 800386c:	222c      	movs	r2, #44	; 0x2c
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	7fba      	ldrb	r2, [r7, #30]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f202 	mul.w	r2, r1, r2
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	440a      	add	r2, r1
 8003882:	7fb9      	ldrb	r1, [r7, #30]
 8003884:	202c      	movs	r0, #44	; 0x2c
 8003886:	fb00 f101 	mul.w	r1, r0, r1
 800388a:	69b8      	ldr	r0, [r7, #24]
 800388c:	4401      	add	r1, r0
 800388e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003892:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800389c:	7fbb      	ldrb	r3, [r7, #30]
 800389e:	3301      	adds	r3, #1
 80038a0:	77bb      	strb	r3, [r7, #30]
 80038a2:	7fbb      	ldrb	r3, [r7, #30]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f67f aeac 	bls.w	8003602 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3724      	adds	r7, #36	; 0x24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 80038b8:	b5b0      	push	{r4, r5, r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 80038be:	4b84      	ldr	r3, [pc, #528]	; (8003ad0 <DIFFDRIVE_ENCODER_CaptureMeasure+0x218>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80038c6:	613b      	str	r3, [r7, #16]
	int32_t tmp_32, counter_max_32;
	int16_t tmp_16, counter_max_16;

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
 80038cc:	e0f3      	b.n	8003ab6 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1fe>
		// 32 bit timer
		if( tmpsens[side].tim_arr_resolution == 32 ){
 80038ce:	7dfa      	ldrb	r2, [r7, #23]
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	461a      	mov	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	7a1b      	ldrb	r3, [r3, #8]
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d170      	bne.n	80039c6 <DIFFDRIVE_ENCODER_CaptureMeasure+0x10e>
			// Counter max int32 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_32= 0x7fffffff-tmpsens[side].resolution;
 80038e4:	7dfa      	ldrb	r2, [r7, #23]
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	461a      	mov	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80038f8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003ad4 <DIFFDRIVE_ENCODER_CaptureMeasure+0x21c>
 80038fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003904:	ee17 3a90 	vmov	r3, s15
 8003908:	60bb      	str	r3, [r7, #8]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 800390a:	7dfa      	ldrb	r2, [r7, #23]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	461a      	mov	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1899      	adds	r1, r3, r2
 800391a:	7dfa      	ldrb	r2, [r7, #23]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	461a      	mov	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	690a      	ldr	r2, [r1, #16]
 800392c:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
			// 32 bit integer (signed) to have positive and negative values.
			tmp_32= (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 800392e:	7dfa      	ldrb	r2, [r7, #23]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	461a      	mov	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	607b      	str	r3, [r7, #4]

			// If counter reached threshold value return an exception
			if( tmp_32 <= -(int32_t)counter_max_32 || tmp_32 >= (int32_t)counter_max_32  )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	425b      	negs	r3, r3
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	dd03      	ble.n	8003958 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa0>
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	db01      	blt.n	800395c <DIFFDRIVE_ENCODER_CaptureMeasure+0xa4>
				return DIFFDRIVE_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b1      	b.n	8003ac0 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_32*(2*M_PI)/tmpsens[side].resolution;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003966:	ee17 0a90 	vmov	r0, s15
 800396a:	f7fc fdb5 	bl	80004d8 <__aeabi_f2d>
 800396e:	a356      	add	r3, pc, #344	; (adr r3, 8003ac8 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f7fc fe08 	bl	8000588 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	7dfa      	ldrb	r2, [r7, #23]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	461a      	mov	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fda0 	bl	80004d8 <__aeabi_f2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	f7fc ff1c 	bl	80007dc <__aeabi_ddiv>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	7dfa      	ldrb	r2, [r7, #23]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	461a      	mov	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	189c      	adds	r4, r3, r2
 80039bc:	f7fd f8dc 	bl	8000b78 <__aeabi_d2f>
 80039c0:	4603      	mov	r3, r0
 80039c2:	6123      	str	r3, [r4, #16]
 80039c4:	e074      	b.n	8003ab0 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1f8>
		}
		// 16 bit timer
		else{
			// Counter max int16 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_16= 0x7fff-tmpsens[side].resolution;
 80039c6:	7dfa      	ldrb	r2, [r7, #23]
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	461a      	mov	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039da:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003ad8 <DIFFDRIVE_ENCODER_CaptureMeasure+0x220>
 80039de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e6:	ee17 3a90 	vmov	r3, s15
 80039ea:	81fb      	strh	r3, [r7, #14]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 80039ec:	7dfa      	ldrb	r2, [r7, #23]
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	461a      	mov	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1899      	adds	r1, r3, r2
 80039fc:	7dfa      	ldrb	r2, [r7, #23]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	461a      	mov	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	690a      	ldr	r2, [r1, #16]
 8003a0e:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 16 bit unsigned integer so I cast in
			// 16 bit integer (signed) to have positive and negative values.
			tmp_16= (int16_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003a10:	7dfa      	ldrb	r2, [r7, #23]
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	81bb      	strh	r3, [r7, #12]

			// If counter reached threshold value return an exception
			if( tmp_16 <= -(int16_t)counter_max_16 || tmp_16 >= (int16_t)counter_max_16  )
 8003a28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a30:	425b      	negs	r3, r3
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dd05      	ble.n	8003a42 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18a>
 8003a36:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	db01      	blt.n	8003a46 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18e>
				return DIFFDRIVE_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e03c      	b.n	8003ac0 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_16*(2*M_PI)/tmpsens[side].resolution;
 8003a46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a52:	ee17 0a90 	vmov	r0, s15
 8003a56:	f7fc fd3f 	bl	80004d8 <__aeabi_f2d>
 8003a5a:	a31b      	add	r3, pc, #108	; (adr r3, 8003ac8 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f7fc fd92 	bl	8000588 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	7dfa      	ldrb	r2, [r7, #23]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	461a      	mov	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd2a 	bl	80004d8 <__aeabi_f2d>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc fea6 	bl	80007dc <__aeabi_ddiv>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	7dfa      	ldrb	r2, [r7, #23]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	189c      	adds	r4, r3, r2
 8003aa8:	f7fd f866 	bl	8000b78 <__aeabi_d2f>
 8003aac:	4603      	mov	r3, r0
 8003aae:	6123      	str	r3, [r4, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f67f af08 	bls.w	80038ce <DIFFDRIVE_ENCODER_CaptureMeasure+0x16>
		}
	}

	return DIFFDRIVE_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac8:	54442d18 	.word	0x54442d18
 8003acc:	401921fb 	.word	0x401921fb
 8003ad0:	20005280 	.word	0x20005280
 8003ad4:	4f000000 	.word	0x4f000000
 8003ad8:	46fffe00 	.word	0x46fffe00

08003adc <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <DIFFDRIVE_ENCODER_Reset+0x60>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003aea:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003aec:	2300      	movs	r3, #0
 8003aee:	71fb      	strb	r3, [r7, #7]
 8003af0:	e019      	b.n	8003b26 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 8003af2:	79fa      	ldrb	r2, [r7, #7]
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	461a      	mov	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003b0a:	79fa      	ldrb	r2, [r7, #7]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	461a      	mov	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	3301      	adds	r3, #1
 8003b24:	71fb      	strb	r3, [r7, #7]
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d9e2      	bls.n	8003af2 <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20005280 	.word	0x20005280

08003b40 <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hdiffdrv->history.Enabled= true;
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20005280 	.word	0x20005280

08003b68 <DIFFDRIVE_HISTORY_Resume>:


void DIFFDRIVE_HISTORY_Resume(void){
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

	// Enable history again
	hdiffdrv->history.Enabled= true;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <DIFFDRIVE_HISTORY_Resume+0x18>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20005280 	.word	0x20005280

08003b84 <DIFFDRIVE_HISTORY_Suspend>:
	hdiffdrv->history.Enabled= false;

}


void DIFFDRIVE_HISTORY_Suspend(void){
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <DIFFDRIVE_HISTORY_Suspend+0x18>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20005280 	.word	0x20005280

08003ba0 <DIFFDRIVE_HISTORY_Update>:


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float v_target, float om_target){
 8003ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ba4:	b094      	sub	sp, #80	; 0x50
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bac:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8003bb0:	4b62      	ldr	r3, [pc, #392]	; (8003d3c <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8003bba:	4b60      	ldr	r3, [pc, #384]	; (8003d3c <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8003bc4:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f107 0408 	add.w	r4, r7, #8
 8003bcc:	f503 7502 	add.w	r5, r3, #520	; 0x208
 8003bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float theta;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8003be0:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Current index (using operator % to enroll k between 0 and max_sample; sample_cnt, instead, is unbounded)
	uint32_t k_curr= tmphist->sample_cnt%tmphist->max_sample;
 8003bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf0:	6892      	ldr	r2, [r2, #8]
 8003bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bf6:	fb02 f201 	mul.w	r2, r2, r1
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38

	// Update index
	tmphist->index= k_curr;
 8003bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c02:	60da      	str	r2, [r3, #12]

	// Previous index
	uint32_t k_prev;
	if( tmphist->sample_cnt != 0 )
 8003c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <DIFFDRIVE_HISTORY_Update+0x82>
		k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c14:	6892      	ldr	r2, [r2, #8]
 8003c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c1a:	fb02 f201 	mul.w	r2, r2, r1
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Update history if is enabled
	if( tmphist->Enabled ){
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8210 	beq.w	800404c <DIFFDRIVE_HISTORY_Update+0x4ac>

		/* ------ Target history ------ */

		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003c32:	e09a      	b.n	8003d6a <DIFFDRIVE_HISTORY_Update+0x1ca>

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k_curr].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8003c34:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3e:	6919      	ldr	r1, [r3, #16]
 8003c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c42:	242c      	movs	r4, #44	; 0x2c
 8003c44:	fb04 f303 	mul.w	r3, r4, r3
 8003c48:	4419      	add	r1, r3
 8003c4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003c4e:	2468      	movs	r4, #104	; 0x68
 8003c50:	fb04 f202 	mul.w	r2, r4, r2
 8003c54:	4402      	add	r2, r0
 8003c56:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3304      	adds	r3, #4
 8003c64:	601a      	str	r2, [r3, #0]

			// Target wheel values
			tmphist->state_target[k_curr].wheel[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8003c66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003c6a:	2268      	movs	r2, #104	; 0x68
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c72:	441a      	add	r2, r3
 8003c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c76:	6919      	ldr	r1, [r3, #16]
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	202c      	movs	r0, #44	; 0x2c
 8003c7c:	fb00 f303 	mul.w	r3, r0, r3
 8003c80:	4419      	add	r1, r3
 8003c82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003c86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c88:	3304      	adds	r3, #4
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3304      	adds	r3, #4
 8003c90:	601a      	str	r2, [r3, #0]
			if( tmphist->sample_cnt != 0 ){
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d052      	beq.n	8003d40 <DIFFDRIVE_HISTORY_Update+0x1a0>
				// This is the law: wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	441a      	add	r2, r3
 8003ca8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cac:	3304      	adds	r3, #4
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	ed93 7a00 	vldr	s14, [r3]
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	441a      	add	r2, r3
 8003cc6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cca:	3304      	adds	r3, #4
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	441a      	add	r2, r3
 8003ce8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003cec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003cf4:	3306      	adds	r3, #6
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	edc3 7a00 	vstr	s15, [r3]
				// To have continuity I set also the current variable at same value. Next step it will be update
				tmphist->state_target[k_curr].wheel_speed[side]= tmphist->state_target[k_prev].wheel_speed[side];
 8003d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	18d0      	adds	r0, r2, r3
 8003d0e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	242c      	movs	r4, #44	; 0x2c
 8003d1a:	fb04 f303 	mul.w	r3, r4, r3
 8003d1e:	4419      	add	r1, r3
 8003d20:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d24:	3206      	adds	r2, #6
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	4402      	add	r2, r0
 8003d2a:	3204      	adds	r2, #4
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	3306      	adds	r3, #6
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3304      	adds	r3, #4
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e012      	b.n	8003d60 <DIFFDRIVE_HISTORY_Update+0x1c0>
 8003d3a:	bf00      	nop
 8003d3c:	20005280 	.word	0x20005280
			}
			else
				tmphist->state_target[k_curr].wheel_speed[side]= 0;
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	441a      	add	r2, r3
 8003d4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d52:	3306      	adds	r3, #6
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003d60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d64:	3301      	adds	r3, #1
 8003d66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003d6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f67f af60 	bls.w	8003c34 <DIFFDRIVE_HISTORY_Update+0x94>
		}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 8003d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80c2 	beq.w	8003f02 <DIFFDRIVE_HISTORY_Update+0x362>
			theta= tmphist->state_target[k_prev].pose.theta;
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d84:	212c      	movs	r1, #44	; 0x2c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + v_target*Ts*cos(theta);
 8003d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d96:	212c      	movs	r1, #44	; 0x2c
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fb99 	bl	80004d8 <__aeabi_f2d>
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	ee17 0a90 	vmov	r0, s15
 8003dba:	f7fc fb8d 	bl	80004d8 <__aeabi_f2d>
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dc4:	f7fc fb88 	bl	80004d8 <__aeabi_f2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	ec43 2b10 	vmov	d0, r2, r3
 8003dd0:	f008 fc82 	bl	800c6d8 <cos>
 8003dd4:	ec53 2b10 	vmov	r2, r3, d0
 8003dd8:	4640      	mov	r0, r8
 8003dda:	4649      	mov	r1, r9
 8003ddc:	f7fc fbd4 	bl	8000588 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4620      	mov	r0, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fa18 	bl	800021c <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	242c      	movs	r4, #44	; 0x2c
 8003dfc:	fb04 f303 	mul.w	r3, r4, r3
 8003e00:	18d4      	adds	r4, r2, r3
 8003e02:	f7fc feb9 	bl	8000b78 <__aeabi_d2f>
 8003e06:	4603      	mov	r3, r0
 8003e08:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + v_target*Ts*sin(theta);
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fb5c 	bl	80004d8 <__aeabi_f2d>
 8003e20:	4604      	mov	r4, r0
 8003e22:	460d      	mov	r5, r1
 8003e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e30:	ee17 0a90 	vmov	r0, s15
 8003e34:	f7fc fb50 	bl	80004d8 <__aeabi_f2d>
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4689      	mov	r9, r1
 8003e3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e3e:	f7fc fb4b 	bl	80004d8 <__aeabi_f2d>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	ec43 2b10 	vmov	d0, r2, r3
 8003e4a:	f008 fc95 	bl	800c778 <sin>
 8003e4e:	ec53 2b10 	vmov	r2, r3, d0
 8003e52:	4640      	mov	r0, r8
 8003e54:	4649      	mov	r1, r9
 8003e56:	f7fc fb97 	bl	8000588 <__aeabi_dmul>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4620      	mov	r0, r4
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7fc f9db 	bl	800021c <__adddf3>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	242c      	movs	r4, #44	; 0x2c
 8003e76:	fb04 f303 	mul.w	r3, r4, r3
 8003e7a:	18d4      	adds	r4, r2, r3
 8003e7c:	f7fc fe7c 	bl	8000b78 <__aeabi_d2f>
 8003e80:	4603      	mov	r3, r0
 8003e82:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  tmphist->state_target[k_prev].pose.theta + om_target*Ts;
 8003e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e96:	edd7 6a00 	vldr	s13, [r7]
 8003e9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb4:	edc3 7a02 	vstr	s15, [r3, #8]
			// The law is: pose(k)= pose(k-1) + TrajSpeed(k-1)*Ts, because is a discrete time Dynamic System
			// so here I update previous speed
			tmphist->state_target[k_prev].pose.v= v_target;
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_prev].pose.om= om_target;
 8003eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	611a      	str	r2, [r3, #16]
			// To have continuity I set also the current variable at same value. Next step it will be update
			tmphist->state_target[k_curr].pose.v= v_target;
 8003edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_curr].pose.om= om_target;
 8003eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	611a      	str	r2, [r3, #16]
 8003f00:	e065      	b.n	8003fce <DIFFDRIVE_HISTORY_Update+0x42e>
		}else{
			theta= 0;
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  v_target*Ts*cos(theta);
 8003f08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f0c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f14:	ee17 0a90 	vmov	r0, s15
 8003f18:	f7fc fade 	bl	80004d8 <__aeabi_f2d>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	460d      	mov	r5, r1
 8003f20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f22:	f7fc fad9 	bl	80004d8 <__aeabi_f2d>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	ec43 2b10 	vmov	d0, r2, r3
 8003f2e:	f008 fbd3 	bl	800c6d8 <cos>
 8003f32:	ec53 2b10 	vmov	r2, r3, d0
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc fb25 	bl	8000588 <__aeabi_dmul>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	242c      	movs	r4, #44	; 0x2c
 8003f4e:	fb04 f303 	mul.w	r3, r4, r3
 8003f52:	18d4      	adds	r4, r2, r3
 8003f54:	f7fc fe10 	bl	8000b78 <__aeabi_d2f>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  v_target*Ts*sin(theta);
 8003f5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f68:	ee17 0a90 	vmov	r0, s15
 8003f6c:	f7fc fab4 	bl	80004d8 <__aeabi_f2d>
 8003f70:	4604      	mov	r4, r0
 8003f72:	460d      	mov	r5, r1
 8003f74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f76:	f7fc faaf 	bl	80004d8 <__aeabi_f2d>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	ec43 2b10 	vmov	d0, r2, r3
 8003f82:	f008 fbf9 	bl	800c778 <sin>
 8003f86:	ec53 2b10 	vmov	r2, r3, d0
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	f7fc fafb 	bl	8000588 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	242c      	movs	r4, #44	; 0x2c
 8003fa2:	fb04 f303 	mul.w	r3, r4, r3
 8003fa6:	18d4      	adds	r4, r2, r3
 8003fa8:	f7fc fde6 	bl	8000b78 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
 8003fae:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  om_target*Ts;
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	ed97 7a00 	vldr	s14, [r7]
 8003fc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fca:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		/* ------ State history ------ */

		// State measure, extracted from state register
		tmphist->state_measure[k_curr]= tmpstate;
 8003fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	461d      	mov	r5, r3
 8003fde:	f107 0408 	add.w	r4, r7, #8
 8003fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// Assigning PREVIOUS speed, because the law is:
		// wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
		if( tmphist->sample_cnt != 0 ){
 8003ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d023      	beq.n	8004042 <DIFFDRIVE_HISTORY_Update+0x4a2>
			tmphist->state_measure[k_prev].wheel_speed[left ]= tmpstate.wheel_speed[left ];
 8003ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	61da      	str	r2, [r3, #28]
			tmphist->state_measure[k_prev].wheel_speed[right]= tmpstate.wheel_speed[right];
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401c:	621a      	str	r2, [r3, #32]
			// Same for trajectory speed
			tmphist->state_measure[k_prev].pose.v=  tmpstate.pose.v;
 800401e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	60da      	str	r2, [r3, #12]
			tmphist->state_measure[k_prev].pose.om= tmpstate.pose.om;
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	611a      	str	r2, [r3, #16]

		}

		/* Increment sample counter */
		tmphist->sample_cnt++;
 8004042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404a:	605a      	str	r2, [r3, #4]
	}
}
 800404c:	bf00      	nop
 800404e:	3750      	adds	r7, #80	; 0x50
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004056:	bf00      	nop

08004058 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0

	// Disabling history recording
	DIFFDRIVE_HISTORY_Suspend();
 800405e:	f7ff fd91 	bl	8003b84 <DIFFDRIVE_HISTORY_Suspend>

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800406a:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d30e      	bcc.n	8004096 <DIFFDRIVE_HISTORY_Get_Init+0x3e>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	fbb3 f1f2 	udiv	r1, r3, r2
 800408a:	fb02 f201 	mul.w	r2, r2, r1
 800408e:	1a9a      	subs	r2, r3, r2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8004094:	e002      	b.n	800409c <DIFFDRIVE_HISTORY_Get_Init+0x44>
		tmphist->index= 0;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	60da      	str	r2, [r3, #12]
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20005280 	.word	0x20005280

080040a8 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 80040a8:	b4b0      	push	{r4, r5, r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <DIFFDRIVE_HISTORY_Get_Sample+0xb4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040ba:	60fb      	str	r3, [r7, #12]

	if( state_measure != NULL )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d012      	beq.n	80040e8 <DIFFDRIVE_HISTORY_Get_Sample+0x40>
		*state_measure= tmphist->state_measure[tmphist->index];
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	212c      	movs	r1, #44	; 0x2c
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4614      	mov	r4, r2
 80040d6:	461d      	mov	r5, r3
 80040d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if( state_target != NULL )
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <DIFFDRIVE_HISTORY_Get_Sample+0x6c>
		*state_target = tmphist->state_target[tmphist->index];
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004110:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// If history is disabled (it means that I read history after the movement happened) update index.
	// Otherwise just read current sample.
	if( !(tmphist->Enabled) ){
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
 		// Update index for next step reading
		if( tmphist->sample_cnt >= tmphist->max_sample )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d30c      	bcc.n	8004148 <DIFFDRIVE_HISTORY_Get_Sample+0xa0>
			tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6892      	ldr	r2, [r2, #8]
 8004138:	fbb3 f1f2 	udiv	r1, r3, r2
 800413c:	fb02 f201 	mul.w	r2, r2, r1
 8004140:	1a9a      	subs	r2, r3, r2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	60da      	str	r2, [r3, #12]
		else
			tmphist->index++;
	}
}
 8004146:	e004      	b.n	8004152 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
			tmphist->index++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	60da      	str	r2, [r3, #12]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bcb0      	pop	{r4, r5, r7}
 800415a:	4770      	bx	lr
 800415c:	20005280 	.word	0x20005280

08004160 <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0

	// Reset Encoders
	DIFFDRIVE_ENCODER_Reset();
 8004164:	f7ff fcba 	bl	8003adc <DIFFDRIVE_ENCODER_Reset>

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8004168:	f000 f81a 	bl	80041a0 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 800416c:	f7ff fce8 	bl	8003b40 <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 8004170:	f000 f8b4 	bl	80042dc <DIFFDRIVE_TIMING_Start>

}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}

08004178 <DIFFDRIVE_CONTROL_Resume>:

void DIFFDRIVE_CONTROL_Resume(void){
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 800417c:	f000 f810 	bl	80041a0 <DIFFDRIVE_CONTROL_Reset>

	// Enabling again history
	DIFFDRIVE_HISTORY_Resume();
 8004180:	f7ff fcf2 	bl	8003b68 <DIFFDRIVE_HISTORY_Resume>

	// Restart control timing
	DIFFDRIVE_TIMING_Start();
 8004184:	f000 f8aa 	bl	80042dc <DIFFDRIVE_TIMING_Start>

}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}

0800418c <DIFFDRIVE_CONTROL_Suspend>:
	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();

}

void DIFFDRIVE_CONTROL_Suspend(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0

	// Disabling history
	DIFFDRIVE_HISTORY_Suspend();
 8004190:	f7ff fcf8 	bl	8003b84 <DIFFDRIVE_HISTORY_Suspend>

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8004194:	f000 f8bc 	bl	8004310 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8004198:	f7ff f946 	bl	8003428 <DIFFDRIVE_MOTOR_Stop>

}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 80041a6:	4b4c      	ldr	r3, [pc, #304]	; (80042d8 <DIFFDRIVE_CONTROL_Reset+0x138>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80041ae:	613b      	str	r3, [r7, #16]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 80041b0:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <DIFFDRIVE_CONTROL_Reset+0x138>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80041b8:	60fb      	str	r3, [r7, #12]

	// Capture current wheel measure
	DIFFDRIVE_ENCODER_CaptureMeasure();
 80041ba:	f7ff fb7d 	bl	80038b8 <DIFFDRIVE_ENCODER_CaptureMeasure>

	// Update diffDrive state (input is {0,0} because at restart i guess input voltage is zero)
	DIFFDRIVE_STATE_Update((float[2]){0,0});
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	463b      	mov	r3, r7
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f8e5 	bl	800439c <DIFFDRIVE_STATE_Update>

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
 80041d6:	e021      	b.n	800421c <DIFFDRIVE_CONTROL_Reset+0x7c>

		// Reset feed-forward buffer with initial values the same with measured ones
		FEEDFORWARD_Reset(&hctrl[side].fdfrwrd, hdiffdrv->state.wheel[side]);
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2268      	movs	r2, #104	; 0x68
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <DIFFDRIVE_CONTROL_Reset+0x138>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	3386      	adds	r3, #134	; 0x86
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	3304      	adds	r3, #4
 80041f4:	edd3 7a00 	vldr	s15, [r3]
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	4608      	mov	r0, r1
 80041fe:	f000 fd1b 	bl	8004c38 <FEEDFORWARD_Reset>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2268      	movs	r2, #104	; 0x68
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	3334      	adds	r3, #52	; 0x34
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fe7a 	bl	8004f0a <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	3301      	adds	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d9da      	bls.n	80041d8 <DIFFDRIVE_CONTROL_Reset+0x38>
	}

	// If a reset occurred let converge pose target and pose measure. Because it's like that control start again
	// from a new initial point.
	uint32_t k_curr= tmphist->index;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	60bb      	str	r3, [r7, #8]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8004228:	2300      	movs	r3, #0
 800422a:	75bb      	strb	r3, [r7, #22]
 800422c:	e01c      	b.n	8004268 <DIFFDRIVE_CONTROL_Reset+0xc8>
		tmphist->state_target[k_curr].wheel[side]= tmphist->state_measure[k_curr].wheel[side];
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	18d0      	adds	r0, r2, r3
 800423c:	7dba      	ldrb	r2, [r7, #22]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6919      	ldr	r1, [r3, #16]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	242c      	movs	r4, #44	; 0x2c
 8004246:	fb04 f303 	mul.w	r3, r4, r3
 800424a:	4419      	add	r1, r3
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	3204      	adds	r2, #4
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4402      	add	r2, r0
 8004254:	3204      	adds	r2, #4
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3304      	adds	r3, #4
 8004260:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8004262:	7dbb      	ldrb	r3, [r7, #22]
 8004264:	3301      	adds	r3, #1
 8004266:	75bb      	strb	r3, [r7, #22]
 8004268:	7dbb      	ldrb	r3, [r7, #22]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d9df      	bls.n	800422e <DIFFDRIVE_CONTROL_Reset+0x8e>
	tmphist->state_target[k_curr].pose.theta= tmphist->state_measure[k_curr].pose.theta;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6919      	ldr	r1, [r3, #16]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	202c      	movs	r0, #44	; 0x2c
 8004284:	fb00 f303 	mul.w	r3, r0, r3
 8004288:	440b      	add	r3, r1
 800428a:	6892      	ldr	r2, [r2, #8]
 800428c:	609a      	str	r2, [r3, #8]
	tmphist->state_target[k_curr].pose.x_a=   tmphist->state_measure[k_curr].pose.x_a;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	441a      	add	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6919      	ldr	r1, [r3, #16]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	202c      	movs	r0, #44	; 0x2c
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	440b      	add	r3, r1
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	601a      	str	r2, [r3, #0]
	tmphist->state_target[k_curr].pose.y_a=   tmphist->state_measure[k_curr].pose.y_a;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6919      	ldr	r1, [r3, #16]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	202c      	movs	r0, #44	; 0x2c
 80042c4:	fb00 f303 	mul.w	r3, r0, r3
 80042c8:	440b      	add	r3, r1
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	605a      	str	r2, [r3, #4]

}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd90      	pop	{r4, r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20005280 	.word	0x20005280

080042dc <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_
	// At starting take the only one available token
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, 0);
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <DIFFDRIVE_TIMING_Start+0x30>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fea9 	bl	8009044 <osSemaphoreAcquire>
 80042f2:	6078      	str	r0, [r7, #4]
	(void)stat;
#endif
	// Starting timer in interrupt mode for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <DIFFDRIVE_TIMING_Start+0x30>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f002 fb8f 	bl	8006a20 <HAL_TIM_Base_Start_IT>

}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20005280 	.word	0x20005280

08004310 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <DIFFDRIVE_TIMING_Stop+0x24>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800431c:	4618      	mov	r0, r3
 800431e:	f002 fbef 	bl	8006b00 <HAL_TIM_Base_Stop_IT>

#ifdef DIFFDRIVE_RTOS_V_
	// Try to release a token when timing is being stopped (if the token was already released, by callback, it doesn't mind)
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <DIFFDRIVE_TIMING_Stop+0x24>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800432a:	4618      	mov	r0, r3
 800432c:	f004 fedc 	bl	80090e8 <osSemaphoreRelease>
#endif

}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20005280 	.word	0x20005280

08004338 <DIFFDRIVE_TIMING_Wait>:
#ifdef DIFFDRIVE_DEBUG_TIMING_
	// Variable used to check system timing
	uint32_t tic=0, toc[100], i_=0;
#endif

void DIFFDRIVE_TIMING_Wait(void){
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_

	// Wait for an available token (TIMING_Callback function will release the only token when invoked by ISR)
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, osWaitForever);
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <DIFFDRIVE_TIMING_Wait+0x54>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004346:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800434a:	4618      	mov	r0, r3
 800434c:	f004 fe7a 	bl	8009044 <osSemaphoreAcquire>
 8004350:	6078      	str	r0, [r7, #4]
	(void)stat;

#ifdef DIFFDRIVE_DEBUG_TIMING_

			// Check if control timing is really working
			if( i_ < sizeof(toc)/sizeof(uint32_t) )
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <DIFFDRIVE_TIMING_Wait+0x58>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b63      	cmp	r3, #99	; 0x63
 8004358:	d80a      	bhi.n	8004370 <DIFFDRIVE_TIMING_Wait+0x38>
				toc[i_]= osKernelGetTickCount()-tic;
 800435a:	f004 fd01 	bl	8008d60 <osKernelGetTickCount>
 800435e:	4601      	mov	r1, r0
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <DIFFDRIVE_TIMING_Wait+0x5c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <DIFFDRIVE_TIMING_Wait+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1a8a      	subs	r2, r1, r2
 800436a:	490b      	ldr	r1, [pc, #44]	; (8004398 <DIFFDRIVE_TIMING_Wait+0x60>)
 800436c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i_++;
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <DIFFDRIVE_TIMING_Wait+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a06      	ldr	r2, [pc, #24]	; (8004390 <DIFFDRIVE_TIMING_Wait+0x58>)
 8004378:	6013      	str	r3, [r2, #0]

			tic= osKernelGetTickCount();
 800437a:	f004 fcf1 	bl	8008d60 <osKernelGetTickCount>
 800437e:	4603      	mov	r3, r0
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <DIFFDRIVE_TIMING_Wait+0x5c>)
 8004382:	6013      	str	r3, [r2, #0]
			tic=  HAL_GetTick();

#endif /* DIFFDRIVE_DEBUG_TIMING_ */
#endif /* DIFFDRIVE_RTOS_V */

}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20005280 	.word	0x20005280
 8004390:	200000b0 	.word	0x200000b0
 8004394:	200000ac 	.word	0x200000ac
 8004398:	200050f0 	.word	0x200050f0

0800439c <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 800439c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043a0:	b08a      	sub	sp, #40	; 0x28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 80043a6:	4ba4      	ldr	r3, [pc, #656]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043ae:	623b      	str	r3, [r7, #32]

	float min_volt;
	float max_volt;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 80043b0:	4ba1      	ldr	r3, [pc, #644]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043b8:	61fb      	str	r3, [r7, #28]

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c0:	e0ad      	b.n	800451e <DIFFDRIVE_STATE_Update+0x182>
		tmpstate->wheel[side]=        hdiffdrv->encoder[side].current_value;
 80043c2:	4b9d      	ldr	r3, [pc, #628]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043ca:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	6a39      	ldr	r1, [r7, #32]
 80043e0:	1d03      	adds	r3, r0, #4
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3304      	adds	r3, #4
 80043e8:	601a      	str	r2, [r3, #0]
		tmpstate->wheel_speed[side]= (hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value)/Ts;
 80043ea:	4b93      	ldr	r3, [pc, #588]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004400:	ed93 7a00 	vldr	s14, [r3]
 8004404:	4b8c      	ldr	r3, [pc, #560]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004426:	ed97 7a07 	vldr	s14, [r7, #28]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	3306      	adds	r3, #6
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	edc3 7a00 	vstr	s15, [r3]

		min_volt= hdiffdrv->motor[side].min_voltage;
 800443c:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	33c8      	adds	r3, #200	; 0xc8
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
		max_volt= hdiffdrv->motor[side].max_voltage;
 8004452:	4b79      	ldr	r3, [pc, #484]	; (8004638 <DIFFDRIVE_STATE_Update+0x29c>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	33c4      	adds	r3, #196	; 0xc4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]

		// Input Saturation limits, for "measured" tension-------------------------
		if( input[side] > (max_volt-min_volt))
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	ed93 7a00 	vldr	s14, [r3]
 8004476:	edd7 6a04 	vldr	s13, [r7, #16]
 800447a:	edd7 7a05 	vldr	s15, [r7, #20]
 800447e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	dd0f      	ble.n	80044ac <DIFFDRIVE_STATE_Update+0x110>
			tmpstate->input[side]= max_volt-min_volt;
 800448c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004490:	ed97 7a04 	vldr	s14, [r7, #16]
 8004494:	edd7 7a05 	vldr	s15, [r7, #20]
 8004498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	3308      	adds	r3, #8
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	edc3 7a00 	vstr	s15, [r3]
 80044aa:	e033      	b.n	8004514 <DIFFDRIVE_STATE_Update+0x178>
		else
		if( input[side] < -(max_volt-min_volt))
 80044ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	ed93 7a00 	vldr	s14, [r3]
 80044ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80044be:	edd7 7a05 	vldr	s15, [r7, #20]
 80044c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044c6:	eef1 7a67 	vneg.f32	s15, s15
 80044ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	d511      	bpl.n	80044f8 <DIFFDRIVE_STATE_Update+0x15c>
			tmpstate->input[side]= -(max_volt-min_volt);
 80044d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80044d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e4:	eef1 7a67 	vneg.f32	s15, s15
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	3308      	adds	r3, #8
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	3304      	adds	r3, #4
 80044f2:	edc3 7a00 	vstr	s15, [r3]
 80044f6:	e00d      	b.n	8004514 <DIFFDRIVE_STATE_Update+0x178>
		else
			tmpstate->input[side]= input[side];
 80044f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	441a      	add	r2, r3
 8004502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	3308      	adds	r3, #8
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3304      	adds	r3, #4
 8004512:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004518:	3301      	adds	r3, #1
 800451a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800451e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004522:	2b01      	cmp	r3, #1
 8004524:	f67f af4d 	bls.w	80043c2 <DIFFDRIVE_STATE_Update+0x26>
		// ------------------------------------------------------------------------
	}

	// Compute and update current pose an speed
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v, &om,  tmpstate->wheel_speed);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f103 021c 	add.w	r2, r3, #28
 800452e:	f107 0108 	add.w	r1, r7, #8
 8004532:	f107 030c 	add.w	r3, r7, #12
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f8e0 	bl	80046fc <DIFFDRIVE_WheelSpeed2TrajectorySpeed>

	theta= tmpstate->pose.theta;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	61bb      	str	r3, [r7, #24]
	tmpstate->pose.x_a   +=  v*Ts*cos(theta);
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fb ffc6 	bl	80004d8 <__aeabi_f2d>
 800454c:	4604      	mov	r4, r0
 800454e:	460d      	mov	r5, r1
 8004550:	ed97 7a03 	vldr	s14, [r7, #12]
 8004554:	edd7 7a07 	vldr	s15, [r7, #28]
 8004558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455c:	ee17 0a90 	vmov	r0, s15
 8004560:	f7fb ffba 	bl	80004d8 <__aeabi_f2d>
 8004564:	4680      	mov	r8, r0
 8004566:	4689      	mov	r9, r1
 8004568:	69b8      	ldr	r0, [r7, #24]
 800456a:	f7fb ffb5 	bl	80004d8 <__aeabi_f2d>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	ec43 2b10 	vmov	d0, r2, r3
 8004576:	f008 f8af 	bl	800c6d8 <cos>
 800457a:	ec53 2b10 	vmov	r2, r3, d0
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f7fc f801 	bl	8000588 <__aeabi_dmul>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f7fb fe45 	bl	800021c <__adddf3>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	f7fc faed 	bl	8000b78 <__aeabi_d2f>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  v*Ts*sin(theta);
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ff95 	bl	80004d8 <__aeabi_f2d>
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
 80045b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80045b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	ee17 0a90 	vmov	r0, s15
 80045c2:	f7fb ff89 	bl	80004d8 <__aeabi_f2d>
 80045c6:	4680      	mov	r8, r0
 80045c8:	4689      	mov	r9, r1
 80045ca:	69b8      	ldr	r0, [r7, #24]
 80045cc:	f7fb ff84 	bl	80004d8 <__aeabi_f2d>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	ec43 2b10 	vmov	d0, r2, r3
 80045d8:	f008 f8ce 	bl	800c778 <sin>
 80045dc:	ec53 2b10 	vmov	r2, r3, d0
 80045e0:	4640      	mov	r0, r8
 80045e2:	4649      	mov	r1, r9
 80045e4:	f7fb ffd0 	bl	8000588 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fb fe14 	bl	800021c <__adddf3>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	f7fc fabc 	bl	8000b78 <__aeabi_d2f>
 8004600:	4602      	mov	r2, r0
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  om*Ts;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	ed93 7a02 	vldr	s14, [r3, #8]
 800460c:	edd7 6a02 	vldr	s13, [r7, #8]
 8004610:	edd7 7a07 	vldr	s15, [r7, #28]
 8004614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	edc3 7a02 	vstr	s15, [r3, #8]
	tmpstate->pose.v=  v;
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	60da      	str	r2, [r3, #12]
	tmpstate->pose.om= om;
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	611a      	str	r2, [r3, #16]
}
 800462e:	bf00      	nop
 8004630:	3728      	adds	r7, #40	; 0x28
 8004632:	46bd      	mov	sp, r7
 8004634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004638:	20005280 	.word	0x20005280

0800463c <DIFFDRIVE_TrajectorySpeed2WheelAngle>:


void DIFFDRIVE_TrajectorySpeed2WheelAngle(float* wheel, float v, float om){
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	ed87 0a02 	vstr	s0, [r7, #8]
 8004648:	edc7 0a01 	vstr	s1, [r7, #4]

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004654:	61fb      	str	r3, [r7, #28]

	float r= hdiffdrv->mech_prmtr.r;
 8004656:	4b28      	ldr	r3, [pc, #160]	; (80046f8 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800465e:	61bb      	str	r3, [r7, #24]
	float l= hdiffdrv->mech_prmtr.l;
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8004668:	617b      	str	r3, [r7, #20]

	// Wheel target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03d      	beq.n	80046ec <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xb0>
		wheel[left ] +=  (v/r - l*om/r)*Ts;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	ed93 7a00 	vldr	s14, [r3]
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	edd7 7a06 	vldr	s15, [r7, #24]
 800467e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004682:	ed97 6a05 	vldr	s12, [r7, #20]
 8004686:	edd7 7a01 	vldr	s15, [r7, #4]
 800468a:	ee66 5a27 	vmul.f32	s11, s12, s15
 800468e:	ed97 6a06 	vldr	s12, [r7, #24]
 8004692:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004696:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800469a:	edd7 7a07 	vldr	s15, [r7, #28]
 800469e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  (v/r + l*om/r)*Ts;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3304      	adds	r3, #4
 80046b0:	ed93 7a00 	vldr	s14, [r3]
 80046b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80046bc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80046c0:	ed97 6a05 	vldr	s12, [r7, #20]
 80046c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046c8:	ee66 5a27 	vmul.f32	s11, s12, s15
 80046cc:	ed97 6a06 	vldr	s12, [r7, #24]
 80046d0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80046d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80046d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3304      	adds	r3, #4
 80046e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e8:	edc3 7a00 	vstr	s15, [r3]
	}

}
 80046ec:	bf00      	nop
 80046ee:	3724      	adds	r7, #36	; 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20005280 	.word	0x20005280

080046fc <DIFFDRIVE_WheelSpeed2TrajectorySpeed>:

void DIFFDRIVE_WheelSpeed2TrajectorySpeed(float* v_p, float* om_p, float* wheel_speed){
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004708:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004710:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800471a:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars v_p and om_p because are pointers)
	if( v_p != NULL)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x4e>
		*v_p= (wheel_speed[right] + wheel_speed[left])*r/2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	ed93 7a00 	vldr	s14, [r3]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004734:	edd7 7a05 	vldr	s15, [r7, #20]
 8004738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800473c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	edc3 7a00 	vstr	s15, [r3]

	if( om_p != NULL )
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x80>
		*om_p= (wheel_speed[right] - wheel_speed[left])*r/(2*l);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	ed93 7a00 	vldr	s14, [r3]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004762:	edd7 7a05 	vldr	s15, [r7, #20]
 8004766:	ee67 6a27 	vmul.f32	s13, s14, s15
 800476a:	edd7 7a04 	vldr	s15, [r7, #16]
 800476e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	edc3 7a00 	vstr	s15, [r3]

}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	20005280 	.word	0x20005280

0800478c <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08b      	sub	sp, #44	; 0x2c
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004794:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800479c:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 800479e:	f7ff fdcb 	bl	8004338 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 80047a2:	f7ff f889 	bl	80038b8 <DIFFDRIVE_ENCODER_CaptureMeasure>
 80047a6:	4603      	mov	r3, r0
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10a      	bne.n	80047c6 <DIFFDRIVE_CONTROL_WheelStep+0x3a>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 80047b0:	f7ff fcf6 	bl	80041a0 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047cc:	e06f      	b.n	80048ae <DIFFDRIVE_CONTROL_WheelStep+0x122>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 80047ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d2:	2268      	movs	r2, #104	; 0x68
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	4413      	add	r3, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	4608      	mov	r0, r1
 80047f6:	f000 fa78 	bl	8004cea <FEEDFORWARD_InversionControl>
 80047fa:	eef0 7a40 	vmov.f32	s15, s0
 80047fe:	00a3      	lsls	r3, r4, #2
 8004800:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004804:	4413      	add	r3, r2
 8004806:	3b20      	subs	r3, #32
 8004808:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 800480c:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	440b      	add	r3, r1
 800481e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800482a:	2268      	movs	r2, #104	; 0x68
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	441a      	add	r2, r3
 8004834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004840:	440b      	add	r3, r1
 8004842:	3b18      	subs	r3, #24
 8004844:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8004846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484a:	2268      	movs	r2, #104	; 0x68
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	4413      	add	r3, r2
 8004854:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004862:	440b      	add	r3, r1
 8004864:	3b18      	subs	r3, #24
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	edd7 0a06 	vldr	s1, [r7, #24]
 800486e:	eeb0 0a67 	vmov.f32	s0, s15
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fb67 	bl	8004f46 <PID_Control>
 8004878:	eeb0 7a40 	vmov.f32	s14, s0
 800487c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004886:	4413      	add	r3, r2
 8004888:	3b20      	subs	r3, #32
 800488a:	edd3 7a00 	vldr	s15, [r3]
 800488e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800489c:	4413      	add	r3, r2
 800489e:	3b20      	subs	r3, #32
 80048a0:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	3301      	adds	r3, #1
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d98b      	bls.n	80047ce <DIFFDRIVE_CONTROL_WheelStep+0x42>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fdc6 	bl	800344c <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fd69 	bl	800439c <DIFFDRIVE_STATE_Update>

}
 80048ca:	bf00      	nop
 80048cc:	372c      	adds	r7, #44	; 0x2c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20005280 	.word	0x20005280

080048d8 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 80048dc:	f7ff fc40 	bl	8004160 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 80048e0:	eddf 0a03 	vldr	s1, [pc, #12]	; 80048f0 <DIFFDRIVE_TrackingStart+0x18>
 80048e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80048f0 <DIFFDRIVE_TrackingStart+0x18>
 80048e8:	f000 f810 	bl	800490c <DIFFDRIVE_TrackingStep>

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00000000 	.word	0x00000000

080048f4 <DIFFDRIVE_TrackingResume>:

void DIFFDRIVE_TrackingResume(void){
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0

	// Resume control
	DIFFDRIVE_CONTROL_Resume();
 80048f8:	f7ff fc3e 	bl	8004178 <DIFFDRIVE_CONTROL_Resume>

}
 80048fc:	bf00      	nop
 80048fe:	bd80      	pop	{r7, pc}

08004900 <DIFFDRIVE_TrackingSuspend>:
	// Stop control
	DIFFDRIVE_CONTROL_Stop();

}

void DIFFDRIVE_TrackingSuspend(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0

	// Suspend control
	DIFFDRIVE_CONTROL_Suspend();
 8004904:	f7ff fc42 	bl	800418c <DIFFDRIVE_CONTROL_Suspend>

}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}

0800490c <DIFFDRIVE_TrackingStep>:

void DIFFDRIVE_TrackingStep(float v, float om){
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	ed87 0a01 	vstr	s0, [r7, #4]
 8004916:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <DIFFDRIVE_TrackingStep+0x78>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004922:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
 8004928:	e010      	b.n	800494c <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	2268      	movs	r2, #104	; 0x68
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	441a      	add	r2, r3
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	f107 0118 	add.w	r1, r7, #24
 8004940:	440b      	add	r3, r1
 8004942:	3b10      	subs	r3, #16
 8004944:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	3301      	adds	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d9eb      	bls.n	800492a <DIFFDRIVE_TrackingStep+0x1e>

	// Computing newest target
	DIFFDRIVE_TrajectorySpeed2WheelAngle(newest_target, v, om);
 8004952:	f107 0308 	add.w	r3, r7, #8
 8004956:	edd7 0a00 	vldr	s1, [r7]
 800495a:	ed97 0a01 	vldr	s0, [r7, #4]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fe6c 	bl	800463c <DIFFDRIVE_TrajectorySpeed2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff0f 	bl	800478c <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(v, om);
 800496e:	edd7 0a00 	vldr	s1, [r7]
 8004972:	ed97 0a01 	vldr	s0, [r7, #4]
 8004976:	f7ff f913 	bl	8003ba0 <DIFFDRIVE_HISTORY_Update>

}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20005280 	.word	0x20005280

08004988 <DIFFDRIVE_TIMING_PeriodElapsedCallback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

#ifdef DIFFDRIVE_RTOS_V_
	// Release the token
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <DIFFDRIVE_TIMING_PeriodElapsedCallback+0x20>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004998:	4618      	mov	r0, r3
 800499a:	f004 fba5 	bl	80090e8 <osSemaphoreRelease>
#else
	// Enabling timing flag
	hdiffdrv->timing.flag= true;
#endif

}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20005280 	.word	0x20005280

080049ac <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2104      	movs	r1, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f007 fd33 	bl	800c42c <calloc>
 80049c6:	4603      	mov	r3, r0
 80049c8:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	461d      	mov	r5, r3
 80049e2:	f107 0410 	add.w	r4, r7, #16
 80049e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049ee:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bdb0      	pop	{r4, r5, r7, pc}

080049fa <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e009      	b.n	8004a32 <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dbf0      	blt.n	8004a1e <MAF_Reset+0x24>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03e      	beq.n	8004adc <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8004a74:	2301      	movs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e027      	b.n	8004aca <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a8a:	fb02 f201 	mul.w	r2, r2, r1
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	ed93 7a00 	vldr	s14, [r3]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
 8004ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac0:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	ddd2      	ble.n	8004a7a <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	e02f      	b.n	8004b3c <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b02:	edd7 7a00 	vldr	s15, [r7]
 8004b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	fb93 f1f2 	sdiv	r1, r3, r2
 8004b4a:	fb02 f201 	mul.w	r2, r2, r1
 8004b4e:	1a9a      	subs	r2, r3, r2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]

}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	885a      	ldrh	r2, [r3, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	889a      	ldrh	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8a1b      	ldrh	r3, [r3, #16]
 8004b84:	2104      	movs	r1, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f007 fc50 	bl	800c42c <calloc>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e00e      	b.n	8004bb8 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8a1b      	ldrh	r3, [r3, #16]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	dbea      	blt.n	8004b9a <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8a5b      	ldrh	r3, [r3, #18]
 8004bc8:	2104      	movs	r1, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f007 fc2e 	bl	800c42c <calloc>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e00e      	b.n	8004bfc <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8a5b      	ldrh	r3, [r3, #18]
 8004c00:	461a      	mov	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	dbea      	blt.n	8004bde <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8a1b      	ldrh	r3, [r3, #16]
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f007 fc0c 	bl	800c42c <calloc>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8a5b      	ldrh	r3, [r3, #18]
 8004c20:	2104      	movs	r1, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f007 fc02 	bl	800c42c <calloc>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <FEEDFORWARD_Reset>:
	free(hctrl->target_buffer);
	free(hctrl->input_buffer);

}

void FEEDFORWARD_Reset(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	ed87 0a00 	vstr	s0, [r7]

	// Reset feed-forward target buffer, with all all initial conditon
	FEEDFORWARD_BufferInit(hctrl, target_init);
 8004c44:	ed97 0a00 	vldr	s0, [r7]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f804 	bl	8004c56 <FEEDFORWARD_BufferInit>

}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <FEEDFORWARD_BufferInit>:

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004c56:	b490      	push	{r4, r7}
 8004c58:	b08a      	sub	sp, #40	; 0x28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	ed87 0a00 	vstr	s0, [r7]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f107 040c 	add.w	r4, r7, #12
 8004c68:	3310      	adds	r3, #16
 8004c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8004c70:	89bb      	ldrh	r3, [r7, #12]
 8004c72:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t n_ma= arma.n_ma;
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	843b      	strh	r3, [r7, #32]
	uint16_t  tau= arma.tau;
 8004c78:	8a3b      	ldrh	r3, [r7, #16]
 8004c7a:	83fb      	strh	r3, [r7, #30]

	// Complete first values with the same initial value
	for(int i= 0; i < n_ar; i++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e009      	b.n	8004c96 <FEEDFORWARD_BufferInit+0x40>
		hctrl->target_buffer[i]= target_init;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
	for(int i= 0; i < n_ar; i++)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	3301      	adds	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dbf1      	blt.n	8004c82 <FEEDFORWARD_BufferInit+0x2c>

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	8bfb      	ldrh	r3, [r7, #30]
 8004ca8:	1acb      	subs	r3, r1, r3
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	8c3b      	ldrh	r3, [r7, #32]
 8004cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cce:	89bb      	ldrh	r3, [r7, #12]
 8004cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ce0:	bf00      	nop
 8004ce2:	3728      	adds	r7, #40	; 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc90      	pop	{r4, r7}
 8004ce8:	4770      	bx	lr

08004cea <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8004cea:	b590      	push	{r4, r7, lr}
 8004cec:	b08f      	sub	sp, #60	; 0x3c
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f107 040c 	add.w	r4, r7, #12
 8004d02:	3310      	adds	r3, #16
 8004d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 8004d0e:	89bb      	ldrh	r3, [r7, #12]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8004d14:	2300      	movs	r3, #0
 8004d16:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8004d18:	89fb      	ldrh	r3, [r7, #14]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d30:	e019      	b.n	8004d66 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	1acb      	subs	r3, r1, r3
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	ed93 7a00 	vldr	s14, [r3]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	edd3 7a00 	vldr	s15, [r3]
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	3301      	adds	r3, #1
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	dde1      	ble.n	8004d32 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d72:	e01b      	b.n	8004dac <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	1acb      	subs	r3, r1, r3
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	edd3 7a00 	vldr	s15, [r3]
 8004d84:	eeb1 7a67 	vneg.f32	s14, s15
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	3301      	adds	r3, #1
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	dcdf      	bgt.n	8004d74 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	ed93 7a00 	vldr	s14, [r3]
 8004dba:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd2:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f808 	bl	8004dea <FEEDFORWARD_BufferUpdate>

	return input;
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	ee07 3a90 	vmov	s15, r3
}
 8004de0:	eeb0 0a67 	vmov.f32	s0, s15
 8004de4:	373c      	adds	r7, #60	; 0x3c
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}

08004dea <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8004dea:	b490      	push	{r4, r7}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f107 0408 	add.w	r4, r7, #8
 8004df8:	3310      	adds	r3, #16
 8004dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	89b9      	ldrh	r1, [r7, #12]
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e20:	3b01      	subs	r3, #1
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e36:	3b01      	subs	r3, #1
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e00f      	b.n	8004e68 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dbea      	blt.n	8004e48 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e00f      	b.n	8004e98 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a19      	ldr	r1, [r3, #32]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	3301      	adds	r3, #1
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	897b      	ldrh	r3, [r7, #10]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	dbea      	blt.n	8004e78 <FEEDFORWARD_BufferUpdate+0x8e>

}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc90      	pop	{r4, r7}
 8004eac:	4770      	bx	lr

08004eae <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c



}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 8004f46:	b480      	push	{r7}
 8004f48:	b089      	sub	sp, #36	; 0x24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f52:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 8004f5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f68:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	edd3 6a05 	vldr	s13, [r3, #20]
 8004f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	ed93 7a06 	vldr	s14, [r3, #24]
 8004fb2:	edd7 6a06 	vldr	s13, [r7, #24]
 8004fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004fbe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	ed93 7a07 	vldr	s14, [r3, #28]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8004fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fea:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	ee07 3a90 	vmov	s15, r3

}
 8005000:	eeb0 0a67 	vmov.f32	s0, s15
 8005004:	3724      	adds	r7, #36	; 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005014:	480d      	ldr	r0, [pc, #52]	; (800504c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005016:	490e      	ldr	r1, [pc, #56]	; (8005050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800501a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800501c:	e002      	b.n	8005024 <LoopCopyDataInit>

0800501e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800501e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005022:	3304      	adds	r3, #4

08005024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005028:	d3f9      	bcc.n	800501e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800502a:	4a0b      	ldr	r2, [pc, #44]	; (8005058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800502c:	4c0b      	ldr	r4, [pc, #44]	; (800505c <LoopFillZerobss+0x26>)
  movs r3, #0
 800502e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005030:	e001      	b.n	8005036 <LoopFillZerobss>

08005032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005034:	3204      	adds	r2, #4

08005036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005038:	d3fb      	bcc.n	8005032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800503a:	f7fd fb27 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800503e:	f007 fa03 	bl	800c448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005042:	f7fb ff65 	bl	8000f10 <main>
  bx  lr    
 8005046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800504c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005050:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005054:	0800e980 	.word	0x0800e980
  ldr r2, =_sbss
 8005058:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800505c:	200052d8 	.word	0x200052d8

08005060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005060:	e7fe      	b.n	8005060 <ADC_IRQHandler>
	...

08005064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_Init+0x40>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <HAL_Init+0x40>)
 800506e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_Init+0x40>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <HAL_Init+0x40>)
 800507a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800507e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_Init+0x40>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <HAL_Init+0x40>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800508c:	2003      	movs	r0, #3
 800508e:	f000 f937 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005092:	2000      	movs	r0, #0
 8005094:	f7fd fa36 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005098:	f7fd f86c 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40023c00 	.word	0x40023c00

080050a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_IncTick+0x20>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_IncTick+0x24>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4413      	add	r3, r2
 80050b8:	4a04      	ldr	r2, [pc, #16]	; (80050cc <HAL_IncTick+0x24>)
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000000c 	.word	0x2000000c
 80050cc:	20005284 	.word	0x20005284

080050d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return uwTick;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_GetTick+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20005284 	.word	0x20005284

080050e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7ff ffee 	bl	80050d0 <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005100:	d005      	beq.n	800510e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_Delay+0x44>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800510e:	bf00      	nop
 8005110:	f7ff ffde 	bl	80050d0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d8f7      	bhi.n	8005110 <HAL_Delay+0x28>
  {
  }
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c

08005130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800515c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <__NVIC_GetPriorityGrouping+0x18>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0307 	and.w	r3, r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db0b      	blt.n	80051be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	4907      	ldr	r1, [pc, #28]	; (80051cc <__NVIC_EnableIRQ+0x38>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2001      	movs	r0, #1
 80051b6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100

080051d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db12      	blt.n	8005208 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 021f 	and.w	r2, r3, #31
 80051e8:	490a      	ldr	r1, [pc, #40]	; (8005214 <__NVIC_DisableIRQ+0x44>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2001      	movs	r0, #1
 80051f2:	fa00 f202 	lsl.w	r2, r0, r2
 80051f6:	3320      	adds	r3, #32
 80051f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051fc:	f3bf 8f4f 	dsb	sy
}
 8005200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005202:	f3bf 8f6f 	isb	sy
}
 8005206:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000e100 	.word	0xe000e100

08005218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	6039      	str	r1, [r7, #0]
 8005222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db0a      	blt.n	8005242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	490c      	ldr	r1, [pc, #48]	; (8005264 <__NVIC_SetPriority+0x4c>)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	440b      	add	r3, r1
 800523c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005240:	e00a      	b.n	8005258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	4908      	ldr	r1, [pc, #32]	; (8005268 <__NVIC_SetPriority+0x50>)
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3b04      	subs	r3, #4
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	440b      	add	r3, r1
 8005256:	761a      	strb	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000e100 	.word	0xe000e100
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	; 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf28      	it	cs
 800528a:	2304      	movcs	r3, #4
 800528c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3304      	adds	r3, #4
 8005292:	2b06      	cmp	r3, #6
 8005294:	d902      	bls.n	800529c <NVIC_EncodePriority+0x30>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3b03      	subs	r3, #3
 800529a:	e000      	b.n	800529e <NVIC_EncodePriority+0x32>
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	401a      	ands	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	43d9      	mvns	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c4:	4313      	orrs	r3, r2
         );
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80052d8:	f3bf 8f4f 	dsb	sy
}
 80052dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <__NVIC_SystemReset+0x24>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80052e6:	4904      	ldr	r1, [pc, #16]	; (80052f8 <__NVIC_SystemReset+0x24>)
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <__NVIC_SystemReset+0x28>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80052ee:	f3bf 8f4f 	dsb	sy
}
 80052f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <__NVIC_SystemReset+0x20>
 80052f8:	e000ed00 	.word	0xe000ed00
 80052fc:	05fa0004 	.word	0x05fa0004

08005300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff11 	bl	8005130 <__NVIC_SetPriorityGrouping>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005328:	f7ff ff26 	bl	8005178 <__NVIC_GetPriorityGrouping>
 800532c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff9a 	bl	800526c <NVIC_EncodePriority>
 8005338:	4602      	mov	r2, r0
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff69 	bl	8005218 <__NVIC_SetPriority>
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	4603      	mov	r3, r0
 8005356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff19 	bl	8005194 <__NVIC_EnableIRQ>
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	4603      	mov	r3, r0
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ff29 	bl	80051d0 <__NVIC_DisableIRQ>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800538a:	f7ff ffa3 	bl	80052d4 <__NVIC_SystemReset>
	...

08005390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800539c:	f7ff fe98 	bl	80050d0 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e099      	b.n	80054e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053cc:	e00f      	b.n	80053ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ce:	f7ff fe7f 	bl	80050d0 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d908      	bls.n	80053ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2203      	movs	r2, #3
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e078      	b.n	80054e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e8      	bne.n	80053ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_DMA_Init+0x158>)
 8005408:	4013      	ands	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800541a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b04      	cmp	r3, #4
 8005446:	d107      	bne.n	8005458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4313      	orrs	r3, r2
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b04      	cmp	r3, #4
 8005480:	d117      	bne.n	80054b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fa6f 	bl	8005978 <DMA_CheckFifoParam>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054ae:	2301      	movs	r3, #1
 80054b0:	e016      	b.n	80054e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa26 	bl	800590c <DMA_CalcBaseAndBitshift>
 80054c0:	4603      	mov	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	223f      	movs	r2, #63	; 0x3f
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	f010803f 	.word	0xf010803f

080054ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_DMA_Start_IT+0x26>
 800550e:	2302      	movs	r3, #2
 8005510:	e040      	b.n	8005594 <HAL_DMA_Start_IT+0xa8>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d12f      	bne.n	8005586 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f9b8 	bl	80058b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	223f      	movs	r2, #63	; 0x3f
 8005546:	409a      	lsls	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0216 	orr.w	r2, r2, #22
 800555a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0208 	orr.w	r2, r2, #8
 8005572:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e005      	b.n	8005592 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055a8:	4b92      	ldr	r3, [pc, #584]	; (80057f4 <HAL_DMA_IRQHandler+0x258>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a92      	ldr	r2, [pc, #584]	; (80057f8 <HAL_DMA_IRQHandler+0x25c>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	0a9b      	lsrs	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c6:	2208      	movs	r2, #8
 80055c8:	409a      	lsls	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01a      	beq.n	8005608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d013      	beq.n	8005608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	2208      	movs	r2, #8
 80055f6:	409a      	lsls	r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	f043 0201 	orr.w	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	2201      	movs	r2, #1
 800560e:	409a      	lsls	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562a:	2201      	movs	r2, #1
 800562c:	409a      	lsls	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f043 0202 	orr.w	r2, r3, #2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	2204      	movs	r2, #4
 8005644:	409a      	lsls	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d012      	beq.n	8005674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	2204      	movs	r2, #4
 8005662:	409a      	lsls	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	f043 0204 	orr.w	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	2210      	movs	r2, #16
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d043      	beq.n	800570c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03c      	beq.n	800570c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	2210      	movs	r2, #16
 8005698:	409a      	lsls	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d018      	beq.n	80056de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d108      	bne.n	80056cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d024      	beq.n	800570c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
 80056ca:	e01f      	b.n	800570c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	e016      	b.n	800570c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0208 	bic.w	r2, r2, #8
 80056fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	2220      	movs	r2, #32
 8005712:	409a      	lsls	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 808e 	beq.w	800583a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8086 	beq.w	800583a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	2220      	movs	r2, #32
 8005734:	409a      	lsls	r2, r3
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b05      	cmp	r3, #5
 8005744:	d136      	bne.n	80057b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0216 	bic.w	r2, r2, #22
 8005754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_DMA_IRQHandler+0x1da>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0208 	bic.w	r2, r2, #8
 8005784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578a:	223f      	movs	r2, #63	; 0x3f
 800578c:	409a      	lsls	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d07d      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
        }
        return;
 80057b2:	e078      	b.n	80058a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01c      	beq.n	80057fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d030      	beq.n	800583a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	e02b      	b.n	800583a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d027      	beq.n	800583a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
 80057f2:	e022      	b.n	800583a <HAL_DMA_IRQHandler+0x29e>
 80057f4:	20000004 	.word	0x20000004
 80057f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0210 	bic.w	r2, r2, #16
 8005818:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	2b00      	cmp	r3, #0
 8005840:	d032      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d022      	beq.n	8005894 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2205      	movs	r2, #5
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3301      	adds	r3, #1
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	429a      	cmp	r2, r3
 8005870:	d307      	bcc.n	8005882 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f2      	bne.n	8005866 <HAL_DMA_IRQHandler+0x2ca>
 8005880:	e000      	b.n	8005884 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005882:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	e000      	b.n	80058a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80058a6:	bf00      	nop
    }
  }
}
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d108      	bne.n	80058f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058ee:	e007      	b.n	8005900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	3b10      	subs	r3, #16
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <DMA_CalcBaseAndBitshift+0x64>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005926:	4a13      	ldr	r2, [pc, #76]	; (8005974 <DMA_CalcBaseAndBitshift+0x68>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d909      	bls.n	800594e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	1d1a      	adds	r2, r3, #4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	659a      	str	r2, [r3, #88]	; 0x58
 800594c:	e007      	b.n	800595e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	aaaaaaab 	.word	0xaaaaaaab
 8005974:	0800e748 	.word	0x0800e748

08005978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11f      	bne.n	80059d2 <DMA_CheckFifoParam+0x5a>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d856      	bhi.n	8005a46 <DMA_CheckFifoParam+0xce>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <DMA_CheckFifoParam+0x28>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059c3 	.word	0x080059c3
 80059a8:	080059b1 	.word	0x080059b1
 80059ac:	08005a47 	.word	0x08005a47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d046      	beq.n	8005a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c0:	e043      	b.n	8005a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059ca:	d140      	bne.n	8005a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d0:	e03d      	b.n	8005a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059da:	d121      	bne.n	8005a20 <DMA_CheckFifoParam+0xa8>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d837      	bhi.n	8005a52 <DMA_CheckFifoParam+0xda>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <DMA_CheckFifoParam+0x70>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	080059ff 	.word	0x080059ff
 80059f0:	080059f9 	.word	0x080059f9
 80059f4:	08005a11 	.word	0x08005a11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e030      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d025      	beq.n	8005a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0e:	e022      	b.n	8005a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a18:	d11f      	bne.n	8005a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a1e:	e01c      	b.n	8005a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d903      	bls.n	8005a2e <DMA_CheckFifoParam+0xb6>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d003      	beq.n	8005a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a2c:	e018      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
      break;
 8005a32:	e015      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      break;
 8005a44:	e00b      	b.n	8005a5e <DMA_CheckFifoParam+0xe6>
      break;
 8005a46:	bf00      	nop
 8005a48:	e00a      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e008      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;
 8005a4e:	bf00      	nop
 8005a50:	e006      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;
 8005a52:	bf00      	nop
 8005a54:	e004      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;
 8005a56:	bf00      	nop
 8005a58:	e002      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <DMA_CheckFifoParam+0xe8>
      break;
 8005a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e165      	b.n	8005d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	f040 8154 	bne.w	8005d52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d005      	beq.n	8005ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d130      	bne.n	8005b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	2203      	movs	r2, #3
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005af8:	2201      	movs	r2, #1
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 0201 	and.w	r2, r3, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d017      	beq.n	8005b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d123      	bne.n	8005bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	08da      	lsrs	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3208      	adds	r2, #8
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	220f      	movs	r2, #15
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	08da      	lsrs	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3208      	adds	r2, #8
 8005bae:	69b9      	ldr	r1, [r7, #24]
 8005bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0203 	and.w	r2, r3, #3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80ae 	beq.w	8005d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	4b5d      	ldr	r3, [pc, #372]	; (8005d70 <HAL_GPIO_Init+0x300>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <HAL_GPIO_Init+0x300>)
 8005c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c04:	6453      	str	r3, [r2, #68]	; 0x44
 8005c06:	4b5a      	ldr	r3, [pc, #360]	; (8005d70 <HAL_GPIO_Init+0x300>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c12:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_GPIO_Init+0x304>)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	220f      	movs	r2, #15
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4f      	ldr	r2, [pc, #316]	; (8005d78 <HAL_GPIO_Init+0x308>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d025      	beq.n	8005c8a <HAL_GPIO_Init+0x21a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4e      	ldr	r2, [pc, #312]	; (8005d7c <HAL_GPIO_Init+0x30c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01f      	beq.n	8005c86 <HAL_GPIO_Init+0x216>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4d      	ldr	r2, [pc, #308]	; (8005d80 <HAL_GPIO_Init+0x310>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d019      	beq.n	8005c82 <HAL_GPIO_Init+0x212>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4c      	ldr	r2, [pc, #304]	; (8005d84 <HAL_GPIO_Init+0x314>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_GPIO_Init+0x20e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4b      	ldr	r2, [pc, #300]	; (8005d88 <HAL_GPIO_Init+0x318>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00d      	beq.n	8005c7a <HAL_GPIO_Init+0x20a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a4a      	ldr	r2, [pc, #296]	; (8005d8c <HAL_GPIO_Init+0x31c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <HAL_GPIO_Init+0x206>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a49      	ldr	r2, [pc, #292]	; (8005d90 <HAL_GPIO_Init+0x320>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_GPIO_Init+0x202>
 8005c6e:	2306      	movs	r3, #6
 8005c70:	e00c      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c72:	2307      	movs	r3, #7
 8005c74:	e00a      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c76:	2305      	movs	r3, #5
 8005c78:	e008      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	e006      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e004      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e002      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <HAL_GPIO_Init+0x21c>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	f002 0203 	and.w	r2, r2, #3
 8005c92:	0092      	lsls	r2, r2, #2
 8005c94:	4093      	lsls	r3, r2
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c9c:	4935      	ldr	r1, [pc, #212]	; (8005d74 <HAL_GPIO_Init+0x304>)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cce:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cd4:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cfe:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d22:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d4c:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	f67f ae96 	bls.w	8005a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3724      	adds	r7, #36	; 0x24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40013800 	.word	0x40013800
 8005d78:	40020000 	.word	0x40020000
 8005d7c:	40020400 	.word	0x40020400
 8005d80:	40020800 	.word	0x40020800
 8005d84:	40020c00 	.word	0x40020c00
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40021400 	.word	0x40021400
 8005d90:	40021800 	.word	0x40021800
 8005d94:	40013c00 	.word	0x40013c00

08005d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e001      	b.n	8005dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dd8:	787b      	ldrb	r3, [r7, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005de4:	e003      	b.n	8005dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005de6:	887b      	ldrh	r3, [r7, #2]
 8005de8:	041a      	lsls	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e0c:	887a      	ldrh	r2, [r7, #2]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	041a      	lsls	r2, r3, #16
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	43d9      	mvns	r1, r3
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	619a      	str	r2, [r3, #24]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0cc      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e44:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d90c      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b65      	ldr	r3, [pc, #404]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b63      	ldr	r3, [pc, #396]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0b8      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e84:	4b59      	ldr	r3, [pc, #356]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e9c:	4b53      	ldr	r3, [pc, #332]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a52      	ldr	r2, [pc, #328]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea8:	4b50      	ldr	r3, [pc, #320]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	494d      	ldr	r1, [pc, #308]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d044      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d119      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e07f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d003      	beq.n	8005eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eee:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e06f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e067      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f0e:	4b37      	ldr	r3, [pc, #220]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f023 0203 	bic.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4934      	ldr	r1, [pc, #208]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f20:	f7ff f8d6 	bl	80050d0 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f28:	f7ff f8d2 	bl	80050d0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e04f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 020c 	and.w	r2, r3, #12
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d1eb      	bne.n	8005f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20c      	bcs.n	8005f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e032      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4916      	ldr	r1, [pc, #88]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	490e      	ldr	r1, [pc, #56]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fb6:	f000 f887 	bl	80060c8 <HAL_RCC_GetSysClockFreq>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fc8:	5ccb      	ldrb	r3, [r1, r3]
 8005fca:	fa22 f303 	lsr.w	r3, r2, r3
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fc fa94 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40023c00 	.word	0x40023c00
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	0800e720 	.word	0x0800e720
 8005ff4:	20000004 	.word	0x20000004
 8005ff8:	20000008 	.word	0x20000008

08005ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006000:	4b03      	ldr	r3, [pc, #12]	; (8006010 <HAL_RCC_GetHCLKFreq+0x14>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000004 	.word	0x20000004

08006014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006018:	f7ff fff0 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800601c:	4602      	mov	r2, r0
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	0a9b      	lsrs	r3, r3, #10
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4903      	ldr	r1, [pc, #12]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800602a:	5ccb      	ldrb	r3, [r1, r3]
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40023800 	.word	0x40023800
 8006038:	0800e730 	.word	0x0800e730

0800603c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006040:	f7ff ffdc 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0b5b      	lsrs	r3, r3, #13
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4903      	ldr	r1, [pc, #12]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006058:	4618      	mov	r0, r3
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40023800 	.word	0x40023800
 8006060:	0800e730 	.word	0x0800e730

08006064 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	220f      	movs	r2, #15
 8006072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006074:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0203 	and.w	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <HAL_RCC_GetClockConfig+0x60>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 020f 	and.w	r2, r3, #15
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	601a      	str	r2, [r3, #0]
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40023c00 	.word	0x40023c00

080060c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060cc:	b088      	sub	sp, #32
 80060ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060e4:	4bce      	ldr	r3, [pc, #824]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	f200 818d 	bhi.w	800640c <HAL_RCC_GetSysClockFreq+0x344>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_RCC_GetSysClockFreq+0x30>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	0800640d 	.word	0x0800640d
 8006100:	0800640d 	.word	0x0800640d
 8006104:	0800640d 	.word	0x0800640d
 8006108:	08006133 	.word	0x08006133
 800610c:	0800640d 	.word	0x0800640d
 8006110:	0800640d 	.word	0x0800640d
 8006114:	0800640d 	.word	0x0800640d
 8006118:	08006139 	.word	0x08006139
 800611c:	0800640d 	.word	0x0800640d
 8006120:	0800640d 	.word	0x0800640d
 8006124:	0800640d 	.word	0x0800640d
 8006128:	080062ad 	.word	0x080062ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800612c:	4bbd      	ldr	r3, [pc, #756]	; (8006424 <HAL_RCC_GetSysClockFreq+0x35c>)
 800612e:	61bb      	str	r3, [r7, #24]
       break;
 8006130:	e16f      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006132:	4bbd      	ldr	r3, [pc, #756]	; (8006428 <HAL_RCC_GetSysClockFreq+0x360>)
 8006134:	61bb      	str	r3, [r7, #24]
      break;
 8006136:	e16c      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006138:	4bb9      	ldr	r3, [pc, #740]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006140:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006142:	4bb7      	ldr	r3, [pc, #732]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d053      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614e:	4bb4      	ldr	r3, [pc, #720]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	461a      	mov	r2, r3
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	ea02 0400 	and.w	r4, r2, r0
 8006166:	603c      	str	r4, [r7, #0]
 8006168:	400b      	ands	r3, r1
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	014b      	lsls	r3, r1, #5
 800617e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006182:	0142      	lsls	r2, r0, #5
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	4623      	mov	r3, r4
 800618a:	1ac0      	subs	r0, r0, r3
 800618c:	462b      	mov	r3, r5
 800618e:	eb61 0103 	sbc.w	r1, r1, r3
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	018b      	lsls	r3, r1, #6
 800619c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061a0:	0182      	lsls	r2, r0, #6
 80061a2:	1a12      	subs	r2, r2, r0
 80061a4:	eb63 0301 	sbc.w	r3, r3, r1
 80061a8:	f04f 0000 	mov.w	r0, #0
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	00d9      	lsls	r1, r3, #3
 80061b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061b6:	00d0      	lsls	r0, r2, #3
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4621      	mov	r1, r4
 80061be:	1852      	adds	r2, r2, r1
 80061c0:	4629      	mov	r1, r5
 80061c2:	eb43 0101 	adc.w	r1, r3, r1
 80061c6:	460b      	mov	r3, r1
 80061c8:	f04f 0000 	mov.w	r0, #0
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	0259      	lsls	r1, r3, #9
 80061d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80061d6:	0250      	lsls	r0, r2, #9
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f7fa fd16 	bl	8000c18 <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4613      	mov	r3, r2
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e04c      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f6:	4b8a      	ldr	r3, [pc, #552]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	461a      	mov	r2, r3
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	ea02 0a00 	and.w	sl, r2, r0
 800620e:	ea03 0b01 	and.w	fp, r3, r1
 8006212:	4650      	mov	r0, sl
 8006214:	4659      	mov	r1, fp
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	014b      	lsls	r3, r1, #5
 8006220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006224:	0142      	lsls	r2, r0, #5
 8006226:	4610      	mov	r0, r2
 8006228:	4619      	mov	r1, r3
 800622a:	ebb0 000a 	subs.w	r0, r0, sl
 800622e:	eb61 010b 	sbc.w	r1, r1, fp
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	018b      	lsls	r3, r1, #6
 800623c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006240:	0182      	lsls	r2, r0, #6
 8006242:	1a12      	subs	r2, r2, r0
 8006244:	eb63 0301 	sbc.w	r3, r3, r1
 8006248:	f04f 0000 	mov.w	r0, #0
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	00d9      	lsls	r1, r3, #3
 8006252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006256:	00d0      	lsls	r0, r2, #3
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	eb12 020a 	adds.w	r2, r2, sl
 8006260:	eb43 030b 	adc.w	r3, r3, fp
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f04f 0100 	mov.w	r1, #0
 800626c:	0299      	lsls	r1, r3, #10
 800626e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006272:	0290      	lsls	r0, r2, #10
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	f7fa fcc8 	bl	8000c18 <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006290:	4b63      	ldr	r3, [pc, #396]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	61bb      	str	r3, [r7, #24]
      break;
 80062aa:	e0b2      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062ac:	4b5c      	ldr	r3, [pc, #368]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062b6:	4b5a      	ldr	r3, [pc, #360]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04d      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062c2:	4b57      	ldr	r3, [pc, #348]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	099b      	lsrs	r3, r3, #6
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	ea02 0800 	and.w	r8, r2, r0
 80062da:	ea03 0901 	and.w	r9, r3, r1
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	014b      	lsls	r3, r1, #5
 80062ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062f0:	0142      	lsls	r2, r0, #5
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	ebb0 0008 	subs.w	r0, r0, r8
 80062fa:	eb61 0109 	sbc.w	r1, r1, r9
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	018b      	lsls	r3, r1, #6
 8006308:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800630c:	0182      	lsls	r2, r0, #6
 800630e:	1a12      	subs	r2, r2, r0
 8006310:	eb63 0301 	sbc.w	r3, r3, r1
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f04f 0100 	mov.w	r1, #0
 800631c:	00d9      	lsls	r1, r3, #3
 800631e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006322:	00d0      	lsls	r0, r2, #3
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	eb12 0208 	adds.w	r2, r2, r8
 800632c:	eb43 0309 	adc.w	r3, r3, r9
 8006330:	f04f 0000 	mov.w	r0, #0
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	0259      	lsls	r1, r3, #9
 800633a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800633e:	0250      	lsls	r0, r2, #9
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	461a      	mov	r2, r3
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f7fa fc62 	bl	8000c18 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4613      	mov	r3, r2
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	e04a      	b.n	80063f4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800635e:	4b30      	ldr	r3, [pc, #192]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	099b      	lsrs	r3, r3, #6
 8006364:	461a      	mov	r2, r3
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	ea02 0400 	and.w	r4, r2, r0
 8006376:	ea03 0501 	and.w	r5, r3, r1
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	014b      	lsls	r3, r1, #5
 8006388:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800638c:	0142      	lsls	r2, r0, #5
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	1b00      	subs	r0, r0, r4
 8006394:	eb61 0105 	sbc.w	r1, r1, r5
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	018b      	lsls	r3, r1, #6
 80063a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063a6:	0182      	lsls	r2, r0, #6
 80063a8:	1a12      	subs	r2, r2, r0
 80063aa:	eb63 0301 	sbc.w	r3, r3, r1
 80063ae:	f04f 0000 	mov.w	r0, #0
 80063b2:	f04f 0100 	mov.w	r1, #0
 80063b6:	00d9      	lsls	r1, r3, #3
 80063b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063bc:	00d0      	lsls	r0, r2, #3
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	1912      	adds	r2, r2, r4
 80063c4:	eb45 0303 	adc.w	r3, r5, r3
 80063c8:	f04f 0000 	mov.w	r0, #0
 80063cc:	f04f 0100 	mov.w	r1, #0
 80063d0:	0299      	lsls	r1, r3, #10
 80063d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063d6:	0290      	lsls	r0, r2, #10
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	f7fa fc16 	bl	8000c18 <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4613      	mov	r3, r2
 80063f2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_RCC_GetSysClockFreq+0x358>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	0f1b      	lsrs	r3, r3, #28
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	61bb      	str	r3, [r7, #24]
      break;
 800640a:	e002      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <HAL_RCC_GetSysClockFreq+0x35c>)
 800640e:	61bb      	str	r3, [r7, #24]
      break;
 8006410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006412:	69bb      	ldr	r3, [r7, #24]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800641e:	bf00      	nop
 8006420:	40023800 	.word	0x40023800
 8006424:	00f42400 	.word	0x00f42400
 8006428:	007a1200 	.word	0x007a1200

0800642c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e28d      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8083 	beq.w	8006552 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800644c:	4b94      	ldr	r3, [pc, #592]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b04      	cmp	r3, #4
 8006456:	d019      	beq.n	800648c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006458:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006460:	2b08      	cmp	r3, #8
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006464:	4b8e      	ldr	r3, [pc, #568]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006470:	d00c      	beq.n	800648c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006472:	4b8b      	ldr	r3, [pc, #556]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d112      	bne.n	80064a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800647e:	4b88      	ldr	r3, [pc, #544]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648a:	d10b      	bne.n	80064a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648c:	4b84      	ldr	r3, [pc, #528]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d05b      	beq.n	8006550 <HAL_RCC_OscConfig+0x124>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d157      	bne.n	8006550 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e25a      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x90>
 80064ae:	4b7c      	ldr	r3, [pc, #496]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a7b      	ldr	r2, [pc, #492]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e01d      	b.n	80064f8 <HAL_RCC_OscConfig+0xcc>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0xb4>
 80064c6:	4b76      	ldr	r3, [pc, #472]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a75      	ldr	r2, [pc, #468]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4b73      	ldr	r3, [pc, #460]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a72      	ldr	r2, [pc, #456]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e00b      	b.n	80064f8 <HAL_RCC_OscConfig+0xcc>
 80064e0:	4b6f      	ldr	r3, [pc, #444]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a6e      	ldr	r2, [pc, #440]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	4b6c      	ldr	r3, [pc, #432]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a6b      	ldr	r2, [pc, #428]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80064f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d013      	beq.n	8006528 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fe fde6 	bl	80050d0 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006508:	f7fe fde2 	bl	80050d0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e21f      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651a:	4b61      	ldr	r3, [pc, #388]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0xdc>
 8006526:	e014      	b.n	8006552 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fe fdd2 	bl	80050d0 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006530:	f7fe fdce 	bl	80050d0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	; 0x64
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e20b      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006542:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x104>
 800654e:	e000      	b.n	8006552 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d06f      	beq.n	800663e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800655e:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b00      	cmp	r3, #0
 8006568:	d017      	beq.n	800659a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800656a:	4b4d      	ldr	r3, [pc, #308]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006572:	2b08      	cmp	r3, #8
 8006574:	d105      	bne.n	8006582 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006576:	4b4a      	ldr	r3, [pc, #296]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800658a:	2b0c      	cmp	r3, #12
 800658c:	d11c      	bne.n	80065c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800658e:	4b44      	ldr	r3, [pc, #272]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d116      	bne.n	80065c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800659a:	4b41      	ldr	r3, [pc, #260]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_RCC_OscConfig+0x186>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d001      	beq.n	80065b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e1d3      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4937      	ldr	r1, [pc, #220]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c6:	e03a      	b.n	800663e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d020      	beq.n	8006612 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d0:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <HAL_RCC_OscConfig+0x278>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d6:	f7fe fd7b 	bl	80050d0 <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065de:	f7fe fd77 	bl	80050d0 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e1b4      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f0:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fc:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4925      	ldr	r1, [pc, #148]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
 8006610:	e015      	b.n	800663e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006612:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <HAL_RCC_OscConfig+0x278>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7fe fd5a 	bl	80050d0 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006620:	f7fe fd56 	bl	80050d0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e193      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d036      	beq.n	80066b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <HAL_RCC_OscConfig+0x27c>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fe fd3a 	bl	80050d0 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006660:	f7fe fd36 	bl	80050d0 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e173      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCC_OscConfig+0x274>)
 8006674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0x234>
 800667e:	e01b      	b.n	80066b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <HAL_RCC_OscConfig+0x27c>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006686:	f7fe fd23 	bl	80050d0 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800668c:	e00e      	b.n	80066ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800668e:	f7fe fd1f 	bl	80050d0 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d907      	bls.n	80066ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e15c      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
 80066a0:	40023800 	.word	0x40023800
 80066a4:	42470000 	.word	0x42470000
 80066a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ac:	4b8a      	ldr	r3, [pc, #552]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80066ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ea      	bne.n	800668e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8097 	beq.w	80067f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ca:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10f      	bne.n	80066f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	4a7e      	ldr	r2, [pc, #504]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40
 80066e6:	4b7c      	ldr	r3, [pc, #496]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f6:	4b79      	ldr	r3, [pc, #484]	; (80068dc <HAL_RCC_OscConfig+0x4b0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d118      	bne.n	8006734 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006702:	4b76      	ldr	r3, [pc, #472]	; (80068dc <HAL_RCC_OscConfig+0x4b0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a75      	ldr	r2, [pc, #468]	; (80068dc <HAL_RCC_OscConfig+0x4b0>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670e:	f7fe fcdf 	bl	80050d0 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fe fcdb 	bl	80050d0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e118      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006728:	4b6c      	ldr	r3, [pc, #432]	; (80068dc <HAL_RCC_OscConfig+0x4b0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <HAL_RCC_OscConfig+0x31e>
 800673c:	4b66      	ldr	r3, [pc, #408]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	4a65      	ldr	r2, [pc, #404]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	; 0x70
 8006748:	e01c      	b.n	8006784 <HAL_RCC_OscConfig+0x358>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b05      	cmp	r3, #5
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x340>
 8006752:	4b61      	ldr	r3, [pc, #388]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a60      	ldr	r2, [pc, #384]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006758:	f043 0304 	orr.w	r3, r3, #4
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b5e      	ldr	r3, [pc, #376]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a5d      	ldr	r2, [pc, #372]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
 800676a:	e00b      	b.n	8006784 <HAL_RCC_OscConfig+0x358>
 800676c:	4b5a      	ldr	r3, [pc, #360]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a59      	ldr	r2, [pc, #356]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	4b57      	ldr	r3, [pc, #348]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a56      	ldr	r2, [pc, #344]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 800677e:	f023 0304 	bic.w	r3, r3, #4
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d015      	beq.n	80067b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678c:	f7fe fca0 	bl	80050d0 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006792:	e00a      	b.n	80067aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006794:	f7fe fc9c 	bl	80050d0 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0d7      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067aa:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0ee      	beq.n	8006794 <HAL_RCC_OscConfig+0x368>
 80067b6:	e014      	b.n	80067e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b8:	f7fe fc8a 	bl	80050d0 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067be:	e00a      	b.n	80067d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7fe fc86 	bl	80050d0 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e0c1      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d6:	4b40      	ldr	r3, [pc, #256]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ee      	bne.n	80067c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d105      	bne.n	80067f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e8:	4b3b      	ldr	r3, [pc, #236]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	4a3a      	ldr	r2, [pc, #232]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80067ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80ad 	beq.w	8006958 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b08      	cmp	r3, #8
 8006808:	d060      	beq.n	80068cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d145      	bne.n	800689e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <HAL_RCC_OscConfig+0x4b4>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fe fc5a 	bl	80050d0 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006820:	f7fe fc56 	bl	80050d0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e093      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	019b      	lsls	r3, r3, #6
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	3b01      	subs	r3, #1
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	071b      	lsls	r3, r3, #28
 800686a:	491b      	ldr	r1, [pc, #108]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <HAL_RCC_OscConfig+0x4b4>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006876:	f7fe fc2b 	bl	80050d0 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687e:	f7fe fc27 	bl	80050d0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e064      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <HAL_RCC_OscConfig+0x452>
 800689c:	e05c      	b.n	8006958 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <HAL_RCC_OscConfig+0x4b4>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fe fc14 	bl	80050d0 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ac:	f7fe fc10 	bl	80050d0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e04d      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_RCC_OscConfig+0x4ac>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x480>
 80068ca:	e045      	b.n	8006958 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e040      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40007000 	.word	0x40007000
 80068e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068e4:	4b1f      	ldr	r3, [pc, #124]	; (8006964 <HAL_RCC_OscConfig+0x538>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d030      	beq.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d129      	bne.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d122      	bne.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800691a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800691c:	4293      	cmp	r3, r2
 800691e:	d119      	bne.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	3b01      	subs	r3, #1
 800692e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006930:	429a      	cmp	r2, r3
 8006932:	d10f      	bne.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006940:	429a      	cmp	r2, r3
 8006942:	d107      	bne.n	8006954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800

08006968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e04c      	b.n	8006a14 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d111      	bne.n	80069aa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f968 	bl	8007c64 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <HAL_TIM_Base_Init+0xb4>)
 80069a0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f000 fe41 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08002309 	.word	0x08002309

08006a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e04e      	b.n	8006ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d022      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a62:	d01d      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <HAL_TIM_Base_Start_IT+0xcc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a19      	ldr	r2, [pc, #100]	; (8006af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIM_Base_Start_IT+0x80>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a18      	ldr	r2, [pc, #96]	; (8006afc <HAL_TIM_Base_Start_IT+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d111      	bne.n	8006ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b06      	cmp	r3, #6
 8006ab0:	d010      	beq.n	8006ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0201 	orr.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	e007      	b.n	8006ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40001800 	.word	0x40001800

08006b00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10f      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	f240 4344 	movw	r3, #1092	; 0x444
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e04c      	b.n	8006c0c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d111      	bne.n	8006ba2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 f86c 	bl	8007c64 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_TIM_PWM_Init+0xb4>)
 8006b98:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f000 fd45 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	080021cd 	.word	0x080021cd

08006c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x24>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e022      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d109      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x3e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e015      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x58>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e008      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e07c      	b.n	8006d84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x82>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_PWM_Start+0x92>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start+0xa2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 ffa4 	bl	8007c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <HAL_TIM_PWM_Start+0x174>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_PWM_Start+0xcc>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <HAL_TIM_PWM_Start+0x178>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d101      	bne.n	8006ce8 <HAL_TIM_PWM_Start+0xd0>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <HAL_TIM_PWM_Start+0xd2>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_TIM_PWM_Start+0x174>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_TIM_PWM_Start+0x17c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_TIM_PWM_Start+0x180>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIM_PWM_Start+0x184>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <HAL_TIM_PWM_Start+0x178>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIM_PWM_Start+0x188>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x136>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <HAL_TIM_PWM_Start+0x18c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d111      	bne.n	8006d72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d010      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d70:	e007      	b.n	8006d82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40001800 	.word	0x40001800

08006da8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0a2      	b.n	8006f02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d111      	bne.n	8006dec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 ff47 	bl	8007c64 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a4a      	ldr	r2, [pc, #296]	; (8006f0c <HAL_TIM_Encoder_Init+0x164>)
 8006de2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f000 fc16 	bl	8007644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e40:	f023 0303 	bic.w	r3, r3, #3
 8006e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	4313      	orrs	r3, r2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e5e:	f023 030c 	bic.w	r3, r3, #12
 8006e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	011a      	lsls	r2, r3, #4
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ea4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08002211 	.word	0x08002211

08006f10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d110      	bne.n	8006f62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d102      	bne.n	8006f4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f46:	7b7b      	ldrb	r3, [r7, #13]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d001      	beq.n	8006f50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e069      	b.n	8007024 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f60:	e031      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d110      	bne.n	8006f8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d102      	bne.n	8006f74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f6e:	7b3b      	ldrb	r3, [r7, #12]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e055      	b.n	8007024 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f88:	e01d      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d108      	bne.n	8006fa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d105      	bne.n	8006fa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f96:	7b7b      	ldrb	r3, [r7, #13]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d102      	bne.n	8006fa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f9c:	7b3b      	ldrb	r3, [r7, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d001      	beq.n	8006fa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e03e      	b.n	8007024 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_TIM_Encoder_Start+0xc4>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d008      	beq.n	8006fe4 <HAL_TIM_Encoder_Start+0xd4>
 8006fd2:	e00f      	b.n	8006ff4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fe1b 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8006fe2:	e016      	b.n	8007012 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	2104      	movs	r1, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fe13 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8006ff2:	e00e      	b.n	8007012 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fe0b 	bl	8007c18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2201      	movs	r2, #1
 8007008:	2104      	movs	r1, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fe04 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8007010:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0201 	orr.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d128      	bne.n	8007094 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b02      	cmp	r3, #2
 800704e:	d121      	bne.n	8007094 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0202 	mvn.w	r2, #2
 8007058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
 8007078:	e009      	b.n	800708e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d128      	bne.n	80070f4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d121      	bne.n	80070f4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0204 	mvn.w	r2, #4
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
 80070d8:	e009      	b.n	80070ee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d128      	bne.n	8007154 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b08      	cmp	r3, #8
 800710e:	d121      	bne.n	8007154 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0208 	mvn.w	r2, #8
 8007118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2204      	movs	r2, #4
 800711e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	e009      	b.n	800714e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d128      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b10      	cmp	r3, #16
 800716e:	d121      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0210 	mvn.w	r2, #16
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2208      	movs	r2, #8
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	e009      	b.n	80071ae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d110      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0201 	mvn.w	r2, #1
 80071d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d110      	bne.n	8007214 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fc:	2b80      	cmp	r3, #128	; 0x80
 80071fe:	d109      	bne.n	8007214 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721e:	2b40      	cmp	r3, #64	; 0x40
 8007220:	d110      	bne.n	8007244 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	d109      	bne.n	8007244 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b20      	cmp	r3, #32
 8007250:	d110      	bne.n	8007274 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b20      	cmp	r3, #32
 800725e:	d109      	bne.n	8007274 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0220 	mvn.w	r2, #32
 8007268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007296:	2302      	movs	r3, #2
 8007298:	e0ae      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	f200 809f 	bhi.w	80073e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080073e9 	.word	0x080073e9
 80072b8:	080073e9 	.word	0x080073e9
 80072bc:	080073e9 	.word	0x080073e9
 80072c0:	08007325 	.word	0x08007325
 80072c4:	080073e9 	.word	0x080073e9
 80072c8:	080073e9 	.word	0x080073e9
 80072cc:	080073e9 	.word	0x080073e9
 80072d0:	08007367 	.word	0x08007367
 80072d4:	080073e9 	.word	0x080073e9
 80072d8:	080073e9 	.word	0x080073e9
 80072dc:	080073e9 	.word	0x080073e9
 80072e0:	080073a7 	.word	0x080073a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fa4a 	bl	8007784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0208 	orr.w	r2, r2, #8
 80072fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0204 	bic.w	r2, r2, #4
 800730e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6999      	ldr	r1, [r3, #24]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	619a      	str	r2, [r3, #24]
      break;
 8007322:	e064      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fa9a 	bl	8007864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6999      	ldr	r1, [r3, #24]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	021a      	lsls	r2, r3, #8
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	619a      	str	r2, [r3, #24]
      break;
 8007364:	e043      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 faef 	bl	8007950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0208 	orr.w	r2, r2, #8
 8007380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0204 	bic.w	r2, r2, #4
 8007390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69d9      	ldr	r1, [r3, #28]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	61da      	str	r2, [r3, #28]
      break;
 80073a4:	e023      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fb43 	bl	8007a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69d9      	ldr	r1, [r3, #28]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	021a      	lsls	r2, r3, #8
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	61da      	str	r2, [r3, #28]
      break;
 80073e6:	e002      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
      break;
 80073ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_TIM_ConfigClockSource+0x1c>
 8007418:	2302      	movs	r3, #2
 800741a:	e0b4      	b.n	8007586 <HAL_TIM_ConfigClockSource+0x186>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800743a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007454:	d03e      	beq.n	80074d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745a:	f200 8087 	bhi.w	800756c <HAL_TIM_ConfigClockSource+0x16c>
 800745e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007462:	f000 8086 	beq.w	8007572 <HAL_TIM_ConfigClockSource+0x172>
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d87f      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d01a      	beq.n	80074a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007470:	2b70      	cmp	r3, #112	; 0x70
 8007472:	d87b      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 8007474:	2b60      	cmp	r3, #96	; 0x60
 8007476:	d050      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x11a>
 8007478:	2b60      	cmp	r3, #96	; 0x60
 800747a:	d877      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 800747c:	2b50      	cmp	r3, #80	; 0x50
 800747e:	d03c      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0xfa>
 8007480:	2b50      	cmp	r3, #80	; 0x50
 8007482:	d873      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d058      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x13a>
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d86f      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d064      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x15a>
 8007490:	2b30      	cmp	r3, #48	; 0x30
 8007492:	d86b      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 8007494:	2b20      	cmp	r3, #32
 8007496:	d060      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x15a>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d867      	bhi.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d05c      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x15a>
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d05a      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x15a>
 80074a4:	e062      	b.n	800756c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6899      	ldr	r1, [r3, #8]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f000 fb8f 	bl	8007bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	609a      	str	r2, [r3, #8]
      break;
 80074d2:	e04f      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6899      	ldr	r1, [r3, #8]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f000 fb78 	bl	8007bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f6:	609a      	str	r2, [r3, #8]
      break;
 80074f8:	e03c      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6859      	ldr	r1, [r3, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	461a      	mov	r2, r3
 8007508:	f000 faec 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2150      	movs	r1, #80	; 0x50
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fb45 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 8007518:	e02c      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6859      	ldr	r1, [r3, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	461a      	mov	r2, r3
 8007528:	f000 fb0b 	bl	8007b42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2160      	movs	r1, #96	; 0x60
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fb35 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 8007538:	e01c      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	461a      	mov	r2, r3
 8007548:	f000 facc 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2140      	movs	r1, #64	; 0x40
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fb25 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 8007558:	e00c      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f000 fb1c 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 800756a:	e003      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	e000      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a40      	ldr	r2, [pc, #256]	; (8007758 <TIM_Base_SetConfig+0x114>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <TIM_Base_SetConfig+0x40>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007662:	d00f      	beq.n	8007684 <TIM_Base_SetConfig+0x40>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a3d      	ldr	r2, [pc, #244]	; (800775c <TIM_Base_SetConfig+0x118>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00b      	beq.n	8007684 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3c      	ldr	r2, [pc, #240]	; (8007760 <TIM_Base_SetConfig+0x11c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3b      	ldr	r2, [pc, #236]	; (8007764 <TIM_Base_SetConfig+0x120>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3a      	ldr	r2, [pc, #232]	; (8007768 <TIM_Base_SetConfig+0x124>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d108      	bne.n	8007696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a2f      	ldr	r2, [pc, #188]	; (8007758 <TIM_Base_SetConfig+0x114>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d02b      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a4:	d027      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2c      	ldr	r2, [pc, #176]	; (800775c <TIM_Base_SetConfig+0x118>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d023      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a2b      	ldr	r2, [pc, #172]	; (8007760 <TIM_Base_SetConfig+0x11c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d01f      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <TIM_Base_SetConfig+0x120>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01b      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a29      	ldr	r2, [pc, #164]	; (8007768 <TIM_Base_SetConfig+0x124>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d017      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a28      	ldr	r2, [pc, #160]	; (800776c <TIM_Base_SetConfig+0x128>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a27      	ldr	r2, [pc, #156]	; (8007770 <TIM_Base_SetConfig+0x12c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00f      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a26      	ldr	r2, [pc, #152]	; (8007774 <TIM_Base_SetConfig+0x130>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a25      	ldr	r2, [pc, #148]	; (8007778 <TIM_Base_SetConfig+0x134>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a24      	ldr	r2, [pc, #144]	; (800777c <TIM_Base_SetConfig+0x138>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a23      	ldr	r2, [pc, #140]	; (8007780 <TIM_Base_SetConfig+0x13c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d108      	bne.n	8007708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a0a      	ldr	r2, [pc, #40]	; (8007758 <TIM_Base_SetConfig+0x114>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0xf8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <TIM_Base_SetConfig+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d103      	bne.n	8007744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	615a      	str	r2, [r3, #20]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40010400 	.word	0x40010400
 800776c:	40014000 	.word	0x40014000
 8007770:	40014400 	.word	0x40014400
 8007774:	40014800 	.word	0x40014800
 8007778:	40001800 	.word	0x40001800
 800777c:	40001c00 	.word	0x40001c00
 8007780:	40002000 	.word	0x40002000

08007784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f023 0201 	bic.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f023 0302 	bic.w	r3, r3, #2
 80077cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a20      	ldr	r2, [pc, #128]	; (800785c <TIM_OC1_SetConfig+0xd8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_OC1_SetConfig+0x64>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <TIM_OC1_SetConfig+0xdc>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10c      	bne.n	8007802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f023 0308 	bic.w	r3, r3, #8
 80077ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a15      	ldr	r2, [pc, #84]	; (800785c <TIM_OC1_SetConfig+0xd8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_OC1_SetConfig+0x8e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <TIM_OC1_SetConfig+0xdc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d111      	bne.n	8007836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	621a      	str	r2, [r3, #32]
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	40010000 	.word	0x40010000
 8007860:	40010400 	.word	0x40010400

08007864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f023 0210 	bic.w	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a22      	ldr	r2, [pc, #136]	; (8007948 <TIM_OC2_SetConfig+0xe4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC2_SetConfig+0x68>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a21      	ldr	r2, [pc, #132]	; (800794c <TIM_OC2_SetConfig+0xe8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10d      	bne.n	80078e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <TIM_OC2_SetConfig+0xe4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC2_SetConfig+0x94>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a16      	ldr	r2, [pc, #88]	; (800794c <TIM_OC2_SetConfig+0xe8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d113      	bne.n	8007920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40010400 	.word	0x40010400

08007950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <TIM_OC3_SetConfig+0xe0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_OC3_SetConfig+0x66>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <TIM_OC3_SetConfig+0xe4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d10d      	bne.n	80079d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	021b      	lsls	r3, r3, #8
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <TIM_OC3_SetConfig+0xe0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_OC3_SetConfig+0x92>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <TIM_OC3_SetConfig+0xe4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d113      	bne.n	8007a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	621a      	str	r2, [r3, #32]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40010400 	.word	0x40010400

08007a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	031b      	lsls	r3, r3, #12
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <TIM_OC4_SetConfig+0xa4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d003      	beq.n	8007aa0 <TIM_OC4_SetConfig+0x68>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a11      	ldr	r2, [pc, #68]	; (8007ae0 <TIM_OC4_SetConfig+0xa8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d109      	bne.n	8007ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	019b      	lsls	r3, r3, #6
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40010400 	.word	0x40010400

08007ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f023 030a 	bic.w	r3, r3, #10
 8007b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b087      	sub	sp, #28
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0210 	bic.w	r2, r3, #16
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	031b      	lsls	r3, r3, #12
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f043 0307 	orr.w	r3, r3, #7
 8007bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	609a      	str	r2, [r3, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	021a      	lsls	r2, r3, #8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	609a      	str	r2, [r3, #8]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	401a      	ands	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	431a      	orrs	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <TIM_ResetCallback+0x7c>)
 8007c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <TIM_ResetCallback+0x80>)
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ce8 <TIM_ResetCallback+0x84>)
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a19      	ldr	r2, [pc, #100]	; (8007cec <TIM_ResetCallback+0x88>)
 8007c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <TIM_ResetCallback+0x8c>)
 8007c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a17      	ldr	r2, [pc, #92]	; (8007cf4 <TIM_ResetCallback+0x90>)
 8007c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <TIM_ResetCallback+0x94>)
 8007ca0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a15      	ldr	r2, [pc, #84]	; (8007cfc <TIM_ResetCallback+0x98>)
 8007ca8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a14      	ldr	r2, [pc, #80]	; (8007d00 <TIM_ResetCallback+0x9c>)
 8007cb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <TIM_ResetCallback+0xa0>)
 8007cb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <TIM_ResetCallback+0xa4>)
 8007cc0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <TIM_ResetCallback+0xa8>)
 8007cc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a10      	ldr	r2, [pc, #64]	; (8007d10 <TIM_ResetCallback+0xac>)
 8007cd0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	08002145 	.word	0x08002145
 8007ce4:	0800758f 	.word	0x0800758f
 8007ce8:	08007607 	.word	0x08007607
 8007cec:	0800761b 	.word	0x0800761b
 8007cf0:	080075b7 	.word	0x080075b7
 8007cf4:	080075cb 	.word	0x080075cb
 8007cf8:	080075a3 	.word	0x080075a3
 8007cfc:	080075df 	.word	0x080075df
 8007d00:	080075f3 	.word	0x080075f3
 8007d04:	0800762f 	.word	0x0800762f
 8007d08:	08007eb1 	.word	0x08007eb1
 8007d0c:	08007ec5 	.word	0x08007ec5
 8007d10:	08007ed9 	.word	0x08007ed9

08007d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e05a      	b.n	8007de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a21      	ldr	r2, [pc, #132]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d022      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d01d      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d018      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00e      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d009      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d004      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d10c      	bne.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40000400 	.word	0x40000400
 8007df8:	40000800 	.word	0x40000800
 8007dfc:	40000c00 	.word	0x40000c00
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40001800 	.word	0x40001800

08007e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e03d      	b.n	8007ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e04a      	b.n	8007f94 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d111      	bne.n	8007f2e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa04 	bl	8008320 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <HAL_UART_Init+0xb0>)
 8007f24:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2224      	movs	r2, #36	; 0x24
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fcb4 	bl	80088b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	080023cd 	.word	0x080023cd

08007fa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d17c      	bne.n	80080ba <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <HAL_UART_Transmit+0x2c>
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e075      	b.n	80080bc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Transmit+0x3e>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e06e      	b.n	80080bc <HAL_UART_Transmit+0x11c>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2221      	movs	r2, #33	; 0x21
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ff4:	f7fd f86c 	bl	80050d0 <HAL_GetTick>
 8007ff8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800e:	d108      	bne.n	8008022 <HAL_UART_Transmit+0x82>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	e003      	b.n	800802a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008032:	e02a      	b.n	800808a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 faa3 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e036      	b.n	80080bc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008062:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	3302      	adds	r3, #2
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e007      	b.n	800807c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	3301      	adds	r3, #1
 800807a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800808e:	b29b      	uxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1cf      	bne.n	8008034 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2200      	movs	r2, #0
 800809c:	2140      	movs	r1, #64	; 0x40
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fa73 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e006      	b.n	80080bc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e000      	b.n	80080bc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080ba:	2302      	movs	r3, #2
  }
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	; 0x28
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	4613      	mov	r3, r2
 80080d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	f040 808c 	bne.w	80081fe <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_UART_Receive+0x2e>
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e084      	b.n	8008200 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_UART_Receive+0x40>
 8008100:	2302      	movs	r3, #2
 8008102:	e07d      	b.n	8008200 <HAL_UART_Receive+0x13c>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2222      	movs	r2, #34	; 0x22
 8008116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008120:	f7fc ffd6 	bl	80050d0 <HAL_GetTick>
 8008124:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d108      	bne.n	800814e <HAL_UART_Receive+0x8a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	e003      	b.n	8008156 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800815e:	e043      	b.n	80081e8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	2120      	movs	r1, #32
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fa0d 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e042      	b.n	8008200 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818c:	b29a      	uxth	r2, r3
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	3302      	adds	r3, #2
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e01f      	b.n	80081da <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a2:	d007      	beq.n	80081b4 <HAL_UART_Receive+0xf0>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <HAL_UART_Receive+0xfe>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e008      	b.n	80081d4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b6      	bne.n	8008160 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e000      	b.n	8008200 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
  }
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b20      	cmp	r3, #32
 8008220:	d11d      	bne.n	800825e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_UART_Receive_DMA+0x26>
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e016      	b.n	8008260 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_UART_Receive_DMA+0x38>
 800823c:	2302      	movs	r3, #2
 800823e:	e00f      	b.n	8008260 <HAL_UART_Receive_DMA+0x58>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	461a      	mov	r2, r3
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fa07 	bl	8008668 <UART_Start_Receive_DMA>
 800825a:	4603      	mov	r3, r0
 800825c:	e000      	b.n	8008260 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800825e:	2302      	movs	r3, #2
  }
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a10      	ldr	r2, [pc, #64]	; (800836c <UART_InitCallbacksToDefault+0x4c>)
 800832c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a0f      	ldr	r2, [pc, #60]	; (8008370 <UART_InitCallbacksToDefault+0x50>)
 8008332:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a0f      	ldr	r2, [pc, #60]	; (8008374 <UART_InitCallbacksToDefault+0x54>)
 8008338:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a0e      	ldr	r2, [pc, #56]	; (8008378 <UART_InitCallbacksToDefault+0x58>)
 800833e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a0e      	ldr	r2, [pc, #56]	; (800837c <UART_InitCallbacksToDefault+0x5c>)
 8008344:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a0d      	ldr	r2, [pc, #52]	; (8008380 <UART_InitCallbacksToDefault+0x60>)
 800834a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <UART_InitCallbacksToDefault+0x64>)
 8008350:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a0c      	ldr	r2, [pc, #48]	; (8008388 <UART_InitCallbacksToDefault+0x68>)
 8008356:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a0c      	ldr	r2, [pc, #48]	; (800838c <UART_InitCallbacksToDefault+0x6c>)
 800835c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	0800827d 	.word	0x0800827d
 8008370:	08008269 	.word	0x08008269
 8008374:	080082a5 	.word	0x080082a5
 8008378:	08008291 	.word	0x08008291
 800837c:	080082b9 	.word	0x080082b9
 8008380:	080082cd 	.word	0x080082cd
 8008384:	080082e1 	.word	0x080082e1
 8008388:	080082f5 	.word	0x080082f5
 800838c:	08008309 	.word	0x08008309

08008390 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b09c      	sub	sp, #112	; 0x70
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d172      	bne.n	8008492 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80083ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ae:	2200      	movs	r2, #0
 80083b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80083d4:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3314      	adds	r3, #20
 80083ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	667b      	str	r3, [r7, #100]	; 0x64
 80083fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3314      	adds	r3, #20
 8008404:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008406:	647a      	str	r2, [r7, #68]	; 0x44
 8008408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800840c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e5      	bne.n	80083e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3314      	adds	r3, #20
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	623b      	str	r3, [r7, #32]
   return(result);
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008430:	663b      	str	r3, [r7, #96]	; 0x60
 8008432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3314      	adds	r3, #20
 8008438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800843a:	633a      	str	r2, [r7, #48]	; 0x30
 800843c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e5      	bne.n	800841a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	2b01      	cmp	r3, #1
 800845c:	d119      	bne.n	8008492 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	60fb      	str	r3, [r7, #12]
   return(result);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f023 0310 	bic.w	r3, r3, #16
 8008474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800847e:	61fa      	str	r2, [r7, #28]
 8008480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	69b9      	ldr	r1, [r7, #24]
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	617b      	str	r3, [r7, #20]
   return(result);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e5      	bne.n	800845e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	2b01      	cmp	r3, #1
 8008498:	d107      	bne.n	80084aa <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800849e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084a0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084a2:	4611      	mov	r1, r2
 80084a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084a6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084a8:	e003      	b.n	80084b2 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80084aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084b0:	4798      	blx	r3
}
 80084b2:	bf00      	nop
 80084b4:	3770      	adds	r7, #112	; 0x70
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d109      	bne.n	80084e4 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084d8:	0852      	lsrs	r2, r2, #1
 80084da:	b292      	uxth	r2, r2
 80084dc:	4611      	mov	r1, r2
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084e2:	e003      	b.n	80084ec <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	4798      	blx	r3
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008510:	2b80      	cmp	r3, #128	; 0x80
 8008512:	bf0c      	ite	eq
 8008514:	2301      	moveq	r3, #1
 8008516:	2300      	movne	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b21      	cmp	r3, #33	; 0x21
 8008526:	d108      	bne.n	800853a <UART_DMAError+0x46>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2200      	movs	r2, #0
 8008532:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008534:	68b8      	ldr	r0, [r7, #8]
 8008536:	f000 f931 	bl	800879c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	bf0c      	ite	eq
 8008548:	2301      	moveq	r3, #1
 800854a:	2300      	movne	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b22      	cmp	r3, #34	; 0x22
 800855a:	d108      	bne.n	800856e <UART_DMAError+0x7a>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f000 f93f 	bl	80087ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	f043 0210 	orr.w	r2, r3, #16
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b090      	sub	sp, #64	; 0x40
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859a:	e050      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800859c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a2:	d04c      	beq.n	800863e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <UART_WaitOnFlagUntilTimeout+0x30>
 80085aa:	f7fc fd91 	bl	80050d0 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d241      	bcs.n	800863e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	330c      	adds	r3, #12
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085da:	637a      	str	r2, [r7, #52]	; 0x34
 80085dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e5      	bne.n	80085ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3314      	adds	r3, #20
 80085f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	613b      	str	r3, [r7, #16]
   return(result);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f023 0301 	bic.w	r3, r3, #1
 8008604:	63bb      	str	r3, [r7, #56]	; 0x38
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3314      	adds	r3, #20
 800860c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860e:	623a      	str	r2, [r7, #32]
 8008610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	69f9      	ldr	r1, [r7, #28]
 8008614:	6a3a      	ldr	r2, [r7, #32]
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	61bb      	str	r3, [r7, #24]
   return(result);
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e5      	bne.n	80085ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e00f      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4013      	ands	r3, r2
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	429a      	cmp	r2, r3
 800865a:	d09f      	beq.n	800859c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3740      	adds	r7, #64	; 0x40
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b098      	sub	sp, #96	; 0x60
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2222      	movs	r2, #34	; 0x22
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	4a3e      	ldr	r2, [pc, #248]	; (8008790 <UART_Start_Receive_DMA+0x128>)
 8008696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <UART_Start_Receive_DMA+0x12c>)
 800869e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	4a3c      	ldr	r2, [pc, #240]	; (8008798 <UART_Start_Receive_DMA+0x130>)
 80086a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	2200      	movs	r2, #0
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	f7fc ff10 	bl	80054ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008700:	65bb      	str	r3, [r7, #88]	; 0x58
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800870c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3314      	adds	r3, #20
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	657b      	str	r3, [r7, #84]	; 0x54
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3314      	adds	r3, #20
 800873c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800873e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e5      	bne.n	800871e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	617b      	str	r3, [r7, #20]
   return(result);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008768:	653b      	str	r3, [r7, #80]	; 0x50
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3314      	adds	r3, #20
 8008770:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008772:	627a      	str	r2, [r7, #36]	; 0x24
 8008774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6a39      	ldr	r1, [r7, #32]
 8008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e5      	bne.n	8008752 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3760      	adds	r7, #96	; 0x60
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	08008391 	.word	0x08008391
 8008794:	080084bb 	.word	0x080084bb
 8008798:	080084f5 	.word	0x080084f5

0800879c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	; 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	61ba      	str	r2, [r7, #24]
 80087c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	613b      	str	r3, [r7, #16]
   return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087e0:	bf00      	nop
 80087e2:	3724      	adds	r7, #36	; 0x24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b095      	sub	sp, #84	; 0x54
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800880a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008814:	643a      	str	r2, [r7, #64]	; 0x40
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3314      	adds	r3, #20
 800882e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	61fb      	str	r3, [r7, #28]
   return(result);
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3314      	adds	r3, #20
 8008846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800884a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800884e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e5      	bne.n	8008828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	2b01      	cmp	r3, #1
 8008862:	d119      	bne.n	8008898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	60bb      	str	r3, [r7, #8]
   return(result);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f023 0310 	bic.w	r3, r3, #16
 800887a:	647b      	str	r3, [r7, #68]	; 0x44
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008884:	61ba      	str	r2, [r7, #24]
 8008886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6979      	ldr	r1, [r7, #20]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	613b      	str	r3, [r7, #16]
   return(result);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e5      	bne.n	8008864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088a6:	bf00      	nop
 80088a8:	3754      	adds	r7, #84	; 0x54
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b09f      	sub	sp, #124	; 0x7c
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ca:	68d9      	ldr	r1, [r3, #12]
 80088cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	ea40 0301 	orr.w	r3, r0, r1
 80088d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	431a      	orrs	r2, r3
 80088e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	431a      	orrs	r2, r3
 80088e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80088ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088f8:	f021 010c 	bic.w	r1, r1, #12
 80088fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008902:	430b      	orrs	r3, r1
 8008904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008912:	6999      	ldr	r1, [r3, #24]
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	ea40 0301 	orr.w	r3, r0, r1
 800891c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800891e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4bc5      	ldr	r3, [pc, #788]	; (8008c38 <UART_SetConfig+0x384>)
 8008924:	429a      	cmp	r2, r3
 8008926:	d004      	beq.n	8008932 <UART_SetConfig+0x7e>
 8008928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4bc3      	ldr	r3, [pc, #780]	; (8008c3c <UART_SetConfig+0x388>)
 800892e:	429a      	cmp	r2, r3
 8008930:	d103      	bne.n	800893a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008932:	f7fd fb83 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8008936:	6778      	str	r0, [r7, #116]	; 0x74
 8008938:	e002      	b.n	8008940 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800893a:	f7fd fb6b 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 800893e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008948:	f040 80b6 	bne.w	8008ab8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800894c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800894e:	461c      	mov	r4, r3
 8008950:	f04f 0500 	mov.w	r5, #0
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	1891      	adds	r1, r2, r2
 800895a:	6439      	str	r1, [r7, #64]	; 0x40
 800895c:	415b      	adcs	r3, r3
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
 8008960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008964:	1912      	adds	r2, r2, r4
 8008966:	eb45 0303 	adc.w	r3, r5, r3
 800896a:	f04f 0000 	mov.w	r0, #0
 800896e:	f04f 0100 	mov.w	r1, #0
 8008972:	00d9      	lsls	r1, r3, #3
 8008974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008978:	00d0      	lsls	r0, r2, #3
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	1911      	adds	r1, r2, r4
 8008980:	6639      	str	r1, [r7, #96]	; 0x60
 8008982:	416b      	adcs	r3, r5
 8008984:	667b      	str	r3, [r7, #100]	; 0x64
 8008986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	461a      	mov	r2, r3
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	1891      	adds	r1, r2, r2
 8008992:	63b9      	str	r1, [r7, #56]	; 0x38
 8008994:	415b      	adcs	r3, r3
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800899c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089a0:	f7f8 f93a 	bl	8000c18 <__aeabi_uldivmod>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4ba5      	ldr	r3, [pc, #660]	; (8008c40 <UART_SetConfig+0x38c>)
 80089aa:	fba3 2302 	umull	r2, r3, r3, r2
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	011e      	lsls	r6, r3, #4
 80089b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b4:	461c      	mov	r4, r3
 80089b6:	f04f 0500 	mov.w	r5, #0
 80089ba:	4622      	mov	r2, r4
 80089bc:	462b      	mov	r3, r5
 80089be:	1891      	adds	r1, r2, r2
 80089c0:	6339      	str	r1, [r7, #48]	; 0x30
 80089c2:	415b      	adcs	r3, r3
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
 80089c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089ca:	1912      	adds	r2, r2, r4
 80089cc:	eb45 0303 	adc.w	r3, r5, r3
 80089d0:	f04f 0000 	mov.w	r0, #0
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	00d9      	lsls	r1, r3, #3
 80089da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089de:	00d0      	lsls	r0, r2, #3
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	1911      	adds	r1, r2, r4
 80089e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80089e8:	416b      	adcs	r3, r5
 80089ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	461a      	mov	r2, r3
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	1891      	adds	r1, r2, r2
 80089f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80089fa:	415b      	adcs	r3, r3
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a06:	f7f8 f907 	bl	8000c18 <__aeabi_uldivmod>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4b8c      	ldr	r3, [pc, #560]	; (8008c40 <UART_SetConfig+0x38c>)
 8008a10:	fba3 1302 	umull	r1, r3, r3, r2
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	2164      	movs	r1, #100	; 0x64
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	3332      	adds	r3, #50	; 0x32
 8008a22:	4a87      	ldr	r2, [pc, #540]	; (8008c40 <UART_SetConfig+0x38c>)
 8008a24:	fba2 2303 	umull	r2, r3, r2, r3
 8008a28:	095b      	lsrs	r3, r3, #5
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a30:	441e      	add	r6, r3
 8008a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a34:	4618      	mov	r0, r3
 8008a36:	f04f 0100 	mov.w	r1, #0
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	1894      	adds	r4, r2, r2
 8008a40:	623c      	str	r4, [r7, #32]
 8008a42:	415b      	adcs	r3, r3
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
 8008a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a4a:	1812      	adds	r2, r2, r0
 8008a4c:	eb41 0303 	adc.w	r3, r1, r3
 8008a50:	f04f 0400 	mov.w	r4, #0
 8008a54:	f04f 0500 	mov.w	r5, #0
 8008a58:	00dd      	lsls	r5, r3, #3
 8008a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a5e:	00d4      	lsls	r4, r2, #3
 8008a60:	4622      	mov	r2, r4
 8008a62:	462b      	mov	r3, r5
 8008a64:	1814      	adds	r4, r2, r0
 8008a66:	653c      	str	r4, [r7, #80]	; 0x50
 8008a68:	414b      	adcs	r3, r1
 8008a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	461a      	mov	r2, r3
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	1891      	adds	r1, r2, r2
 8008a78:	61b9      	str	r1, [r7, #24]
 8008a7a:	415b      	adcs	r3, r3
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a86:	f7f8 f8c7 	bl	8000c18 <__aeabi_uldivmod>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4b6c      	ldr	r3, [pc, #432]	; (8008c40 <UART_SetConfig+0x38c>)
 8008a90:	fba3 1302 	umull	r1, r3, r3, r2
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	2164      	movs	r1, #100	; 0x64
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	3332      	adds	r3, #50	; 0x32
 8008aa2:	4a67      	ldr	r2, [pc, #412]	; (8008c40 <UART_SetConfig+0x38c>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	f003 0207 	and.w	r2, r3, #7
 8008aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4432      	add	r2, r6
 8008ab4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ab6:	e0b9      	b.n	8008c2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aba:	461c      	mov	r4, r3
 8008abc:	f04f 0500 	mov.w	r5, #0
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	1891      	adds	r1, r2, r2
 8008ac6:	6139      	str	r1, [r7, #16]
 8008ac8:	415b      	adcs	r3, r3
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ad0:	1912      	adds	r2, r2, r4
 8008ad2:	eb45 0303 	adc.w	r3, r5, r3
 8008ad6:	f04f 0000 	mov.w	r0, #0
 8008ada:	f04f 0100 	mov.w	r1, #0
 8008ade:	00d9      	lsls	r1, r3, #3
 8008ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ae4:	00d0      	lsls	r0, r2, #3
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	eb12 0804 	adds.w	r8, r2, r4
 8008aee:	eb43 0905 	adc.w	r9, r3, r5
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f04f 0100 	mov.w	r1, #0
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	008b      	lsls	r3, r1, #2
 8008b06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b0a:	0082      	lsls	r2, r0, #2
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4649      	mov	r1, r9
 8008b10:	f7f8 f882 	bl	8000c18 <__aeabi_uldivmod>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4b49      	ldr	r3, [pc, #292]	; (8008c40 <UART_SetConfig+0x38c>)
 8008b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	011e      	lsls	r6, r3, #4
 8008b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b24:	4618      	mov	r0, r3
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	1894      	adds	r4, r2, r2
 8008b30:	60bc      	str	r4, [r7, #8]
 8008b32:	415b      	adcs	r3, r3
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b3a:	1812      	adds	r2, r2, r0
 8008b3c:	eb41 0303 	adc.w	r3, r1, r3
 8008b40:	f04f 0400 	mov.w	r4, #0
 8008b44:	f04f 0500 	mov.w	r5, #0
 8008b48:	00dd      	lsls	r5, r3, #3
 8008b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b4e:	00d4      	lsls	r4, r2, #3
 8008b50:	4622      	mov	r2, r4
 8008b52:	462b      	mov	r3, r5
 8008b54:	1814      	adds	r4, r2, r0
 8008b56:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b58:	414b      	adcs	r3, r1
 8008b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f04f 0100 	mov.w	r1, #0
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	008b      	lsls	r3, r1, #2
 8008b70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b74:	0082      	lsls	r2, r0, #2
 8008b76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b7a:	f7f8 f84d 	bl	8000c18 <__aeabi_uldivmod>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4b2f      	ldr	r3, [pc, #188]	; (8008c40 <UART_SetConfig+0x38c>)
 8008b84:	fba3 1302 	umull	r1, r3, r3, r2
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	2164      	movs	r1, #100	; 0x64
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	3332      	adds	r3, #50	; 0x32
 8008b96:	4a2a      	ldr	r2, [pc, #168]	; (8008c40 <UART_SetConfig+0x38c>)
 8008b98:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9c:	095b      	lsrs	r3, r3, #5
 8008b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba2:	441e      	add	r6, r3
 8008ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f04f 0100 	mov.w	r1, #0
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	1894      	adds	r4, r2, r2
 8008bb2:	603c      	str	r4, [r7, #0]
 8008bb4:	415b      	adcs	r3, r3
 8008bb6:	607b      	str	r3, [r7, #4]
 8008bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bbc:	1812      	adds	r2, r2, r0
 8008bbe:	eb41 0303 	adc.w	r3, r1, r3
 8008bc2:	f04f 0400 	mov.w	r4, #0
 8008bc6:	f04f 0500 	mov.w	r5, #0
 8008bca:	00dd      	lsls	r5, r3, #3
 8008bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bd0:	00d4      	lsls	r4, r2, #3
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	eb12 0a00 	adds.w	sl, r2, r0
 8008bda:	eb43 0b01 	adc.w	fp, r3, r1
 8008bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	008b      	lsls	r3, r1, #2
 8008bf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bf6:	0082      	lsls	r2, r0, #2
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	f7f8 f80c 	bl	8000c18 <__aeabi_uldivmod>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <UART_SetConfig+0x38c>)
 8008c06:	fba3 1302 	umull	r1, r3, r3, r2
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	2164      	movs	r1, #100	; 0x64
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	3332      	adds	r3, #50	; 0x32
 8008c18:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <UART_SetConfig+0x38c>)
 8008c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4432      	add	r2, r6
 8008c2a:	609a      	str	r2, [r3, #8]
}
 8008c2c:	bf00      	nop
 8008c2e:	377c      	adds	r7, #124	; 0x7c
 8008c30:	46bd      	mov	sp, r7
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	bf00      	nop
 8008c38:	40011000 	.word	0x40011000
 8008c3c:	40011400 	.word	0x40011400
 8008c40:	51eb851f 	.word	0x51eb851f

08008c44 <__NVIC_SetPriority>:
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db0a      	blt.n	8008c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	490c      	ldr	r1, [pc, #48]	; (8008c90 <__NVIC_SetPriority+0x4c>)
 8008c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c62:	0112      	lsls	r2, r2, #4
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	440b      	add	r3, r1
 8008c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c6c:	e00a      	b.n	8008c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	4908      	ldr	r1, [pc, #32]	; (8008c94 <__NVIC_SetPriority+0x50>)
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	3b04      	subs	r3, #4
 8008c7c:	0112      	lsls	r2, r2, #4
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	440b      	add	r3, r1
 8008c82:	761a      	strb	r2, [r3, #24]
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	e000e100 	.word	0xe000e100
 8008c94:	e000ed00 	.word	0xe000ed00

08008c98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <SysTick_Handler+0x1c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ca0:	f002 fa5e 	bl	800b160 <xTaskGetSchedulerState>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d001      	beq.n	8008cae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008caa:	f003 f945 	bl	800bf38 <xPortSysTickHandler>
  }
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	e000e010 	.word	0xe000e010

08008cb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f06f 0004 	mvn.w	r0, #4
 8008cc2:	f7ff ffbf 	bl	8008c44 <__NVIC_SetPriority>
#endif
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd2:	f3ef 8305 	mrs	r3, IPSR
 8008cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8008cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008cde:	f06f 0305 	mvn.w	r3, #5
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e00c      	b.n	8008d00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ce6:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <osKernelInitialize+0x44>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <osKernelInitialize+0x44>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e002      	b.n	8008d00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d00:	687b      	ldr	r3, [r7, #4]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	200000b4 	.word	0x200000b4

08008d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1a:	f3ef 8305 	mrs	r3, IPSR
 8008d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d26:	f06f 0305 	mvn.w	r3, #5
 8008d2a:	607b      	str	r3, [r7, #4]
 8008d2c:	e010      	b.n	8008d50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <osKernelStart+0x48>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d109      	bne.n	8008d4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d36:	f7ff ffbf 	bl	8008cb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d3a:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <osKernelStart+0x48>)
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d40:	f001 fdb4 	bl	800a8ac <vTaskStartScheduler>
      stat = osOK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	e002      	b.n	8008d50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d50:	687b      	ldr	r3, [r7, #4]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200000b4 	.word	0x200000b4

08008d60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d66:	f3ef 8305 	mrs	r3, IPSR
 8008d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d6c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008d72:	f001 febd 	bl	800aaf0 <xTaskGetTickCountFromISR>
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	e002      	b.n	8008d80 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008d7a:	f001 fea9 	bl	800aad0 <xTaskGetTickCount>
 8008d7e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008d80:	687b      	ldr	r3, [r7, #4]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b08e      	sub	sp, #56	; 0x38
 8008d8e:	af04      	add	r7, sp, #16
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d9a:	f3ef 8305 	mrs	r3, IPSR
 8008d9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008da0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d17e      	bne.n	8008ea4 <osThreadNew+0x11a>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d07b      	beq.n	8008ea4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008dac:	2380      	movs	r3, #128	; 0x80
 8008dae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008db0:	2318      	movs	r3, #24
 8008db2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d045      	beq.n	8008e50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <osThreadNew+0x48>
        name = attr->name;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d008      	beq.n	8008df8 <osThreadNew+0x6e>
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2b38      	cmp	r3, #56	; 0x38
 8008dea:	d805      	bhi.n	8008df8 <osThreadNew+0x6e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <osThreadNew+0x72>
        return (NULL);
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e054      	b.n	8008ea6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	089b      	lsrs	r3, r3, #2
 8008e0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <osThreadNew+0xa8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b5b      	cmp	r3, #91	; 0x5b
 8008e1a:	d90a      	bls.n	8008e32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <osThreadNew+0xa8>
        mem = 1;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	e010      	b.n	8008e54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <osThreadNew+0xca>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d108      	bne.n	8008e54 <osThreadNew+0xca>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <osThreadNew+0xca>
          mem = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	e001      	b.n	8008e54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d110      	bne.n	8008e7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e62:	9202      	str	r2, [sp, #8]
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6a3a      	ldr	r2, [r7, #32]
 8008e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 fa73 	bl	800a35c <xTaskCreateStatic>
 8008e76:	4603      	mov	r3, r0
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	e013      	b.n	8008ea4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d110      	bne.n	8008ea4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	f107 0310 	add.w	r3, r7, #16
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f001 fabe 	bl	800a416 <xTaskCreate>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d001      	beq.n	8008ea4 <osThreadNew+0x11a>
            hTask = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ea4:	693b      	ldr	r3, [r7, #16]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3728      	adds	r7, #40	; 0x28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eba:	f3ef 8305 	mrs	r3, IPSR
 8008ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <osThreadSuspend+0x20>
    stat = osErrorISR;
 8008ec6:	f06f 0305 	mvn.w	r3, #5
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e00b      	b.n	8008ee6 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8008ed4:	f06f 0303 	mvn.w	r3, #3
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e004      	b.n	8008ee6 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8008ee0:	6938      	ldr	r0, [r7, #16]
 8008ee2:	f001 fbdd 	bl	800a6a0 <vTaskSuspend>
  }

  return (stat);
 8008ee6:	697b      	ldr	r3, [r7, #20]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008efc:	f3ef 8305 	mrs	r3, IPSR
 8008f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f02:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <osThreadResume+0x20>
    stat = osErrorISR;
 8008f08:	f06f 0305 	mvn.w	r3, #5
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	e00b      	b.n	8008f28 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d103      	bne.n	8008f1e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8008f16:	f06f 0303 	mvn.w	r3, #3
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	e004      	b.n	8008f28 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8008f22:	6938      	ldr	r0, [r7, #16]
 8008f24:	f001 fc64 	bl	800a7f0 <vTaskResume>
  }

  return (stat);
 8008f28:	697b      	ldr	r3, [r7, #20]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b08a      	sub	sp, #40	; 0x28
 8008f36:	af02      	add	r7, sp, #8
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f42:	f3ef 8305 	mrs	r3, IPSR
 8008f46:	613b      	str	r3, [r7, #16]
  return(result);
 8008f48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d175      	bne.n	800903a <osSemaphoreNew+0x108>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d072      	beq.n	800903a <osSemaphoreNew+0x108>
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d86e      	bhi.n	800903a <osSemaphoreNew+0x108>
    mem = -1;
 8008f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <osSemaphoreNew+0x4c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	2b4f      	cmp	r3, #79	; 0x4f
 8008f76:	d902      	bls.n	8008f7e <osSemaphoreNew+0x4c>
        mem = 1;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	61bb      	str	r3, [r7, #24]
 8008f7c:	e00c      	b.n	8008f98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d108      	bne.n	8008f98 <osSemaphoreNew+0x66>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d104      	bne.n	8008f98 <osSemaphoreNew+0x66>
          mem = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	e001      	b.n	8008f98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9e:	d04c      	beq.n	800903a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d128      	bne.n	8008ff8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10a      	bne.n	8008fc2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	9200      	str	r2, [sp, #0]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f000 fa29 	bl	8009410 <xQueueGenericCreateStatic>
 8008fbe:	61f8      	str	r0, [r7, #28]
 8008fc0:	e005      	b.n	8008fce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f000 fa9a 	bl	8009500 <xQueueGenericCreate>
 8008fcc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d022      	beq.n	800901a <osSemaphoreNew+0xe8>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01f      	beq.n	800901a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	69f8      	ldr	r0, [r7, #28]
 8008fe2:	f000 fb55 	bl	8009690 <xQueueGenericSend>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d016      	beq.n	800901a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008fec:	69f8      	ldr	r0, [r7, #28]
 8008fee:	f000 ffe1 	bl	8009fb4 <vQueueDelete>
            hSemaphore = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	e010      	b.n	800901a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d108      	bne.n	8009010 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	461a      	mov	r2, r3
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fad7 	bl	80095ba <xQueueCreateCountingSemaphoreStatic>
 800900c:	61f8      	str	r0, [r7, #28]
 800900e:	e004      	b.n	800901a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009010:	68b9      	ldr	r1, [r7, #8]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fb08 	bl	8009628 <xQueueCreateCountingSemaphore>
 8009018:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00c      	beq.n	800903a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e001      	b.n	8009032 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009032:	6979      	ldr	r1, [r7, #20]
 8009034:	69f8      	ldr	r0, [r7, #28]
 8009036:	f001 f909 	bl	800a24c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800903a:	69fb      	ldr	r3, [r7, #28]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800905c:	f06f 0303 	mvn.w	r3, #3
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	e039      	b.n	80090d8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009064:	f3ef 8305 	mrs	r3, IPSR
 8009068:	60fb      	str	r3, [r7, #12]
  return(result);
 800906a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800906c:	2b00      	cmp	r3, #0
 800906e:	d022      	beq.n	80090b6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009076:	f06f 0303 	mvn.w	r3, #3
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	e02c      	b.n	80090d8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	461a      	mov	r2, r3
 8009088:	2100      	movs	r1, #0
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f000 ff12 	bl	8009eb4 <xQueueReceiveFromISR>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d003      	beq.n	800909e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009096:	f06f 0302 	mvn.w	r3, #2
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e01c      	b.n	80090d8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d019      	beq.n	80090d8 <osSemaphoreAcquire+0x94>
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <osSemaphoreAcquire+0xa0>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	e010      	b.n	80090d8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6938      	ldr	r0, [r7, #16]
 80090ba:	f000 fdef 	bl	8009c9c <xQueueSemaphoreTake>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d009      	beq.n	80090d8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80090ca:	f06f 0301 	mvn.w	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e002      	b.n	80090d8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80090d2:	f06f 0302 	mvn.w	r3, #2
 80090d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80090d8:	697b      	ldr	r3, [r7, #20]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80090fe:	f06f 0303 	mvn.w	r3, #3
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e02c      	b.n	8009160 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009106:	f3ef 8305 	mrs	r3, IPSR
 800910a:	60fb      	str	r3, [r7, #12]
  return(result);
 800910c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01a      	beq.n	8009148 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009112:	2300      	movs	r3, #0
 8009114:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009116:	f107 0308 	add.w	r3, r7, #8
 800911a:	4619      	mov	r1, r3
 800911c:	6938      	ldr	r0, [r7, #16]
 800911e:	f000 fc50 	bl	80099c2 <xQueueGiveFromISR>
 8009122:	4603      	mov	r3, r0
 8009124:	2b01      	cmp	r3, #1
 8009126:	d003      	beq.n	8009130 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009128:	f06f 0302 	mvn.w	r3, #2
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	e017      	b.n	8009160 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d014      	beq.n	8009160 <osSemaphoreRelease+0x78>
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <osSemaphoreRelease+0x84>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	e00b      	b.n	8009160 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009148:	2300      	movs	r3, #0
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6938      	ldr	r0, [r7, #16]
 8009150:	f000 fa9e 	bl	8009690 <xQueueGenericSend>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d002      	beq.n	8009160 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800915a:	f06f 0302 	mvn.w	r3, #2
 800915e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009160:	697b      	ldr	r3, [r7, #20]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	e000ed04 	.word	0xe000ed04

08009170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a07      	ldr	r2, [pc, #28]	; (800919c <vApplicationGetIdleTaskMemory+0x2c>)
 8009180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4a06      	ldr	r2, [pc, #24]	; (80091a0 <vApplicationGetIdleTaskMemory+0x30>)
 8009186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2280      	movs	r2, #128	; 0x80
 800918c:	601a      	str	r2, [r3, #0]
}
 800918e:	bf00      	nop
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	200000b8 	.word	0x200000b8
 80091a0:	20000114 	.word	0x20000114

080091a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80091b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4a06      	ldr	r2, [pc, #24]	; (80091d4 <vApplicationGetTimerTaskMemory+0x30>)
 80091ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091c2:	601a      	str	r2, [r3, #0]
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000314 	.word	0x20000314
 80091d4:	20000370 	.word	0x20000370

080091d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f103 0208 	add.w	r2, r3, #8
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f103 0208 	add.w	r2, r3, #8
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f103 0208 	add.w	r2, r3, #8
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	601a      	str	r2, [r3, #0]
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009290:	d103      	bne.n	800929a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	e00c      	b.n	80092b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3308      	adds	r3, #8
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e002      	b.n	80092a8 <vListInsert+0x2e>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d2f6      	bcs.n	80092a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	601a      	str	r2, [r3, #0]
}
 80092e0:	bf00      	nop
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6892      	ldr	r2, [r2, #8]
 8009302:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6852      	ldr	r2, [r2, #4]
 800930c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d103      	bne.n	8009320 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800936a:	f002 fd53 	bl	800be14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	441a      	add	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	3b01      	subs	r3, #1
 800939c:	68f9      	ldr	r1, [r7, #12]
 800939e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	441a      	add	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	22ff      	movs	r2, #255	; 0xff
 80093ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d114      	bne.n	80093ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3310      	adds	r3, #16
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 fd09 	bl	800ade4 <xTaskRemoveFromEventList>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d012      	beq.n	80093fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <xQueueGenericReset+0xcc>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	e009      	b.n	80093fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3310      	adds	r3, #16
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fef2 	bl	80091d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff feed 	bl	80091d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093fe:	f002 fd39 	bl	800be74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009402:	2301      	movs	r3, #1
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08e      	sub	sp, #56	; 0x38
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <xQueueGenericCreateStatic+0x52>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <xQueueGenericCreateStatic+0x56>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <xQueueGenericCreateStatic+0x58>
 8009466:	2300      	movs	r3, #0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	623b      	str	r3, [r7, #32]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <xQueueGenericCreateStatic+0x7e>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <xQueueGenericCreateStatic+0x82>
 800948e:	2301      	movs	r3, #1
 8009490:	e000      	b.n	8009494 <xQueueGenericCreateStatic+0x84>
 8009492:	2300      	movs	r3, #0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	61fb      	str	r3, [r7, #28]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094ae:	2350      	movs	r3, #80	; 0x50
 80094b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b50      	cmp	r3, #80	; 0x50
 80094b6:	d00a      	beq.n	80094ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	61bb      	str	r3, [r7, #24]
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00d      	beq.n	80094f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4613      	mov	r3, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f83f 	bl	8009574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3730      	adds	r7, #48	; 0x30
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	; 0x28
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	613b      	str	r3, [r7, #16]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3350      	adds	r3, #80	; 0x50
 8009538:	4618      	mov	r0, r3
 800953a:	f002 fd8d 	bl	800c058 <pvPortMalloc>
 800953e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	3350      	adds	r3, #80	; 0x50
 800954e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009558:	79fa      	ldrb	r2, [r7, #7]
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4613      	mov	r3, r2
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 f805 	bl	8009574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800956a:	69bb      	ldr	r3, [r7, #24]
	}
 800956c:	4618      	mov	r0, r3
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	e002      	b.n	8009596 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095a2:	2101      	movs	r1, #1
 80095a4:	69b8      	ldr	r0, [r7, #24]
 80095a6:	f7ff fecb 	bl	8009340 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b08a      	sub	sp, #40	; 0x28
 80095be:	af02      	add	r7, sp, #8
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	61bb      	str	r3, [r7, #24]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d90a      	bls.n	8009600 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	617b      	str	r3, [r7, #20]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009600:	2302      	movs	r3, #2
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff ff00 	bl	8009410 <xQueueGenericCreateStatic>
 8009610:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800961e:	69fb      	ldr	r3, [r7, #28]
	}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	613b      	str	r3, [r7, #16]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	429a      	cmp	r2, r3
 8009654:	d90a      	bls.n	800966c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60fb      	str	r3, [r7, #12]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800966c:	2202      	movs	r2, #2
 800966e:	2100      	movs	r1, #0
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff ff45 	bl	8009500 <xQueueGenericCreate>
 8009676:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009684:	697b      	ldr	r3, [r7, #20]
	}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08e      	sub	sp, #56	; 0x38
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800969e:	2300      	movs	r3, #0
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <xQueueGenericSend+0x32>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <xQueueGenericSend+0x40>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <xQueueGenericSend+0x44>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e000      	b.n	80096d6 <xQueueGenericSend+0x46>
 80096d4:	2300      	movs	r3, #0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <xQueueGenericSend+0x60>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x6e>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <xQueueGenericSend+0x72>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <xQueueGenericSend+0x74>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <xQueueGenericSend+0x8e>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	623b      	str	r3, [r7, #32]
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971e:	f001 fd1f 	bl	800b160 <xTaskGetSchedulerState>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <xQueueGenericSend+0x9e>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0xa2>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0xa4>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xQueueGenericSend+0xbe>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61fb      	str	r3, [r7, #28]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974e:	f002 fb61 	bl	800be14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <xQueueGenericSend+0xd4>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d129      	bne.n	80097b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800976a:	f000 fc5e 	bl	800a02a <prvCopyDataToQueue>
 800976e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	3324      	adds	r3, #36	; 0x24
 800977c:	4618      	mov	r0, r3
 800977e:	f001 fb31 	bl	800ade4 <xTaskRemoveFromEventList>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d013      	beq.n	80097b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009788:	4b3f      	ldr	r3, [pc, #252]	; (8009888 <xQueueGenericSend+0x1f8>)
 800978a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	e00a      	b.n	80097b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097a0:	4b39      	ldr	r3, [pc, #228]	; (8009888 <xQueueGenericSend+0x1f8>)
 80097a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097b0:	f002 fb60 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e063      	b.n	8009880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097be:	f002 fb59 	bl	800be74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e05c      	b.n	8009880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d106      	bne.n	80097da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097cc:	f107 0314 	add.w	r3, r7, #20
 80097d0:	4618      	mov	r0, r3
 80097d2:	f001 fb6b 	bl	800aeac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d6:	2301      	movs	r3, #1
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097da:	f002 fb4b 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097de:	f001 f8cb 	bl	800a978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097e2:	f002 fb17 	bl	800be14 <vPortEnterCritical>
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f2:	d103      	bne.n	80097fc <xQueueGenericSend+0x16c>
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009802:	b25b      	sxtb	r3, r3
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009808:	d103      	bne.n	8009812 <xQueueGenericSend+0x182>
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009812:	f002 fb2f 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009816:	1d3a      	adds	r2, r7, #4
 8009818:	f107 0314 	add.w	r3, r7, #20
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f001 fb5a 	bl	800aed8 <xTaskCheckForTimeOut>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d124      	bne.n	8009874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800982a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800982c:	f000 fcf5 	bl	800a21a <prvIsQueueFull>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d018      	beq.n	8009868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	3310      	adds	r3, #16
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f001 fa80 	bl	800ad44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009846:	f000 fc80 	bl	800a14a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800984a:	f001 f8a3 	bl	800a994 <xTaskResumeAll>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	f47f af7c 	bne.w	800974e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <xQueueGenericSend+0x1f8>)
 8009858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	e772      	b.n	800974e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800986a:	f000 fc6e 	bl	800a14a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986e:	f001 f891 	bl	800a994 <xTaskResumeAll>
 8009872:	e76c      	b.n	800974e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009876:	f000 fc68 	bl	800a14a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800987a:	f001 f88b 	bl	800a994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800987e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009880:	4618      	mov	r0, r3
 8009882:	3738      	adds	r7, #56	; 0x38
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b090      	sub	sp, #64	; 0x40
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d103      	bne.n	80098c8 <xQueueGenericSendFromISR+0x3c>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <xQueueGenericSendFromISR+0x40>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <xQueueGenericSendFromISR+0x42>
 80098cc:	2300      	movs	r3, #0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d103      	bne.n	80098f6 <xQueueGenericSendFromISR+0x6a>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <xQueueGenericSendFromISR+0x6e>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueGenericSendFromISR+0x70>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	623b      	str	r3, [r7, #32]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009916:	f002 fb5f 	bl	800bfd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800991a:	f3ef 8211 	mrs	r2, BASEPRI
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	61fa      	str	r2, [r7, #28]
 8009930:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009932:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993e:	429a      	cmp	r2, r3
 8009940:	d302      	bcc.n	8009948 <xQueueGenericSendFromISR+0xbc>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d12f      	bne.n	80099a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800995e:	f000 fb64 	bl	800a02a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800996a:	d112      	bne.n	8009992 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b00      	cmp	r3, #0
 8009972:	d016      	beq.n	80099a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	3324      	adds	r3, #36	; 0x24
 8009978:	4618      	mov	r0, r3
 800997a:	f001 fa33 	bl	800ade4 <xTaskRemoveFromEventList>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00e      	beq.n	80099a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e007      	b.n	80099a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009996:	3301      	adds	r3, #1
 8009998:	b2db      	uxtb	r3, r3
 800999a:	b25a      	sxtb	r2, r3
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099a2:	2301      	movs	r3, #1
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099a6:	e001      	b.n	80099ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3740      	adds	r7, #64	; 0x40
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b08e      	sub	sp, #56	; 0x38
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	623b      	str	r3, [r7, #32]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00a      	beq.n	8009a0a <xQueueGiveFromISR+0x48>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	61fb      	str	r3, [r7, #28]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d103      	bne.n	8009a1a <xQueueGiveFromISR+0x58>
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <xQueueGiveFromISR+0x5c>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <xQueueGiveFromISR+0x5e>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	61bb      	str	r3, [r7, #24]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a3a:	f002 facd 	bl	800bfd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617a      	str	r2, [r7, #20]
 8009a54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d22b      	bcs.n	8009ac2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a84:	d112      	bne.n	8009aac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d016      	beq.n	8009abc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	3324      	adds	r3, #36	; 0x24
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f9a6 	bl	800ade4 <xTaskRemoveFromEventList>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00e      	beq.n	8009abc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e007      	b.n	8009abc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	b25a      	sxtb	r2, r3
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009abc:	2301      	movs	r3, #1
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac0:	e001      	b.n	8009ac6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f383 8811 	msr	BASEPRI, r3
}
 8009ad0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3738      	adds	r7, #56	; 0x38
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08c      	sub	sp, #48	; 0x30
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <xQueueReceive+0x30>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	623b      	str	r3, [r7, #32]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d103      	bne.n	8009b1a <xQueueReceive+0x3e>
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <xQueueReceive+0x42>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <xQueueReceive+0x44>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <xQueueReceive+0x5e>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	61fb      	str	r3, [r7, #28]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b3a:	f001 fb11 	bl	800b160 <xTaskGetSchedulerState>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <xQueueReceive+0x6e>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <xQueueReceive+0x72>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <xQueueReceive+0x74>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xQueueReceive+0x8e>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	61bb      	str	r3, [r7, #24]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b6a:	f002 f953 	bl	800be14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d01f      	beq.n	8009bba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7e:	f000 fabe 	bl	800a0fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1e5a      	subs	r2, r3, #1
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00f      	beq.n	8009bb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	3310      	adds	r3, #16
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 f924 	bl	800ade4 <xTaskRemoveFromEventList>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ba2:	4b3d      	ldr	r3, [pc, #244]	; (8009c98 <xQueueReceive+0x1bc>)
 8009ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bb2:	f002 f95f 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e069      	b.n	8009c8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d103      	bne.n	8009bc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bc0:	f002 f958 	bl	800be74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e062      	b.n	8009c8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bce:	f107 0310 	add.w	r3, r7, #16
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 f96a 	bl	800aeac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bdc:	f002 f94a 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009be0:	f000 feca 	bl	800a978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009be4:	f002 f916 	bl	800be14 <vPortEnterCritical>
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bee:	b25b      	sxtb	r3, r3
 8009bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf4:	d103      	bne.n	8009bfe <xQueueReceive+0x122>
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c0a:	d103      	bne.n	8009c14 <xQueueReceive+0x138>
 8009c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c14:	f002 f92e 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c18:	1d3a      	adds	r2, r7, #4
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 f959 	bl	800aed8 <xTaskCheckForTimeOut>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d123      	bne.n	8009c74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2e:	f000 fade 	bl	800a1ee <prvIsQueueEmpty>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d017      	beq.n	8009c68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	3324      	adds	r3, #36	; 0x24
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 f87f 	bl	800ad44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c48:	f000 fa7f 	bl	800a14a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c4c:	f000 fea2 	bl	800a994 <xTaskResumeAll>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d189      	bne.n	8009b6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c56:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <xQueueReceive+0x1bc>)
 8009c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	e780      	b.n	8009b6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c6a:	f000 fa6e 	bl	800a14a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c6e:	f000 fe91 	bl	800a994 <xTaskResumeAll>
 8009c72:	e77a      	b.n	8009b6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c76:	f000 fa68 	bl	800a14a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c7a:	f000 fe8b 	bl	800a994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c80:	f000 fab5 	bl	800a1ee <prvIsQueueEmpty>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f43f af6f 	beq.w	8009b6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3730      	adds	r7, #48	; 0x30
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	623b      	str	r3, [r7, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	61fb      	str	r3, [r7, #28]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cec:	f001 fa38 	bl	800b160 <xTaskGetSchedulerState>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d102      	bne.n	8009cfc <xQueueSemaphoreTake+0x60>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <xQueueSemaphoreTake+0x64>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <xQueueSemaphoreTake+0x66>
 8009d00:	2300      	movs	r3, #0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	61bb      	str	r3, [r7, #24]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d1c:	f002 f87a 	bl	800be14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d024      	beq.n	8009d76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	1e5a      	subs	r2, r3, #1
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d3c:	f001 fb86 	bl	800b44c <pvTaskIncrementMutexHeldCount>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00f      	beq.n	8009d6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	3310      	adds	r3, #16
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 f846 	bl	800ade4 <xTaskRemoveFromEventList>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d5e:	4b54      	ldr	r3, [pc, #336]	; (8009eb0 <xQueueSemaphoreTake+0x214>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d6e:	f002 f881 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e097      	b.n	8009ea6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d111      	bne.n	8009da0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	617b      	str	r3, [r7, #20]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d98:	f002 f86c 	bl	800be74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e082      	b.n	8009ea6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d106      	bne.n	8009db4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 f87e 	bl	800aeac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009db0:	2301      	movs	r3, #1
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009db4:	f002 f85e 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009db8:	f000 fdde 	bl	800a978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dbc:	f002 f82a 	bl	800be14 <vPortEnterCritical>
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dc6:	b25b      	sxtb	r3, r3
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dcc:	d103      	bne.n	8009dd6 <xQueueSemaphoreTake+0x13a>
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de2:	d103      	bne.n	8009dec <xQueueSemaphoreTake+0x150>
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dec:	f002 f842 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df0:	463a      	mov	r2, r7
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 f86d 	bl	800aed8 <xTaskCheckForTimeOut>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d132      	bne.n	8009e6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e06:	f000 f9f2 	bl	800a1ee <prvIsQueueEmpty>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d026      	beq.n	8009e5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d109      	bne.n	8009e2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e18:	f001 fffc 	bl	800be14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f9bb 	bl	800b19c <xTaskPriorityInherit>
 8009e26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e28:	f002 f824 	bl	800be74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 ff85 	bl	800ad44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e3c:	f000 f985 	bl	800a14a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e40:	f000 fda8 	bl	800a994 <xTaskResumeAll>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f47f af68 	bne.w	8009d1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e4c:	4b18      	ldr	r3, [pc, #96]	; (8009eb0 <xQueueSemaphoreTake+0x214>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	e75e      	b.n	8009d1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e60:	f000 f973 	bl	800a14a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e64:	f000 fd96 	bl	800a994 <xTaskResumeAll>
 8009e68:	e758      	b.n	8009d1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e6c:	f000 f96d 	bl	800a14a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e70:	f000 fd90 	bl	800a994 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e76:	f000 f9ba 	bl	800a1ee <prvIsQueueEmpty>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f43f af4d 	beq.w	8009d1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00d      	beq.n	8009ea4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009e88:	f001 ffc4 	bl	800be14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e8e:	f000 f8b4 	bl	8009ffa <prvGetDisinheritPriorityAfterTimeout>
 8009e92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fa54 	bl	800b348 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ea0:	f001 ffe8 	bl	800be74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3738      	adds	r7, #56	; 0x38
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	e000ed04 	.word	0xe000ed04

08009eb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08e      	sub	sp, #56	; 0x38
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	623b      	str	r3, [r7, #32]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <xQueueReceiveFromISR+0x3a>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <xQueueReceiveFromISR+0x3e>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <xQueueReceiveFromISR+0x40>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61fb      	str	r3, [r7, #28]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f0e:	f002 f863 	bl	800bfd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009f12:	f3ef 8211 	mrs	r2, BASEPRI
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	61ba      	str	r2, [r7, #24]
 8009f28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d02f      	beq.n	8009f9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f48:	f000 f8d9 	bl	800a0fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	1e5a      	subs	r2, r3, #1
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f5c:	d112      	bne.n	8009f84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d016      	beq.n	8009f94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	3310      	adds	r3, #16
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 ff3a 	bl	800ade4 <xTaskRemoveFromEventList>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00e      	beq.n	8009f94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e007      	b.n	8009f94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f88:	3301      	adds	r3, #1
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	b25a      	sxtb	r2, r3
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f94:	2301      	movs	r3, #1
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
 8009f98:	e001      	b.n	8009f9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f383 8811 	msr	BASEPRI, r3
}
 8009fa8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3738      	adds	r7, #56	; 0x38
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <vQueueDelete+0x28>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	60bb      	str	r3, [r7, #8]
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f95f 	bl	800a2a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f002 f8ff 	bl	800c1f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009ff2:	bf00      	nop
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b085      	sub	sp, #20
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e001      	b.n	800a01c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a01c:	68fb      	ldr	r3, [r7, #12]
	}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10d      	bne.n	800a064 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d14d      	bne.n	800a0ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	4618      	mov	r0, r3
 800a056:	f001 f909 	bl	800b26c <xTaskPriorityDisinherit>
 800a05a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	609a      	str	r2, [r3, #8]
 800a062:	e043      	b.n	800a0ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d119      	bne.n	800a09e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6858      	ldr	r0, [r3, #4]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	461a      	mov	r2, r3
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	f002 fa0b 	bl	800c490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	429a      	cmp	r2, r3
 800a092:	d32b      	bcc.n	800a0ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	605a      	str	r2, [r3, #4]
 800a09c:	e026      	b.n	800a0ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68d8      	ldr	r0, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	f002 f9f1 	bl	800c490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	425b      	negs	r3, r3
 800a0b8:	441a      	add	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d207      	bcs.n	800a0da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	425b      	negs	r3, r3
 800a0d4:	441a      	add	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d105      	bne.n	800a0ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0f4:	697b      	ldr	r3, [r7, #20]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d018      	beq.n	800a142 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a118:	441a      	add	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	429a      	cmp	r2, r3
 800a128:	d303      	bcc.n	800a132 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68d9      	ldr	r1, [r3, #12]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	461a      	mov	r2, r3
 800a13c:	6838      	ldr	r0, [r7, #0]
 800a13e:	f002 f9a7 	bl	800c490 <memcpy>
	}
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a152:	f001 fe5f 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a15c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a15e:	e011      	b.n	800a184 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d012      	beq.n	800a18e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3324      	adds	r3, #36	; 0x24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fe39 	bl	800ade4 <xTaskRemoveFromEventList>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a178:	f000 ff10 	bl	800af9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	3b01      	subs	r3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dce9      	bgt.n	800a160 <prvUnlockQueue+0x16>
 800a18c:	e000      	b.n	800a190 <prvUnlockQueue+0x46>
					break;
 800a18e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	22ff      	movs	r2, #255	; 0xff
 800a194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a198:	f001 fe6c 	bl	800be74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a19c:	f001 fe3a 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1a8:	e011      	b.n	800a1ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d012      	beq.n	800a1d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3310      	adds	r3, #16
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fe14 	bl	800ade4 <xTaskRemoveFromEventList>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1c2:	f000 feeb 	bl	800af9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dce9      	bgt.n	800a1aa <prvUnlockQueue+0x60>
 800a1d6:	e000      	b.n	800a1da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	22ff      	movs	r2, #255	; 0xff
 800a1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1e2:	f001 fe47 	bl	800be74 <vPortExitCritical>
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1f6:	f001 fe0d 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e001      	b.n	800a20c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a20c:	f001 fe32 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a210:	68fb      	ldr	r3, [r7, #12]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a222:	f001 fdf7 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	429a      	cmp	r2, r3
 800a230:	d102      	bne.n	800a238 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a232:	2301      	movs	r3, #1
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	e001      	b.n	800a23c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a23c:	f001 fe1a 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a240:	68fb      	ldr	r3, [r7, #12]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e014      	b.n	800a286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a25c:	4a0f      	ldr	r2, [pc, #60]	; (800a29c <vQueueAddToRegistry+0x50>)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10b      	bne.n	800a280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a268:	490c      	ldr	r1, [pc, #48]	; (800a29c <vQueueAddToRegistry+0x50>)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a272:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <vQueueAddToRegistry+0x50>)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	4413      	add	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a27e:	e006      	b.n	800a28e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b07      	cmp	r3, #7
 800a28a:	d9e7      	bls.n	800a25c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20005288 	.word	0x20005288

0800a2a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e016      	b.n	800a2dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2ae:	4a10      	ldr	r2, [pc, #64]	; (800a2f0 <vQueueUnregisterQueue+0x50>)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	4413      	add	r3, r2
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d10b      	bne.n	800a2d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a2be:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <vQueueUnregisterQueue+0x50>)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a2c8:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <vQueueUnregisterQueue+0x50>)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
				break;
 800a2d4:	e006      	b.n	800a2e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b07      	cmp	r3, #7
 800a2e0:	d9e5      	bls.n	800a2ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	20005288 	.word	0x20005288

0800a2f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a304:	f001 fd86 	bl	800be14 <vPortEnterCritical>
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a30e:	b25b      	sxtb	r3, r3
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a314:	d103      	bne.n	800a31e <vQueueWaitForMessageRestricted+0x2a>
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a324:	b25b      	sxtb	r3, r3
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a32a:	d103      	bne.n	800a334 <vQueueWaitForMessageRestricted+0x40>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a334:	f001 fd9e 	bl	800be74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d106      	bne.n	800a34e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	3324      	adds	r3, #36	; 0x24
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fd1f 	bl	800ad8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a34e:	6978      	ldr	r0, [r7, #20]
 800a350:	f7ff fefb 	bl	800a14a <prvUnlockQueue>
	}
 800a354:	bf00      	nop
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	; 0x38
 800a360:	af04      	add	r7, sp, #16
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	623b      	str	r3, [r7, #32]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	61fb      	str	r3, [r7, #28]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3a2:	235c      	movs	r3, #92	; 0x5c
 800a3a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b5c      	cmp	r3, #92	; 0x5c
 800a3aa:	d00a      	beq.n	800a3c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	61bb      	str	r3, [r7, #24]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01e      	beq.n	800a408 <xTaskCreateStatic+0xac>
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01b      	beq.n	800a408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	2202      	movs	r2, #2
 800a3de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9303      	str	r3, [sp, #12]
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	9302      	str	r3, [sp, #8]
 800a3ea:	f107 0314 	add.w	r3, r7, #20
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	68b9      	ldr	r1, [r7, #8]
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f850 	bl	800a4a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a402:	f000 f8dd 	bl	800a5c0 <prvAddNewTaskToReadyList>
 800a406:	e001      	b.n	800a40c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a40c:	697b      	ldr	r3, [r7, #20]
	}
 800a40e:	4618      	mov	r0, r3
 800a410:	3728      	adds	r7, #40	; 0x28
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a416:	b580      	push	{r7, lr}
 800a418:	b08c      	sub	sp, #48	; 0x30
 800a41a:	af04      	add	r7, sp, #16
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	603b      	str	r3, [r7, #0]
 800a422:	4613      	mov	r3, r2
 800a424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a426:	88fb      	ldrh	r3, [r7, #6]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 fe14 	bl	800c058 <pvPortMalloc>
 800a430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a438:	205c      	movs	r0, #92	; 0x5c
 800a43a:	f001 fe0d 	bl	800c058 <pvPortMalloc>
 800a43e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	631a      	str	r2, [r3, #48]	; 0x30
 800a44c:	e005      	b.n	800a45a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a44e:	6978      	ldr	r0, [r7, #20]
 800a450:	f001 fece 	bl	800c1f0 <vPortFree>
 800a454:	e001      	b.n	800a45a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d017      	beq.n	800a490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f80e 	bl	800a4a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a484:	69f8      	ldr	r0, [r7, #28]
 800a486:	f000 f89b 	bl	800a5c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a48a:	2301      	movs	r3, #1
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	e002      	b.n	800a496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a496:	69bb      	ldr	r3, [r7, #24]
	}
 800a498:	4618      	mov	r0, r3
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	21a5      	movs	r1, #165	; 0xa5
 800a4ba:	f001 fff7 	bl	800c4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f023 0307 	bic.w	r3, r3, #7
 800a4d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	617b      	str	r3, [r7, #20]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d01f      	beq.n	800a53e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4fe:	2300      	movs	r3, #0
 800a500:	61fb      	str	r3, [r7, #28]
 800a502:	e012      	b.n	800a52a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	7819      	ldrb	r1, [r3, #0]
 800a50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	4413      	add	r3, r2
 800a512:	3334      	adds	r3, #52	; 0x34
 800a514:	460a      	mov	r2, r1
 800a516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	4413      	add	r3, r2
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d006      	beq.n	800a532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	3301      	adds	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b0f      	cmp	r3, #15
 800a52e:	d9e9      	bls.n	800a504 <prvInitialiseNewTask+0x64>
 800a530:	e000      	b.n	800a534 <prvInitialiseNewTask+0x94>
			{
				break;
 800a532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a53c:	e003      	b.n	800a546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	2b37      	cmp	r3, #55	; 0x37
 800a54a:	d901      	bls.n	800a550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a54c:	2337      	movs	r3, #55	; 0x37
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	2200      	movs	r2, #0
 800a560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	3304      	adds	r3, #4
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fe56 	bl	8009218 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	3318      	adds	r3, #24
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fe51 	bl	8009218 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	2200      	movs	r2, #0
 800a590:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	68f9      	ldr	r1, [r7, #12]
 800a59e:	69b8      	ldr	r0, [r7, #24]
 800a5a0:	f001 fb0a 	bl	800bbb8 <pxPortInitialiseStack>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5c8:	f001 fc24 	bl	800be14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5cc:	4b2d      	ldr	r3, [pc, #180]	; (800a684 <prvAddNewTaskToReadyList+0xc4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	4a2c      	ldr	r2, [pc, #176]	; (800a684 <prvAddNewTaskToReadyList+0xc4>)
 800a5d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5d6:	4b2c      	ldr	r3, [pc, #176]	; (800a688 <prvAddNewTaskToReadyList+0xc8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d109      	bne.n	800a5f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5de:	4a2a      	ldr	r2, [pc, #168]	; (800a688 <prvAddNewTaskToReadyList+0xc8>)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5e4:	4b27      	ldr	r3, [pc, #156]	; (800a684 <prvAddNewTaskToReadyList+0xc4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d110      	bne.n	800a60e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5ec:	f000 fcfa 	bl	800afe4 <prvInitialiseTaskLists>
 800a5f0:	e00d      	b.n	800a60e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5f2:	4b26      	ldr	r3, [pc, #152]	; (800a68c <prvAddNewTaskToReadyList+0xcc>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5fa:	4b23      	ldr	r3, [pc, #140]	; (800a688 <prvAddNewTaskToReadyList+0xc8>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	429a      	cmp	r2, r3
 800a606:	d802      	bhi.n	800a60e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a608:	4a1f      	ldr	r2, [pc, #124]	; (800a688 <prvAddNewTaskToReadyList+0xc8>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a60e:	4b20      	ldr	r3, [pc, #128]	; (800a690 <prvAddNewTaskToReadyList+0xd0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <prvAddNewTaskToReadyList+0xd0>)
 800a616:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a618:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <prvAddNewTaskToReadyList+0xd0>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a624:	4b1b      	ldr	r3, [pc, #108]	; (800a694 <prvAddNewTaskToReadyList+0xd4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d903      	bls.n	800a634 <prvAddNewTaskToReadyList+0x74>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	4a18      	ldr	r2, [pc, #96]	; (800a694 <prvAddNewTaskToReadyList+0xd4>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4a15      	ldr	r2, [pc, #84]	; (800a698 <prvAddNewTaskToReadyList+0xd8>)
 800a642:	441a      	add	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3304      	adds	r3, #4
 800a648:	4619      	mov	r1, r3
 800a64a:	4610      	mov	r0, r2
 800a64c:	f7fe fdf1 	bl	8009232 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a650:	f001 fc10 	bl	800be74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a654:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <prvAddNewTaskToReadyList+0xcc>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00e      	beq.n	800a67a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <prvAddNewTaskToReadyList+0xc8>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	429a      	cmp	r2, r3
 800a668:	d207      	bcs.n	800a67a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a66a:	4b0c      	ldr	r3, [pc, #48]	; (800a69c <prvAddNewTaskToReadyList+0xdc>)
 800a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000c44 	.word	0x20000c44
 800a688:	20000770 	.word	0x20000770
 800a68c:	20000c50 	.word	0x20000c50
 800a690:	20000c60 	.word	0x20000c60
 800a694:	20000c4c 	.word	0x20000c4c
 800a698:	20000774 	.word	0x20000774
 800a69c:	e000ed04 	.word	0xe000ed04

0800a6a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a6a8:	f001 fbb4 	bl	800be14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <vTaskSuspend+0x18>
 800a6b2:	4b30      	ldr	r3, [pc, #192]	; (800a774 <vTaskSuspend+0xd4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	e000      	b.n	800a6ba <vTaskSuspend+0x1a>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fe13 	bl	80092ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d004      	beq.n	800a6d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3318      	adds	r3, #24
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fe0a 	bl	80092ec <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4826      	ldr	r0, [pc, #152]	; (800a778 <vTaskSuspend+0xd8>)
 800a6e0:	f7fe fda7 	bl	8009232 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d103      	bne.n	800a6f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a6f8:	f001 fbbc 	bl	800be74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a6fc:	4b1f      	ldr	r3, [pc, #124]	; (800a77c <vTaskSuspend+0xdc>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a704:	f001 fb86 	bl	800be14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a708:	f000 fd0a 	bl	800b120 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a70c:	f001 fbb2 	bl	800be74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a710:	4b18      	ldr	r3, [pc, #96]	; (800a774 <vTaskSuspend+0xd4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	429a      	cmp	r2, r3
 800a718:	d127      	bne.n	800a76a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <vTaskSuspend+0xdc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d017      	beq.n	800a752 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a722:	4b17      	ldr	r3, [pc, #92]	; (800a780 <vTaskSuspend+0xe0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <vTaskSuspend+0xa0>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a740:	4b10      	ldr	r3, [pc, #64]	; (800a784 <vTaskSuspend+0xe4>)
 800a742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a750:	e00b      	b.n	800a76a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <vTaskSuspend+0xd8>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <vTaskSuspend+0xe8>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d103      	bne.n	800a766 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a75e:	4b05      	ldr	r3, [pc, #20]	; (800a774 <vTaskSuspend+0xd4>)
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
	}
 800a764:	e001      	b.n	800a76a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a766:	f000 fa8f 	bl	800ac88 <vTaskSwitchContext>
	}
 800a76a:	bf00      	nop
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000770 	.word	0x20000770
 800a778:	20000c30 	.word	0x20000c30
 800a77c:	20000c50 	.word	0x20000c50
 800a780:	20000c6c 	.word	0x20000c6c
 800a784:	e000ed04 	.word	0xe000ed04
 800a788:	20000c44 	.word	0x20000c44

0800a78c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	60fb      	str	r3, [r7, #12]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <prvTaskIsTaskSuspended+0x5c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10a      	bne.n	800a7d8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <prvTaskIsTaskSuspended+0x60>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d005      	beq.n	800a7d8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7d8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000c30 	.word	0x20000c30
 800a7ec:	20000c04 	.word	0x20000c04

0800a7f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <vTaskResume+0x28>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	60bb      	str	r3, [r7, #8]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a818:	4b20      	ldr	r3, [pc, #128]	; (800a89c <vTaskResume+0xac>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d038      	beq.n	800a894 <vTaskResume+0xa4>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d035      	beq.n	800a894 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a828:	f001 faf4 	bl	800be14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff ffad 	bl	800a78c <prvTaskIsTaskSuspended>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d02b      	beq.n	800a890 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe fd55 	bl	80092ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <vTaskResume+0xb0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d903      	bls.n	800a856 <vTaskResume+0x66>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	4a13      	ldr	r2, [pc, #76]	; (800a8a0 <vTaskResume+0xb0>)
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4a10      	ldr	r2, [pc, #64]	; (800a8a4 <vTaskResume+0xb4>)
 800a864:	441a      	add	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3304      	adds	r3, #4
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7fe fce0 	bl	8009232 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <vTaskResume+0xac>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d307      	bcc.n	800a890 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a880:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <vTaskResume+0xb8>)
 800a882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a890:	f001 faf0 	bl	800be74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a894:	bf00      	nop
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000770 	.word	0x20000770
 800a8a0:	20000c4c 	.word	0x20000c4c
 800a8a4:	20000774 	.word	0x20000774
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	; 0x28
 800a8b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8ba:	463a      	mov	r2, r7
 800a8bc:	1d39      	adds	r1, r7, #4
 800a8be:	f107 0308 	add.w	r3, r7, #8
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fc54 	bl	8009170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	9202      	str	r2, [sp, #8]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	460a      	mov	r2, r1
 800a8da:	4921      	ldr	r1, [pc, #132]	; (800a960 <vTaskStartScheduler+0xb4>)
 800a8dc:	4821      	ldr	r0, [pc, #132]	; (800a964 <vTaskStartScheduler+0xb8>)
 800a8de:	f7ff fd3d 	bl	800a35c <xTaskCreateStatic>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4a20      	ldr	r2, [pc, #128]	; (800a968 <vTaskStartScheduler+0xbc>)
 800a8e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8e8:	4b1f      	ldr	r3, [pc, #124]	; (800a968 <vTaskStartScheduler+0xbc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	e001      	b.n	800a8fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d102      	bne.n	800a906 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a900:	f000 fe0c 	bl	800b51c <xTimerCreateTimerTask>
 800a904:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d116      	bne.n	800a93a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	613b      	str	r3, [r7, #16]
}
 800a91e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a920:	4b12      	ldr	r3, [pc, #72]	; (800a96c <vTaskStartScheduler+0xc0>)
 800a922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a926:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a928:	4b11      	ldr	r3, [pc, #68]	; (800a970 <vTaskStartScheduler+0xc4>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a92e:	4b11      	ldr	r3, [pc, #68]	; (800a974 <vTaskStartScheduler+0xc8>)
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a934:	f001 f9cc 	bl	800bcd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a938:	e00e      	b.n	800a958 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a940:	d10a      	bne.n	800a958 <vTaskStartScheduler+0xac>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	60fb      	str	r3, [r7, #12]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <vTaskStartScheduler+0xaa>
}
 800a958:	bf00      	nop
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	0800e69c 	.word	0x0800e69c
 800a964:	0800afb5 	.word	0x0800afb5
 800a968:	20000c68 	.word	0x20000c68
 800a96c:	20000c64 	.word	0x20000c64
 800a970:	20000c50 	.word	0x20000c50
 800a974:	20000c48 	.word	0x20000c48

0800a978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a97c:	4b04      	ldr	r3, [pc, #16]	; (800a990 <vTaskSuspendAll+0x18>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	4a03      	ldr	r2, [pc, #12]	; (800a990 <vTaskSuspendAll+0x18>)
 800a984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a986:	bf00      	nop
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000c6c 	.word	0x20000c6c

0800a994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9a2:	4b42      	ldr	r3, [pc, #264]	; (800aaac <xTaskResumeAll+0x118>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	603b      	str	r3, [r7, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9c0:	f001 fa28 	bl	800be14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9c4:	4b39      	ldr	r3, [pc, #228]	; (800aaac <xTaskResumeAll+0x118>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	4a38      	ldr	r2, [pc, #224]	; (800aaac <xTaskResumeAll+0x118>)
 800a9cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ce:	4b37      	ldr	r3, [pc, #220]	; (800aaac <xTaskResumeAll+0x118>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d162      	bne.n	800aa9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9d6:	4b36      	ldr	r3, [pc, #216]	; (800aab0 <xTaskResumeAll+0x11c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d05e      	beq.n	800aa9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9de:	e02f      	b.n	800aa40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e0:	4b34      	ldr	r3, [pc, #208]	; (800aab4 <xTaskResumeAll+0x120>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3318      	adds	r3, #24
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fc7d 	bl	80092ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fc78 	bl	80092ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	4b2d      	ldr	r3, [pc, #180]	; (800aab8 <xTaskResumeAll+0x124>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d903      	bls.n	800aa10 <xTaskResumeAll+0x7c>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <xTaskResumeAll+0x124>)
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4a27      	ldr	r2, [pc, #156]	; (800aabc <xTaskResumeAll+0x128>)
 800aa1e:	441a      	add	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7fe fc03 	bl	8009232 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa30:	4b23      	ldr	r3, [pc, #140]	; (800aac0 <xTaskResumeAll+0x12c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d302      	bcc.n	800aa40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa3a:	4b22      	ldr	r3, [pc, #136]	; (800aac4 <xTaskResumeAll+0x130>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa40:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <xTaskResumeAll+0x120>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1cb      	bne.n	800a9e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa4e:	f000 fb67 	bl	800b120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa52:	4b1d      	ldr	r3, [pc, #116]	; (800aac8 <xTaskResumeAll+0x134>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d010      	beq.n	800aa80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa5e:	f000 f859 	bl	800ab14 <xTaskIncrementTick>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa68:	4b16      	ldr	r3, [pc, #88]	; (800aac4 <xTaskResumeAll+0x130>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1f1      	bne.n	800aa5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa7a:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <xTaskResumeAll+0x134>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa80:	4b10      	ldr	r3, [pc, #64]	; (800aac4 <xTaskResumeAll+0x130>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d009      	beq.n	800aa9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa8c:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <xTaskResumeAll+0x138>)
 800aa8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa9c:	f001 f9ea 	bl	800be74 <vPortExitCritical>

	return xAlreadyYielded;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000c6c 	.word	0x20000c6c
 800aab0:	20000c44 	.word	0x20000c44
 800aab4:	20000c04 	.word	0x20000c04
 800aab8:	20000c4c 	.word	0x20000c4c
 800aabc:	20000774 	.word	0x20000774
 800aac0:	20000770 	.word	0x20000770
 800aac4:	20000c58 	.word	0x20000c58
 800aac8:	20000c54 	.word	0x20000c54
 800aacc:	e000ed04 	.word	0xe000ed04

0800aad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <xTaskGetTickCount+0x1c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aadc:	687b      	ldr	r3, [r7, #4]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000c48 	.word	0x20000c48

0800aaf0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaf6:	f001 fa6f 	bl	800bfd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aafa:	2300      	movs	r3, #0
 800aafc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aafe:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <xTaskGetTickCountFromISR+0x20>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab04:	683b      	ldr	r3, [r7, #0]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000c48 	.word	0x20000c48

0800ab14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab1e:	4b4f      	ldr	r3, [pc, #316]	; (800ac5c <xTaskIncrementTick+0x148>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f040 808f 	bne.w	800ac46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab28:	4b4d      	ldr	r3, [pc, #308]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab30:	4a4b      	ldr	r2, [pc, #300]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d120      	bne.n	800ab7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab3c:	4b49      	ldr	r3, [pc, #292]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <xTaskIncrementTick+0x48>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	603b      	str	r3, [r7, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <xTaskIncrementTick+0x46>
 800ab5c:	4b41      	ldr	r3, [pc, #260]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	4b41      	ldr	r3, [pc, #260]	; (800ac68 <xTaskIncrementTick+0x154>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a3f      	ldr	r2, [pc, #252]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	4a3f      	ldr	r2, [pc, #252]	; (800ac68 <xTaskIncrementTick+0x154>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	4b3e      	ldr	r3, [pc, #248]	; (800ac6c <xTaskIncrementTick+0x158>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	4a3d      	ldr	r2, [pc, #244]	; (800ac6c <xTaskIncrementTick+0x158>)
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	f000 fad1 	bl	800b120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab7e:	4b3c      	ldr	r3, [pc, #240]	; (800ac70 <xTaskIncrementTick+0x15c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d349      	bcc.n	800ac1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab88:	4b36      	ldr	r3, [pc, #216]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d104      	bne.n	800ab9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab92:	4b37      	ldr	r3, [pc, #220]	; (800ac70 <xTaskIncrementTick+0x15c>)
 800ab94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab98:	601a      	str	r2, [r3, #0]
					break;
 800ab9a:	e03f      	b.n	800ac1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9c:	4b31      	ldr	r3, [pc, #196]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d203      	bcs.n	800abbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abb4:	4a2e      	ldr	r2, [pc, #184]	; (800ac70 <xTaskIncrementTick+0x15c>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abba:	e02f      	b.n	800ac1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe fb93 	bl	80092ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	3318      	adds	r3, #24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe fb8a 	bl	80092ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <xTaskIncrementTick+0x160>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d903      	bls.n	800abec <xTaskIncrementTick+0xd8>
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	4a22      	ldr	r2, [pc, #136]	; (800ac74 <xTaskIncrementTick+0x160>)
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4a1f      	ldr	r2, [pc, #124]	; (800ac78 <xTaskIncrementTick+0x164>)
 800abfa:	441a      	add	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7fe fb15 	bl	8009232 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0c:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <xTaskIncrementTick+0x168>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d3b8      	bcc.n	800ab88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac16:	2301      	movs	r3, #1
 800ac18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac1a:	e7b5      	b.n	800ab88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac1c:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <xTaskIncrementTick+0x168>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac22:	4915      	ldr	r1, [pc, #84]	; (800ac78 <xTaskIncrementTick+0x164>)
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d901      	bls.n	800ac38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac34:	2301      	movs	r3, #1
 800ac36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac38:	4b11      	ldr	r3, [pc, #68]	; (800ac80 <xTaskIncrementTick+0x16c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac40:	2301      	movs	r3, #1
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	e004      	b.n	800ac50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac46:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <xTaskIncrementTick+0x170>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	; (800ac84 <xTaskIncrementTick+0x170>)
 800ac4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac50:	697b      	ldr	r3, [r7, #20]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000c6c 	.word	0x20000c6c
 800ac60:	20000c48 	.word	0x20000c48
 800ac64:	20000bfc 	.word	0x20000bfc
 800ac68:	20000c00 	.word	0x20000c00
 800ac6c:	20000c5c 	.word	0x20000c5c
 800ac70:	20000c64 	.word	0x20000c64
 800ac74:	20000c4c 	.word	0x20000c4c
 800ac78:	20000774 	.word	0x20000774
 800ac7c:	20000770 	.word	0x20000770
 800ac80:	20000c58 	.word	0x20000c58
 800ac84:	20000c54 	.word	0x20000c54

0800ac88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac8e:	4b28      	ldr	r3, [pc, #160]	; (800ad30 <vTaskSwitchContext+0xa8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac96:	4b27      	ldr	r3, [pc, #156]	; (800ad34 <vTaskSwitchContext+0xac>)
 800ac98:	2201      	movs	r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac9c:	e041      	b.n	800ad22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ac9e:	4b25      	ldr	r3, [pc, #148]	; (800ad34 <vTaskSwitchContext+0xac>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca4:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <vTaskSwitchContext+0xb0>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	e010      	b.n	800acce <vTaskSwitchContext+0x46>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <vTaskSwitchContext+0x40>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	607b      	str	r3, [r7, #4]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vTaskSwitchContext+0x3e>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3b01      	subs	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	491b      	ldr	r1, [pc, #108]	; (800ad3c <vTaskSwitchContext+0xb4>)
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0e4      	beq.n	800acac <vTaskSwitchContext+0x24>
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <vTaskSwitchContext+0xb4>)
 800acee:	4413      	add	r3, r2
 800acf0:	60bb      	str	r3, [r7, #8]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	605a      	str	r2, [r3, #4]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	3308      	adds	r3, #8
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d104      	bne.n	800ad12 <vTaskSwitchContext+0x8a>
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	605a      	str	r2, [r3, #4]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <vTaskSwitchContext+0xb8>)
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	4a06      	ldr	r2, [pc, #24]	; (800ad38 <vTaskSwitchContext+0xb0>)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6013      	str	r3, [r2, #0]
}
 800ad22:	bf00      	nop
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	20000c6c 	.word	0x20000c6c
 800ad34:	20000c58 	.word	0x20000c58
 800ad38:	20000c4c 	.word	0x20000c4c
 800ad3c:	20000774 	.word	0x20000774
 800ad40:	20000770 	.word	0x20000770

0800ad44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	60fb      	str	r3, [r7, #12]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad6a:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <vTaskPlaceOnEventList+0x44>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3318      	adds	r3, #24
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7fe fa81 	bl	800927a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad78:	2101      	movs	r1, #1
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	f000 fb7a 	bl	800b474 <prvAddCurrentTaskToDelayedList>
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000770 	.word	0x20000770

0800ad8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	617b      	str	r3, [r7, #20]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adb4:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <vTaskPlaceOnEventListRestricted+0x54>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3318      	adds	r3, #24
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7fe fa38 	bl	8009232 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	68b8      	ldr	r0, [r7, #8]
 800add2:	f000 fb4f 	bl	800b474 <prvAddCurrentTaskToDelayedList>
	}
 800add6:	bf00      	nop
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20000770 	.word	0x20000770

0800ade4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	60fb      	str	r3, [r7, #12]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	3318      	adds	r3, #24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe fa69 	bl	80092ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae1a:	4b1e      	ldr	r3, [pc, #120]	; (800ae94 <xTaskRemoveFromEventList+0xb0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d11d      	bne.n	800ae5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fa60 	bl	80092ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae30:	4b19      	ldr	r3, [pc, #100]	; (800ae98 <xTaskRemoveFromEventList+0xb4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d903      	bls.n	800ae40 <xTaskRemoveFromEventList+0x5c>
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	4a16      	ldr	r2, [pc, #88]	; (800ae98 <xTaskRemoveFromEventList+0xb4>)
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4a13      	ldr	r2, [pc, #76]	; (800ae9c <xTaskRemoveFromEventList+0xb8>)
 800ae4e:	441a      	add	r2, r3
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f7fe f9eb 	bl	8009232 <vListInsertEnd>
 800ae5c:	e005      	b.n	800ae6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3318      	adds	r3, #24
 800ae62:	4619      	mov	r1, r3
 800ae64:	480e      	ldr	r0, [pc, #56]	; (800aea0 <xTaskRemoveFromEventList+0xbc>)
 800ae66:	f7fe f9e4 	bl	8009232 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <xTaskRemoveFromEventList+0xc0>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d905      	bls.n	800ae84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <xTaskRemoveFromEventList+0xc4>)
 800ae7e:	2201      	movs	r2, #1
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	e001      	b.n	800ae88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae88:	697b      	ldr	r3, [r7, #20]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20000c6c 	.word	0x20000c6c
 800ae98:	20000c4c 	.word	0x20000c4c
 800ae9c:	20000774 	.word	0x20000774
 800aea0:	20000c04 	.word	0x20000c04
 800aea4:	20000770 	.word	0x20000770
 800aea8:	20000c58 	.word	0x20000c58

0800aeac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aeb4:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <vTaskInternalSetTimeOutState+0x24>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <vTaskInternalSetTimeOutState+0x28>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	605a      	str	r2, [r3, #4]
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	20000c5c 	.word	0x20000c5c
 800aed4:	20000c48 	.word	0x20000c48

0800aed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	613b      	str	r3, [r7, #16]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	60fb      	str	r3, [r7, #12]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af1a:	f000 ff7b 	bl	800be14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af1e:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <xTaskCheckForTimeOut+0xbc>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af36:	d102      	bne.n	800af3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af38:	2300      	movs	r3, #0
 800af3a:	61fb      	str	r3, [r7, #28]
 800af3c:	e023      	b.n	800af86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <xTaskCheckForTimeOut+0xc0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d007      	beq.n	800af5a <xTaskCheckForTimeOut+0x82>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	429a      	cmp	r2, r3
 800af52:	d302      	bcc.n	800af5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	61fb      	str	r3, [r7, #28]
 800af58:	e015      	b.n	800af86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	429a      	cmp	r2, r3
 800af62:	d20b      	bcs.n	800af7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff ff9b 	bl	800aeac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	61fb      	str	r3, [r7, #28]
 800af7a:	e004      	b.n	800af86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af82:	2301      	movs	r3, #1
 800af84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af86:	f000 ff75 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800af8a:	69fb      	ldr	r3, [r7, #28]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3720      	adds	r7, #32
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20000c48 	.word	0x20000c48
 800af98:	20000c5c 	.word	0x20000c5c

0800af9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800afa0:	4b03      	ldr	r3, [pc, #12]	; (800afb0 <vTaskMissedYield+0x14>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
}
 800afa6:	bf00      	nop
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	20000c58 	.word	0x20000c58

0800afb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afbc:	f000 f852 	bl	800b064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afc0:	4b06      	ldr	r3, [pc, #24]	; (800afdc <prvIdleTask+0x28>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d9f9      	bls.n	800afbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <prvIdleTask+0x2c>)
 800afca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afd8:	e7f0      	b.n	800afbc <prvIdleTask+0x8>
 800afda:	bf00      	nop
 800afdc:	20000774 	.word	0x20000774
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afea:	2300      	movs	r3, #0
 800afec:	607b      	str	r3, [r7, #4]
 800afee:	e00c      	b.n	800b00a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4a12      	ldr	r2, [pc, #72]	; (800b044 <prvInitialiseTaskLists+0x60>)
 800affc:	4413      	add	r3, r2
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe f8ea 	bl	80091d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3301      	adds	r3, #1
 800b008:	607b      	str	r3, [r7, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b37      	cmp	r3, #55	; 0x37
 800b00e:	d9ef      	bls.n	800aff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b010:	480d      	ldr	r0, [pc, #52]	; (800b048 <prvInitialiseTaskLists+0x64>)
 800b012:	f7fe f8e1 	bl	80091d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b016:	480d      	ldr	r0, [pc, #52]	; (800b04c <prvInitialiseTaskLists+0x68>)
 800b018:	f7fe f8de 	bl	80091d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b01c:	480c      	ldr	r0, [pc, #48]	; (800b050 <prvInitialiseTaskLists+0x6c>)
 800b01e:	f7fe f8db 	bl	80091d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b022:	480c      	ldr	r0, [pc, #48]	; (800b054 <prvInitialiseTaskLists+0x70>)
 800b024:	f7fe f8d8 	bl	80091d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b028:	480b      	ldr	r0, [pc, #44]	; (800b058 <prvInitialiseTaskLists+0x74>)
 800b02a:	f7fe f8d5 	bl	80091d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <prvInitialiseTaskLists+0x78>)
 800b030:	4a05      	ldr	r2, [pc, #20]	; (800b048 <prvInitialiseTaskLists+0x64>)
 800b032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <prvInitialiseTaskLists+0x7c>)
 800b036:	4a05      	ldr	r2, [pc, #20]	; (800b04c <prvInitialiseTaskLists+0x68>)
 800b038:	601a      	str	r2, [r3, #0]
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000774 	.word	0x20000774
 800b048:	20000bd4 	.word	0x20000bd4
 800b04c:	20000be8 	.word	0x20000be8
 800b050:	20000c04 	.word	0x20000c04
 800b054:	20000c18 	.word	0x20000c18
 800b058:	20000c30 	.word	0x20000c30
 800b05c:	20000bfc 	.word	0x20000bfc
 800b060:	20000c00 	.word	0x20000c00

0800b064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b06a:	e019      	b.n	800b0a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b06c:	f000 fed2 	bl	800be14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b070:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <prvCheckTasksWaitingTermination+0x50>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe f935 	bl	80092ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <prvCheckTasksWaitingTermination+0x54>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3b01      	subs	r3, #1
 800b088:	4a0b      	ldr	r2, [pc, #44]	; (800b0b8 <prvCheckTasksWaitingTermination+0x54>)
 800b08a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <prvCheckTasksWaitingTermination+0x58>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	4a0a      	ldr	r2, [pc, #40]	; (800b0bc <prvCheckTasksWaitingTermination+0x58>)
 800b094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b096:	f000 feed 	bl	800be74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f810 	bl	800b0c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <prvCheckTasksWaitingTermination+0x58>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e1      	bne.n	800b06c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000c18 	.word	0x20000c18
 800b0b8:	20000c44 	.word	0x20000c44
 800b0bc:	20000c2c 	.word	0x20000c2c

0800b0c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d108      	bne.n	800b0e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f001 f88a 	bl	800c1f0 <vPortFree>
				vPortFree( pxTCB );
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 f887 	bl	800c1f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0e2:	e018      	b.n	800b116 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d103      	bne.n	800b0f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 f87e 	bl	800c1f0 <vPortFree>
	}
 800b0f4:	e00f      	b.n	800b116 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d00a      	beq.n	800b116 <prvDeleteTCB+0x56>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	60fb      	str	r3, [r7, #12]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <prvDeleteTCB+0x54>
	}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b126:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <prvResetNextTaskUnblockTime+0x38>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <prvResetNextTaskUnblockTime+0x3c>)
 800b132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b138:	e008      	b.n	800b14c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b13a:	4b07      	ldr	r3, [pc, #28]	; (800b158 <prvResetNextTaskUnblockTime+0x38>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	4a04      	ldr	r2, [pc, #16]	; (800b15c <prvResetNextTaskUnblockTime+0x3c>)
 800b14a:	6013      	str	r3, [r2, #0]
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	20000bfc 	.word	0x20000bfc
 800b15c:	20000c64 	.word	0x20000c64

0800b160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b166:	4b0b      	ldr	r3, [pc, #44]	; (800b194 <xTaskGetSchedulerState+0x34>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b16e:	2301      	movs	r3, #1
 800b170:	607b      	str	r3, [r7, #4]
 800b172:	e008      	b.n	800b186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b174:	4b08      	ldr	r3, [pc, #32]	; (800b198 <xTaskGetSchedulerState+0x38>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b17c:	2302      	movs	r3, #2
 800b17e:	607b      	str	r3, [r7, #4]
 800b180:	e001      	b.n	800b186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b182:	2300      	movs	r3, #0
 800b184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b186:	687b      	ldr	r3, [r7, #4]
	}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	20000c50 	.word	0x20000c50
 800b198:	20000c6c 	.word	0x20000c6c

0800b19c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d051      	beq.n	800b256 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b6:	4b2a      	ldr	r3, [pc, #168]	; (800b260 <xTaskPriorityInherit+0xc4>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d241      	bcs.n	800b244 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	db06      	blt.n	800b1d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1c8:	4b25      	ldr	r3, [pc, #148]	; (800b260 <xTaskPriorityInherit+0xc4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6959      	ldr	r1, [r3, #20]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4a1f      	ldr	r2, [pc, #124]	; (800b264 <xTaskPriorityInherit+0xc8>)
 800b1e8:	4413      	add	r3, r2
 800b1ea:	4299      	cmp	r1, r3
 800b1ec:	d122      	bne.n	800b234 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe f87a 	bl	80092ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1f8:	4b19      	ldr	r3, [pc, #100]	; (800b260 <xTaskPriorityInherit+0xc4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b206:	4b18      	ldr	r3, [pc, #96]	; (800b268 <xTaskPriorityInherit+0xcc>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d903      	bls.n	800b216 <xTaskPriorityInherit+0x7a>
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	4a15      	ldr	r2, [pc, #84]	; (800b268 <xTaskPriorityInherit+0xcc>)
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4a10      	ldr	r2, [pc, #64]	; (800b264 <xTaskPriorityInherit+0xc8>)
 800b224:	441a      	add	r2, r3
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3304      	adds	r3, #4
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7fe f800 	bl	8009232 <vListInsertEnd>
 800b232:	e004      	b.n	800b23e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b234:	4b0a      	ldr	r3, [pc, #40]	; (800b260 <xTaskPriorityInherit+0xc4>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b23e:	2301      	movs	r3, #1
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e008      	b.n	800b256 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b248:	4b05      	ldr	r3, [pc, #20]	; (800b260 <xTaskPriorityInherit+0xc4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	429a      	cmp	r2, r3
 800b250:	d201      	bcs.n	800b256 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b252:	2301      	movs	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b256:	68fb      	ldr	r3, [r7, #12]
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20000770 	.word	0x20000770
 800b264:	20000774 	.word	0x20000774
 800b268:	20000c4c 	.word	0x20000c4c

0800b26c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d056      	beq.n	800b330 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b282:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <xTaskPriorityDisinherit+0xd0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d00a      	beq.n	800b2a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	60fb      	str	r3, [r7, #12]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60bb      	str	r3, [r7, #8]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c4:	1e5a      	subs	r2, r3, #1
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d02c      	beq.n	800b330 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d128      	bne.n	800b330 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe f802 	bl	80092ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <xTaskPriorityDisinherit+0xd4>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d903      	bls.n	800b310 <xTaskPriorityDisinherit+0xa4>
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	4a0c      	ldr	r2, [pc, #48]	; (800b340 <xTaskPriorityDisinherit+0xd4>)
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4a09      	ldr	r2, [pc, #36]	; (800b344 <xTaskPriorityDisinherit+0xd8>)
 800b31e:	441a      	add	r2, r3
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4610      	mov	r0, r2
 800b328:	f7fd ff83 	bl	8009232 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b330:	697b      	ldr	r3, [r7, #20]
	}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20000770 	.word	0x20000770
 800b340:	20000c4c 	.word	0x20000c4c
 800b344:	20000774 	.word	0x20000774

0800b348 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b356:	2301      	movs	r3, #1
 800b358:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d06a      	beq.n	800b436 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	60fb      	str	r3, [r7, #12]
}
 800b37a:	bf00      	nop
 800b37c:	e7fe      	b.n	800b37c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d902      	bls.n	800b38e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	e002      	b.n	800b394 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b392:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d04b      	beq.n	800b436 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d146      	bne.n	800b436 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b3a8:	4b25      	ldr	r3, [pc, #148]	; (800b440 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d10a      	bne.n	800b3c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	60bb      	str	r3, [r7, #8]
}
 800b3c4:	bf00      	nop
 800b3c6:	e7fe      	b.n	800b3c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	69fa      	ldr	r2, [r7, #28]
 800b3d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db04      	blt.n	800b3e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	6959      	ldr	r1, [r3, #20]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a13      	ldr	r2, [pc, #76]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3f6:	4413      	add	r3, r2
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	d11c      	bne.n	800b436 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd ff73 	bl	80092ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	4b0f      	ldr	r3, [pc, #60]	; (800b448 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d903      	bls.n	800b41a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b416:	4a0c      	ldr	r2, [pc, #48]	; (800b448 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b428:	441a      	add	r2, r3
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4619      	mov	r1, r3
 800b430:	4610      	mov	r0, r2
 800b432:	f7fd fefe 	bl	8009232 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b436:	bf00      	nop
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20000770 	.word	0x20000770
 800b444:	20000774 	.word	0x20000774
 800b448:	20000c4c 	.word	0x20000c4c

0800b44c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <pvTaskIncrementMutexHeldCount+0x24>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <pvTaskIncrementMutexHeldCount+0x24>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b45e:	3201      	adds	r2, #1
 800b460:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <pvTaskIncrementMutexHeldCount+0x24>)
 800b464:	681b      	ldr	r3, [r3, #0]
	}
 800b466:	4618      	mov	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	20000770 	.word	0x20000770

0800b474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b47e:	4b21      	ldr	r3, [pc, #132]	; (800b504 <prvAddCurrentTaskToDelayedList+0x90>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b484:	4b20      	ldr	r3, [pc, #128]	; (800b508 <prvAddCurrentTaskToDelayedList+0x94>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3304      	adds	r3, #4
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fd ff2e 	bl	80092ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b496:	d10a      	bne.n	800b4ae <prvAddCurrentTaskToDelayedList+0x3a>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d007      	beq.n	800b4ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b49e:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4819      	ldr	r0, [pc, #100]	; (800b50c <prvAddCurrentTaskToDelayedList+0x98>)
 800b4a8:	f7fd fec3 	bl	8009232 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4ac:	e026      	b.n	800b4fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d209      	bcs.n	800b4da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	; (800b508 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	f7fd fed1 	bl	800927a <vListInsert>
}
 800b4d8:	e010      	b.n	800b4fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4da:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7fd fec7 	bl	800927a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d202      	bcs.n	800b4fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4f6:	4a08      	ldr	r2, [pc, #32]	; (800b518 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6013      	str	r3, [r2, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20000c48 	.word	0x20000c48
 800b508:	20000770 	.word	0x20000770
 800b50c:	20000c30 	.word	0x20000c30
 800b510:	20000c00 	.word	0x20000c00
 800b514:	20000bfc 	.word	0x20000bfc
 800b518:	20000c64 	.word	0x20000c64

0800b51c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	; 0x28
 800b520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b526:	f000 fb07 	bl	800bb38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b52a:	4b1c      	ldr	r3, [pc, #112]	; (800b59c <xTimerCreateTimerTask+0x80>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d021      	beq.n	800b576 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b536:	2300      	movs	r3, #0
 800b538:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b53a:	1d3a      	adds	r2, r7, #4
 800b53c:	f107 0108 	add.w	r1, r7, #8
 800b540:	f107 030c 	add.w	r3, r7, #12
 800b544:	4618      	mov	r0, r3
 800b546:	f7fd fe2d 	bl	80091a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	9202      	str	r2, [sp, #8]
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	2302      	movs	r3, #2
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	2300      	movs	r3, #0
 800b55a:	460a      	mov	r2, r1
 800b55c:	4910      	ldr	r1, [pc, #64]	; (800b5a0 <xTimerCreateTimerTask+0x84>)
 800b55e:	4811      	ldr	r0, [pc, #68]	; (800b5a4 <xTimerCreateTimerTask+0x88>)
 800b560:	f7fe fefc 	bl	800a35c <xTaskCreateStatic>
 800b564:	4603      	mov	r3, r0
 800b566:	4a10      	ldr	r2, [pc, #64]	; (800b5a8 <xTimerCreateTimerTask+0x8c>)
 800b568:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b56a:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <xTimerCreateTimerTask+0x8c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b572:	2301      	movs	r3, #1
 800b574:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	613b      	str	r3, [r7, #16]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b592:	697b      	ldr	r3, [r7, #20]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000ca0 	.word	0x20000ca0
 800b5a0:	0800e6a4 	.word	0x0800e6a4
 800b5a4:	0800b6e1 	.word	0x0800b6e1
 800b5a8:	20000ca4 	.word	0x20000ca4

0800b5ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	; 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	623b      	str	r3, [r7, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5da:	4b1a      	ldr	r3, [pc, #104]	; (800b644 <xTimerGenericCommand+0x98>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d02a      	beq.n	800b638 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2b05      	cmp	r3, #5
 800b5f2:	dc18      	bgt.n	800b626 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5f4:	f7ff fdb4 	bl	800b160 <xTaskGetSchedulerState>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d109      	bne.n	800b612 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <xTimerGenericCommand+0x98>)
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	f107 0110 	add.w	r1, r7, #16
 800b606:	2300      	movs	r3, #0
 800b608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60a:	f7fe f841 	bl	8009690 <xQueueGenericSend>
 800b60e:	6278      	str	r0, [r7, #36]	; 0x24
 800b610:	e012      	b.n	800b638 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b612:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <xTimerGenericCommand+0x98>)
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	f107 0110 	add.w	r1, r7, #16
 800b61a:	2300      	movs	r3, #0
 800b61c:	2200      	movs	r2, #0
 800b61e:	f7fe f837 	bl	8009690 <xQueueGenericSend>
 800b622:	6278      	str	r0, [r7, #36]	; 0x24
 800b624:	e008      	b.n	800b638 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b626:	4b07      	ldr	r3, [pc, #28]	; (800b644 <xTimerGenericCommand+0x98>)
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f107 0110 	add.w	r1, r7, #16
 800b62e:	2300      	movs	r3, #0
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	f7fe f92b 	bl	800988c <xQueueGenericSendFromISR>
 800b636:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3728      	adds	r7, #40	; 0x28
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20000ca0 	.word	0x20000ca0

0800b648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b652:	4b22      	ldr	r3, [pc, #136]	; (800b6dc <prvProcessExpiredTimer+0x94>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	3304      	adds	r3, #4
 800b660:	4618      	mov	r0, r3
 800b662:	f7fd fe43 	bl	80092ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d022      	beq.n	800b6ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	699a      	ldr	r2, [r3, #24]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	18d1      	adds	r1, r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	6978      	ldr	r0, [r7, #20]
 800b682:	f000 f8d1 	bl	800b828 <prvInsertTimerInActiveList>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d01f      	beq.n	800b6cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b68c:	2300      	movs	r3, #0
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	2300      	movs	r3, #0
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	2100      	movs	r1, #0
 800b696:	6978      	ldr	r0, [r7, #20]
 800b698:	f7ff ff88 	bl	800b5ac <xTimerGenericCommand>
 800b69c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d113      	bne.n	800b6cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60fb      	str	r3, [r7, #12]
}
 800b6b6:	bf00      	nop
 800b6b8:	e7fe      	b.n	800b6b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c0:	f023 0301 	bic.w	r3, r3, #1
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	6978      	ldr	r0, [r7, #20]
 800b6d2:	4798      	blx	r3
}
 800b6d4:	bf00      	nop
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20000c98 	.word	0x20000c98

0800b6e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6e8:	f107 0308 	add.w	r3, r7, #8
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f857 	bl	800b7a0 <prvGetNextExpireTime>
 800b6f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f803 	bl	800b704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6fe:	f000 f8d5 	bl	800b8ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b702:	e7f1      	b.n	800b6e8 <prvTimerTask+0x8>

0800b704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b70e:	f7ff f933 	bl	800a978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f866 	bl	800b7e8 <prvSampleTimeNow>
 800b71c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d130      	bne.n	800b786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <prvProcessTimerOrBlockTask+0x3c>
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d806      	bhi.n	800b740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b732:	f7ff f92f 	bl	800a994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ff85 	bl	800b648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b73e:	e024      	b.n	800b78a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <prvProcessTimerOrBlockTask+0x90>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <prvProcessTimerOrBlockTask+0x50>
 800b750:	2301      	movs	r3, #1
 800b752:	e000      	b.n	800b756 <prvProcessTimerOrBlockTask+0x52>
 800b754:	2300      	movs	r3, #0
 800b756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <prvProcessTimerOrBlockTask+0x94>)
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	f7fe fdc5 	bl	800a2f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b76a:	f7ff f913 	bl	800a994 <xTaskResumeAll>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b774:	4b09      	ldr	r3, [pc, #36]	; (800b79c <prvProcessTimerOrBlockTask+0x98>)
 800b776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
}
 800b784:	e001      	b.n	800b78a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b786:	f7ff f905 	bl	800a994 <xTaskResumeAll>
}
 800b78a:	bf00      	nop
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20000c9c 	.word	0x20000c9c
 800b798:	20000ca0 	.word	0x20000ca0
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7a8:	4b0e      	ldr	r3, [pc, #56]	; (800b7e4 <prvGetNextExpireTime+0x44>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <prvGetNextExpireTime+0x16>
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	e000      	b.n	800b7b8 <prvGetNextExpireTime+0x18>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d105      	bne.n	800b7d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c4:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <prvGetNextExpireTime+0x44>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	e001      	b.n	800b7d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20000c98 	.word	0x20000c98

0800b7e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7f0:	f7ff f96e 	bl	800aad0 <xTaskGetTickCount>
 800b7f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <prvSampleTimeNow+0x3c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d205      	bcs.n	800b80c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b800:	f000 f936 	bl	800ba70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e002      	b.n	800b812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b812:	4a04      	ldr	r2, [pc, #16]	; (800b824 <prvSampleTimeNow+0x3c>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b818:	68fb      	ldr	r3, [r7, #12]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000ca8 	.word	0x20000ca8

0800b828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d812      	bhi.n	800b874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	1ad2      	subs	r2, r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d302      	bcc.n	800b862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b85c:	2301      	movs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e01b      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b862:	4b10      	ldr	r3, [pc, #64]	; (800b8a4 <prvInsertTimerInActiveList+0x7c>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7fd fd04 	bl	800927a <vListInsert>
 800b872:	e012      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d206      	bcs.n	800b88a <prvInsertTimerInActiveList+0x62>
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d302      	bcc.n	800b88a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e007      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <prvInsertTimerInActiveList+0x80>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3304      	adds	r3, #4
 800b892:	4619      	mov	r1, r3
 800b894:	4610      	mov	r0, r2
 800b896:	f7fd fcf0 	bl	800927a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b89a:	697b      	ldr	r3, [r7, #20]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000c9c 	.word	0x20000c9c
 800b8a8:	20000c98 	.word	0x20000c98

0800b8ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08e      	sub	sp, #56	; 0x38
 800b8b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8b2:	e0ca      	b.n	800ba4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	da18      	bge.n	800b8ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8ba:	1d3b      	adds	r3, r7, #4
 800b8bc:	3304      	adds	r3, #4
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	61fb      	str	r3, [r7, #28]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e2:	6850      	ldr	r0, [r2, #4]
 800b8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e6:	6892      	ldr	r2, [r2, #8]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f2c0 80aa 	blt.w	800ba48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	3304      	adds	r3, #4
 800b904:	4618      	mov	r0, r3
 800b906:	f7fd fcf1 	bl	80092ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b90a:	463b      	mov	r3, r7
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff ff6b 	bl	800b7e8 <prvSampleTimeNow>
 800b912:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b09      	cmp	r3, #9
 800b918:	f200 8097 	bhi.w	800ba4a <prvProcessReceivedCommands+0x19e>
 800b91c:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <prvProcessReceivedCommands+0x78>)
 800b91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b922:	bf00      	nop
 800b924:	0800b94d 	.word	0x0800b94d
 800b928:	0800b94d 	.word	0x0800b94d
 800b92c:	0800b94d 	.word	0x0800b94d
 800b930:	0800b9c1 	.word	0x0800b9c1
 800b934:	0800b9d5 	.word	0x0800b9d5
 800b938:	0800ba1f 	.word	0x0800ba1f
 800b93c:	0800b94d 	.word	0x0800b94d
 800b940:	0800b94d 	.word	0x0800b94d
 800b944:	0800b9c1 	.word	0x0800b9c1
 800b948:	0800b9d5 	.word	0x0800b9d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	18d1      	adds	r1, r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96c:	f7ff ff5c 	bl	800b828 <prvInsertTimerInActiveList>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d069      	beq.n	800ba4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b97c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d05e      	beq.n	800ba4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	441a      	add	r2, r3
 800b994:	2300      	movs	r3, #0
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f7ff fe05 	bl	800b5ac <xTimerGenericCommand>
 800b9a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d14f      	bne.n	800ba4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	61bb      	str	r3, [r7, #24]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9c6:	f023 0301 	bic.w	r3, r3, #1
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9d2:	e03a      	b.n	800ba4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10a      	bne.n	800ba0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	617b      	str	r3, [r7, #20]
}
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	699a      	ldr	r2, [r3, #24]
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	18d1      	adds	r1, r2, r3
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba18:	f7ff ff06 	bl	800b828 <prvInsertTimerInActiveList>
					break;
 800ba1c:	e015      	b.n	800ba4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ba2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2e:	f000 fbdf 	bl	800c1f0 <vPortFree>
 800ba32:	e00a      	b.n	800ba4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba3a:	f023 0301 	bic.w	r3, r3, #1
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba46:	e000      	b.n	800ba4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba4a:	4b08      	ldr	r3, [pc, #32]	; (800ba6c <prvProcessReceivedCommands+0x1c0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	1d39      	adds	r1, r7, #4
 800ba50:	2200      	movs	r2, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe f842 	bl	8009adc <xQueueReceive>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f47f af2a 	bne.w	800b8b4 <prvProcessReceivedCommands+0x8>
	}
}
 800ba60:	bf00      	nop
 800ba62:	bf00      	nop
 800ba64:	3730      	adds	r7, #48	; 0x30
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000ca0 	.word	0x20000ca0

0800ba70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba76:	e048      	b.n	800bb0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba78:	4b2d      	ldr	r3, [pc, #180]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba82:	4b2b      	ldr	r3, [pc, #172]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fd fc2b 	bl	80092ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d02e      	beq.n	800bb0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	4413      	add	r3, r2
 800bab4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	429a      	cmp	r2, r3
 800babc:	d90e      	bls.n	800badc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baca:	4b19      	ldr	r3, [pc, #100]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4619      	mov	r1, r3
 800bad4:	4610      	mov	r0, r2
 800bad6:	f7fd fbd0 	bl	800927a <vListInsert>
 800bada:	e016      	b.n	800bb0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800badc:	2300      	movs	r3, #0
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2300      	movs	r3, #0
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	2100      	movs	r1, #0
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff fd60 	bl	800b5ac <xTimerGenericCommand>
 800baec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	603b      	str	r3, [r7, #0]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb0a:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1b1      	bne.n	800ba78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb14:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb1a:	4b06      	ldr	r3, [pc, #24]	; (800bb34 <prvSwitchTimerLists+0xc4>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a04      	ldr	r2, [pc, #16]	; (800bb30 <prvSwitchTimerLists+0xc0>)
 800bb20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb22:	4a04      	ldr	r2, [pc, #16]	; (800bb34 <prvSwitchTimerLists+0xc4>)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	6013      	str	r3, [r2, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20000c98 	.word	0x20000c98
 800bb34:	20000c9c 	.word	0x20000c9c

0800bb38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb3e:	f000 f969 	bl	800be14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb42:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d120      	bne.n	800bb8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb4a:	4814      	ldr	r0, [pc, #80]	; (800bb9c <prvCheckForValidListAndQueue+0x64>)
 800bb4c:	f7fd fb44 	bl	80091d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb50:	4813      	ldr	r0, [pc, #76]	; (800bba0 <prvCheckForValidListAndQueue+0x68>)
 800bb52:	f7fd fb41 	bl	80091d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <prvCheckForValidListAndQueue+0x6c>)
 800bb58:	4a10      	ldr	r2, [pc, #64]	; (800bb9c <prvCheckForValidListAndQueue+0x64>)
 800bb5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb5c:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvCheckForValidListAndQueue+0x70>)
 800bb5e:	4a10      	ldr	r2, [pc, #64]	; (800bba0 <prvCheckForValidListAndQueue+0x68>)
 800bb60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb62:	2300      	movs	r3, #0
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4b11      	ldr	r3, [pc, #68]	; (800bbac <prvCheckForValidListAndQueue+0x74>)
 800bb68:	4a11      	ldr	r2, [pc, #68]	; (800bbb0 <prvCheckForValidListAndQueue+0x78>)
 800bb6a:	2110      	movs	r1, #16
 800bb6c:	200a      	movs	r0, #10
 800bb6e:	f7fd fc4f 	bl	8009410 <xQueueGenericCreateStatic>
 800bb72:	4603      	mov	r3, r0
 800bb74:	4a08      	ldr	r2, [pc, #32]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	490b      	ldr	r1, [pc, #44]	; (800bbb4 <prvCheckForValidListAndQueue+0x7c>)
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fe fb60 	bl	800a24c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb8c:	f000 f972 	bl	800be74 <vPortExitCritical>
}
 800bb90:	bf00      	nop
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000ca0 	.word	0x20000ca0
 800bb9c:	20000c70 	.word	0x20000c70
 800bba0:	20000c84 	.word	0x20000c84
 800bba4:	20000c98 	.word	0x20000c98
 800bba8:	20000c9c 	.word	0x20000c9c
 800bbac:	20000d4c 	.word	0x20000d4c
 800bbb0:	20000cac 	.word	0x20000cac
 800bbb4:	0800e6ac 	.word	0x0800e6ac

0800bbb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3b04      	subs	r3, #4
 800bbc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3b04      	subs	r3, #4
 800bbd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f023 0201 	bic.w	r2, r3, #1
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3b04      	subs	r3, #4
 800bbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbe8:	4a0c      	ldr	r2, [pc, #48]	; (800bc1c <pxPortInitialiseStack+0x64>)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3b14      	subs	r3, #20
 800bbf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3b04      	subs	r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f06f 0202 	mvn.w	r2, #2
 800bc06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3b20      	subs	r3, #32
 800bc0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	0800bc21 	.word	0x0800bc21

0800bc20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc2a:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <prvTaskExitError+0x54>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc32:	d00a      	beq.n	800bc4a <prvTaskExitError+0x2a>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60fb      	str	r3, [r7, #12]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <prvTaskExitError+0x28>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	60bb      	str	r3, [r7, #8]
}
 800bc5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc5e:	bf00      	nop
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0fc      	beq.n	800bc60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	20000010 	.word	0x20000010
	...

0800bc80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <pxCurrentTCBConst2>)
 800bc82:	6819      	ldr	r1, [r3, #0]
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	f380 8809 	msr	PSP, r0
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8811 	msr	BASEPRI, r0
 800bc9a:	4770      	bx	lr
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst2>:
 800bca0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bca8:	4808      	ldr	r0, [pc, #32]	; (800bccc <prvPortStartFirstTask+0x24>)
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f380 8808 	msr	MSP, r0
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8814 	msr	CONTROL, r0
 800bcba:	b662      	cpsie	i
 800bcbc:	b661      	cpsie	f
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	df00      	svc	0
 800bcc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcca:	bf00      	nop
 800bccc:	e000ed08 	.word	0xe000ed08

0800bcd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcd6:	4b46      	ldr	r3, [pc, #280]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a46      	ldr	r2, [pc, #280]	; (800bdf4 <xPortStartScheduler+0x124>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d10a      	bne.n	800bcf6 <xPortStartScheduler+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcf6:	4b3e      	ldr	r3, [pc, #248]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a3f      	ldr	r2, [pc, #252]	; (800bdf8 <xPortStartScheduler+0x128>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10a      	bne.n	800bd16 <xPortStartScheduler+0x46>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	60fb      	str	r3, [r7, #12]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd16:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <xPortStartScheduler+0x12c>)
 800bd18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <xPortStartScheduler+0x130>)
 800bd3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd3e:	4b31      	ldr	r3, [pc, #196]	; (800be04 <xPortStartScheduler+0x134>)
 800bd40:	2207      	movs	r2, #7
 800bd42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd44:	e009      	b.n	800bd5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd46:	4b2f      	ldr	r3, [pc, #188]	; (800be04 <xPortStartScheduler+0x134>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a2d      	ldr	r2, [pc, #180]	; (800be04 <xPortStartScheduler+0x134>)
 800bd4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d0ef      	beq.n	800bd46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd66:	4b27      	ldr	r3, [pc, #156]	; (800be04 <xPortStartScheduler+0x134>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f1c3 0307 	rsb	r3, r3, #7
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d00a      	beq.n	800bd88 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60bb      	str	r3, [r7, #8]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd88:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <xPortStartScheduler+0x134>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	4a1d      	ldr	r2, [pc, #116]	; (800be04 <xPortStartScheduler+0x134>)
 800bd90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd92:	4b1c      	ldr	r3, [pc, #112]	; (800be04 <xPortStartScheduler+0x134>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd9a:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <xPortStartScheduler+0x134>)
 800bd9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <xPortStartScheduler+0x138>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a17      	ldr	r2, [pc, #92]	; (800be08 <xPortStartScheduler+0x138>)
 800bdac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdb2:	4b15      	ldr	r3, [pc, #84]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a14      	ldr	r2, [pc, #80]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdbe:	f000 f8dd 	bl	800bf7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdc2:	4b12      	ldr	r3, [pc, #72]	; (800be0c <xPortStartScheduler+0x13c>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdc8:	f000 f8fc 	bl	800bfc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdcc:	4b10      	ldr	r3, [pc, #64]	; (800be10 <xPortStartScheduler+0x140>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a0f      	ldr	r2, [pc, #60]	; (800be10 <xPortStartScheduler+0x140>)
 800bdd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdd8:	f7ff ff66 	bl	800bca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bddc:	f7fe ff54 	bl	800ac88 <vTaskSwitchContext>
	prvTaskExitError();
 800bde0:	f7ff ff1e 	bl	800bc20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed00 	.word	0xe000ed00
 800bdf4:	410fc271 	.word	0x410fc271
 800bdf8:	410fc270 	.word	0x410fc270
 800bdfc:	e000e400 	.word	0xe000e400
 800be00:	20000d9c 	.word	0x20000d9c
 800be04:	20000da0 	.word	0x20000da0
 800be08:	e000ed20 	.word	0xe000ed20
 800be0c:	20000010 	.word	0x20000010
 800be10:	e000ef34 	.word	0xe000ef34

0800be14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	607b      	str	r3, [r7, #4]
}
 800be2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be2e:	4b0f      	ldr	r3, [pc, #60]	; (800be6c <vPortEnterCritical+0x58>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3301      	adds	r3, #1
 800be34:	4a0d      	ldr	r2, [pc, #52]	; (800be6c <vPortEnterCritical+0x58>)
 800be36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <vPortEnterCritical+0x58>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d10f      	bne.n	800be60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <vPortEnterCritical+0x5c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <vPortEnterCritical+0x4c>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	603b      	str	r3, [r7, #0]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vPortEnterCritical+0x4a>
	}
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20000010 	.word	0x20000010
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be7a:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <vPortExitCritical+0x50>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <vPortExitCritical+0x24>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	607b      	str	r3, [r7, #4]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <vPortExitCritical+0x50>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	4a09      	ldr	r2, [pc, #36]	; (800bec4 <vPortExitCritical+0x50>)
 800bea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bea2:	4b08      	ldr	r3, [pc, #32]	; (800bec4 <vPortExitCritical+0x50>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <vPortExitCritical+0x42>
 800beaa:	2300      	movs	r3, #0
 800beac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f383 8811 	msr	BASEPRI, r3
}
 800beb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000010 	.word	0x20000010
	...

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	f380 8811 	msr	BASEPRI, r0
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f7fe fec2 	bl	800ac88 <vTaskSwitchContext>
 800bf04:	f04f 0000 	mov.w	r0, #0
 800bf08:	f380 8811 	msr	BASEPRI, r0
 800bf0c:	bc09      	pop	{r0, r3}
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	6808      	ldr	r0, [r1, #0]
 800bf12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf16:	f01e 0f10 	tst.w	lr, #16
 800bf1a:	bf08      	it	eq
 800bf1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf20:	f380 8809 	msr	PSP, r0
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w

0800bf30 <pxCurrentTCBConst>:
 800bf30:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
}
 800bf50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf52:	f7fe fddf 	bl	800ab14 <xTaskIncrementTick>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <xPortSysTickHandler+0x40>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	2300      	movs	r3, #0
 800bf66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	f383 8811 	msr	BASEPRI, r3
}
 800bf6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <vPortSetupTimerInterrupt+0x38>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <vPortSetupTimerInterrupt+0x3c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <vPortSetupTimerInterrupt+0x40>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	099b      	lsrs	r3, r3, #6
 800bf98:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <vPortSetupTimerInterrupt+0x44>)
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf9e:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	e000e010 	.word	0xe000e010
 800bfb4:	e000e018 	.word	0xe000e018
 800bfb8:	20000004 	.word	0x20000004
 800bfbc:	10624dd3 	.word	0x10624dd3
 800bfc0:	e000e014 	.word	0xe000e014

0800bfc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd4 <vPortEnableVFP+0x10>
 800bfc8:	6801      	ldr	r1, [r0, #0]
 800bfca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfce:	6001      	str	r1, [r0, #0]
 800bfd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfd2:	bf00      	nop
 800bfd4:	e000ed88 	.word	0xe000ed88

0800bfd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfde:	f3ef 8305 	mrs	r3, IPSR
 800bfe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b0f      	cmp	r3, #15
 800bfe8:	d914      	bls.n	800c014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfea:	4a17      	ldr	r2, [pc, #92]	; (800c048 <vPortValidateInterruptPriority+0x70>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4413      	add	r3, r2
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bff4:	4b15      	ldr	r3, [pc, #84]	; (800c04c <vPortValidateInterruptPriority+0x74>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	7afa      	ldrb	r2, [r7, #11]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d20a      	bcs.n	800c014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	607b      	str	r3, [r7, #4]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c014:	4b0e      	ldr	r3, [pc, #56]	; (800c050 <vPortValidateInterruptPriority+0x78>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c01c:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <vPortValidateInterruptPriority+0x7c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d90a      	bls.n	800c03a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	603b      	str	r3, [r7, #0]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <vPortValidateInterruptPriority+0x60>
	}
 800c03a:	bf00      	nop
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	e000e3f0 	.word	0xe000e3f0
 800c04c:	20000d9c 	.word	0x20000d9c
 800c050:	e000ed0c 	.word	0xe000ed0c
 800c054:	20000da0 	.word	0x20000da0

0800c058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	; 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c064:	f7fe fc88 	bl	800a978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c068:	4b5b      	ldr	r3, [pc, #364]	; (800c1d8 <pvPortMalloc+0x180>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c070:	f000 f920 	bl	800c2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c074:	4b59      	ldr	r3, [pc, #356]	; (800c1dc <pvPortMalloc+0x184>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f040 8093 	bne.w	800c1a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01d      	beq.n	800c0c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c088:	2208      	movs	r2, #8
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d014      	beq.n	800c0c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f023 0307 	bic.w	r3, r3, #7
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	617b      	str	r3, [r7, #20]
}
 800c0c0:	bf00      	nop
 800c0c2:	e7fe      	b.n	800c0c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d06e      	beq.n	800c1a8 <pvPortMalloc+0x150>
 800c0ca:	4b45      	ldr	r3, [pc, #276]	; (800c1e0 <pvPortMalloc+0x188>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d869      	bhi.n	800c1a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0d4:	4b43      	ldr	r3, [pc, #268]	; (800c1e4 <pvPortMalloc+0x18c>)
 800c0d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0d8:	4b42      	ldr	r3, [pc, #264]	; (800c1e4 <pvPortMalloc+0x18c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0de:	e004      	b.n	800c0ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d903      	bls.n	800c0fc <pvPortMalloc+0xa4>
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f1      	bne.n	800c0e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0fc:	4b36      	ldr	r3, [pc, #216]	; (800c1d8 <pvPortMalloc+0x180>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c102:	429a      	cmp	r2, r3
 800c104:	d050      	beq.n	800c1a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c106:	6a3b      	ldr	r3, [r7, #32]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2208      	movs	r2, #8
 800c10c:	4413      	add	r3, r2
 800c10e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	1ad2      	subs	r2, r2, r3
 800c120:	2308      	movs	r3, #8
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	429a      	cmp	r2, r3
 800c126:	d91f      	bls.n	800c168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00a      	beq.n	800c150 <pvPortMalloc+0xf8>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	613b      	str	r3, [r7, #16]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c162:	69b8      	ldr	r0, [r7, #24]
 800c164:	f000 f908 	bl	800c378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c168:	4b1d      	ldr	r3, [pc, #116]	; (800c1e0 <pvPortMalloc+0x188>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	4a1b      	ldr	r2, [pc, #108]	; (800c1e0 <pvPortMalloc+0x188>)
 800c174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c176:	4b1a      	ldr	r3, [pc, #104]	; (800c1e0 <pvPortMalloc+0x188>)
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	4b1b      	ldr	r3, [pc, #108]	; (800c1e8 <pvPortMalloc+0x190>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d203      	bcs.n	800c18a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c182:	4b17      	ldr	r3, [pc, #92]	; (800c1e0 <pvPortMalloc+0x188>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a18      	ldr	r2, [pc, #96]	; (800c1e8 <pvPortMalloc+0x190>)
 800c188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	4b13      	ldr	r3, [pc, #76]	; (800c1dc <pvPortMalloc+0x184>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	431a      	orrs	r2, r3
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c19e:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <pvPortMalloc+0x194>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	4a11      	ldr	r2, [pc, #68]	; (800c1ec <pvPortMalloc+0x194>)
 800c1a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1a8:	f7fe fbf4 	bl	800a994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00a      	beq.n	800c1cc <pvPortMalloc+0x174>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	60fb      	str	r3, [r7, #12]
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <pvPortMalloc+0x172>
	return pvReturn;
 800c1cc:	69fb      	ldr	r3, [r7, #28]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3728      	adds	r7, #40	; 0x28
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	200049ac 	.word	0x200049ac
 800c1dc:	200049c0 	.word	0x200049c0
 800c1e0:	200049b0 	.word	0x200049b0
 800c1e4:	200049a4 	.word	0x200049a4
 800c1e8:	200049b4 	.word	0x200049b4
 800c1ec:	200049b8 	.word	0x200049b8

0800c1f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d04d      	beq.n	800c29e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c202:	2308      	movs	r3, #8
 800c204:	425b      	negs	r3, r3
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	4413      	add	r3, r2
 800c20a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <vPortFree+0xb8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4013      	ands	r3, r2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <vPortFree+0x44>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00a      	beq.n	800c252 <vPortFree+0x62>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60bb      	str	r3, [r7, #8]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <vPortFree+0xb8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d01e      	beq.n	800c29e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d11a      	bne.n	800c29e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	4b0e      	ldr	r3, [pc, #56]	; (800c2a8 <vPortFree+0xb8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	43db      	mvns	r3, r3
 800c272:	401a      	ands	r2, r3
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c278:	f7fe fb7e 	bl	800a978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <vPortFree+0xbc>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4413      	add	r3, r2
 800c286:	4a09      	ldr	r2, [pc, #36]	; (800c2ac <vPortFree+0xbc>)
 800c288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f000 f874 	bl	800c378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <vPortFree+0xc0>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <vPortFree+0xc0>)
 800c298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c29a:	f7fe fb7b 	bl	800a994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c29e:	bf00      	nop
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	200049c0 	.word	0x200049c0
 800c2ac:	200049b0 	.word	0x200049b0
 800c2b0:	200049bc 	.word	0x200049bc

0800c2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2c0:	4b27      	ldr	r3, [pc, #156]	; (800c360 <prvHeapInit+0xac>)
 800c2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f003 0307 	and.w	r3, r3, #7
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00c      	beq.n	800c2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3307      	adds	r3, #7
 800c2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <prvHeapInit+0xac>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2ec:	4a1d      	ldr	r2, [pc, #116]	; (800c364 <prvHeapInit+0xb0>)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <prvHeapInit+0xb0>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c300:	2208      	movs	r2, #8
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f023 0307 	bic.w	r3, r3, #7
 800c30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4a15      	ldr	r2, [pc, #84]	; (800c368 <prvHeapInit+0xb4>)
 800c314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <prvHeapInit+0xb4>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c31e:	4b12      	ldr	r3, [pc, #72]	; (800c368 <prvHeapInit+0xb4>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c334:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <prvHeapInit+0xb4>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4a0a      	ldr	r2, [pc, #40]	; (800c36c <prvHeapInit+0xb8>)
 800c342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	4a09      	ldr	r2, [pc, #36]	; (800c370 <prvHeapInit+0xbc>)
 800c34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c34c:	4b09      	ldr	r3, [pc, #36]	; (800c374 <prvHeapInit+0xc0>)
 800c34e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c352:	601a      	str	r2, [r3, #0]
}
 800c354:	bf00      	nop
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	20000da4 	.word	0x20000da4
 800c364:	200049a4 	.word	0x200049a4
 800c368:	200049ac 	.word	0x200049ac
 800c36c:	200049b4 	.word	0x200049b4
 800c370:	200049b0 	.word	0x200049b0
 800c374:	200049c0 	.word	0x200049c0

0800c378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c380:	4b28      	ldr	r3, [pc, #160]	; (800c424 <prvInsertBlockIntoFreeList+0xac>)
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e002      	b.n	800c38c <prvInsertBlockIntoFreeList+0x14>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d8f7      	bhi.n	800c386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d108      	bne.n	800c3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	441a      	add	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d118      	bne.n	800c400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	4b15      	ldr	r3, [pc, #84]	; (800c428 <prvInsertBlockIntoFreeList+0xb0>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d00d      	beq.n	800c3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e008      	b.n	800c408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3f6:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <prvInsertBlockIntoFreeList+0xb0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	e003      	b.n	800c408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d002      	beq.n	800c416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c416:	bf00      	nop
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	200049a4 	.word	0x200049a4
 800c428:	200049ac 	.word	0x200049ac

0800c42c <calloc>:
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <calloc+0xc>)
 800c42e:	460a      	mov	r2, r1
 800c430:	4601      	mov	r1, r0
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	f000 b842 	b.w	800c4bc <_calloc_r>
 800c438:	20000014 	.word	0x20000014

0800c43c <__errno>:
 800c43c:	4b01      	ldr	r3, [pc, #4]	; (800c444 <__errno+0x8>)
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20000014 	.word	0x20000014

0800c448 <__libc_init_array>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4d0d      	ldr	r5, [pc, #52]	; (800c480 <__libc_init_array+0x38>)
 800c44c:	4c0d      	ldr	r4, [pc, #52]	; (800c484 <__libc_init_array+0x3c>)
 800c44e:	1b64      	subs	r4, r4, r5
 800c450:	10a4      	asrs	r4, r4, #2
 800c452:	2600      	movs	r6, #0
 800c454:	42a6      	cmp	r6, r4
 800c456:	d109      	bne.n	800c46c <__libc_init_array+0x24>
 800c458:	4d0b      	ldr	r5, [pc, #44]	; (800c488 <__libc_init_array+0x40>)
 800c45a:	4c0c      	ldr	r4, [pc, #48]	; (800c48c <__libc_init_array+0x44>)
 800c45c:	f002 f8ea 	bl	800e634 <_init>
 800c460:	1b64      	subs	r4, r4, r5
 800c462:	10a4      	asrs	r4, r4, #2
 800c464:	2600      	movs	r6, #0
 800c466:	42a6      	cmp	r6, r4
 800c468:	d105      	bne.n	800c476 <__libc_init_array+0x2e>
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c470:	4798      	blx	r3
 800c472:	3601      	adds	r6, #1
 800c474:	e7ee      	b.n	800c454 <__libc_init_array+0xc>
 800c476:	f855 3b04 	ldr.w	r3, [r5], #4
 800c47a:	4798      	blx	r3
 800c47c:	3601      	adds	r6, #1
 800c47e:	e7f2      	b.n	800c466 <__libc_init_array+0x1e>
 800c480:	0800e978 	.word	0x0800e978
 800c484:	0800e978 	.word	0x0800e978
 800c488:	0800e978 	.word	0x0800e978
 800c48c:	0800e97c 	.word	0x0800e97c

0800c490 <memcpy>:
 800c490:	440a      	add	r2, r1
 800c492:	4291      	cmp	r1, r2
 800c494:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c498:	d100      	bne.n	800c49c <memcpy+0xc>
 800c49a:	4770      	bx	lr
 800c49c:	b510      	push	{r4, lr}
 800c49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a6:	4291      	cmp	r1, r2
 800c4a8:	d1f9      	bne.n	800c49e <memcpy+0xe>
 800c4aa:	bd10      	pop	{r4, pc}

0800c4ac <memset>:
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d100      	bne.n	800c4b6 <memset+0xa>
 800c4b4:	4770      	bx	lr
 800c4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ba:	e7f9      	b.n	800c4b0 <memset+0x4>

0800c4bc <_calloc_r>:
 800c4bc:	b513      	push	{r0, r1, r4, lr}
 800c4be:	434a      	muls	r2, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	9201      	str	r2, [sp, #4]
 800c4c4:	f000 f85a 	bl	800c57c <_malloc_r>
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	b118      	cbz	r0, 800c4d4 <_calloc_r+0x18>
 800c4cc:	9a01      	ldr	r2, [sp, #4]
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	f7ff ffec 	bl	800c4ac <memset>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	b002      	add	sp, #8
 800c4d8:	bd10      	pop	{r4, pc}
	...

0800c4dc <_free_r>:
 800c4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	d048      	beq.n	800c574 <_free_r+0x98>
 800c4e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4e6:	9001      	str	r0, [sp, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f1a1 0404 	sub.w	r4, r1, #4
 800c4ee:	bfb8      	it	lt
 800c4f0:	18e4      	addlt	r4, r4, r3
 800c4f2:	f000 f8b5 	bl	800c660 <__malloc_lock>
 800c4f6:	4a20      	ldr	r2, [pc, #128]	; (800c578 <_free_r+0x9c>)
 800c4f8:	9801      	ldr	r0, [sp, #4]
 800c4fa:	6813      	ldr	r3, [r2, #0]
 800c4fc:	4615      	mov	r5, r2
 800c4fe:	b933      	cbnz	r3, 800c50e <_free_r+0x32>
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6014      	str	r4, [r2, #0]
 800c504:	b003      	add	sp, #12
 800c506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c50a:	f000 b8af 	b.w	800c66c <__malloc_unlock>
 800c50e:	42a3      	cmp	r3, r4
 800c510:	d90b      	bls.n	800c52a <_free_r+0x4e>
 800c512:	6821      	ldr	r1, [r4, #0]
 800c514:	1862      	adds	r2, r4, r1
 800c516:	4293      	cmp	r3, r2
 800c518:	bf04      	itt	eq
 800c51a:	681a      	ldreq	r2, [r3, #0]
 800c51c:	685b      	ldreq	r3, [r3, #4]
 800c51e:	6063      	str	r3, [r4, #4]
 800c520:	bf04      	itt	eq
 800c522:	1852      	addeq	r2, r2, r1
 800c524:	6022      	streq	r2, [r4, #0]
 800c526:	602c      	str	r4, [r5, #0]
 800c528:	e7ec      	b.n	800c504 <_free_r+0x28>
 800c52a:	461a      	mov	r2, r3
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	b10b      	cbz	r3, 800c534 <_free_r+0x58>
 800c530:	42a3      	cmp	r3, r4
 800c532:	d9fa      	bls.n	800c52a <_free_r+0x4e>
 800c534:	6811      	ldr	r1, [r2, #0]
 800c536:	1855      	adds	r5, r2, r1
 800c538:	42a5      	cmp	r5, r4
 800c53a:	d10b      	bne.n	800c554 <_free_r+0x78>
 800c53c:	6824      	ldr	r4, [r4, #0]
 800c53e:	4421      	add	r1, r4
 800c540:	1854      	adds	r4, r2, r1
 800c542:	42a3      	cmp	r3, r4
 800c544:	6011      	str	r1, [r2, #0]
 800c546:	d1dd      	bne.n	800c504 <_free_r+0x28>
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	6053      	str	r3, [r2, #4]
 800c54e:	4421      	add	r1, r4
 800c550:	6011      	str	r1, [r2, #0]
 800c552:	e7d7      	b.n	800c504 <_free_r+0x28>
 800c554:	d902      	bls.n	800c55c <_free_r+0x80>
 800c556:	230c      	movs	r3, #12
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	e7d3      	b.n	800c504 <_free_r+0x28>
 800c55c:	6825      	ldr	r5, [r4, #0]
 800c55e:	1961      	adds	r1, r4, r5
 800c560:	428b      	cmp	r3, r1
 800c562:	bf04      	itt	eq
 800c564:	6819      	ldreq	r1, [r3, #0]
 800c566:	685b      	ldreq	r3, [r3, #4]
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	bf04      	itt	eq
 800c56c:	1949      	addeq	r1, r1, r5
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	6054      	str	r4, [r2, #4]
 800c572:	e7c7      	b.n	800c504 <_free_r+0x28>
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
 800c578:	200049c4 	.word	0x200049c4

0800c57c <_malloc_r>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	1ccd      	adds	r5, r1, #3
 800c580:	f025 0503 	bic.w	r5, r5, #3
 800c584:	3508      	adds	r5, #8
 800c586:	2d0c      	cmp	r5, #12
 800c588:	bf38      	it	cc
 800c58a:	250c      	movcc	r5, #12
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	4606      	mov	r6, r0
 800c590:	db01      	blt.n	800c596 <_malloc_r+0x1a>
 800c592:	42a9      	cmp	r1, r5
 800c594:	d903      	bls.n	800c59e <_malloc_r+0x22>
 800c596:	230c      	movs	r3, #12
 800c598:	6033      	str	r3, [r6, #0]
 800c59a:	2000      	movs	r0, #0
 800c59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c59e:	f000 f85f 	bl	800c660 <__malloc_lock>
 800c5a2:	4921      	ldr	r1, [pc, #132]	; (800c628 <_malloc_r+0xac>)
 800c5a4:	680a      	ldr	r2, [r1, #0]
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	b99c      	cbnz	r4, 800c5d2 <_malloc_r+0x56>
 800c5aa:	4f20      	ldr	r7, [pc, #128]	; (800c62c <_malloc_r+0xb0>)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	b923      	cbnz	r3, 800c5ba <_malloc_r+0x3e>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f000 f844 	bl	800c640 <_sbrk_r>
 800c5b8:	6038      	str	r0, [r7, #0]
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f000 f83f 	bl	800c640 <_sbrk_r>
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	d123      	bne.n	800c60e <_malloc_r+0x92>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	6033      	str	r3, [r6, #0]
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 f84e 	bl	800c66c <__malloc_unlock>
 800c5d0:	e7e3      	b.n	800c59a <_malloc_r+0x1e>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	1b5b      	subs	r3, r3, r5
 800c5d6:	d417      	bmi.n	800c608 <_malloc_r+0x8c>
 800c5d8:	2b0b      	cmp	r3, #11
 800c5da:	d903      	bls.n	800c5e4 <_malloc_r+0x68>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	441c      	add	r4, r3
 800c5e0:	6025      	str	r5, [r4, #0]
 800c5e2:	e004      	b.n	800c5ee <_malloc_r+0x72>
 800c5e4:	6863      	ldr	r3, [r4, #4]
 800c5e6:	42a2      	cmp	r2, r4
 800c5e8:	bf0c      	ite	eq
 800c5ea:	600b      	streq	r3, [r1, #0]
 800c5ec:	6053      	strne	r3, [r2, #4]
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 f83c 	bl	800c66c <__malloc_unlock>
 800c5f4:	f104 000b 	add.w	r0, r4, #11
 800c5f8:	1d23      	adds	r3, r4, #4
 800c5fa:	f020 0007 	bic.w	r0, r0, #7
 800c5fe:	1ac2      	subs	r2, r0, r3
 800c600:	d0cc      	beq.n	800c59c <_malloc_r+0x20>
 800c602:	1a1b      	subs	r3, r3, r0
 800c604:	50a3      	str	r3, [r4, r2]
 800c606:	e7c9      	b.n	800c59c <_malloc_r+0x20>
 800c608:	4622      	mov	r2, r4
 800c60a:	6864      	ldr	r4, [r4, #4]
 800c60c:	e7cc      	b.n	800c5a8 <_malloc_r+0x2c>
 800c60e:	1cc4      	adds	r4, r0, #3
 800c610:	f024 0403 	bic.w	r4, r4, #3
 800c614:	42a0      	cmp	r0, r4
 800c616:	d0e3      	beq.n	800c5e0 <_malloc_r+0x64>
 800c618:	1a21      	subs	r1, r4, r0
 800c61a:	4630      	mov	r0, r6
 800c61c:	f000 f810 	bl	800c640 <_sbrk_r>
 800c620:	3001      	adds	r0, #1
 800c622:	d1dd      	bne.n	800c5e0 <_malloc_r+0x64>
 800c624:	e7cf      	b.n	800c5c6 <_malloc_r+0x4a>
 800c626:	bf00      	nop
 800c628:	200049c4 	.word	0x200049c4
 800c62c:	200049c8 	.word	0x200049c8

0800c630 <realloc>:
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <realloc+0xc>)
 800c632:	460a      	mov	r2, r1
 800c634:	4601      	mov	r1, r0
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	f000 b81e 	b.w	800c678 <_realloc_r>
 800c63c:	20000014 	.word	0x20000014

0800c640 <_sbrk_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d06      	ldr	r5, [pc, #24]	; (800c65c <_sbrk_r+0x1c>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	602b      	str	r3, [r5, #0]
 800c64c:	f7f5 ffe8 	bl	8002620 <_sbrk>
 800c650:	1c43      	adds	r3, r0, #1
 800c652:	d102      	bne.n	800c65a <_sbrk_r+0x1a>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	b103      	cbz	r3, 800c65a <_sbrk_r+0x1a>
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	200052c8 	.word	0x200052c8

0800c660 <__malloc_lock>:
 800c660:	4801      	ldr	r0, [pc, #4]	; (800c668 <__malloc_lock+0x8>)
 800c662:	f000 b82f 	b.w	800c6c4 <__retarget_lock_acquire_recursive>
 800c666:	bf00      	nop
 800c668:	200052d0 	.word	0x200052d0

0800c66c <__malloc_unlock>:
 800c66c:	4801      	ldr	r0, [pc, #4]	; (800c674 <__malloc_unlock+0x8>)
 800c66e:	f000 b82a 	b.w	800c6c6 <__retarget_lock_release_recursive>
 800c672:	bf00      	nop
 800c674:	200052d0 	.word	0x200052d0

0800c678 <_realloc_r>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	4607      	mov	r7, r0
 800c67c:	4614      	mov	r4, r2
 800c67e:	460e      	mov	r6, r1
 800c680:	b921      	cbnz	r1, 800c68c <_realloc_r+0x14>
 800c682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c686:	4611      	mov	r1, r2
 800c688:	f7ff bf78 	b.w	800c57c <_malloc_r>
 800c68c:	b922      	cbnz	r2, 800c698 <_realloc_r+0x20>
 800c68e:	f7ff ff25 	bl	800c4dc <_free_r>
 800c692:	4625      	mov	r5, r4
 800c694:	4628      	mov	r0, r5
 800c696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c698:	f000 f816 	bl	800c6c8 <_malloc_usable_size_r>
 800c69c:	42a0      	cmp	r0, r4
 800c69e:	d20f      	bcs.n	800c6c0 <_realloc_r+0x48>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f7ff ff6a 	bl	800c57c <_malloc_r>
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d0f2      	beq.n	800c694 <_realloc_r+0x1c>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	f7ff feed 	bl	800c490 <memcpy>
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff ff0f 	bl	800c4dc <_free_r>
 800c6be:	e7e9      	b.n	800c694 <_realloc_r+0x1c>
 800c6c0:	4635      	mov	r5, r6
 800c6c2:	e7e7      	b.n	800c694 <_realloc_r+0x1c>

0800c6c4 <__retarget_lock_acquire_recursive>:
 800c6c4:	4770      	bx	lr

0800c6c6 <__retarget_lock_release_recursive>:
 800c6c6:	4770      	bx	lr

0800c6c8 <_malloc_usable_size_r>:
 800c6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6cc:	1f18      	subs	r0, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bfbc      	itt	lt
 800c6d2:	580b      	ldrlt	r3, [r1, r0]
 800c6d4:	18c0      	addlt	r0, r0, r3
 800c6d6:	4770      	bx	lr

0800c6d8 <cos>:
 800c6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6da:	ec53 2b10 	vmov	r2, r3, d0
 800c6de:	4824      	ldr	r0, [pc, #144]	; (800c770 <cos+0x98>)
 800c6e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6e4:	4281      	cmp	r1, r0
 800c6e6:	dc06      	bgt.n	800c6f6 <cos+0x1e>
 800c6e8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c768 <cos+0x90>
 800c6ec:	f001 f92c 	bl	800d948 <__kernel_cos>
 800c6f0:	ec51 0b10 	vmov	r0, r1, d0
 800c6f4:	e007      	b.n	800c706 <cos+0x2e>
 800c6f6:	481f      	ldr	r0, [pc, #124]	; (800c774 <cos+0x9c>)
 800c6f8:	4281      	cmp	r1, r0
 800c6fa:	dd09      	ble.n	800c710 <cos+0x38>
 800c6fc:	ee10 0a10 	vmov	r0, s0
 800c700:	4619      	mov	r1, r3
 800c702:	f7f3 fd89 	bl	8000218 <__aeabi_dsub>
 800c706:	ec41 0b10 	vmov	d0, r0, r1
 800c70a:	b005      	add	sp, #20
 800c70c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c710:	4668      	mov	r0, sp
 800c712:	f000 fe59 	bl	800d3c8 <__ieee754_rem_pio2>
 800c716:	f000 0003 	and.w	r0, r0, #3
 800c71a:	2801      	cmp	r0, #1
 800c71c:	d007      	beq.n	800c72e <cos+0x56>
 800c71e:	2802      	cmp	r0, #2
 800c720:	d012      	beq.n	800c748 <cos+0x70>
 800c722:	b9c0      	cbnz	r0, 800c756 <cos+0x7e>
 800c724:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c728:	ed9d 0b00 	vldr	d0, [sp]
 800c72c:	e7de      	b.n	800c6ec <cos+0x14>
 800c72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c732:	ed9d 0b00 	vldr	d0, [sp]
 800c736:	f001 fd0f 	bl	800e158 <__kernel_sin>
 800c73a:	ec53 2b10 	vmov	r2, r3, d0
 800c73e:	ee10 0a10 	vmov	r0, s0
 800c742:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c746:	e7de      	b.n	800c706 <cos+0x2e>
 800c748:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c74c:	ed9d 0b00 	vldr	d0, [sp]
 800c750:	f001 f8fa 	bl	800d948 <__kernel_cos>
 800c754:	e7f1      	b.n	800c73a <cos+0x62>
 800c756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c75a:	ed9d 0b00 	vldr	d0, [sp]
 800c75e:	2001      	movs	r0, #1
 800c760:	f001 fcfa 	bl	800e158 <__kernel_sin>
 800c764:	e7c4      	b.n	800c6f0 <cos+0x18>
 800c766:	bf00      	nop
	...
 800c770:	3fe921fb 	.word	0x3fe921fb
 800c774:	7fefffff 	.word	0x7fefffff

0800c778 <sin>:
 800c778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c77a:	ec53 2b10 	vmov	r2, r3, d0
 800c77e:	4826      	ldr	r0, [pc, #152]	; (800c818 <sin+0xa0>)
 800c780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c784:	4281      	cmp	r1, r0
 800c786:	dc07      	bgt.n	800c798 <sin+0x20>
 800c788:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c810 <sin+0x98>
 800c78c:	2000      	movs	r0, #0
 800c78e:	f001 fce3 	bl	800e158 <__kernel_sin>
 800c792:	ec51 0b10 	vmov	r0, r1, d0
 800c796:	e007      	b.n	800c7a8 <sin+0x30>
 800c798:	4820      	ldr	r0, [pc, #128]	; (800c81c <sin+0xa4>)
 800c79a:	4281      	cmp	r1, r0
 800c79c:	dd09      	ble.n	800c7b2 <sin+0x3a>
 800c79e:	ee10 0a10 	vmov	r0, s0
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	f7f3 fd38 	bl	8000218 <__aeabi_dsub>
 800c7a8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ac:	b005      	add	sp, #20
 800c7ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7b2:	4668      	mov	r0, sp
 800c7b4:	f000 fe08 	bl	800d3c8 <__ieee754_rem_pio2>
 800c7b8:	f000 0003 	and.w	r0, r0, #3
 800c7bc:	2801      	cmp	r0, #1
 800c7be:	d008      	beq.n	800c7d2 <sin+0x5a>
 800c7c0:	2802      	cmp	r0, #2
 800c7c2:	d00d      	beq.n	800c7e0 <sin+0x68>
 800c7c4:	b9d0      	cbnz	r0, 800c7fc <sin+0x84>
 800c7c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7ca:	ed9d 0b00 	vldr	d0, [sp]
 800c7ce:	2001      	movs	r0, #1
 800c7d0:	e7dd      	b.n	800c78e <sin+0x16>
 800c7d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7d6:	ed9d 0b00 	vldr	d0, [sp]
 800c7da:	f001 f8b5 	bl	800d948 <__kernel_cos>
 800c7de:	e7d8      	b.n	800c792 <sin+0x1a>
 800c7e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7e4:	ed9d 0b00 	vldr	d0, [sp]
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	f001 fcb5 	bl	800e158 <__kernel_sin>
 800c7ee:	ec53 2b10 	vmov	r2, r3, d0
 800c7f2:	ee10 0a10 	vmov	r0, s0
 800c7f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7fa:	e7d5      	b.n	800c7a8 <sin+0x30>
 800c7fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c800:	ed9d 0b00 	vldr	d0, [sp]
 800c804:	f001 f8a0 	bl	800d948 <__kernel_cos>
 800c808:	e7f1      	b.n	800c7ee <sin+0x76>
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w
	...
 800c818:	3fe921fb 	.word	0x3fe921fb
 800c81c:	7fefffff 	.word	0x7fefffff

0800c820 <pow>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	ec59 8b10 	vmov	r8, r9, d0
 800c828:	ec57 6b11 	vmov	r6, r7, d1
 800c82c:	f000 f8a8 	bl	800c980 <__ieee754_pow>
 800c830:	4b4e      	ldr	r3, [pc, #312]	; (800c96c <pow+0x14c>)
 800c832:	f993 3000 	ldrsb.w	r3, [r3]
 800c836:	3301      	adds	r3, #1
 800c838:	ec55 4b10 	vmov	r4, r5, d0
 800c83c:	d015      	beq.n	800c86a <pow+0x4a>
 800c83e:	4632      	mov	r2, r6
 800c840:	463b      	mov	r3, r7
 800c842:	4630      	mov	r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	f7f4 f939 	bl	8000abc <__aeabi_dcmpun>
 800c84a:	b970      	cbnz	r0, 800c86a <pow+0x4a>
 800c84c:	4642      	mov	r2, r8
 800c84e:	464b      	mov	r3, r9
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f4 f932 	bl	8000abc <__aeabi_dcmpun>
 800c858:	2200      	movs	r2, #0
 800c85a:	2300      	movs	r3, #0
 800c85c:	b148      	cbz	r0, 800c872 <pow+0x52>
 800c85e:	4630      	mov	r0, r6
 800c860:	4639      	mov	r1, r7
 800c862:	f7f4 f8f9 	bl	8000a58 <__aeabi_dcmpeq>
 800c866:	2800      	cmp	r0, #0
 800c868:	d17d      	bne.n	800c966 <pow+0x146>
 800c86a:	ec45 4b10 	vmov	d0, r4, r5
 800c86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c872:	4640      	mov	r0, r8
 800c874:	4649      	mov	r1, r9
 800c876:	f7f4 f8ef 	bl	8000a58 <__aeabi_dcmpeq>
 800c87a:	b1e0      	cbz	r0, 800c8b6 <pow+0x96>
 800c87c:	2200      	movs	r2, #0
 800c87e:	2300      	movs	r3, #0
 800c880:	4630      	mov	r0, r6
 800c882:	4639      	mov	r1, r7
 800c884:	f7f4 f8e8 	bl	8000a58 <__aeabi_dcmpeq>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d16c      	bne.n	800c966 <pow+0x146>
 800c88c:	ec47 6b10 	vmov	d0, r6, r7
 800c890:	f001 fd29 	bl	800e2e6 <finite>
 800c894:	2800      	cmp	r0, #0
 800c896:	d0e8      	beq.n	800c86a <pow+0x4a>
 800c898:	2200      	movs	r2, #0
 800c89a:	2300      	movs	r3, #0
 800c89c:	4630      	mov	r0, r6
 800c89e:	4639      	mov	r1, r7
 800c8a0:	f7f4 f8e4 	bl	8000a6c <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d0e0      	beq.n	800c86a <pow+0x4a>
 800c8a8:	f7ff fdc8 	bl	800c43c <__errno>
 800c8ac:	2321      	movs	r3, #33	; 0x21
 800c8ae:	6003      	str	r3, [r0, #0]
 800c8b0:	2400      	movs	r4, #0
 800c8b2:	4d2f      	ldr	r5, [pc, #188]	; (800c970 <pow+0x150>)
 800c8b4:	e7d9      	b.n	800c86a <pow+0x4a>
 800c8b6:	ec45 4b10 	vmov	d0, r4, r5
 800c8ba:	f001 fd14 	bl	800e2e6 <finite>
 800c8be:	bbb8      	cbnz	r0, 800c930 <pow+0x110>
 800c8c0:	ec49 8b10 	vmov	d0, r8, r9
 800c8c4:	f001 fd0f 	bl	800e2e6 <finite>
 800c8c8:	b390      	cbz	r0, 800c930 <pow+0x110>
 800c8ca:	ec47 6b10 	vmov	d0, r6, r7
 800c8ce:	f001 fd0a 	bl	800e2e6 <finite>
 800c8d2:	b368      	cbz	r0, 800c930 <pow+0x110>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	4620      	mov	r0, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	f7f4 f8ee 	bl	8000abc <__aeabi_dcmpun>
 800c8e0:	b160      	cbz	r0, 800c8fc <pow+0xdc>
 800c8e2:	f7ff fdab 	bl	800c43c <__errno>
 800c8e6:	2321      	movs	r3, #33	; 0x21
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	f7f3 ff73 	bl	80007dc <__aeabi_ddiv>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	e7b6      	b.n	800c86a <pow+0x4a>
 800c8fc:	f7ff fd9e 	bl	800c43c <__errno>
 800c900:	2322      	movs	r3, #34	; 0x22
 800c902:	6003      	str	r3, [r0, #0]
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	4640      	mov	r0, r8
 800c90a:	4649      	mov	r1, r9
 800c90c:	f7f4 f8ae 	bl	8000a6c <__aeabi_dcmplt>
 800c910:	2400      	movs	r4, #0
 800c912:	b158      	cbz	r0, 800c92c <pow+0x10c>
 800c914:	ec47 6b10 	vmov	d0, r6, r7
 800c918:	f001 fd7a 	bl	800e410 <rint>
 800c91c:	4632      	mov	r2, r6
 800c91e:	ec51 0b10 	vmov	r0, r1, d0
 800c922:	463b      	mov	r3, r7
 800c924:	f7f4 f898 	bl	8000a58 <__aeabi_dcmpeq>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d0c2      	beq.n	800c8b2 <pow+0x92>
 800c92c:	4d11      	ldr	r5, [pc, #68]	; (800c974 <pow+0x154>)
 800c92e:	e79c      	b.n	800c86a <pow+0x4a>
 800c930:	2200      	movs	r2, #0
 800c932:	2300      	movs	r3, #0
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f4 f88e 	bl	8000a58 <__aeabi_dcmpeq>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d094      	beq.n	800c86a <pow+0x4a>
 800c940:	ec49 8b10 	vmov	d0, r8, r9
 800c944:	f001 fccf 	bl	800e2e6 <finite>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d08e      	beq.n	800c86a <pow+0x4a>
 800c94c:	ec47 6b10 	vmov	d0, r6, r7
 800c950:	f001 fcc9 	bl	800e2e6 <finite>
 800c954:	2800      	cmp	r0, #0
 800c956:	d088      	beq.n	800c86a <pow+0x4a>
 800c958:	f7ff fd70 	bl	800c43c <__errno>
 800c95c:	2322      	movs	r3, #34	; 0x22
 800c95e:	6003      	str	r3, [r0, #0]
 800c960:	2400      	movs	r4, #0
 800c962:	2500      	movs	r5, #0
 800c964:	e781      	b.n	800c86a <pow+0x4a>
 800c966:	4d04      	ldr	r5, [pc, #16]	; (800c978 <pow+0x158>)
 800c968:	2400      	movs	r4, #0
 800c96a:	e77e      	b.n	800c86a <pow+0x4a>
 800c96c:	20000078 	.word	0x20000078
 800c970:	fff00000 	.word	0xfff00000
 800c974:	7ff00000 	.word	0x7ff00000
 800c978:	3ff00000 	.word	0x3ff00000
 800c97c:	00000000 	.word	0x00000000

0800c980 <__ieee754_pow>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	ed2d 8b06 	vpush	{d8-d10}
 800c988:	b08d      	sub	sp, #52	; 0x34
 800c98a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c98e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c992:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c996:	ea56 0100 	orrs.w	r1, r6, r0
 800c99a:	ec53 2b10 	vmov	r2, r3, d0
 800c99e:	f000 84d1 	beq.w	800d344 <__ieee754_pow+0x9c4>
 800c9a2:	497f      	ldr	r1, [pc, #508]	; (800cba0 <__ieee754_pow+0x220>)
 800c9a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c9a8:	428c      	cmp	r4, r1
 800c9aa:	ee10 8a10 	vmov	r8, s0
 800c9ae:	4699      	mov	r9, r3
 800c9b0:	dc09      	bgt.n	800c9c6 <__ieee754_pow+0x46>
 800c9b2:	d103      	bne.n	800c9bc <__ieee754_pow+0x3c>
 800c9b4:	b97a      	cbnz	r2, 800c9d6 <__ieee754_pow+0x56>
 800c9b6:	42a6      	cmp	r6, r4
 800c9b8:	dd02      	ble.n	800c9c0 <__ieee754_pow+0x40>
 800c9ba:	e00c      	b.n	800c9d6 <__ieee754_pow+0x56>
 800c9bc:	428e      	cmp	r6, r1
 800c9be:	dc02      	bgt.n	800c9c6 <__ieee754_pow+0x46>
 800c9c0:	428e      	cmp	r6, r1
 800c9c2:	d110      	bne.n	800c9e6 <__ieee754_pow+0x66>
 800c9c4:	b178      	cbz	r0, 800c9e6 <__ieee754_pow+0x66>
 800c9c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c9ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c9ce:	ea54 0308 	orrs.w	r3, r4, r8
 800c9d2:	f000 84b7 	beq.w	800d344 <__ieee754_pow+0x9c4>
 800c9d6:	4873      	ldr	r0, [pc, #460]	; (800cba4 <__ieee754_pow+0x224>)
 800c9d8:	b00d      	add	sp, #52	; 0x34
 800c9da:	ecbd 8b06 	vpop	{d8-d10}
 800c9de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e2:	f001 bd0d 	b.w	800e400 <nan>
 800c9e6:	f1b9 0f00 	cmp.w	r9, #0
 800c9ea:	da36      	bge.n	800ca5a <__ieee754_pow+0xda>
 800c9ec:	496e      	ldr	r1, [pc, #440]	; (800cba8 <__ieee754_pow+0x228>)
 800c9ee:	428e      	cmp	r6, r1
 800c9f0:	dc51      	bgt.n	800ca96 <__ieee754_pow+0x116>
 800c9f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c9f6:	428e      	cmp	r6, r1
 800c9f8:	f340 84af 	ble.w	800d35a <__ieee754_pow+0x9da>
 800c9fc:	1531      	asrs	r1, r6, #20
 800c9fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ca02:	2914      	cmp	r1, #20
 800ca04:	dd0f      	ble.n	800ca26 <__ieee754_pow+0xa6>
 800ca06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800ca0a:	fa20 fc01 	lsr.w	ip, r0, r1
 800ca0e:	fa0c f101 	lsl.w	r1, ip, r1
 800ca12:	4281      	cmp	r1, r0
 800ca14:	f040 84a1 	bne.w	800d35a <__ieee754_pow+0x9da>
 800ca18:	f00c 0c01 	and.w	ip, ip, #1
 800ca1c:	f1cc 0102 	rsb	r1, ip, #2
 800ca20:	9100      	str	r1, [sp, #0]
 800ca22:	b180      	cbz	r0, 800ca46 <__ieee754_pow+0xc6>
 800ca24:	e059      	b.n	800cada <__ieee754_pow+0x15a>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d155      	bne.n	800cad6 <__ieee754_pow+0x156>
 800ca2a:	f1c1 0114 	rsb	r1, r1, #20
 800ca2e:	fa46 fc01 	asr.w	ip, r6, r1
 800ca32:	fa0c f101 	lsl.w	r1, ip, r1
 800ca36:	42b1      	cmp	r1, r6
 800ca38:	f040 848c 	bne.w	800d354 <__ieee754_pow+0x9d4>
 800ca3c:	f00c 0c01 	and.w	ip, ip, #1
 800ca40:	f1cc 0102 	rsb	r1, ip, #2
 800ca44:	9100      	str	r1, [sp, #0]
 800ca46:	4959      	ldr	r1, [pc, #356]	; (800cbac <__ieee754_pow+0x22c>)
 800ca48:	428e      	cmp	r6, r1
 800ca4a:	d12d      	bne.n	800caa8 <__ieee754_pow+0x128>
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	da79      	bge.n	800cb44 <__ieee754_pow+0x1c4>
 800ca50:	4956      	ldr	r1, [pc, #344]	; (800cbac <__ieee754_pow+0x22c>)
 800ca52:	2000      	movs	r0, #0
 800ca54:	f7f3 fec2 	bl	80007dc <__aeabi_ddiv>
 800ca58:	e016      	b.n	800ca88 <__ieee754_pow+0x108>
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	9100      	str	r1, [sp, #0]
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d13b      	bne.n	800cada <__ieee754_pow+0x15a>
 800ca62:	494f      	ldr	r1, [pc, #316]	; (800cba0 <__ieee754_pow+0x220>)
 800ca64:	428e      	cmp	r6, r1
 800ca66:	d1ee      	bne.n	800ca46 <__ieee754_pow+0xc6>
 800ca68:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ca6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ca70:	ea53 0308 	orrs.w	r3, r3, r8
 800ca74:	f000 8466 	beq.w	800d344 <__ieee754_pow+0x9c4>
 800ca78:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <__ieee754_pow+0x230>)
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	dd0d      	ble.n	800ca9a <__ieee754_pow+0x11a>
 800ca7e:	2f00      	cmp	r7, #0
 800ca80:	f280 8464 	bge.w	800d34c <__ieee754_pow+0x9cc>
 800ca84:	2000      	movs	r0, #0
 800ca86:	2100      	movs	r1, #0
 800ca88:	ec41 0b10 	vmov	d0, r0, r1
 800ca8c:	b00d      	add	sp, #52	; 0x34
 800ca8e:	ecbd 8b06 	vpop	{d8-d10}
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	2102      	movs	r1, #2
 800ca98:	e7e0      	b.n	800ca5c <__ieee754_pow+0xdc>
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	daf2      	bge.n	800ca84 <__ieee754_pow+0x104>
 800ca9e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800caa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800caa6:	e7ef      	b.n	800ca88 <__ieee754_pow+0x108>
 800caa8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800caac:	d104      	bne.n	800cab8 <__ieee754_pow+0x138>
 800caae:	4610      	mov	r0, r2
 800cab0:	4619      	mov	r1, r3
 800cab2:	f7f3 fd69 	bl	8000588 <__aeabi_dmul>
 800cab6:	e7e7      	b.n	800ca88 <__ieee754_pow+0x108>
 800cab8:	493e      	ldr	r1, [pc, #248]	; (800cbb4 <__ieee754_pow+0x234>)
 800caba:	428f      	cmp	r7, r1
 800cabc:	d10d      	bne.n	800cada <__ieee754_pow+0x15a>
 800cabe:	f1b9 0f00 	cmp.w	r9, #0
 800cac2:	db0a      	blt.n	800cada <__ieee754_pow+0x15a>
 800cac4:	ec43 2b10 	vmov	d0, r2, r3
 800cac8:	b00d      	add	sp, #52	; 0x34
 800caca:	ecbd 8b06 	vpop	{d8-d10}
 800cace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad2:	f000 be83 	b.w	800d7dc <__ieee754_sqrt>
 800cad6:	2100      	movs	r1, #0
 800cad8:	9100      	str	r1, [sp, #0]
 800cada:	ec43 2b10 	vmov	d0, r2, r3
 800cade:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cae2:	f001 fbf7 	bl	800e2d4 <fabs>
 800cae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caea:	ec51 0b10 	vmov	r0, r1, d0
 800caee:	f1b8 0f00 	cmp.w	r8, #0
 800caf2:	d12a      	bne.n	800cb4a <__ieee754_pow+0x1ca>
 800caf4:	b12c      	cbz	r4, 800cb02 <__ieee754_pow+0x182>
 800caf6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800cbac <__ieee754_pow+0x22c>
 800cafa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800cafe:	45e6      	cmp	lr, ip
 800cb00:	d123      	bne.n	800cb4a <__ieee754_pow+0x1ca>
 800cb02:	2f00      	cmp	r7, #0
 800cb04:	da05      	bge.n	800cb12 <__ieee754_pow+0x192>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	4927      	ldr	r1, [pc, #156]	; (800cbac <__ieee754_pow+0x22c>)
 800cb0e:	f7f3 fe65 	bl	80007dc <__aeabi_ddiv>
 800cb12:	f1b9 0f00 	cmp.w	r9, #0
 800cb16:	dab7      	bge.n	800ca88 <__ieee754_pow+0x108>
 800cb18:	9b00      	ldr	r3, [sp, #0]
 800cb1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cb1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cb22:	4323      	orrs	r3, r4
 800cb24:	d108      	bne.n	800cb38 <__ieee754_pow+0x1b8>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f7f3 fb73 	bl	8000218 <__aeabi_dsub>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	e78d      	b.n	800ca54 <__ieee754_pow+0xd4>
 800cb38:	9b00      	ldr	r3, [sp, #0]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d1a4      	bne.n	800ca88 <__ieee754_pow+0x108>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb44:	4610      	mov	r0, r2
 800cb46:	4619      	mov	r1, r3
 800cb48:	e79e      	b.n	800ca88 <__ieee754_pow+0x108>
 800cb4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800cb4e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800cb52:	950a      	str	r5, [sp, #40]	; 0x28
 800cb54:	9d00      	ldr	r5, [sp, #0]
 800cb56:	46ac      	mov	ip, r5
 800cb58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cb5a:	ea5c 0505 	orrs.w	r5, ip, r5
 800cb5e:	d0e4      	beq.n	800cb2a <__ieee754_pow+0x1aa>
 800cb60:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <__ieee754_pow+0x238>)
 800cb62:	429e      	cmp	r6, r3
 800cb64:	f340 80fc 	ble.w	800cd60 <__ieee754_pow+0x3e0>
 800cb68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cb6c:	429e      	cmp	r6, r3
 800cb6e:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <__ieee754_pow+0x230>)
 800cb70:	dd07      	ble.n	800cb82 <__ieee754_pow+0x202>
 800cb72:	429c      	cmp	r4, r3
 800cb74:	dc0a      	bgt.n	800cb8c <__ieee754_pow+0x20c>
 800cb76:	2f00      	cmp	r7, #0
 800cb78:	da84      	bge.n	800ca84 <__ieee754_pow+0x104>
 800cb7a:	a307      	add	r3, pc, #28	; (adr r3, 800cb98 <__ieee754_pow+0x218>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	e795      	b.n	800caae <__ieee754_pow+0x12e>
 800cb82:	429c      	cmp	r4, r3
 800cb84:	dbf7      	blt.n	800cb76 <__ieee754_pow+0x1f6>
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <__ieee754_pow+0x22c>)
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	dd17      	ble.n	800cbbc <__ieee754_pow+0x23c>
 800cb8c:	2f00      	cmp	r7, #0
 800cb8e:	dcf4      	bgt.n	800cb7a <__ieee754_pow+0x1fa>
 800cb90:	e778      	b.n	800ca84 <__ieee754_pow+0x104>
 800cb92:	bf00      	nop
 800cb94:	f3af 8000 	nop.w
 800cb98:	8800759c 	.word	0x8800759c
 800cb9c:	7e37e43c 	.word	0x7e37e43c
 800cba0:	7ff00000 	.word	0x7ff00000
 800cba4:	0800e750 	.word	0x0800e750
 800cba8:	433fffff 	.word	0x433fffff
 800cbac:	3ff00000 	.word	0x3ff00000
 800cbb0:	3fefffff 	.word	0x3fefffff
 800cbb4:	3fe00000 	.word	0x3fe00000
 800cbb8:	41e00000 	.word	0x41e00000
 800cbbc:	4b64      	ldr	r3, [pc, #400]	; (800cd50 <__ieee754_pow+0x3d0>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f7f3 fb2a 	bl	8000218 <__aeabi_dsub>
 800cbc4:	a356      	add	r3, pc, #344	; (adr r3, 800cd20 <__ieee754_pow+0x3a0>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	4604      	mov	r4, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	f7f3 fcdb 	bl	8000588 <__aeabi_dmul>
 800cbd2:	a355      	add	r3, pc, #340	; (adr r3, 800cd28 <__ieee754_pow+0x3a8>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f7f3 fcd2 	bl	8000588 <__aeabi_dmul>
 800cbe4:	4b5b      	ldr	r3, [pc, #364]	; (800cd54 <__ieee754_pow+0x3d4>)
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	468b      	mov	fp, r1
 800cbea:	2200      	movs	r2, #0
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fcca 	bl	8000588 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	a14d      	add	r1, pc, #308	; (adr r1, 800cd30 <__ieee754_pow+0x3b0>)
 800cbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbfe:	f7f3 fb0b 	bl	8000218 <__aeabi_dsub>
 800cc02:	4622      	mov	r2, r4
 800cc04:	462b      	mov	r3, r5
 800cc06:	f7f3 fcbf 	bl	8000588 <__aeabi_dmul>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	2000      	movs	r0, #0
 800cc10:	4951      	ldr	r1, [pc, #324]	; (800cd58 <__ieee754_pow+0x3d8>)
 800cc12:	f7f3 fb01 	bl	8000218 <__aeabi_dsub>
 800cc16:	4622      	mov	r2, r4
 800cc18:	4680      	mov	r8, r0
 800cc1a:	4689      	mov	r9, r1
 800cc1c:	462b      	mov	r3, r5
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 fcb1 	bl	8000588 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4640      	mov	r0, r8
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	f7f3 fcab 	bl	8000588 <__aeabi_dmul>
 800cc32:	a341      	add	r3, pc, #260	; (adr r3, 800cd38 <__ieee754_pow+0x3b8>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fca6 	bl	8000588 <__aeabi_dmul>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4650      	mov	r0, sl
 800cc42:	4659      	mov	r1, fp
 800cc44:	f7f3 fae8 	bl	8000218 <__aeabi_dsub>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	4689      	mov	r9, r1
 800cc50:	4630      	mov	r0, r6
 800cc52:	4639      	mov	r1, r7
 800cc54:	f7f3 fae2 	bl	800021c <__adddf3>
 800cc58:	2400      	movs	r4, #0
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	4620      	mov	r0, r4
 800cc60:	460d      	mov	r5, r1
 800cc62:	f7f3 fad9 	bl	8000218 <__aeabi_dsub>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	f7f3 fad3 	bl	8000218 <__aeabi_dsub>
 800cc72:	9b00      	ldr	r3, [sp, #0]
 800cc74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc76:	3b01      	subs	r3, #1
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	4682      	mov	sl, r0
 800cc7c:	468b      	mov	fp, r1
 800cc7e:	f040 81f1 	bne.w	800d064 <__ieee754_pow+0x6e4>
 800cc82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cd40 <__ieee754_pow+0x3c0>
 800cc86:	eeb0 8a47 	vmov.f32	s16, s14
 800cc8a:	eef0 8a67 	vmov.f32	s17, s15
 800cc8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc92:	2600      	movs	r6, #0
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9c:	f7f3 fabc 	bl	8000218 <__aeabi_dsub>
 800cca0:	4622      	mov	r2, r4
 800cca2:	462b      	mov	r3, r5
 800cca4:	f7f3 fc70 	bl	8000588 <__aeabi_dmul>
 800cca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccac:	4680      	mov	r8, r0
 800ccae:	4689      	mov	r9, r1
 800ccb0:	4650      	mov	r0, sl
 800ccb2:	4659      	mov	r1, fp
 800ccb4:	f7f3 fc68 	bl	8000588 <__aeabi_dmul>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4640      	mov	r0, r8
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	f7f3 faac 	bl	800021c <__adddf3>
 800ccc4:	4632      	mov	r2, r6
 800ccc6:	463b      	mov	r3, r7
 800ccc8:	4680      	mov	r8, r0
 800ccca:	4689      	mov	r9, r1
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7f3 fc5a 	bl	8000588 <__aeabi_dmul>
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	4602      	mov	r2, r0
 800ccdc:	4649      	mov	r1, r9
 800ccde:	4640      	mov	r0, r8
 800cce0:	f7f3 fa9c 	bl	800021c <__adddf3>
 800cce4:	4b1d      	ldr	r3, [pc, #116]	; (800cd5c <__ieee754_pow+0x3dc>)
 800cce6:	4299      	cmp	r1, r3
 800cce8:	ec45 4b19 	vmov	d9, r4, r5
 800ccec:	4606      	mov	r6, r0
 800ccee:	460f      	mov	r7, r1
 800ccf0:	468b      	mov	fp, r1
 800ccf2:	f340 82fe 	ble.w	800d2f2 <__ieee754_pow+0x972>
 800ccf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ccfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ccfe:	4303      	orrs	r3, r0
 800cd00:	f000 81f0 	beq.w	800d0e4 <__ieee754_pow+0x764>
 800cd04:	a310      	add	r3, pc, #64	; (adr r3, 800cd48 <__ieee754_pow+0x3c8>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	ec51 0b18 	vmov	r0, r1, d8
 800cd0e:	f7f3 fc3b 	bl	8000588 <__aeabi_dmul>
 800cd12:	a30d      	add	r3, pc, #52	; (adr r3, 800cd48 <__ieee754_pow+0x3c8>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	e6cb      	b.n	800cab2 <__ieee754_pow+0x132>
 800cd1a:	bf00      	nop
 800cd1c:	f3af 8000 	nop.w
 800cd20:	60000000 	.word	0x60000000
 800cd24:	3ff71547 	.word	0x3ff71547
 800cd28:	f85ddf44 	.word	0xf85ddf44
 800cd2c:	3e54ae0b 	.word	0x3e54ae0b
 800cd30:	55555555 	.word	0x55555555
 800cd34:	3fd55555 	.word	0x3fd55555
 800cd38:	652b82fe 	.word	0x652b82fe
 800cd3c:	3ff71547 	.word	0x3ff71547
 800cd40:	00000000 	.word	0x00000000
 800cd44:	bff00000 	.word	0xbff00000
 800cd48:	8800759c 	.word	0x8800759c
 800cd4c:	7e37e43c 	.word	0x7e37e43c
 800cd50:	3ff00000 	.word	0x3ff00000
 800cd54:	3fd00000 	.word	0x3fd00000
 800cd58:	3fe00000 	.word	0x3fe00000
 800cd5c:	408fffff 	.word	0x408fffff
 800cd60:	4bd7      	ldr	r3, [pc, #860]	; (800d0c0 <__ieee754_pow+0x740>)
 800cd62:	ea03 0309 	and.w	r3, r3, r9
 800cd66:	2200      	movs	r2, #0
 800cd68:	b92b      	cbnz	r3, 800cd76 <__ieee754_pow+0x3f6>
 800cd6a:	4bd6      	ldr	r3, [pc, #856]	; (800d0c4 <__ieee754_pow+0x744>)
 800cd6c:	f7f3 fc0c 	bl	8000588 <__aeabi_dmul>
 800cd70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cd74:	460c      	mov	r4, r1
 800cd76:	1523      	asrs	r3, r4, #20
 800cd78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd7c:	4413      	add	r3, r2
 800cd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd80:	4bd1      	ldr	r3, [pc, #836]	; (800d0c8 <__ieee754_pow+0x748>)
 800cd82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cd86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cd8a:	429c      	cmp	r4, r3
 800cd8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cd90:	dd08      	ble.n	800cda4 <__ieee754_pow+0x424>
 800cd92:	4bce      	ldr	r3, [pc, #824]	; (800d0cc <__ieee754_pow+0x74c>)
 800cd94:	429c      	cmp	r4, r3
 800cd96:	f340 8163 	ble.w	800d060 <__ieee754_pow+0x6e0>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cda0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cda4:	2400      	movs	r4, #0
 800cda6:	00e3      	lsls	r3, r4, #3
 800cda8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdaa:	4bc9      	ldr	r3, [pc, #804]	; (800d0d0 <__ieee754_pow+0x750>)
 800cdac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdb0:	ed93 7b00 	vldr	d7, [r3]
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	ec53 2b17 	vmov	r2, r3, d7
 800cdba:	eeb0 8a47 	vmov.f32	s16, s14
 800cdbe:	eef0 8a67 	vmov.f32	s17, s15
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	f7f3 fa28 	bl	8000218 <__aeabi_dsub>
 800cdc8:	4652      	mov	r2, sl
 800cdca:	4606      	mov	r6, r0
 800cdcc:	460f      	mov	r7, r1
 800cdce:	462b      	mov	r3, r5
 800cdd0:	ec51 0b18 	vmov	r0, r1, d8
 800cdd4:	f7f3 fa22 	bl	800021c <__adddf3>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	2000      	movs	r0, #0
 800cdde:	49bd      	ldr	r1, [pc, #756]	; (800d0d4 <__ieee754_pow+0x754>)
 800cde0:	f7f3 fcfc 	bl	80007dc <__aeabi_ddiv>
 800cde4:	ec41 0b19 	vmov	d9, r0, r1
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 fbca 	bl	8000588 <__aeabi_dmul>
 800cdf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce00:	2300      	movs	r3, #0
 800ce02:	9304      	str	r3, [sp, #16]
 800ce04:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ce08:	46ab      	mov	fp, r5
 800ce0a:	106d      	asrs	r5, r5, #1
 800ce0c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ce10:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ce14:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	4649      	mov	r1, r9
 800ce1e:	4614      	mov	r4, r2
 800ce20:	461d      	mov	r5, r3
 800ce22:	f7f3 fbb1 	bl	8000588 <__aeabi_dmul>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	f7f3 f9f3 	bl	8000218 <__aeabi_dsub>
 800ce32:	ec53 2b18 	vmov	r2, r3, d8
 800ce36:	4606      	mov	r6, r0
 800ce38:	460f      	mov	r7, r1
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7f3 f9eb 	bl	8000218 <__aeabi_dsub>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4650      	mov	r0, sl
 800ce48:	4659      	mov	r1, fp
 800ce4a:	f7f3 f9e5 	bl	8000218 <__aeabi_dsub>
 800ce4e:	4642      	mov	r2, r8
 800ce50:	464b      	mov	r3, r9
 800ce52:	f7f3 fb99 	bl	8000588 <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 f9db 	bl	8000218 <__aeabi_dsub>
 800ce62:	ec53 2b19 	vmov	r2, r3, d9
 800ce66:	f7f3 fb8f 	bl	8000588 <__aeabi_dmul>
 800ce6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce6e:	ec41 0b18 	vmov	d8, r0, r1
 800ce72:	4610      	mov	r0, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7f3 fb87 	bl	8000588 <__aeabi_dmul>
 800ce7a:	a37d      	add	r3, pc, #500	; (adr r3, 800d070 <__ieee754_pow+0x6f0>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	4604      	mov	r4, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	f7f3 fb80 	bl	8000588 <__aeabi_dmul>
 800ce88:	a37b      	add	r3, pc, #492	; (adr r3, 800d078 <__ieee754_pow+0x6f8>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 f9c5 	bl	800021c <__adddf3>
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fb77 	bl	8000588 <__aeabi_dmul>
 800ce9a:	a379      	add	r3, pc, #484	; (adr r3, 800d080 <__ieee754_pow+0x700>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 f9bc 	bl	800021c <__adddf3>
 800cea4:	4622      	mov	r2, r4
 800cea6:	462b      	mov	r3, r5
 800cea8:	f7f3 fb6e 	bl	8000588 <__aeabi_dmul>
 800ceac:	a376      	add	r3, pc, #472	; (adr r3, 800d088 <__ieee754_pow+0x708>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 f9b3 	bl	800021c <__adddf3>
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	462b      	mov	r3, r5
 800ceba:	f7f3 fb65 	bl	8000588 <__aeabi_dmul>
 800cebe:	a374      	add	r3, pc, #464	; (adr r3, 800d090 <__ieee754_pow+0x710>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f7f3 f9aa 	bl	800021c <__adddf3>
 800cec8:	4622      	mov	r2, r4
 800ceca:	462b      	mov	r3, r5
 800cecc:	f7f3 fb5c 	bl	8000588 <__aeabi_dmul>
 800ced0:	a371      	add	r3, pc, #452	; (adr r3, 800d098 <__ieee754_pow+0x718>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	f7f3 f9a1 	bl	800021c <__adddf3>
 800ceda:	4622      	mov	r2, r4
 800cedc:	4606      	mov	r6, r0
 800cede:	460f      	mov	r7, r1
 800cee0:	462b      	mov	r3, r5
 800cee2:	4620      	mov	r0, r4
 800cee4:	4629      	mov	r1, r5
 800cee6:	f7f3 fb4f 	bl	8000588 <__aeabi_dmul>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4630      	mov	r0, r6
 800cef0:	4639      	mov	r1, r7
 800cef2:	f7f3 fb49 	bl	8000588 <__aeabi_dmul>
 800cef6:	4642      	mov	r2, r8
 800cef8:	4604      	mov	r4, r0
 800cefa:	460d      	mov	r5, r1
 800cefc:	464b      	mov	r3, r9
 800cefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf02:	f7f3 f98b 	bl	800021c <__adddf3>
 800cf06:	ec53 2b18 	vmov	r2, r3, d8
 800cf0a:	f7f3 fb3d 	bl	8000588 <__aeabi_dmul>
 800cf0e:	4622      	mov	r2, r4
 800cf10:	462b      	mov	r3, r5
 800cf12:	f7f3 f983 	bl	800021c <__adddf3>
 800cf16:	4642      	mov	r2, r8
 800cf18:	4682      	mov	sl, r0
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	464b      	mov	r3, r9
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4649      	mov	r1, r9
 800cf22:	f7f3 fb31 	bl	8000588 <__aeabi_dmul>
 800cf26:	4b6c      	ldr	r3, [pc, #432]	; (800d0d8 <__ieee754_pow+0x758>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	460f      	mov	r7, r1
 800cf2e:	f7f3 f975 	bl	800021c <__adddf3>
 800cf32:	4652      	mov	r2, sl
 800cf34:	465b      	mov	r3, fp
 800cf36:	f7f3 f971 	bl	800021c <__adddf3>
 800cf3a:	9c04      	ldr	r4, [sp, #16]
 800cf3c:	460d      	mov	r5, r1
 800cf3e:	4622      	mov	r2, r4
 800cf40:	460b      	mov	r3, r1
 800cf42:	4640      	mov	r0, r8
 800cf44:	4649      	mov	r1, r9
 800cf46:	f7f3 fb1f 	bl	8000588 <__aeabi_dmul>
 800cf4a:	4b63      	ldr	r3, [pc, #396]	; (800d0d8 <__ieee754_pow+0x758>)
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	4689      	mov	r9, r1
 800cf50:	2200      	movs	r2, #0
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 f95f 	bl	8000218 <__aeabi_dsub>
 800cf5a:	4632      	mov	r2, r6
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	f7f3 f95b 	bl	8000218 <__aeabi_dsub>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4650      	mov	r0, sl
 800cf68:	4659      	mov	r1, fp
 800cf6a:	f7f3 f955 	bl	8000218 <__aeabi_dsub>
 800cf6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf72:	f7f3 fb09 	bl	8000588 <__aeabi_dmul>
 800cf76:	4622      	mov	r2, r4
 800cf78:	4606      	mov	r6, r0
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	462b      	mov	r3, r5
 800cf7e:	ec51 0b18 	vmov	r0, r1, d8
 800cf82:	f7f3 fb01 	bl	8000588 <__aeabi_dmul>
 800cf86:	4602      	mov	r2, r0
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	f7f3 f945 	bl	800021c <__adddf3>
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	4649      	mov	r1, r9
 800cf9e:	f7f3 f93d 	bl	800021c <__adddf3>
 800cfa2:	9c04      	ldr	r4, [sp, #16]
 800cfa4:	a33e      	add	r3, pc, #248	; (adr r3, 800d0a0 <__ieee754_pow+0x720>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	460d      	mov	r5, r1
 800cfae:	f7f3 faeb 	bl	8000588 <__aeabi_dmul>
 800cfb2:	4642      	mov	r2, r8
 800cfb4:	ec41 0b18 	vmov	d8, r0, r1
 800cfb8:	464b      	mov	r3, r9
 800cfba:	4620      	mov	r0, r4
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	f7f3 f92b 	bl	8000218 <__aeabi_dsub>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	4639      	mov	r1, r7
 800cfca:	f7f3 f925 	bl	8000218 <__aeabi_dsub>
 800cfce:	a336      	add	r3, pc, #216	; (adr r3, 800d0a8 <__ieee754_pow+0x728>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 fad8 	bl	8000588 <__aeabi_dmul>
 800cfd8:	a335      	add	r3, pc, #212	; (adr r3, 800d0b0 <__ieee754_pow+0x730>)
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	4606      	mov	r6, r0
 800cfe0:	460f      	mov	r7, r1
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	f7f3 facf 	bl	8000588 <__aeabi_dmul>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4630      	mov	r0, r6
 800cff0:	4639      	mov	r1, r7
 800cff2:	f7f3 f913 	bl	800021c <__adddf3>
 800cff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cff8:	4b38      	ldr	r3, [pc, #224]	; (800d0dc <__ieee754_pow+0x75c>)
 800cffa:	4413      	add	r3, r2
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	f7f3 f90c 	bl	800021c <__adddf3>
 800d004:	4682      	mov	sl, r0
 800d006:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d008:	468b      	mov	fp, r1
 800d00a:	f7f3 fa53 	bl	80004b4 <__aeabi_i2d>
 800d00e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d010:	4b33      	ldr	r3, [pc, #204]	; (800d0e0 <__ieee754_pow+0x760>)
 800d012:	4413      	add	r3, r2
 800d014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d018:	4606      	mov	r6, r0
 800d01a:	460f      	mov	r7, r1
 800d01c:	4652      	mov	r2, sl
 800d01e:	465b      	mov	r3, fp
 800d020:	ec51 0b18 	vmov	r0, r1, d8
 800d024:	f7f3 f8fa 	bl	800021c <__adddf3>
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	f7f3 f8f6 	bl	800021c <__adddf3>
 800d030:	4632      	mov	r2, r6
 800d032:	463b      	mov	r3, r7
 800d034:	f7f3 f8f2 	bl	800021c <__adddf3>
 800d038:	9c04      	ldr	r4, [sp, #16]
 800d03a:	4632      	mov	r2, r6
 800d03c:	463b      	mov	r3, r7
 800d03e:	4620      	mov	r0, r4
 800d040:	460d      	mov	r5, r1
 800d042:	f7f3 f8e9 	bl	8000218 <__aeabi_dsub>
 800d046:	4642      	mov	r2, r8
 800d048:	464b      	mov	r3, r9
 800d04a:	f7f3 f8e5 	bl	8000218 <__aeabi_dsub>
 800d04e:	ec53 2b18 	vmov	r2, r3, d8
 800d052:	f7f3 f8e1 	bl	8000218 <__aeabi_dsub>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4650      	mov	r0, sl
 800d05c:	4659      	mov	r1, fp
 800d05e:	e606      	b.n	800cc6e <__ieee754_pow+0x2ee>
 800d060:	2401      	movs	r4, #1
 800d062:	e6a0      	b.n	800cda6 <__ieee754_pow+0x426>
 800d064:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d0b8 <__ieee754_pow+0x738>
 800d068:	e60d      	b.n	800cc86 <__ieee754_pow+0x306>
 800d06a:	bf00      	nop
 800d06c:	f3af 8000 	nop.w
 800d070:	4a454eef 	.word	0x4a454eef
 800d074:	3fca7e28 	.word	0x3fca7e28
 800d078:	93c9db65 	.word	0x93c9db65
 800d07c:	3fcd864a 	.word	0x3fcd864a
 800d080:	a91d4101 	.word	0xa91d4101
 800d084:	3fd17460 	.word	0x3fd17460
 800d088:	518f264d 	.word	0x518f264d
 800d08c:	3fd55555 	.word	0x3fd55555
 800d090:	db6fabff 	.word	0xdb6fabff
 800d094:	3fdb6db6 	.word	0x3fdb6db6
 800d098:	33333303 	.word	0x33333303
 800d09c:	3fe33333 	.word	0x3fe33333
 800d0a0:	e0000000 	.word	0xe0000000
 800d0a4:	3feec709 	.word	0x3feec709
 800d0a8:	dc3a03fd 	.word	0xdc3a03fd
 800d0ac:	3feec709 	.word	0x3feec709
 800d0b0:	145b01f5 	.word	0x145b01f5
 800d0b4:	be3e2fe0 	.word	0xbe3e2fe0
 800d0b8:	00000000 	.word	0x00000000
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	43400000 	.word	0x43400000
 800d0c8:	0003988e 	.word	0x0003988e
 800d0cc:	000bb679 	.word	0x000bb679
 800d0d0:	0800e758 	.word	0x0800e758
 800d0d4:	3ff00000 	.word	0x3ff00000
 800d0d8:	40080000 	.word	0x40080000
 800d0dc:	0800e778 	.word	0x0800e778
 800d0e0:	0800e768 	.word	0x0800e768
 800d0e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d3bc <__ieee754_pow+0xa3c>)
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	f7f3 f895 	bl	800021c <__adddf3>
 800d0f2:	4622      	mov	r2, r4
 800d0f4:	ec41 0b1a 	vmov	d10, r0, r1
 800d0f8:	462b      	mov	r3, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f3 f88b 	bl	8000218 <__aeabi_dsub>
 800d102:	4602      	mov	r2, r0
 800d104:	460b      	mov	r3, r1
 800d106:	ec51 0b1a 	vmov	r0, r1, d10
 800d10a:	f7f3 fccd 	bl	8000aa8 <__aeabi_dcmpgt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	f47f adf8 	bne.w	800cd04 <__ieee754_pow+0x384>
 800d114:	4aa4      	ldr	r2, [pc, #656]	; (800d3a8 <__ieee754_pow+0xa28>)
 800d116:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d11a:	4293      	cmp	r3, r2
 800d11c:	f340 810b 	ble.w	800d336 <__ieee754_pow+0x9b6>
 800d120:	151b      	asrs	r3, r3, #20
 800d122:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d126:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d12a:	fa4a f303 	asr.w	r3, sl, r3
 800d12e:	445b      	add	r3, fp
 800d130:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d134:	4e9d      	ldr	r6, [pc, #628]	; (800d3ac <__ieee754_pow+0xa2c>)
 800d136:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d13a:	4116      	asrs	r6, r2
 800d13c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d140:	2000      	movs	r0, #0
 800d142:	ea23 0106 	bic.w	r1, r3, r6
 800d146:	f1c2 0214 	rsb	r2, r2, #20
 800d14a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d14e:	fa4a fa02 	asr.w	sl, sl, r2
 800d152:	f1bb 0f00 	cmp.w	fp, #0
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4620      	mov	r0, r4
 800d15c:	4629      	mov	r1, r5
 800d15e:	bfb8      	it	lt
 800d160:	f1ca 0a00 	rsblt	sl, sl, #0
 800d164:	f7f3 f858 	bl	8000218 <__aeabi_dsub>
 800d168:	ec41 0b19 	vmov	d9, r0, r1
 800d16c:	4642      	mov	r2, r8
 800d16e:	464b      	mov	r3, r9
 800d170:	ec51 0b19 	vmov	r0, r1, d9
 800d174:	f7f3 f852 	bl	800021c <__adddf3>
 800d178:	2400      	movs	r4, #0
 800d17a:	a379      	add	r3, pc, #484	; (adr r3, 800d360 <__ieee754_pow+0x9e0>)
 800d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d180:	4620      	mov	r0, r4
 800d182:	460d      	mov	r5, r1
 800d184:	f7f3 fa00 	bl	8000588 <__aeabi_dmul>
 800d188:	ec53 2b19 	vmov	r2, r3, d9
 800d18c:	4606      	mov	r6, r0
 800d18e:	460f      	mov	r7, r1
 800d190:	4620      	mov	r0, r4
 800d192:	4629      	mov	r1, r5
 800d194:	f7f3 f840 	bl	8000218 <__aeabi_dsub>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4640      	mov	r0, r8
 800d19e:	4649      	mov	r1, r9
 800d1a0:	f7f3 f83a 	bl	8000218 <__aeabi_dsub>
 800d1a4:	a370      	add	r3, pc, #448	; (adr r3, 800d368 <__ieee754_pow+0x9e8>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 f9ed 	bl	8000588 <__aeabi_dmul>
 800d1ae:	a370      	add	r3, pc, #448	; (adr r3, 800d370 <__ieee754_pow+0x9f0>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	4689      	mov	r9, r1
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f7f3 f9e4 	bl	8000588 <__aeabi_dmul>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	f7f3 f828 	bl	800021c <__adddf3>
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	f7f3 f820 	bl	800021c <__adddf3>
 800d1dc:	4632      	mov	r2, r6
 800d1de:	463b      	mov	r3, r7
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	4689      	mov	r9, r1
 800d1e4:	f7f3 f818 	bl	8000218 <__aeabi_dsub>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 f812 	bl	8000218 <__aeabi_dsub>
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	464b      	mov	r3, r9
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	4649      	mov	r1, r9
 800d200:	f7f3 f9c2 	bl	8000588 <__aeabi_dmul>
 800d204:	a35c      	add	r3, pc, #368	; (adr r3, 800d378 <__ieee754_pow+0x9f8>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	4604      	mov	r4, r0
 800d20c:	460d      	mov	r5, r1
 800d20e:	f7f3 f9bb 	bl	8000588 <__aeabi_dmul>
 800d212:	a35b      	add	r3, pc, #364	; (adr r3, 800d380 <__ieee754_pow+0xa00>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f7f2 fffe 	bl	8000218 <__aeabi_dsub>
 800d21c:	4622      	mov	r2, r4
 800d21e:	462b      	mov	r3, r5
 800d220:	f7f3 f9b2 	bl	8000588 <__aeabi_dmul>
 800d224:	a358      	add	r3, pc, #352	; (adr r3, 800d388 <__ieee754_pow+0xa08>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f2 fff7 	bl	800021c <__adddf3>
 800d22e:	4622      	mov	r2, r4
 800d230:	462b      	mov	r3, r5
 800d232:	f7f3 f9a9 	bl	8000588 <__aeabi_dmul>
 800d236:	a356      	add	r3, pc, #344	; (adr r3, 800d390 <__ieee754_pow+0xa10>)
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	f7f2 ffec 	bl	8000218 <__aeabi_dsub>
 800d240:	4622      	mov	r2, r4
 800d242:	462b      	mov	r3, r5
 800d244:	f7f3 f9a0 	bl	8000588 <__aeabi_dmul>
 800d248:	a353      	add	r3, pc, #332	; (adr r3, 800d398 <__ieee754_pow+0xa18>)
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f7f2 ffe5 	bl	800021c <__adddf3>
 800d252:	4622      	mov	r2, r4
 800d254:	462b      	mov	r3, r5
 800d256:	f7f3 f997 	bl	8000588 <__aeabi_dmul>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4640      	mov	r0, r8
 800d260:	4649      	mov	r1, r9
 800d262:	f7f2 ffd9 	bl	8000218 <__aeabi_dsub>
 800d266:	4604      	mov	r4, r0
 800d268:	460d      	mov	r5, r1
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 f989 	bl	8000588 <__aeabi_dmul>
 800d276:	2200      	movs	r2, #0
 800d278:	ec41 0b19 	vmov	d9, r0, r1
 800d27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d280:	4620      	mov	r0, r4
 800d282:	4629      	mov	r1, r5
 800d284:	f7f2 ffc8 	bl	8000218 <__aeabi_dsub>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	ec51 0b19 	vmov	r0, r1, d9
 800d290:	f7f3 faa4 	bl	80007dc <__aeabi_ddiv>
 800d294:	4632      	mov	r2, r6
 800d296:	4604      	mov	r4, r0
 800d298:	460d      	mov	r5, r1
 800d29a:	463b      	mov	r3, r7
 800d29c:	4640      	mov	r0, r8
 800d29e:	4649      	mov	r1, r9
 800d2a0:	f7f3 f972 	bl	8000588 <__aeabi_dmul>
 800d2a4:	4632      	mov	r2, r6
 800d2a6:	463b      	mov	r3, r7
 800d2a8:	f7f2 ffb8 	bl	800021c <__adddf3>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	f7f2 ffb0 	bl	8000218 <__aeabi_dsub>
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	f7f2 ffac 	bl	8000218 <__aeabi_dsub>
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	493a      	ldr	r1, [pc, #232]	; (800d3b0 <__ieee754_pow+0xa30>)
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	f7f2 ffa6 	bl	8000218 <__aeabi_dsub>
 800d2cc:	e9cd 0100 	strd	r0, r1, [sp]
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2da:	da2f      	bge.n	800d33c <__ieee754_pow+0x9bc>
 800d2dc:	4650      	mov	r0, sl
 800d2de:	ed9d 0b00 	vldr	d0, [sp]
 800d2e2:	f001 f921 	bl	800e528 <scalbn>
 800d2e6:	ec51 0b10 	vmov	r0, r1, d0
 800d2ea:	ec53 2b18 	vmov	r2, r3, d8
 800d2ee:	f7ff bbe0 	b.w	800cab2 <__ieee754_pow+0x132>
 800d2f2:	4b30      	ldr	r3, [pc, #192]	; (800d3b4 <__ieee754_pow+0xa34>)
 800d2f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d2f8:	429e      	cmp	r6, r3
 800d2fa:	f77f af0b 	ble.w	800d114 <__ieee754_pow+0x794>
 800d2fe:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <__ieee754_pow+0xa38>)
 800d300:	440b      	add	r3, r1
 800d302:	4303      	orrs	r3, r0
 800d304:	d00b      	beq.n	800d31e <__ieee754_pow+0x99e>
 800d306:	a326      	add	r3, pc, #152	; (adr r3, 800d3a0 <__ieee754_pow+0xa20>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	ec51 0b18 	vmov	r0, r1, d8
 800d310:	f7f3 f93a 	bl	8000588 <__aeabi_dmul>
 800d314:	a322      	add	r3, pc, #136	; (adr r3, 800d3a0 <__ieee754_pow+0xa20>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f7ff bbca 	b.w	800cab2 <__ieee754_pow+0x132>
 800d31e:	4622      	mov	r2, r4
 800d320:	462b      	mov	r3, r5
 800d322:	f7f2 ff79 	bl	8000218 <__aeabi_dsub>
 800d326:	4642      	mov	r2, r8
 800d328:	464b      	mov	r3, r9
 800d32a:	f7f3 fbb3 	bl	8000a94 <__aeabi_dcmpge>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aef0 	beq.w	800d114 <__ieee754_pow+0x794>
 800d334:	e7e7      	b.n	800d306 <__ieee754_pow+0x986>
 800d336:	f04f 0a00 	mov.w	sl, #0
 800d33a:	e717      	b.n	800d16c <__ieee754_pow+0x7ec>
 800d33c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d340:	4619      	mov	r1, r3
 800d342:	e7d2      	b.n	800d2ea <__ieee754_pow+0x96a>
 800d344:	491a      	ldr	r1, [pc, #104]	; (800d3b0 <__ieee754_pow+0xa30>)
 800d346:	2000      	movs	r0, #0
 800d348:	f7ff bb9e 	b.w	800ca88 <__ieee754_pow+0x108>
 800d34c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d350:	f7ff bb9a 	b.w	800ca88 <__ieee754_pow+0x108>
 800d354:	9000      	str	r0, [sp, #0]
 800d356:	f7ff bb76 	b.w	800ca46 <__ieee754_pow+0xc6>
 800d35a:	2100      	movs	r1, #0
 800d35c:	f7ff bb60 	b.w	800ca20 <__ieee754_pow+0xa0>
 800d360:	00000000 	.word	0x00000000
 800d364:	3fe62e43 	.word	0x3fe62e43
 800d368:	fefa39ef 	.word	0xfefa39ef
 800d36c:	3fe62e42 	.word	0x3fe62e42
 800d370:	0ca86c39 	.word	0x0ca86c39
 800d374:	be205c61 	.word	0xbe205c61
 800d378:	72bea4d0 	.word	0x72bea4d0
 800d37c:	3e663769 	.word	0x3e663769
 800d380:	c5d26bf1 	.word	0xc5d26bf1
 800d384:	3ebbbd41 	.word	0x3ebbbd41
 800d388:	af25de2c 	.word	0xaf25de2c
 800d38c:	3f11566a 	.word	0x3f11566a
 800d390:	16bebd93 	.word	0x16bebd93
 800d394:	3f66c16c 	.word	0x3f66c16c
 800d398:	5555553e 	.word	0x5555553e
 800d39c:	3fc55555 	.word	0x3fc55555
 800d3a0:	c2f8f359 	.word	0xc2f8f359
 800d3a4:	01a56e1f 	.word	0x01a56e1f
 800d3a8:	3fe00000 	.word	0x3fe00000
 800d3ac:	000fffff 	.word	0x000fffff
 800d3b0:	3ff00000 	.word	0x3ff00000
 800d3b4:	4090cbff 	.word	0x4090cbff
 800d3b8:	3f6f3400 	.word	0x3f6f3400
 800d3bc:	652b82fe 	.word	0x652b82fe
 800d3c0:	3c971547 	.word	0x3c971547
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <__ieee754_rem_pio2>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	ed2d 8b02 	vpush	{d8}
 800d3d0:	ec55 4b10 	vmov	r4, r5, d0
 800d3d4:	4bca      	ldr	r3, [pc, #808]	; (800d700 <__ieee754_rem_pio2+0x338>)
 800d3d6:	b08b      	sub	sp, #44	; 0x2c
 800d3d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d3dc:	4598      	cmp	r8, r3
 800d3de:	4682      	mov	sl, r0
 800d3e0:	9502      	str	r5, [sp, #8]
 800d3e2:	dc08      	bgt.n	800d3f6 <__ieee754_rem_pio2+0x2e>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	ed80 0b00 	vstr	d0, [r0]
 800d3ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3f0:	f04f 0b00 	mov.w	fp, #0
 800d3f4:	e028      	b.n	800d448 <__ieee754_rem_pio2+0x80>
 800d3f6:	4bc3      	ldr	r3, [pc, #780]	; (800d704 <__ieee754_rem_pio2+0x33c>)
 800d3f8:	4598      	cmp	r8, r3
 800d3fa:	dc78      	bgt.n	800d4ee <__ieee754_rem_pio2+0x126>
 800d3fc:	9b02      	ldr	r3, [sp, #8]
 800d3fe:	4ec2      	ldr	r6, [pc, #776]	; (800d708 <__ieee754_rem_pio2+0x340>)
 800d400:	2b00      	cmp	r3, #0
 800d402:	ee10 0a10 	vmov	r0, s0
 800d406:	a3b0      	add	r3, pc, #704	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	4629      	mov	r1, r5
 800d40e:	dd39      	ble.n	800d484 <__ieee754_rem_pio2+0xbc>
 800d410:	f7f2 ff02 	bl	8000218 <__aeabi_dsub>
 800d414:	45b0      	cmp	r8, r6
 800d416:	4604      	mov	r4, r0
 800d418:	460d      	mov	r5, r1
 800d41a:	d01b      	beq.n	800d454 <__ieee754_rem_pio2+0x8c>
 800d41c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	f7f2 fef9 	bl	8000218 <__aeabi_dsub>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	e9ca 2300 	strd	r2, r3, [sl]
 800d42e:	4620      	mov	r0, r4
 800d430:	4629      	mov	r1, r5
 800d432:	f7f2 fef1 	bl	8000218 <__aeabi_dsub>
 800d436:	a3a6      	add	r3, pc, #664	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f2 feec 	bl	8000218 <__aeabi_dsub>
 800d440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d444:	f04f 0b01 	mov.w	fp, #1
 800d448:	4658      	mov	r0, fp
 800d44a:	b00b      	add	sp, #44	; 0x2c
 800d44c:	ecbd 8b02 	vpop	{d8}
 800d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d454:	a3a0      	add	r3, pc, #640	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x310>)
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f7f2 fedd 	bl	8000218 <__aeabi_dsub>
 800d45e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	4604      	mov	r4, r0
 800d466:	460d      	mov	r5, r1
 800d468:	f7f2 fed6 	bl	8000218 <__aeabi_dsub>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9ca 2300 	strd	r2, r3, [sl]
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f2 fece 	bl	8000218 <__aeabi_dsub>
 800d47c:	a398      	add	r3, pc, #608	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	e7db      	b.n	800d43c <__ieee754_rem_pio2+0x74>
 800d484:	f7f2 feca 	bl	800021c <__adddf3>
 800d488:	45b0      	cmp	r8, r6
 800d48a:	4604      	mov	r4, r0
 800d48c:	460d      	mov	r5, r1
 800d48e:	d016      	beq.n	800d4be <__ieee754_rem_pio2+0xf6>
 800d490:	a38f      	add	r3, pc, #572	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 fec1 	bl	800021c <__adddf3>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	e9ca 2300 	strd	r2, r3, [sl]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7f2 feb7 	bl	8000218 <__aeabi_dsub>
 800d4aa:	a389      	add	r3, pc, #548	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b0:	f7f2 feb4 	bl	800021c <__adddf3>
 800d4b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d4b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d4bc:	e7c4      	b.n	800d448 <__ieee754_rem_pio2+0x80>
 800d4be:	a386      	add	r3, pc, #536	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x310>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f2 feaa 	bl	800021c <__adddf3>
 800d4c8:	a385      	add	r3, pc, #532	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	f7f2 fea3 	bl	800021c <__adddf3>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	e9ca 2300 	strd	r2, r3, [sl]
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f2 fe99 	bl	8000218 <__aeabi_dsub>
 800d4e6:	a37e      	add	r3, pc, #504	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	e7e0      	b.n	800d4b0 <__ieee754_rem_pio2+0xe8>
 800d4ee:	4b87      	ldr	r3, [pc, #540]	; (800d70c <__ieee754_rem_pio2+0x344>)
 800d4f0:	4598      	cmp	r8, r3
 800d4f2:	f300 80d9 	bgt.w	800d6a8 <__ieee754_rem_pio2+0x2e0>
 800d4f6:	f000 feed 	bl	800e2d4 <fabs>
 800d4fa:	ec55 4b10 	vmov	r4, r5, d0
 800d4fe:	ee10 0a10 	vmov	r0, s0
 800d502:	a379      	add	r3, pc, #484	; (adr r3, 800d6e8 <__ieee754_rem_pio2+0x320>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f3 f83d 	bl	8000588 <__aeabi_dmul>
 800d50e:	4b80      	ldr	r3, [pc, #512]	; (800d710 <__ieee754_rem_pio2+0x348>)
 800d510:	2200      	movs	r2, #0
 800d512:	f7f2 fe83 	bl	800021c <__adddf3>
 800d516:	f7f3 fae7 	bl	8000ae8 <__aeabi_d2iz>
 800d51a:	4683      	mov	fp, r0
 800d51c:	f7f2 ffca 	bl	80004b4 <__aeabi_i2d>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	ec43 2b18 	vmov	d8, r2, r3
 800d528:	a367      	add	r3, pc, #412	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f3 f82b 	bl	8000588 <__aeabi_dmul>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f2 fe6d 	bl	8000218 <__aeabi_dsub>
 800d53e:	a364      	add	r3, pc, #400	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	4606      	mov	r6, r0
 800d546:	460f      	mov	r7, r1
 800d548:	ec51 0b18 	vmov	r0, r1, d8
 800d54c:	f7f3 f81c 	bl	8000588 <__aeabi_dmul>
 800d550:	f1bb 0f1f 	cmp.w	fp, #31
 800d554:	4604      	mov	r4, r0
 800d556:	460d      	mov	r5, r1
 800d558:	dc0d      	bgt.n	800d576 <__ieee754_rem_pio2+0x1ae>
 800d55a:	4b6e      	ldr	r3, [pc, #440]	; (800d714 <__ieee754_rem_pio2+0x34c>)
 800d55c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d564:	4543      	cmp	r3, r8
 800d566:	d006      	beq.n	800d576 <__ieee754_rem_pio2+0x1ae>
 800d568:	4622      	mov	r2, r4
 800d56a:	462b      	mov	r3, r5
 800d56c:	4630      	mov	r0, r6
 800d56e:	4639      	mov	r1, r7
 800d570:	f7f2 fe52 	bl	8000218 <__aeabi_dsub>
 800d574:	e00f      	b.n	800d596 <__ieee754_rem_pio2+0x1ce>
 800d576:	462b      	mov	r3, r5
 800d578:	4622      	mov	r2, r4
 800d57a:	4630      	mov	r0, r6
 800d57c:	4639      	mov	r1, r7
 800d57e:	f7f2 fe4b 	bl	8000218 <__aeabi_dsub>
 800d582:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d58c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d590:	f1b8 0f10 	cmp.w	r8, #16
 800d594:	dc02      	bgt.n	800d59c <__ieee754_rem_pio2+0x1d4>
 800d596:	e9ca 0100 	strd	r0, r1, [sl]
 800d59a:	e039      	b.n	800d610 <__ieee754_rem_pio2+0x248>
 800d59c:	a34e      	add	r3, pc, #312	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x310>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	ec51 0b18 	vmov	r0, r1, d8
 800d5a6:	f7f2 ffef 	bl	8000588 <__aeabi_dmul>
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	460d      	mov	r5, r1
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	f7f2 fe2f 	bl	8000218 <__aeabi_dsub>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4680      	mov	r8, r0
 800d5c0:	4689      	mov	r9, r1
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	f7f2 fe27 	bl	8000218 <__aeabi_dsub>
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	f7f2 fe23 	bl	8000218 <__aeabi_dsub>
 800d5d2:	a343      	add	r3, pc, #268	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	ec51 0b18 	vmov	r0, r1, d8
 800d5e0:	f7f2 ffd2 	bl	8000588 <__aeabi_dmul>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	f7f2 fe16 	bl	8000218 <__aeabi_dsub>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	4640      	mov	r0, r8
 800d5f6:	4649      	mov	r1, r9
 800d5f8:	f7f2 fe0e 	bl	8000218 <__aeabi_dsub>
 800d5fc:	9a03      	ldr	r2, [sp, #12]
 800d5fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	2b31      	cmp	r3, #49	; 0x31
 800d606:	dc24      	bgt.n	800d652 <__ieee754_rem_pio2+0x28a>
 800d608:	e9ca 0100 	strd	r0, r1, [sl]
 800d60c:	4646      	mov	r6, r8
 800d60e:	464f      	mov	r7, r9
 800d610:	e9da 8900 	ldrd	r8, r9, [sl]
 800d614:	4630      	mov	r0, r6
 800d616:	4642      	mov	r2, r8
 800d618:	464b      	mov	r3, r9
 800d61a:	4639      	mov	r1, r7
 800d61c:	f7f2 fdfc 	bl	8000218 <__aeabi_dsub>
 800d620:	462b      	mov	r3, r5
 800d622:	4622      	mov	r2, r4
 800d624:	f7f2 fdf8 	bl	8000218 <__aeabi_dsub>
 800d628:	9b02      	ldr	r3, [sp, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d630:	f6bf af0a 	bge.w	800d448 <__ieee754_rem_pio2+0x80>
 800d634:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d638:	f8ca 3004 	str.w	r3, [sl, #4]
 800d63c:	f8ca 8000 	str.w	r8, [sl]
 800d640:	f8ca 0008 	str.w	r0, [sl, #8]
 800d644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d648:	f8ca 300c 	str.w	r3, [sl, #12]
 800d64c:	f1cb 0b00 	rsb	fp, fp, #0
 800d650:	e6fa      	b.n	800d448 <__ieee754_rem_pio2+0x80>
 800d652:	a327      	add	r3, pc, #156	; (adr r3, 800d6f0 <__ieee754_rem_pio2+0x328>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	ec51 0b18 	vmov	r0, r1, d8
 800d65c:	f7f2 ff94 	bl	8000588 <__aeabi_dmul>
 800d660:	4604      	mov	r4, r0
 800d662:	460d      	mov	r5, r1
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4640      	mov	r0, r8
 800d66a:	4649      	mov	r1, r9
 800d66c:	f7f2 fdd4 	bl	8000218 <__aeabi_dsub>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4606      	mov	r6, r0
 800d676:	460f      	mov	r7, r1
 800d678:	4640      	mov	r0, r8
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7f2 fdcc 	bl	8000218 <__aeabi_dsub>
 800d680:	4622      	mov	r2, r4
 800d682:	462b      	mov	r3, r5
 800d684:	f7f2 fdc8 	bl	8000218 <__aeabi_dsub>
 800d688:	a31b      	add	r3, pc, #108	; (adr r3, 800d6f8 <__ieee754_rem_pio2+0x330>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	4604      	mov	r4, r0
 800d690:	460d      	mov	r5, r1
 800d692:	ec51 0b18 	vmov	r0, r1, d8
 800d696:	f7f2 ff77 	bl	8000588 <__aeabi_dmul>
 800d69a:	4622      	mov	r2, r4
 800d69c:	462b      	mov	r3, r5
 800d69e:	f7f2 fdbb 	bl	8000218 <__aeabi_dsub>
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	e75f      	b.n	800d568 <__ieee754_rem_pio2+0x1a0>
 800d6a8:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <__ieee754_rem_pio2+0x350>)
 800d6aa:	4598      	cmp	r8, r3
 800d6ac:	dd36      	ble.n	800d71c <__ieee754_rem_pio2+0x354>
 800d6ae:	ee10 2a10 	vmov	r2, s0
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	f7f2 fdae 	bl	8000218 <__aeabi_dsub>
 800d6bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6c0:	e9ca 0100 	strd	r0, r1, [sl]
 800d6c4:	e694      	b.n	800d3f0 <__ieee754_rem_pio2+0x28>
 800d6c6:	bf00      	nop
 800d6c8:	54400000 	.word	0x54400000
 800d6cc:	3ff921fb 	.word	0x3ff921fb
 800d6d0:	1a626331 	.word	0x1a626331
 800d6d4:	3dd0b461 	.word	0x3dd0b461
 800d6d8:	1a600000 	.word	0x1a600000
 800d6dc:	3dd0b461 	.word	0x3dd0b461
 800d6e0:	2e037073 	.word	0x2e037073
 800d6e4:	3ba3198a 	.word	0x3ba3198a
 800d6e8:	6dc9c883 	.word	0x6dc9c883
 800d6ec:	3fe45f30 	.word	0x3fe45f30
 800d6f0:	2e000000 	.word	0x2e000000
 800d6f4:	3ba3198a 	.word	0x3ba3198a
 800d6f8:	252049c1 	.word	0x252049c1
 800d6fc:	397b839a 	.word	0x397b839a
 800d700:	3fe921fb 	.word	0x3fe921fb
 800d704:	4002d97b 	.word	0x4002d97b
 800d708:	3ff921fb 	.word	0x3ff921fb
 800d70c:	413921fb 	.word	0x413921fb
 800d710:	3fe00000 	.word	0x3fe00000
 800d714:	0800e788 	.word	0x0800e788
 800d718:	7fefffff 	.word	0x7fefffff
 800d71c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d720:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d724:	ee10 0a10 	vmov	r0, s0
 800d728:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d72c:	ee10 6a10 	vmov	r6, s0
 800d730:	460f      	mov	r7, r1
 800d732:	f7f3 f9d9 	bl	8000ae8 <__aeabi_d2iz>
 800d736:	f7f2 febd 	bl	80004b4 <__aeabi_i2d>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4630      	mov	r0, r6
 800d740:	4639      	mov	r1, r7
 800d742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d746:	f7f2 fd67 	bl	8000218 <__aeabi_dsub>
 800d74a:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <__ieee754_rem_pio2+0x40c>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	f7f2 ff1b 	bl	8000588 <__aeabi_dmul>
 800d752:	460f      	mov	r7, r1
 800d754:	4606      	mov	r6, r0
 800d756:	f7f3 f9c7 	bl	8000ae8 <__aeabi_d2iz>
 800d75a:	f7f2 feab 	bl	80004b4 <__aeabi_i2d>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4630      	mov	r0, r6
 800d764:	4639      	mov	r1, r7
 800d766:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d76a:	f7f2 fd55 	bl	8000218 <__aeabi_dsub>
 800d76e:	4b19      	ldr	r3, [pc, #100]	; (800d7d4 <__ieee754_rem_pio2+0x40c>)
 800d770:	2200      	movs	r2, #0
 800d772:	f7f2 ff09 	bl	8000588 <__aeabi_dmul>
 800d776:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d77a:	ad04      	add	r5, sp, #16
 800d77c:	f04f 0803 	mov.w	r8, #3
 800d780:	46a9      	mov	r9, r5
 800d782:	2600      	movs	r6, #0
 800d784:	2700      	movs	r7, #0
 800d786:	4632      	mov	r2, r6
 800d788:	463b      	mov	r3, r7
 800d78a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d78e:	46c3      	mov	fp, r8
 800d790:	3d08      	subs	r5, #8
 800d792:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d796:	f7f3 f95f 	bl	8000a58 <__aeabi_dcmpeq>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d1f3      	bne.n	800d786 <__ieee754_rem_pio2+0x3be>
 800d79e:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <__ieee754_rem_pio2+0x410>)
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	465b      	mov	r3, fp
 800d7aa:	4651      	mov	r1, sl
 800d7ac:	4648      	mov	r0, r9
 800d7ae:	f000 f993 	bl	800dad8 <__kernel_rem_pio2>
 800d7b2:	9b02      	ldr	r3, [sp, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	4683      	mov	fp, r0
 800d7b8:	f6bf ae46 	bge.w	800d448 <__ieee754_rem_pio2+0x80>
 800d7bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d7c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7c4:	f8ca 3004 	str.w	r3, [sl, #4]
 800d7c8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d7cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7d0:	e73a      	b.n	800d648 <__ieee754_rem_pio2+0x280>
 800d7d2:	bf00      	nop
 800d7d4:	41700000 	.word	0x41700000
 800d7d8:	0800e808 	.word	0x0800e808

0800d7dc <__ieee754_sqrt>:
 800d7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e0:	ec55 4b10 	vmov	r4, r5, d0
 800d7e4:	4e56      	ldr	r6, [pc, #344]	; (800d940 <__ieee754_sqrt+0x164>)
 800d7e6:	43ae      	bics	r6, r5
 800d7e8:	ee10 0a10 	vmov	r0, s0
 800d7ec:	ee10 3a10 	vmov	r3, s0
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	d110      	bne.n	800d818 <__ieee754_sqrt+0x3c>
 800d7f6:	ee10 2a10 	vmov	r2, s0
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	f7f2 fec4 	bl	8000588 <__aeabi_dmul>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4620      	mov	r0, r4
 800d806:	4629      	mov	r1, r5
 800d808:	f7f2 fd08 	bl	800021c <__adddf3>
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	ec45 4b10 	vmov	d0, r4, r5
 800d814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d818:	2d00      	cmp	r5, #0
 800d81a:	dc10      	bgt.n	800d83e <__ieee754_sqrt+0x62>
 800d81c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d820:	4330      	orrs	r0, r6
 800d822:	d0f5      	beq.n	800d810 <__ieee754_sqrt+0x34>
 800d824:	b15d      	cbz	r5, 800d83e <__ieee754_sqrt+0x62>
 800d826:	ee10 2a10 	vmov	r2, s0
 800d82a:	462b      	mov	r3, r5
 800d82c:	ee10 0a10 	vmov	r0, s0
 800d830:	f7f2 fcf2 	bl	8000218 <__aeabi_dsub>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	f7f2 ffd0 	bl	80007dc <__aeabi_ddiv>
 800d83c:	e7e6      	b.n	800d80c <__ieee754_sqrt+0x30>
 800d83e:	1509      	asrs	r1, r1, #20
 800d840:	d076      	beq.n	800d930 <__ieee754_sqrt+0x154>
 800d842:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d846:	07ce      	lsls	r6, r1, #31
 800d848:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d84c:	bf5e      	ittt	pl
 800d84e:	0fda      	lsrpl	r2, r3, #31
 800d850:	005b      	lslpl	r3, r3, #1
 800d852:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d856:	0fda      	lsrs	r2, r3, #31
 800d858:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d85c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d860:	2000      	movs	r0, #0
 800d862:	106d      	asrs	r5, r5, #1
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	f04f 0e16 	mov.w	lr, #22
 800d86a:	4684      	mov	ip, r0
 800d86c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d870:	eb0c 0401 	add.w	r4, ip, r1
 800d874:	4294      	cmp	r4, r2
 800d876:	bfde      	ittt	le
 800d878:	1b12      	suble	r2, r2, r4
 800d87a:	eb04 0c01 	addle.w	ip, r4, r1
 800d87e:	1840      	addle	r0, r0, r1
 800d880:	0052      	lsls	r2, r2, #1
 800d882:	f1be 0e01 	subs.w	lr, lr, #1
 800d886:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d88a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d88e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d892:	d1ed      	bne.n	800d870 <__ieee754_sqrt+0x94>
 800d894:	4671      	mov	r1, lr
 800d896:	2720      	movs	r7, #32
 800d898:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d89c:	4562      	cmp	r2, ip
 800d89e:	eb04 060e 	add.w	r6, r4, lr
 800d8a2:	dc02      	bgt.n	800d8aa <__ieee754_sqrt+0xce>
 800d8a4:	d113      	bne.n	800d8ce <__ieee754_sqrt+0xf2>
 800d8a6:	429e      	cmp	r6, r3
 800d8a8:	d811      	bhi.n	800d8ce <__ieee754_sqrt+0xf2>
 800d8aa:	2e00      	cmp	r6, #0
 800d8ac:	eb06 0e04 	add.w	lr, r6, r4
 800d8b0:	da43      	bge.n	800d93a <__ieee754_sqrt+0x15e>
 800d8b2:	f1be 0f00 	cmp.w	lr, #0
 800d8b6:	db40      	blt.n	800d93a <__ieee754_sqrt+0x15e>
 800d8b8:	f10c 0801 	add.w	r8, ip, #1
 800d8bc:	eba2 020c 	sub.w	r2, r2, ip
 800d8c0:	429e      	cmp	r6, r3
 800d8c2:	bf88      	it	hi
 800d8c4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d8c8:	1b9b      	subs	r3, r3, r6
 800d8ca:	4421      	add	r1, r4
 800d8cc:	46c4      	mov	ip, r8
 800d8ce:	0052      	lsls	r2, r2, #1
 800d8d0:	3f01      	subs	r7, #1
 800d8d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d8d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d8da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8de:	d1dd      	bne.n	800d89c <__ieee754_sqrt+0xc0>
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	d006      	beq.n	800d8f2 <__ieee754_sqrt+0x116>
 800d8e4:	1c4c      	adds	r4, r1, #1
 800d8e6:	bf13      	iteet	ne
 800d8e8:	3101      	addne	r1, #1
 800d8ea:	3001      	addeq	r0, #1
 800d8ec:	4639      	moveq	r1, r7
 800d8ee:	f021 0101 	bicne.w	r1, r1, #1
 800d8f2:	1043      	asrs	r3, r0, #1
 800d8f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d8f8:	0849      	lsrs	r1, r1, #1
 800d8fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d8fe:	07c2      	lsls	r2, r0, #31
 800d900:	bf48      	it	mi
 800d902:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d906:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d90a:	460c      	mov	r4, r1
 800d90c:	463d      	mov	r5, r7
 800d90e:	e77f      	b.n	800d810 <__ieee754_sqrt+0x34>
 800d910:	0ada      	lsrs	r2, r3, #11
 800d912:	3815      	subs	r0, #21
 800d914:	055b      	lsls	r3, r3, #21
 800d916:	2a00      	cmp	r2, #0
 800d918:	d0fa      	beq.n	800d910 <__ieee754_sqrt+0x134>
 800d91a:	02d7      	lsls	r7, r2, #11
 800d91c:	d50a      	bpl.n	800d934 <__ieee754_sqrt+0x158>
 800d91e:	f1c1 0420 	rsb	r4, r1, #32
 800d922:	fa23 f404 	lsr.w	r4, r3, r4
 800d926:	1e4d      	subs	r5, r1, #1
 800d928:	408b      	lsls	r3, r1
 800d92a:	4322      	orrs	r2, r4
 800d92c:	1b41      	subs	r1, r0, r5
 800d92e:	e788      	b.n	800d842 <__ieee754_sqrt+0x66>
 800d930:	4608      	mov	r0, r1
 800d932:	e7f0      	b.n	800d916 <__ieee754_sqrt+0x13a>
 800d934:	0052      	lsls	r2, r2, #1
 800d936:	3101      	adds	r1, #1
 800d938:	e7ef      	b.n	800d91a <__ieee754_sqrt+0x13e>
 800d93a:	46e0      	mov	r8, ip
 800d93c:	e7be      	b.n	800d8bc <__ieee754_sqrt+0xe0>
 800d93e:	bf00      	nop
 800d940:	7ff00000 	.word	0x7ff00000
 800d944:	00000000 	.word	0x00000000

0800d948 <__kernel_cos>:
 800d948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	ec57 6b10 	vmov	r6, r7, d0
 800d950:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d954:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d958:	ed8d 1b00 	vstr	d1, [sp]
 800d95c:	da07      	bge.n	800d96e <__kernel_cos+0x26>
 800d95e:	ee10 0a10 	vmov	r0, s0
 800d962:	4639      	mov	r1, r7
 800d964:	f7f3 f8c0 	bl	8000ae8 <__aeabi_d2iz>
 800d968:	2800      	cmp	r0, #0
 800d96a:	f000 8088 	beq.w	800da7e <__kernel_cos+0x136>
 800d96e:	4632      	mov	r2, r6
 800d970:	463b      	mov	r3, r7
 800d972:	4630      	mov	r0, r6
 800d974:	4639      	mov	r1, r7
 800d976:	f7f2 fe07 	bl	8000588 <__aeabi_dmul>
 800d97a:	4b51      	ldr	r3, [pc, #324]	; (800dac0 <__kernel_cos+0x178>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	460d      	mov	r5, r1
 800d982:	f7f2 fe01 	bl	8000588 <__aeabi_dmul>
 800d986:	a340      	add	r3, pc, #256	; (adr r3, 800da88 <__kernel_cos+0x140>)
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	4682      	mov	sl, r0
 800d98e:	468b      	mov	fp, r1
 800d990:	4620      	mov	r0, r4
 800d992:	4629      	mov	r1, r5
 800d994:	f7f2 fdf8 	bl	8000588 <__aeabi_dmul>
 800d998:	a33d      	add	r3, pc, #244	; (adr r3, 800da90 <__kernel_cos+0x148>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7f2 fc3d 	bl	800021c <__adddf3>
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	f7f2 fdef 	bl	8000588 <__aeabi_dmul>
 800d9aa:	a33b      	add	r3, pc, #236	; (adr r3, 800da98 <__kernel_cos+0x150>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fc32 	bl	8000218 <__aeabi_dsub>
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	f7f2 fde6 	bl	8000588 <__aeabi_dmul>
 800d9bc:	a338      	add	r3, pc, #224	; (adr r3, 800daa0 <__kernel_cos+0x158>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	f7f2 fc2b 	bl	800021c <__adddf3>
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	f7f2 fddd 	bl	8000588 <__aeabi_dmul>
 800d9ce:	a336      	add	r3, pc, #216	; (adr r3, 800daa8 <__kernel_cos+0x160>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	f7f2 fc20 	bl	8000218 <__aeabi_dsub>
 800d9d8:	4622      	mov	r2, r4
 800d9da:	462b      	mov	r3, r5
 800d9dc:	f7f2 fdd4 	bl	8000588 <__aeabi_dmul>
 800d9e0:	a333      	add	r3, pc, #204	; (adr r3, 800dab0 <__kernel_cos+0x168>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f7f2 fc19 	bl	800021c <__adddf3>
 800d9ea:	4622      	mov	r2, r4
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	f7f2 fdcb 	bl	8000588 <__aeabi_dmul>
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	f7f2 fdc7 	bl	8000588 <__aeabi_dmul>
 800d9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9fe:	4604      	mov	r4, r0
 800da00:	460d      	mov	r5, r1
 800da02:	4630      	mov	r0, r6
 800da04:	4639      	mov	r1, r7
 800da06:	f7f2 fdbf 	bl	8000588 <__aeabi_dmul>
 800da0a:	460b      	mov	r3, r1
 800da0c:	4602      	mov	r2, r0
 800da0e:	4629      	mov	r1, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f7f2 fc01 	bl	8000218 <__aeabi_dsub>
 800da16:	4b2b      	ldr	r3, [pc, #172]	; (800dac4 <__kernel_cos+0x17c>)
 800da18:	4598      	cmp	r8, r3
 800da1a:	4606      	mov	r6, r0
 800da1c:	460f      	mov	r7, r1
 800da1e:	dc10      	bgt.n	800da42 <__kernel_cos+0xfa>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4650      	mov	r0, sl
 800da26:	4659      	mov	r1, fp
 800da28:	f7f2 fbf6 	bl	8000218 <__aeabi_dsub>
 800da2c:	460b      	mov	r3, r1
 800da2e:	4926      	ldr	r1, [pc, #152]	; (800dac8 <__kernel_cos+0x180>)
 800da30:	4602      	mov	r2, r0
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fbf0 	bl	8000218 <__aeabi_dsub>
 800da38:	ec41 0b10 	vmov	d0, r0, r1
 800da3c:	b003      	add	sp, #12
 800da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da42:	4b22      	ldr	r3, [pc, #136]	; (800dacc <__kernel_cos+0x184>)
 800da44:	4920      	ldr	r1, [pc, #128]	; (800dac8 <__kernel_cos+0x180>)
 800da46:	4598      	cmp	r8, r3
 800da48:	bfcc      	ite	gt
 800da4a:	4d21      	ldrgt	r5, [pc, #132]	; (800dad0 <__kernel_cos+0x188>)
 800da4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800da50:	2400      	movs	r4, #0
 800da52:	4622      	mov	r2, r4
 800da54:	462b      	mov	r3, r5
 800da56:	2000      	movs	r0, #0
 800da58:	f7f2 fbde 	bl	8000218 <__aeabi_dsub>
 800da5c:	4622      	mov	r2, r4
 800da5e:	4680      	mov	r8, r0
 800da60:	4689      	mov	r9, r1
 800da62:	462b      	mov	r3, r5
 800da64:	4650      	mov	r0, sl
 800da66:	4659      	mov	r1, fp
 800da68:	f7f2 fbd6 	bl	8000218 <__aeabi_dsub>
 800da6c:	4632      	mov	r2, r6
 800da6e:	463b      	mov	r3, r7
 800da70:	f7f2 fbd2 	bl	8000218 <__aeabi_dsub>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	4640      	mov	r0, r8
 800da7a:	4649      	mov	r1, r9
 800da7c:	e7da      	b.n	800da34 <__kernel_cos+0xec>
 800da7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dab8 <__kernel_cos+0x170>
 800da82:	e7db      	b.n	800da3c <__kernel_cos+0xf4>
 800da84:	f3af 8000 	nop.w
 800da88:	be8838d4 	.word	0xbe8838d4
 800da8c:	bda8fae9 	.word	0xbda8fae9
 800da90:	bdb4b1c4 	.word	0xbdb4b1c4
 800da94:	3e21ee9e 	.word	0x3e21ee9e
 800da98:	809c52ad 	.word	0x809c52ad
 800da9c:	3e927e4f 	.word	0x3e927e4f
 800daa0:	19cb1590 	.word	0x19cb1590
 800daa4:	3efa01a0 	.word	0x3efa01a0
 800daa8:	16c15177 	.word	0x16c15177
 800daac:	3f56c16c 	.word	0x3f56c16c
 800dab0:	5555554c 	.word	0x5555554c
 800dab4:	3fa55555 	.word	0x3fa55555
 800dab8:	00000000 	.word	0x00000000
 800dabc:	3ff00000 	.word	0x3ff00000
 800dac0:	3fe00000 	.word	0x3fe00000
 800dac4:	3fd33332 	.word	0x3fd33332
 800dac8:	3ff00000 	.word	0x3ff00000
 800dacc:	3fe90000 	.word	0x3fe90000
 800dad0:	3fd20000 	.word	0x3fd20000
 800dad4:	00000000 	.word	0x00000000

0800dad8 <__kernel_rem_pio2>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	ed2d 8b02 	vpush	{d8}
 800dae0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800dae4:	f112 0f14 	cmn.w	r2, #20
 800dae8:	9308      	str	r3, [sp, #32]
 800daea:	9101      	str	r1, [sp, #4]
 800daec:	4bc6      	ldr	r3, [pc, #792]	; (800de08 <__kernel_rem_pio2+0x330>)
 800daee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800daf0:	9009      	str	r0, [sp, #36]	; 0x24
 800daf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf6:	9304      	str	r3, [sp, #16]
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dafe:	bfa8      	it	ge
 800db00:	1ed4      	subge	r4, r2, #3
 800db02:	9306      	str	r3, [sp, #24]
 800db04:	bfb2      	itee	lt
 800db06:	2400      	movlt	r4, #0
 800db08:	2318      	movge	r3, #24
 800db0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800db0e:	f06f 0317 	mvn.w	r3, #23
 800db12:	fb04 3303 	mla	r3, r4, r3, r3
 800db16:	eb03 0a02 	add.w	sl, r3, r2
 800db1a:	9b04      	ldr	r3, [sp, #16]
 800db1c:	9a06      	ldr	r2, [sp, #24]
 800db1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ddf8 <__kernel_rem_pio2+0x320>
 800db22:	eb03 0802 	add.w	r8, r3, r2
 800db26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800db28:	1aa7      	subs	r7, r4, r2
 800db2a:	ae20      	add	r6, sp, #128	; 0x80
 800db2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db30:	2500      	movs	r5, #0
 800db32:	4545      	cmp	r5, r8
 800db34:	dd18      	ble.n	800db68 <__kernel_rem_pio2+0x90>
 800db36:	9b08      	ldr	r3, [sp, #32]
 800db38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800db3c:	aa20      	add	r2, sp, #128	; 0x80
 800db3e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ddf8 <__kernel_rem_pio2+0x320>
 800db42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800db46:	f1c3 0301 	rsb	r3, r3, #1
 800db4a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800db4e:	9307      	str	r3, [sp, #28]
 800db50:	9b07      	ldr	r3, [sp, #28]
 800db52:	9a04      	ldr	r2, [sp, #16]
 800db54:	4443      	add	r3, r8
 800db56:	429a      	cmp	r2, r3
 800db58:	db2f      	blt.n	800dbba <__kernel_rem_pio2+0xe2>
 800db5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800db5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800db62:	462f      	mov	r7, r5
 800db64:	2600      	movs	r6, #0
 800db66:	e01b      	b.n	800dba0 <__kernel_rem_pio2+0xc8>
 800db68:	42ef      	cmn	r7, r5
 800db6a:	d407      	bmi.n	800db7c <__kernel_rem_pio2+0xa4>
 800db6c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800db70:	f7f2 fca0 	bl	80004b4 <__aeabi_i2d>
 800db74:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db78:	3501      	adds	r5, #1
 800db7a:	e7da      	b.n	800db32 <__kernel_rem_pio2+0x5a>
 800db7c:	ec51 0b18 	vmov	r0, r1, d8
 800db80:	e7f8      	b.n	800db74 <__kernel_rem_pio2+0x9c>
 800db82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db86:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800db8a:	f7f2 fcfd 	bl	8000588 <__aeabi_dmul>
 800db8e:	4602      	mov	r2, r0
 800db90:	460b      	mov	r3, r1
 800db92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db96:	f7f2 fb41 	bl	800021c <__adddf3>
 800db9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db9e:	3601      	adds	r6, #1
 800dba0:	9b06      	ldr	r3, [sp, #24]
 800dba2:	429e      	cmp	r6, r3
 800dba4:	f1a7 0708 	sub.w	r7, r7, #8
 800dba8:	ddeb      	ble.n	800db82 <__kernel_rem_pio2+0xaa>
 800dbaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbae:	3508      	adds	r5, #8
 800dbb0:	ecab 7b02 	vstmia	fp!, {d7}
 800dbb4:	f108 0801 	add.w	r8, r8, #1
 800dbb8:	e7ca      	b.n	800db50 <__kernel_rem_pio2+0x78>
 800dbba:	9b04      	ldr	r3, [sp, #16]
 800dbbc:	aa0c      	add	r2, sp, #48	; 0x30
 800dbbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbc4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dbc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dbca:	9c04      	ldr	r4, [sp, #16]
 800dbcc:	930a      	str	r3, [sp, #40]	; 0x28
 800dbce:	ab98      	add	r3, sp, #608	; 0x260
 800dbd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbd4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dbd8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800dbdc:	f8cd b008 	str.w	fp, [sp, #8]
 800dbe0:	4625      	mov	r5, r4
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	dc78      	bgt.n	800dcd8 <__kernel_rem_pio2+0x200>
 800dbe6:	ec47 6b10 	vmov	d0, r6, r7
 800dbea:	4650      	mov	r0, sl
 800dbec:	f000 fc9c 	bl	800e528 <scalbn>
 800dbf0:	ec57 6b10 	vmov	r6, r7, d0
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dbfa:	ee10 0a10 	vmov	r0, s0
 800dbfe:	4639      	mov	r1, r7
 800dc00:	f7f2 fcc2 	bl	8000588 <__aeabi_dmul>
 800dc04:	ec41 0b10 	vmov	d0, r0, r1
 800dc08:	f000 fb7a 	bl	800e300 <floor>
 800dc0c:	4b7f      	ldr	r3, [pc, #508]	; (800de0c <__kernel_rem_pio2+0x334>)
 800dc0e:	ec51 0b10 	vmov	r0, r1, d0
 800dc12:	2200      	movs	r2, #0
 800dc14:	f7f2 fcb8 	bl	8000588 <__aeabi_dmul>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 fafa 	bl	8000218 <__aeabi_dsub>
 800dc24:	460f      	mov	r7, r1
 800dc26:	4606      	mov	r6, r0
 800dc28:	f7f2 ff5e 	bl	8000ae8 <__aeabi_d2iz>
 800dc2c:	9007      	str	r0, [sp, #28]
 800dc2e:	f7f2 fc41 	bl	80004b4 <__aeabi_i2d>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4630      	mov	r0, r6
 800dc38:	4639      	mov	r1, r7
 800dc3a:	f7f2 faed 	bl	8000218 <__aeabi_dsub>
 800dc3e:	f1ba 0f00 	cmp.w	sl, #0
 800dc42:	4606      	mov	r6, r0
 800dc44:	460f      	mov	r7, r1
 800dc46:	dd70      	ble.n	800dd2a <__kernel_rem_pio2+0x252>
 800dc48:	1e62      	subs	r2, r4, #1
 800dc4a:	ab0c      	add	r3, sp, #48	; 0x30
 800dc4c:	9d07      	ldr	r5, [sp, #28]
 800dc4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dc52:	f1ca 0118 	rsb	r1, sl, #24
 800dc56:	fa40 f301 	asr.w	r3, r0, r1
 800dc5a:	441d      	add	r5, r3
 800dc5c:	408b      	lsls	r3, r1
 800dc5e:	1ac0      	subs	r0, r0, r3
 800dc60:	ab0c      	add	r3, sp, #48	; 0x30
 800dc62:	9507      	str	r5, [sp, #28]
 800dc64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dc68:	f1ca 0317 	rsb	r3, sl, #23
 800dc6c:	fa40 f303 	asr.w	r3, r0, r3
 800dc70:	9302      	str	r3, [sp, #8]
 800dc72:	9b02      	ldr	r3, [sp, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dd66      	ble.n	800dd46 <__kernel_rem_pio2+0x26e>
 800dc78:	9b07      	ldr	r3, [sp, #28]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	9307      	str	r3, [sp, #28]
 800dc80:	4615      	mov	r5, r2
 800dc82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dc86:	4294      	cmp	r4, r2
 800dc88:	f300 8099 	bgt.w	800ddbe <__kernel_rem_pio2+0x2e6>
 800dc8c:	f1ba 0f00 	cmp.w	sl, #0
 800dc90:	dd07      	ble.n	800dca2 <__kernel_rem_pio2+0x1ca>
 800dc92:	f1ba 0f01 	cmp.w	sl, #1
 800dc96:	f000 80a5 	beq.w	800dde4 <__kernel_rem_pio2+0x30c>
 800dc9a:	f1ba 0f02 	cmp.w	sl, #2
 800dc9e:	f000 80c1 	beq.w	800de24 <__kernel_rem_pio2+0x34c>
 800dca2:	9b02      	ldr	r3, [sp, #8]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d14e      	bne.n	800dd46 <__kernel_rem_pio2+0x26e>
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	4958      	ldr	r1, [pc, #352]	; (800de10 <__kernel_rem_pio2+0x338>)
 800dcae:	2000      	movs	r0, #0
 800dcb0:	f7f2 fab2 	bl	8000218 <__aeabi_dsub>
 800dcb4:	4606      	mov	r6, r0
 800dcb6:	460f      	mov	r7, r1
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	d044      	beq.n	800dd46 <__kernel_rem_pio2+0x26e>
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800de00 <__kernel_rem_pio2+0x328>
 800dcc2:	f000 fc31 	bl	800e528 <scalbn>
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	4639      	mov	r1, r7
 800dcca:	ec53 2b10 	vmov	r2, r3, d0
 800dcce:	f7f2 faa3 	bl	8000218 <__aeabi_dsub>
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	e036      	b.n	800dd46 <__kernel_rem_pio2+0x26e>
 800dcd8:	4b4e      	ldr	r3, [pc, #312]	; (800de14 <__kernel_rem_pio2+0x33c>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	4630      	mov	r0, r6
 800dcde:	4639      	mov	r1, r7
 800dce0:	f7f2 fc52 	bl	8000588 <__aeabi_dmul>
 800dce4:	f7f2 ff00 	bl	8000ae8 <__aeabi_d2iz>
 800dce8:	f7f2 fbe4 	bl	80004b4 <__aeabi_i2d>
 800dcec:	4b4a      	ldr	r3, [pc, #296]	; (800de18 <__kernel_rem_pio2+0x340>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4680      	mov	r8, r0
 800dcf2:	4689      	mov	r9, r1
 800dcf4:	f7f2 fc48 	bl	8000588 <__aeabi_dmul>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fa8a 	bl	8000218 <__aeabi_dsub>
 800dd04:	f7f2 fef0 	bl	8000ae8 <__aeabi_d2iz>
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	f843 0b04 	str.w	r0, [r3], #4
 800dd0e:	3d01      	subs	r5, #1
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	ab70      	add	r3, sp, #448	; 0x1c0
 800dd14:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 fa7c 	bl	800021c <__adddf3>
 800dd24:	4606      	mov	r6, r0
 800dd26:	460f      	mov	r7, r1
 800dd28:	e75b      	b.n	800dbe2 <__kernel_rem_pio2+0x10a>
 800dd2a:	d105      	bne.n	800dd38 <__kernel_rem_pio2+0x260>
 800dd2c:	1e63      	subs	r3, r4, #1
 800dd2e:	aa0c      	add	r2, sp, #48	; 0x30
 800dd30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dd34:	15c3      	asrs	r3, r0, #23
 800dd36:	e79b      	b.n	800dc70 <__kernel_rem_pio2+0x198>
 800dd38:	4b38      	ldr	r3, [pc, #224]	; (800de1c <__kernel_rem_pio2+0x344>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f7f2 feaa 	bl	8000a94 <__aeabi_dcmpge>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d139      	bne.n	800ddb8 <__kernel_rem_pio2+0x2e0>
 800dd44:	9002      	str	r0, [sp, #8]
 800dd46:	2200      	movs	r2, #0
 800dd48:	2300      	movs	r3, #0
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	f7f2 fe83 	bl	8000a58 <__aeabi_dcmpeq>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	f000 80b4 	beq.w	800dec0 <__kernel_rem_pio2+0x3e8>
 800dd58:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800dd5c:	465b      	mov	r3, fp
 800dd5e:	2200      	movs	r2, #0
 800dd60:	9904      	ldr	r1, [sp, #16]
 800dd62:	428b      	cmp	r3, r1
 800dd64:	da65      	bge.n	800de32 <__kernel_rem_pio2+0x35a>
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	d07b      	beq.n	800de62 <__kernel_rem_pio2+0x38a>
 800dd6a:	ab0c      	add	r3, sp, #48	; 0x30
 800dd6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800dd70:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f000 80a0 	beq.w	800deba <__kernel_rem_pio2+0x3e2>
 800dd7a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800de00 <__kernel_rem_pio2+0x328>
 800dd7e:	4650      	mov	r0, sl
 800dd80:	f000 fbd2 	bl	800e528 <scalbn>
 800dd84:	4f23      	ldr	r7, [pc, #140]	; (800de14 <__kernel_rem_pio2+0x33c>)
 800dd86:	ec55 4b10 	vmov	r4, r5, d0
 800dd8a:	46d8      	mov	r8, fp
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	f1b8 0f00 	cmp.w	r8, #0
 800dd92:	f280 80cf 	bge.w	800df34 <__kernel_rem_pio2+0x45c>
 800dd96:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ddf8 <__kernel_rem_pio2+0x320>
 800dd9a:	465f      	mov	r7, fp
 800dd9c:	f04f 0800 	mov.w	r8, #0
 800dda0:	2f00      	cmp	r7, #0
 800dda2:	f2c0 80fd 	blt.w	800dfa0 <__kernel_rem_pio2+0x4c8>
 800dda6:	ab70      	add	r3, sp, #448	; 0x1c0
 800dda8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800de20 <__kernel_rem_pio2+0x348>
 800ddac:	ec55 4b18 	vmov	r4, r5, d8
 800ddb0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ddb4:	2600      	movs	r6, #0
 800ddb6:	e0e5      	b.n	800df84 <__kernel_rem_pio2+0x4ac>
 800ddb8:	2302      	movs	r3, #2
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	e75c      	b.n	800dc78 <__kernel_rem_pio2+0x1a0>
 800ddbe:	f8db 3000 	ldr.w	r3, [fp]
 800ddc2:	b955      	cbnz	r5, 800ddda <__kernel_rem_pio2+0x302>
 800ddc4:	b123      	cbz	r3, 800ddd0 <__kernel_rem_pio2+0x2f8>
 800ddc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ddca:	f8cb 3000 	str.w	r3, [fp]
 800ddce:	2301      	movs	r3, #1
 800ddd0:	3201      	adds	r2, #1
 800ddd2:	f10b 0b04 	add.w	fp, fp, #4
 800ddd6:	461d      	mov	r5, r3
 800ddd8:	e755      	b.n	800dc86 <__kernel_rem_pio2+0x1ae>
 800ddda:	1acb      	subs	r3, r1, r3
 800dddc:	f8cb 3000 	str.w	r3, [fp]
 800dde0:	462b      	mov	r3, r5
 800dde2:	e7f5      	b.n	800ddd0 <__kernel_rem_pio2+0x2f8>
 800dde4:	1e62      	subs	r2, r4, #1
 800dde6:	ab0c      	add	r3, sp, #48	; 0x30
 800dde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ddf0:	a90c      	add	r1, sp, #48	; 0x30
 800ddf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ddf6:	e754      	b.n	800dca2 <__kernel_rem_pio2+0x1ca>
	...
 800de04:	3ff00000 	.word	0x3ff00000
 800de08:	0800e950 	.word	0x0800e950
 800de0c:	40200000 	.word	0x40200000
 800de10:	3ff00000 	.word	0x3ff00000
 800de14:	3e700000 	.word	0x3e700000
 800de18:	41700000 	.word	0x41700000
 800de1c:	3fe00000 	.word	0x3fe00000
 800de20:	0800e910 	.word	0x0800e910
 800de24:	1e62      	subs	r2, r4, #1
 800de26:	ab0c      	add	r3, sp, #48	; 0x30
 800de28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800de30:	e7de      	b.n	800ddf0 <__kernel_rem_pio2+0x318>
 800de32:	a90c      	add	r1, sp, #48	; 0x30
 800de34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800de38:	3b01      	subs	r3, #1
 800de3a:	430a      	orrs	r2, r1
 800de3c:	e790      	b.n	800dd60 <__kernel_rem_pio2+0x288>
 800de3e:	3301      	adds	r3, #1
 800de40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800de44:	2900      	cmp	r1, #0
 800de46:	d0fa      	beq.n	800de3e <__kernel_rem_pio2+0x366>
 800de48:	9a08      	ldr	r2, [sp, #32]
 800de4a:	18e3      	adds	r3, r4, r3
 800de4c:	18a6      	adds	r6, r4, r2
 800de4e:	aa20      	add	r2, sp, #128	; 0x80
 800de50:	1c65      	adds	r5, r4, #1
 800de52:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800de56:	9302      	str	r3, [sp, #8]
 800de58:	9b02      	ldr	r3, [sp, #8]
 800de5a:	42ab      	cmp	r3, r5
 800de5c:	da04      	bge.n	800de68 <__kernel_rem_pio2+0x390>
 800de5e:	461c      	mov	r4, r3
 800de60:	e6b5      	b.n	800dbce <__kernel_rem_pio2+0xf6>
 800de62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de64:	2301      	movs	r3, #1
 800de66:	e7eb      	b.n	800de40 <__kernel_rem_pio2+0x368>
 800de68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de6e:	f7f2 fb21 	bl	80004b4 <__aeabi_i2d>
 800de72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de78:	46b3      	mov	fp, r6
 800de7a:	461c      	mov	r4, r3
 800de7c:	2700      	movs	r7, #0
 800de7e:	f04f 0800 	mov.w	r8, #0
 800de82:	f04f 0900 	mov.w	r9, #0
 800de86:	9b06      	ldr	r3, [sp, #24]
 800de88:	429f      	cmp	r7, r3
 800de8a:	dd06      	ble.n	800de9a <__kernel_rem_pio2+0x3c2>
 800de8c:	ab70      	add	r3, sp, #448	; 0x1c0
 800de8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de92:	e9c3 8900 	strd	r8, r9, [r3]
 800de96:	3501      	adds	r5, #1
 800de98:	e7de      	b.n	800de58 <__kernel_rem_pio2+0x380>
 800de9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800de9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dea2:	f7f2 fb71 	bl	8000588 <__aeabi_dmul>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 f9b5 	bl	800021c <__adddf3>
 800deb2:	3701      	adds	r7, #1
 800deb4:	4680      	mov	r8, r0
 800deb6:	4689      	mov	r9, r1
 800deb8:	e7e5      	b.n	800de86 <__kernel_rem_pio2+0x3ae>
 800deba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800debe:	e754      	b.n	800dd6a <__kernel_rem_pio2+0x292>
 800dec0:	ec47 6b10 	vmov	d0, r6, r7
 800dec4:	f1ca 0000 	rsb	r0, sl, #0
 800dec8:	f000 fb2e 	bl	800e528 <scalbn>
 800decc:	ec57 6b10 	vmov	r6, r7, d0
 800ded0:	4b9f      	ldr	r3, [pc, #636]	; (800e150 <__kernel_rem_pio2+0x678>)
 800ded2:	ee10 0a10 	vmov	r0, s0
 800ded6:	2200      	movs	r2, #0
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 fddb 	bl	8000a94 <__aeabi_dcmpge>
 800dede:	b300      	cbz	r0, 800df22 <__kernel_rem_pio2+0x44a>
 800dee0:	4b9c      	ldr	r3, [pc, #624]	; (800e154 <__kernel_rem_pio2+0x67c>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	4630      	mov	r0, r6
 800dee6:	4639      	mov	r1, r7
 800dee8:	f7f2 fb4e 	bl	8000588 <__aeabi_dmul>
 800deec:	f7f2 fdfc 	bl	8000ae8 <__aeabi_d2iz>
 800def0:	4605      	mov	r5, r0
 800def2:	f7f2 fadf 	bl	80004b4 <__aeabi_i2d>
 800def6:	4b96      	ldr	r3, [pc, #600]	; (800e150 <__kernel_rem_pio2+0x678>)
 800def8:	2200      	movs	r2, #0
 800defa:	f7f2 fb45 	bl	8000588 <__aeabi_dmul>
 800defe:	460b      	mov	r3, r1
 800df00:	4602      	mov	r2, r0
 800df02:	4639      	mov	r1, r7
 800df04:	4630      	mov	r0, r6
 800df06:	f7f2 f987 	bl	8000218 <__aeabi_dsub>
 800df0a:	f7f2 fded 	bl	8000ae8 <__aeabi_d2iz>
 800df0e:	f104 0b01 	add.w	fp, r4, #1
 800df12:	ab0c      	add	r3, sp, #48	; 0x30
 800df14:	f10a 0a18 	add.w	sl, sl, #24
 800df18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df1c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800df20:	e72b      	b.n	800dd7a <__kernel_rem_pio2+0x2a2>
 800df22:	4630      	mov	r0, r6
 800df24:	4639      	mov	r1, r7
 800df26:	f7f2 fddf 	bl	8000ae8 <__aeabi_d2iz>
 800df2a:	ab0c      	add	r3, sp, #48	; 0x30
 800df2c:	46a3      	mov	fp, r4
 800df2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df32:	e722      	b.n	800dd7a <__kernel_rem_pio2+0x2a2>
 800df34:	ab70      	add	r3, sp, #448	; 0x1c0
 800df36:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800df3a:	ab0c      	add	r3, sp, #48	; 0x30
 800df3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800df40:	f7f2 fab8 	bl	80004b4 <__aeabi_i2d>
 800df44:	4622      	mov	r2, r4
 800df46:	462b      	mov	r3, r5
 800df48:	f7f2 fb1e 	bl	8000588 <__aeabi_dmul>
 800df4c:	4632      	mov	r2, r6
 800df4e:	e9c9 0100 	strd	r0, r1, [r9]
 800df52:	463b      	mov	r3, r7
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 fb16 	bl	8000588 <__aeabi_dmul>
 800df5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df60:	4604      	mov	r4, r0
 800df62:	460d      	mov	r5, r1
 800df64:	e713      	b.n	800dd8e <__kernel_rem_pio2+0x2b6>
 800df66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800df6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800df6e:	f7f2 fb0b 	bl	8000588 <__aeabi_dmul>
 800df72:	4602      	mov	r2, r0
 800df74:	460b      	mov	r3, r1
 800df76:	4620      	mov	r0, r4
 800df78:	4629      	mov	r1, r5
 800df7a:	f7f2 f94f 	bl	800021c <__adddf3>
 800df7e:	3601      	adds	r6, #1
 800df80:	4604      	mov	r4, r0
 800df82:	460d      	mov	r5, r1
 800df84:	9b04      	ldr	r3, [sp, #16]
 800df86:	429e      	cmp	r6, r3
 800df88:	dc01      	bgt.n	800df8e <__kernel_rem_pio2+0x4b6>
 800df8a:	45b0      	cmp	r8, r6
 800df8c:	daeb      	bge.n	800df66 <__kernel_rem_pio2+0x48e>
 800df8e:	ab48      	add	r3, sp, #288	; 0x120
 800df90:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df94:	e9c3 4500 	strd	r4, r5, [r3]
 800df98:	3f01      	subs	r7, #1
 800df9a:	f108 0801 	add.w	r8, r8, #1
 800df9e:	e6ff      	b.n	800dda0 <__kernel_rem_pio2+0x2c8>
 800dfa0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	dc0b      	bgt.n	800dfbe <__kernel_rem_pio2+0x4e6>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dc6e      	bgt.n	800e088 <__kernel_rem_pio2+0x5b0>
 800dfaa:	d045      	beq.n	800e038 <__kernel_rem_pio2+0x560>
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	f003 0007 	and.w	r0, r3, #7
 800dfb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dfb6:	ecbd 8b02 	vpop	{d8}
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dfc0:	2b03      	cmp	r3, #3
 800dfc2:	d1f3      	bne.n	800dfac <__kernel_rem_pio2+0x4d4>
 800dfc4:	ab48      	add	r3, sp, #288	; 0x120
 800dfc6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800dfca:	46d0      	mov	r8, sl
 800dfcc:	46d9      	mov	r9, fp
 800dfce:	f1b9 0f00 	cmp.w	r9, #0
 800dfd2:	f1a8 0808 	sub.w	r8, r8, #8
 800dfd6:	dc64      	bgt.n	800e0a2 <__kernel_rem_pio2+0x5ca>
 800dfd8:	465c      	mov	r4, fp
 800dfda:	2c01      	cmp	r4, #1
 800dfdc:	f1aa 0a08 	sub.w	sl, sl, #8
 800dfe0:	dc7e      	bgt.n	800e0e0 <__kernel_rem_pio2+0x608>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	f1bb 0f01 	cmp.w	fp, #1
 800dfea:	f300 8097 	bgt.w	800e11c <__kernel_rem_pio2+0x644>
 800dfee:	9b02      	ldr	r3, [sp, #8]
 800dff0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800dff4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f040 8099 	bne.w	800e130 <__kernel_rem_pio2+0x658>
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	e9c3 5600 	strd	r5, r6, [r3]
 800e004:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e008:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e00c:	e7ce      	b.n	800dfac <__kernel_rem_pio2+0x4d4>
 800e00e:	ab48      	add	r3, sp, #288	; 0x120
 800e010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	f7f2 f900 	bl	800021c <__adddf3>
 800e01c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e020:	f1bb 0f00 	cmp.w	fp, #0
 800e024:	daf3      	bge.n	800e00e <__kernel_rem_pio2+0x536>
 800e026:	9b02      	ldr	r3, [sp, #8]
 800e028:	b113      	cbz	r3, 800e030 <__kernel_rem_pio2+0x558>
 800e02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e02e:	4619      	mov	r1, r3
 800e030:	9b01      	ldr	r3, [sp, #4]
 800e032:	e9c3 0100 	strd	r0, r1, [r3]
 800e036:	e7b9      	b.n	800dfac <__kernel_rem_pio2+0x4d4>
 800e038:	2000      	movs	r0, #0
 800e03a:	2100      	movs	r1, #0
 800e03c:	e7f0      	b.n	800e020 <__kernel_rem_pio2+0x548>
 800e03e:	ab48      	add	r3, sp, #288	; 0x120
 800e040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f7f2 f8e8 	bl	800021c <__adddf3>
 800e04c:	3c01      	subs	r4, #1
 800e04e:	2c00      	cmp	r4, #0
 800e050:	daf5      	bge.n	800e03e <__kernel_rem_pio2+0x566>
 800e052:	9b02      	ldr	r3, [sp, #8]
 800e054:	b1e3      	cbz	r3, 800e090 <__kernel_rem_pio2+0x5b8>
 800e056:	4602      	mov	r2, r0
 800e058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e05c:	9c01      	ldr	r4, [sp, #4]
 800e05e:	e9c4 2300 	strd	r2, r3, [r4]
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e06a:	f7f2 f8d5 	bl	8000218 <__aeabi_dsub>
 800e06e:	ad4a      	add	r5, sp, #296	; 0x128
 800e070:	2401      	movs	r4, #1
 800e072:	45a3      	cmp	fp, r4
 800e074:	da0f      	bge.n	800e096 <__kernel_rem_pio2+0x5be>
 800e076:	9b02      	ldr	r3, [sp, #8]
 800e078:	b113      	cbz	r3, 800e080 <__kernel_rem_pio2+0x5a8>
 800e07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e07e:	4619      	mov	r1, r3
 800e080:	9b01      	ldr	r3, [sp, #4]
 800e082:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e086:	e791      	b.n	800dfac <__kernel_rem_pio2+0x4d4>
 800e088:	465c      	mov	r4, fp
 800e08a:	2000      	movs	r0, #0
 800e08c:	2100      	movs	r1, #0
 800e08e:	e7de      	b.n	800e04e <__kernel_rem_pio2+0x576>
 800e090:	4602      	mov	r2, r0
 800e092:	460b      	mov	r3, r1
 800e094:	e7e2      	b.n	800e05c <__kernel_rem_pio2+0x584>
 800e096:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e09a:	f7f2 f8bf 	bl	800021c <__adddf3>
 800e09e:	3401      	adds	r4, #1
 800e0a0:	e7e7      	b.n	800e072 <__kernel_rem_pio2+0x59a>
 800e0a2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e0a6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7f2 f8b3 	bl	800021c <__adddf3>
 800e0b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	f7f2 f8a9 	bl	8000218 <__aeabi_dsub>
 800e0c6:	4632      	mov	r2, r6
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	f7f2 f8a7 	bl	800021c <__adddf3>
 800e0ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e0d2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e0d6:	ed88 7b00 	vstr	d7, [r8]
 800e0da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e0de:	e776      	b.n	800dfce <__kernel_rem_pio2+0x4f6>
 800e0e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0e4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e0e8:	4640      	mov	r0, r8
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	463b      	mov	r3, r7
 800e0ee:	4649      	mov	r1, r9
 800e0f0:	f7f2 f894 	bl	800021c <__adddf3>
 800e0f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	4649      	mov	r1, r9
 800e100:	f7f2 f88a 	bl	8000218 <__aeabi_dsub>
 800e104:	4632      	mov	r2, r6
 800e106:	463b      	mov	r3, r7
 800e108:	f7f2 f888 	bl	800021c <__adddf3>
 800e10c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e110:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e114:	ed8a 7b00 	vstr	d7, [sl]
 800e118:	3c01      	subs	r4, #1
 800e11a:	e75e      	b.n	800dfda <__kernel_rem_pio2+0x502>
 800e11c:	ab48      	add	r3, sp, #288	; 0x120
 800e11e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	f7f2 f879 	bl	800021c <__adddf3>
 800e12a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e12e:	e75a      	b.n	800dfe6 <__kernel_rem_pio2+0x50e>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	9a01      	ldr	r2, [sp, #4]
 800e134:	601d      	str	r5, [r3, #0]
 800e136:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e13a:	605c      	str	r4, [r3, #4]
 800e13c:	609f      	str	r7, [r3, #8]
 800e13e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e142:	60d3      	str	r3, [r2, #12]
 800e144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e148:	6110      	str	r0, [r2, #16]
 800e14a:	6153      	str	r3, [r2, #20]
 800e14c:	e72e      	b.n	800dfac <__kernel_rem_pio2+0x4d4>
 800e14e:	bf00      	nop
 800e150:	41700000 	.word	0x41700000
 800e154:	3e700000 	.word	0x3e700000

0800e158 <__kernel_sin>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	ed2d 8b04 	vpush	{d8-d9}
 800e160:	eeb0 8a41 	vmov.f32	s16, s2
 800e164:	eef0 8a61 	vmov.f32	s17, s3
 800e168:	ec55 4b10 	vmov	r4, r5, d0
 800e16c:	b083      	sub	sp, #12
 800e16e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e172:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e176:	9001      	str	r0, [sp, #4]
 800e178:	da06      	bge.n	800e188 <__kernel_sin+0x30>
 800e17a:	ee10 0a10 	vmov	r0, s0
 800e17e:	4629      	mov	r1, r5
 800e180:	f7f2 fcb2 	bl	8000ae8 <__aeabi_d2iz>
 800e184:	2800      	cmp	r0, #0
 800e186:	d051      	beq.n	800e22c <__kernel_sin+0xd4>
 800e188:	4622      	mov	r2, r4
 800e18a:	462b      	mov	r3, r5
 800e18c:	4620      	mov	r0, r4
 800e18e:	4629      	mov	r1, r5
 800e190:	f7f2 f9fa 	bl	8000588 <__aeabi_dmul>
 800e194:	4682      	mov	sl, r0
 800e196:	468b      	mov	fp, r1
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 f9f2 	bl	8000588 <__aeabi_dmul>
 800e1a4:	a341      	add	r3, pc, #260	; (adr r3, 800e2ac <__kernel_sin+0x154>)
 800e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1aa:	4680      	mov	r8, r0
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	4650      	mov	r0, sl
 800e1b0:	4659      	mov	r1, fp
 800e1b2:	f7f2 f9e9 	bl	8000588 <__aeabi_dmul>
 800e1b6:	a33f      	add	r3, pc, #252	; (adr r3, 800e2b4 <__kernel_sin+0x15c>)
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	f7f2 f82c 	bl	8000218 <__aeabi_dsub>
 800e1c0:	4652      	mov	r2, sl
 800e1c2:	465b      	mov	r3, fp
 800e1c4:	f7f2 f9e0 	bl	8000588 <__aeabi_dmul>
 800e1c8:	a33c      	add	r3, pc, #240	; (adr r3, 800e2bc <__kernel_sin+0x164>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	f7f2 f825 	bl	800021c <__adddf3>
 800e1d2:	4652      	mov	r2, sl
 800e1d4:	465b      	mov	r3, fp
 800e1d6:	f7f2 f9d7 	bl	8000588 <__aeabi_dmul>
 800e1da:	a33a      	add	r3, pc, #232	; (adr r3, 800e2c4 <__kernel_sin+0x16c>)
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f7f2 f81a 	bl	8000218 <__aeabi_dsub>
 800e1e4:	4652      	mov	r2, sl
 800e1e6:	465b      	mov	r3, fp
 800e1e8:	f7f2 f9ce 	bl	8000588 <__aeabi_dmul>
 800e1ec:	a337      	add	r3, pc, #220	; (adr r3, 800e2cc <__kernel_sin+0x174>)
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	f7f2 f813 	bl	800021c <__adddf3>
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	460f      	mov	r7, r1
 800e1fc:	b9eb      	cbnz	r3, 800e23a <__kernel_sin+0xe2>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4650      	mov	r0, sl
 800e204:	4659      	mov	r1, fp
 800e206:	f7f2 f9bf 	bl	8000588 <__aeabi_dmul>
 800e20a:	a325      	add	r3, pc, #148	; (adr r3, 800e2a0 <__kernel_sin+0x148>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	f7f2 f802 	bl	8000218 <__aeabi_dsub>
 800e214:	4642      	mov	r2, r8
 800e216:	464b      	mov	r3, r9
 800e218:	f7f2 f9b6 	bl	8000588 <__aeabi_dmul>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	4620      	mov	r0, r4
 800e222:	4629      	mov	r1, r5
 800e224:	f7f1 fffa 	bl	800021c <__adddf3>
 800e228:	4604      	mov	r4, r0
 800e22a:	460d      	mov	r5, r1
 800e22c:	ec45 4b10 	vmov	d0, r4, r5
 800e230:	b003      	add	sp, #12
 800e232:	ecbd 8b04 	vpop	{d8-d9}
 800e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23a:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <__kernel_sin+0x150>)
 800e23c:	ec51 0b18 	vmov	r0, r1, d8
 800e240:	2200      	movs	r2, #0
 800e242:	f7f2 f9a1 	bl	8000588 <__aeabi_dmul>
 800e246:	4632      	mov	r2, r6
 800e248:	ec41 0b19 	vmov	d9, r0, r1
 800e24c:	463b      	mov	r3, r7
 800e24e:	4640      	mov	r0, r8
 800e250:	4649      	mov	r1, r9
 800e252:	f7f2 f999 	bl	8000588 <__aeabi_dmul>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	ec51 0b19 	vmov	r0, r1, d9
 800e25e:	f7f1 ffdb 	bl	8000218 <__aeabi_dsub>
 800e262:	4652      	mov	r2, sl
 800e264:	465b      	mov	r3, fp
 800e266:	f7f2 f98f 	bl	8000588 <__aeabi_dmul>
 800e26a:	ec53 2b18 	vmov	r2, r3, d8
 800e26e:	f7f1 ffd3 	bl	8000218 <__aeabi_dsub>
 800e272:	a30b      	add	r3, pc, #44	; (adr r3, 800e2a0 <__kernel_sin+0x148>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	4640      	mov	r0, r8
 800e27e:	4649      	mov	r1, r9
 800e280:	f7f2 f982 	bl	8000588 <__aeabi_dmul>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4630      	mov	r0, r6
 800e28a:	4639      	mov	r1, r7
 800e28c:	f7f1 ffc6 	bl	800021c <__adddf3>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4620      	mov	r0, r4
 800e296:	4629      	mov	r1, r5
 800e298:	f7f1 ffbe 	bl	8000218 <__aeabi_dsub>
 800e29c:	e7c4      	b.n	800e228 <__kernel_sin+0xd0>
 800e29e:	bf00      	nop
 800e2a0:	55555549 	.word	0x55555549
 800e2a4:	3fc55555 	.word	0x3fc55555
 800e2a8:	3fe00000 	.word	0x3fe00000
 800e2ac:	5acfd57c 	.word	0x5acfd57c
 800e2b0:	3de5d93a 	.word	0x3de5d93a
 800e2b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800e2b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800e2bc:	57b1fe7d 	.word	0x57b1fe7d
 800e2c0:	3ec71de3 	.word	0x3ec71de3
 800e2c4:	19c161d5 	.word	0x19c161d5
 800e2c8:	3f2a01a0 	.word	0x3f2a01a0
 800e2cc:	1110f8a6 	.word	0x1110f8a6
 800e2d0:	3f811111 	.word	0x3f811111

0800e2d4 <fabs>:
 800e2d4:	ec51 0b10 	vmov	r0, r1, d0
 800e2d8:	ee10 2a10 	vmov	r2, s0
 800e2dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2e0:	ec43 2b10 	vmov	d0, r2, r3
 800e2e4:	4770      	bx	lr

0800e2e6 <finite>:
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	ed8d 0b00 	vstr	d0, [sp]
 800e2ec:	9801      	ldr	r0, [sp, #4]
 800e2ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e2f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e2f6:	0fc0      	lsrs	r0, r0, #31
 800e2f8:	b002      	add	sp, #8
 800e2fa:	4770      	bx	lr
 800e2fc:	0000      	movs	r0, r0
	...

0800e300 <floor>:
 800e300:	ec51 0b10 	vmov	r0, r1, d0
 800e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e308:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e30c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e310:	2e13      	cmp	r6, #19
 800e312:	ee10 5a10 	vmov	r5, s0
 800e316:	ee10 8a10 	vmov	r8, s0
 800e31a:	460c      	mov	r4, r1
 800e31c:	dc32      	bgt.n	800e384 <floor+0x84>
 800e31e:	2e00      	cmp	r6, #0
 800e320:	da14      	bge.n	800e34c <floor+0x4c>
 800e322:	a333      	add	r3, pc, #204	; (adr r3, 800e3f0 <floor+0xf0>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f7f1 ff78 	bl	800021c <__adddf3>
 800e32c:	2200      	movs	r2, #0
 800e32e:	2300      	movs	r3, #0
 800e330:	f7f2 fbba 	bl	8000aa8 <__aeabi_dcmpgt>
 800e334:	b138      	cbz	r0, 800e346 <floor+0x46>
 800e336:	2c00      	cmp	r4, #0
 800e338:	da57      	bge.n	800e3ea <floor+0xea>
 800e33a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e33e:	431d      	orrs	r5, r3
 800e340:	d001      	beq.n	800e346 <floor+0x46>
 800e342:	4c2d      	ldr	r4, [pc, #180]	; (800e3f8 <floor+0xf8>)
 800e344:	2500      	movs	r5, #0
 800e346:	4621      	mov	r1, r4
 800e348:	4628      	mov	r0, r5
 800e34a:	e025      	b.n	800e398 <floor+0x98>
 800e34c:	4f2b      	ldr	r7, [pc, #172]	; (800e3fc <floor+0xfc>)
 800e34e:	4137      	asrs	r7, r6
 800e350:	ea01 0307 	and.w	r3, r1, r7
 800e354:	4303      	orrs	r3, r0
 800e356:	d01f      	beq.n	800e398 <floor+0x98>
 800e358:	a325      	add	r3, pc, #148	; (adr r3, 800e3f0 <floor+0xf0>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f1 ff5d 	bl	800021c <__adddf3>
 800e362:	2200      	movs	r2, #0
 800e364:	2300      	movs	r3, #0
 800e366:	f7f2 fb9f 	bl	8000aa8 <__aeabi_dcmpgt>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0eb      	beq.n	800e346 <floor+0x46>
 800e36e:	2c00      	cmp	r4, #0
 800e370:	bfbe      	ittt	lt
 800e372:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e376:	fa43 f606 	asrlt.w	r6, r3, r6
 800e37a:	19a4      	addlt	r4, r4, r6
 800e37c:	ea24 0407 	bic.w	r4, r4, r7
 800e380:	2500      	movs	r5, #0
 800e382:	e7e0      	b.n	800e346 <floor+0x46>
 800e384:	2e33      	cmp	r6, #51	; 0x33
 800e386:	dd0b      	ble.n	800e3a0 <floor+0xa0>
 800e388:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e38c:	d104      	bne.n	800e398 <floor+0x98>
 800e38e:	ee10 2a10 	vmov	r2, s0
 800e392:	460b      	mov	r3, r1
 800e394:	f7f1 ff42 	bl	800021c <__adddf3>
 800e398:	ec41 0b10 	vmov	d0, r0, r1
 800e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3a8:	fa23 f707 	lsr.w	r7, r3, r7
 800e3ac:	4207      	tst	r7, r0
 800e3ae:	d0f3      	beq.n	800e398 <floor+0x98>
 800e3b0:	a30f      	add	r3, pc, #60	; (adr r3, 800e3f0 <floor+0xf0>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	f7f1 ff31 	bl	800021c <__adddf3>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f7f2 fb73 	bl	8000aa8 <__aeabi_dcmpgt>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d0bf      	beq.n	800e346 <floor+0x46>
 800e3c6:	2c00      	cmp	r4, #0
 800e3c8:	da02      	bge.n	800e3d0 <floor+0xd0>
 800e3ca:	2e14      	cmp	r6, #20
 800e3cc:	d103      	bne.n	800e3d6 <floor+0xd6>
 800e3ce:	3401      	adds	r4, #1
 800e3d0:	ea25 0507 	bic.w	r5, r5, r7
 800e3d4:	e7b7      	b.n	800e346 <floor+0x46>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e3dc:	fa03 f606 	lsl.w	r6, r3, r6
 800e3e0:	4435      	add	r5, r6
 800e3e2:	4545      	cmp	r5, r8
 800e3e4:	bf38      	it	cc
 800e3e6:	18e4      	addcc	r4, r4, r3
 800e3e8:	e7f2      	b.n	800e3d0 <floor+0xd0>
 800e3ea:	2500      	movs	r5, #0
 800e3ec:	462c      	mov	r4, r5
 800e3ee:	e7aa      	b.n	800e346 <floor+0x46>
 800e3f0:	8800759c 	.word	0x8800759c
 800e3f4:	7e37e43c 	.word	0x7e37e43c
 800e3f8:	bff00000 	.word	0xbff00000
 800e3fc:	000fffff 	.word	0x000fffff

0800e400 <nan>:
 800e400:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e408 <nan+0x8>
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	00000000 	.word	0x00000000
 800e40c:	7ff80000 	.word	0x7ff80000

0800e410 <rint>:
 800e410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e412:	ec51 0b10 	vmov	r0, r1, d0
 800e416:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e41a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e41e:	2e13      	cmp	r6, #19
 800e420:	ee10 4a10 	vmov	r4, s0
 800e424:	460b      	mov	r3, r1
 800e426:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e42a:	dc58      	bgt.n	800e4de <rint+0xce>
 800e42c:	2e00      	cmp	r6, #0
 800e42e:	da2b      	bge.n	800e488 <rint+0x78>
 800e430:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e434:	4302      	orrs	r2, r0
 800e436:	d023      	beq.n	800e480 <rint+0x70>
 800e438:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e43c:	4302      	orrs	r2, r0
 800e43e:	4254      	negs	r4, r2
 800e440:	4314      	orrs	r4, r2
 800e442:	0c4b      	lsrs	r3, r1, #17
 800e444:	0b24      	lsrs	r4, r4, #12
 800e446:	045b      	lsls	r3, r3, #17
 800e448:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e44c:	ea44 0103 	orr.w	r1, r4, r3
 800e450:	4b32      	ldr	r3, [pc, #200]	; (800e51c <rint+0x10c>)
 800e452:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e456:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	4630      	mov	r0, r6
 800e460:	4639      	mov	r1, r7
 800e462:	f7f1 fedb 	bl	800021c <__adddf3>
 800e466:	e9cd 0100 	strd	r0, r1, [sp]
 800e46a:	463b      	mov	r3, r7
 800e46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e470:	4632      	mov	r2, r6
 800e472:	f7f1 fed1 	bl	8000218 <__aeabi_dsub>
 800e476:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e47a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e47e:	4639      	mov	r1, r7
 800e480:	ec41 0b10 	vmov	d0, r0, r1
 800e484:	b003      	add	sp, #12
 800e486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e488:	4a25      	ldr	r2, [pc, #148]	; (800e520 <rint+0x110>)
 800e48a:	4132      	asrs	r2, r6
 800e48c:	ea01 0702 	and.w	r7, r1, r2
 800e490:	4307      	orrs	r7, r0
 800e492:	d0f5      	beq.n	800e480 <rint+0x70>
 800e494:	0851      	lsrs	r1, r2, #1
 800e496:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e49a:	4314      	orrs	r4, r2
 800e49c:	d00c      	beq.n	800e4b8 <rint+0xa8>
 800e49e:	ea23 0201 	bic.w	r2, r3, r1
 800e4a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e4a6:	2e13      	cmp	r6, #19
 800e4a8:	fa43 f606 	asr.w	r6, r3, r6
 800e4ac:	bf0c      	ite	eq
 800e4ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e4b2:	2400      	movne	r4, #0
 800e4b4:	ea42 0306 	orr.w	r3, r2, r6
 800e4b8:	4918      	ldr	r1, [pc, #96]	; (800e51c <rint+0x10c>)
 800e4ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e4be:	4622      	mov	r2, r4
 800e4c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	f7f1 fea8 	bl	800021c <__adddf3>
 800e4cc:	e9cd 0100 	strd	r0, r1, [sp]
 800e4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	462b      	mov	r3, r5
 800e4d8:	f7f1 fe9e 	bl	8000218 <__aeabi_dsub>
 800e4dc:	e7d0      	b.n	800e480 <rint+0x70>
 800e4de:	2e33      	cmp	r6, #51	; 0x33
 800e4e0:	dd07      	ble.n	800e4f2 <rint+0xe2>
 800e4e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e4e6:	d1cb      	bne.n	800e480 <rint+0x70>
 800e4e8:	ee10 2a10 	vmov	r2, s0
 800e4ec:	f7f1 fe96 	bl	800021c <__adddf3>
 800e4f0:	e7c6      	b.n	800e480 <rint+0x70>
 800e4f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e4f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e4fa:	40d6      	lsrs	r6, r2
 800e4fc:	4230      	tst	r0, r6
 800e4fe:	d0bf      	beq.n	800e480 <rint+0x70>
 800e500:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e504:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e508:	bf1f      	itttt	ne
 800e50a:	ea24 0101 	bicne.w	r1, r4, r1
 800e50e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e512:	fa44 f202 	asrne.w	r2, r4, r2
 800e516:	ea41 0402 	orrne.w	r4, r1, r2
 800e51a:	e7cd      	b.n	800e4b8 <rint+0xa8>
 800e51c:	0800e960 	.word	0x0800e960
 800e520:	000fffff 	.word	0x000fffff
 800e524:	00000000 	.word	0x00000000

0800e528 <scalbn>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	ec55 4b10 	vmov	r4, r5, d0
 800e52e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e532:	4606      	mov	r6, r0
 800e534:	462b      	mov	r3, r5
 800e536:	b99a      	cbnz	r2, 800e560 <scalbn+0x38>
 800e538:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e53c:	4323      	orrs	r3, r4
 800e53e:	d036      	beq.n	800e5ae <scalbn+0x86>
 800e540:	4b39      	ldr	r3, [pc, #228]	; (800e628 <scalbn+0x100>)
 800e542:	4629      	mov	r1, r5
 800e544:	ee10 0a10 	vmov	r0, s0
 800e548:	2200      	movs	r2, #0
 800e54a:	f7f2 f81d 	bl	8000588 <__aeabi_dmul>
 800e54e:	4b37      	ldr	r3, [pc, #220]	; (800e62c <scalbn+0x104>)
 800e550:	429e      	cmp	r6, r3
 800e552:	4604      	mov	r4, r0
 800e554:	460d      	mov	r5, r1
 800e556:	da10      	bge.n	800e57a <scalbn+0x52>
 800e558:	a32b      	add	r3, pc, #172	; (adr r3, 800e608 <scalbn+0xe0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	e03a      	b.n	800e5d6 <scalbn+0xae>
 800e560:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e564:	428a      	cmp	r2, r1
 800e566:	d10c      	bne.n	800e582 <scalbn+0x5a>
 800e568:	ee10 2a10 	vmov	r2, s0
 800e56c:	4620      	mov	r0, r4
 800e56e:	4629      	mov	r1, r5
 800e570:	f7f1 fe54 	bl	800021c <__adddf3>
 800e574:	4604      	mov	r4, r0
 800e576:	460d      	mov	r5, r1
 800e578:	e019      	b.n	800e5ae <scalbn+0x86>
 800e57a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e57e:	460b      	mov	r3, r1
 800e580:	3a36      	subs	r2, #54	; 0x36
 800e582:	4432      	add	r2, r6
 800e584:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e588:	428a      	cmp	r2, r1
 800e58a:	dd08      	ble.n	800e59e <scalbn+0x76>
 800e58c:	2d00      	cmp	r5, #0
 800e58e:	a120      	add	r1, pc, #128	; (adr r1, 800e610 <scalbn+0xe8>)
 800e590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e594:	da1c      	bge.n	800e5d0 <scalbn+0xa8>
 800e596:	a120      	add	r1, pc, #128	; (adr r1, 800e618 <scalbn+0xf0>)
 800e598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59c:	e018      	b.n	800e5d0 <scalbn+0xa8>
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	dd08      	ble.n	800e5b4 <scalbn+0x8c>
 800e5a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e5ae:	ec45 4b10 	vmov	d0, r4, r5
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e5b8:	da19      	bge.n	800e5ee <scalbn+0xc6>
 800e5ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e5be:	429e      	cmp	r6, r3
 800e5c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e5c4:	dd0a      	ble.n	800e5dc <scalbn+0xb4>
 800e5c6:	a112      	add	r1, pc, #72	; (adr r1, 800e610 <scalbn+0xe8>)
 800e5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e2      	bne.n	800e596 <scalbn+0x6e>
 800e5d0:	a30f      	add	r3, pc, #60	; (adr r3, 800e610 <scalbn+0xe8>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f1 ffd7 	bl	8000588 <__aeabi_dmul>
 800e5da:	e7cb      	b.n	800e574 <scalbn+0x4c>
 800e5dc:	a10a      	add	r1, pc, #40	; (adr r1, 800e608 <scalbn+0xe0>)
 800e5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d0b8      	beq.n	800e558 <scalbn+0x30>
 800e5e6:	a10e      	add	r1, pc, #56	; (adr r1, 800e620 <scalbn+0xf8>)
 800e5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ec:	e7b4      	b.n	800e558 <scalbn+0x30>
 800e5ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5f2:	3236      	adds	r2, #54	; 0x36
 800e5f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4b0c      	ldr	r3, [pc, #48]	; (800e630 <scalbn+0x108>)
 800e600:	2200      	movs	r2, #0
 800e602:	e7e8      	b.n	800e5d6 <scalbn+0xae>
 800e604:	f3af 8000 	nop.w
 800e608:	c2f8f359 	.word	0xc2f8f359
 800e60c:	01a56e1f 	.word	0x01a56e1f
 800e610:	8800759c 	.word	0x8800759c
 800e614:	7e37e43c 	.word	0x7e37e43c
 800e618:	8800759c 	.word	0x8800759c
 800e61c:	fe37e43c 	.word	0xfe37e43c
 800e620:	c2f8f359 	.word	0xc2f8f359
 800e624:	81a56e1f 	.word	0x81a56e1f
 800e628:	43500000 	.word	0x43500000
 800e62c:	ffff3cb0 	.word	0xffff3cb0
 800e630:	3c900000 	.word	0x3c900000

0800e634 <_init>:
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e636:	bf00      	nop
 800e638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63a:	bc08      	pop	{r3}
 800e63c:	469e      	mov	lr, r3
 800e63e:	4770      	bx	lr

0800e640 <_fini>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	bf00      	nop
 800e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e646:	bc08      	pop	{r3}
 800e648:	469e      	mov	lr, r3
 800e64a:	4770      	bx	lr
