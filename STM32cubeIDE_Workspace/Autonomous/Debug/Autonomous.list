
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08013798  08013798  00023798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f98  08013f98  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013f98  08013f98  00023f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fa0  08013fa0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fa0  08013fa0  00023fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fa4  08013fa4  00023fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08013fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054b8  200001ec  08014194  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056a4  08014194  000356a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280e4  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a55  00000000  00000000  00058300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0005cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  0005e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006200  00000000  00000000  0005fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d092  00000000  00000000  00065e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bbc7  00000000  00000000  00082f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018eae9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eac  00000000  00000000  0018eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801377c 	.word	0x0801377c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0801377c 	.word	0x0801377c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f004 fef4 	bl	8005e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f866 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 fbb2 	bl	80017a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800103c:	f000 f994 	bl	8001368 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001040:	f000 f8ce 	bl	80011e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001044:	f000 f9e4 	bl	8001410 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001048:	f000 fa30 	bl	80014ac <MX_TIM5_Init>
  MX_TIM12_Init();
 800104c:	f000 fb22 	bl	8001694 <MX_TIM12_Init>
  MX_TIM8_Init();
 8001050:	f000 fa80 	bl	8001554 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001054:	f000 fb7a 	bl	800174c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize my libraries
  MAIN_DIFFDRIVE_Init();
 8001058:	f000 fc5a 	bl	8001910 <MAIN_DIFFDRIVE_Init>
  MAIN_DATASTREAM_Init();
 800105c:	f000 fc3e 	bl	80018dc <MAIN_DATASTREAM_Init>
  MAIN_ULTRASONIC_Init();
 8001060:	f000 fd32 	bl	8001ac8 <MAIN_ULTRASONIC_Init>
  MAIN_MAF_Init();
 8001064:	f000 fd56 	bl	8001b14 <MAIN_MAF_Init>
  MAIN_SERVO_Init();
 8001068:	f000 fdbc 	bl	8001be4 <MAIN_SERVO_Init>


  // Wait until blue button is pressed
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 800106c:	bf00      	nop
 800106e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <main+0xa4>)
 8001074:	f005 f9ae 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f7      	bne.n	800106e <main+0x42>
  		;

  // Wait a bit
  HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f004 ff0d 	bl	8005ea0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001086:	f008 fb87 	bl	8009798 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DiffDriveTask */
  DiffDriveTaskHandle = osThreadNew(MoveDiffDrive, NULL, &DiffDriveTask_attributes);
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <main+0xa8>)
 800108c:	2100      	movs	r1, #0
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <main+0xac>)
 8001090:	f008 fbe1 	bl	8009856 <osThreadNew>
 8001094:	4603      	mov	r3, r0
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <main+0xb0>)
 8001098:	6013      	str	r3, [r2, #0]

  /* creation of TrajGenTask */
  TrajGenTaskHandle = osThreadNew(TrajectoryGenerator, NULL, &TrajGenTask_attributes);
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <main+0xb4>)
 800109c:	2100      	movs	r1, #0
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <main+0xb8>)
 80010a0:	f008 fbd9 	bl	8009856 <osThreadNew>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <main+0xbc>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* creation of InfraredTask */
  InfraredTaskHandle = osThreadNew(InfraredSensor, NULL, &InfraredTask_attributes);
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <main+0xc0>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <main+0xc4>)
 80010b0:	f008 fbd1 	bl	8009856 <osThreadNew>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <main+0xc8>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(TxStream, NULL, &TxTask_attributes);
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <main+0xcc>)
 80010bc:	2100      	movs	r1, #0
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <main+0xd0>)
 80010c0:	f008 fbc9 	bl	8009856 <osThreadNew>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <main+0xd4>)
 80010c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ca:	f008 fb89 	bl	80097e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <main+0xa2>
 80010d0:	40020800 	.word	0x40020800
 80010d4:	08013810 	.word	0x08013810
 80010d8:	08001c09 	.word	0x08001c09
 80010dc:	20004bfc 	.word	0x20004bfc
 80010e0:	08013834 	.word	0x08013834
 80010e4:	08001e11 	.word	0x08001e11
 80010e8:	20004f14 	.word	0x20004f14
 80010ec:	08013858 	.word	0x08013858
 80010f0:	08002315 	.word	0x08002315
 80010f4:	20004e40 	.word	0x20004e40
 80010f8:	0801387c 	.word	0x0801387c
 80010fc:	08002355 	.word	0x08002355
 8001100:	20004d88 	.word	0x20004d88

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2234      	movs	r2, #52	; 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00b fffc 	bl	800d110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <SystemClock_Config+0xd4>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <SystemClock_Config+0xd4>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <SystemClock_Config+0xd4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001150:	4a22      	ldr	r2, [pc, #136]	; (80011dc <SystemClock_Config+0xd8>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SystemClock_Config+0xd8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001164:	2302      	movs	r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2310      	movs	r3, #16
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001178:	2310      	movs	r3, #16
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800117c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001182:	2304      	movs	r3, #4
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4618      	mov	r0, r3
 8001194:	f005 fc68 	bl	8006a68 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800119e:	f001 fa87 	bl	80026b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 f954 	bl	800646c <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ca:	f001 fa71 	bl	80026b0 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3750      	adds	r7, #80	; 0x50
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	; 0x58
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00b ff79 	bl	800d110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <MX_TIM1_Init+0x180>)
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <MX_TIM1_Init+0x184>)
 8001222:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MX_TIM1_Init+0x180>)
 8001226:	2208      	movs	r2, #8
 8001228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <MX_TIM1_Init+0x180>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <MX_TIM1_Init+0x180>)
 8001232:	f242 7210 	movw	r2, #10000	; 0x2710
 8001236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <MX_TIM1_Init+0x180>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <MX_TIM1_Init+0x180>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <MX_TIM1_Init+0x180>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124a:	4845      	ldr	r0, [pc, #276]	; (8001360 <MX_TIM1_Init+0x180>)
 800124c:	f005 feaa 	bl	8006fa4 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001256:	f001 fa2b 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001264:	4619      	mov	r1, r3
 8001266:	483e      	ldr	r0, [pc, #248]	; (8001360 <MX_TIM1_Init+0x180>)
 8001268:	f006 ff5a 	bl	8008120 <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001272:	f001 fa1d 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001276:	483a      	ldr	r0, [pc, #232]	; (8001360 <MX_TIM1_Init+0x180>)
 8001278:	f006 f820 	bl	80072bc <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001282:	f001 fa15 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001292:	4619      	mov	r1, r3
 8001294:	4832      	ldr	r0, [pc, #200]	; (8001360 <MX_TIM1_Init+0x180>)
 8001296:	f007 fcf7 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012a0:	f001 fa06 	bl	80026b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <MX_TIM1_Init+0x180>)
 80012ca:	f006 fe67 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012d4:	f001 f9ec 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2204      	movs	r2, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <MX_TIM1_Init+0x180>)
 80012e2:	f006 fe5b 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012ec:	f001 f9e0 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2208      	movs	r2, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_TIM1_Init+0x180>)
 80012fa:	f006 fe4f 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001304:	f001 f9d4 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	220c      	movs	r2, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <MX_TIM1_Init+0x180>)
 8001312:	f006 fe43 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800131c:	f001 f9c8 	bl	80026b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM1_Init+0x180>)
 8001344:	f007 fd1c 	bl	8008d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800134e:	f001 f9af 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM1_Init+0x180>)
 8001354:	f001 fafc 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3758      	adds	r7, #88	; 0x58
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20004f30 	.word	0x20004f30
 8001364:	40010000 	.word	0x40010000

08001368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f00b feca 	bl	800d110 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_TIM2_Init+0xa4>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_TIM2_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_TIM2_Init+0xa4>)
 800139a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM2_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM2_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013bc:	230f      	movs	r3, #15
 80013be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013cc:	230f      	movs	r3, #15
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM2_Init+0xa4>)
 80013d8:	f006 fada 	bl	8007990 <HAL_TIM_Encoder_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013e2:	f001 f965 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM2_Init+0xa4>)
 80013f4:	f007 fc48 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013fe:	f001 f957 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20005040 	.word	0x20005040

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM3_Init+0x94>)
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <MX_TIM3_Init+0x98>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM3_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM3_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001454:	f005 fda6 	bl	8006fa4 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800145e:	f001 f927 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001470:	f006 fe56 	bl	8008120 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800147a:	f001 f919 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_TIM3_Init+0x94>)
 800148c:	f007 fbfc 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001496:	f001 f90b 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20004e44 	.word	0x20004e44
 80014a8:	40000400 	.word	0x40000400

080014ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00b fe28 	bl	800d110 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_TIM5_Init+0xa0>)
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <MX_TIM5_Init+0xa4>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_TIM5_Init+0xa0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM5_Init+0xa0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_TIM5_Init+0xa0>)
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM5_Init+0xa0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_TIM5_Init+0xa0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80014fe:	230f      	movs	r3, #15
 8001500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800150e:	230f      	movs	r3, #15
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM5_Init+0xa0>)
 800151a:	f006 fa39 	bl	8007990 <HAL_TIM_Encoder_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001524:	f001 f8c4 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM5_Init+0xa0>)
 8001536:	f007 fba7 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001540:	f001 f8b6 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20004d8c 	.word	0x20004d8c
 8001550:	40000c00 	.word	0x40000c00

08001554 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b096      	sub	sp, #88	; 0x58
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2220      	movs	r2, #32
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00b fdbf 	bl	800d110 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <MX_TIM8_Init+0x138>)
 8001594:	4a3e      	ldr	r2, [pc, #248]	; (8001690 <MX_TIM8_Init+0x13c>)
 8001596:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <MX_TIM8_Init+0x138>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <MX_TIM8_Init+0x138>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <MX_TIM8_Init+0x138>)
 80015a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <MX_TIM8_Init+0x138>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <MX_TIM8_Init+0x138>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <MX_TIM8_Init+0x138>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015be:	4833      	ldr	r0, [pc, #204]	; (800168c <MX_TIM8_Init+0x138>)
 80015c0:	f005 fcf0 	bl	8006fa4 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015ca:	f001 f871 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d8:	4619      	mov	r1, r3
 80015da:	482c      	ldr	r0, [pc, #176]	; (800168c <MX_TIM8_Init+0x138>)
 80015dc:	f006 fda0 	bl	8008120 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015e6:	f001 f863 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015ea:	4828      	ldr	r0, [pc, #160]	; (800168c <MX_TIM8_Init+0x138>)
 80015ec:	f005 fe66 	bl	80072bc <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015f6:	f001 f85b 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001606:	4619      	mov	r1, r3
 8001608:	4820      	ldr	r0, [pc, #128]	; (800168c <MX_TIM8_Init+0x138>)
 800160a:	f007 fb3d 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001614:	f001 f84c 	bl	80026b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <MX_TIM8_Init+0x138>)
 800163e:	f006 fcad 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001648:	f001 f832 	bl	80026b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_TIM8_Init+0x138>)
 8001670:	f007 fb86 	bl	8008d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800167a:	f001 f819 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_TIM8_Init+0x138>)
 8001680:	f001 f966 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001684:	bf00      	nop
 8001686:	3758      	adds	r7, #88	; 0x58
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20004c48 	.word	0x20004c48
 8001690:	40010400 	.word	0x40010400

08001694 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <MX_TIM12_Init+0xb4>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016bc:	2253      	movs	r2, #83	; 0x53
 80016be:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016cc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016dc:	f005 fc62 	bl	8006fa4 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 80016e6:	f000 ffe3 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM12_Init+0xb0>)
 80016f8:	f006 fd12 	bl	8008120 <HAL_TIM_ConfigClockSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001702:	f000 ffd5 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <MX_TIM12_Init+0xb0>)
 8001708:	f005 ff06 	bl	8007518 <HAL_TIM_IC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001712:	f000 ffcd 	bl	80026b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001716:	230a      	movs	r3, #10
 8001718:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM12_Init+0xb0>)
 800172e:	f006 fb99 	bl	8007e64 <HAL_TIM_IC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8001738:	f000 ffba 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200050f4 	.word	0x200050f4
 8001748:	40001800 	.word	0x40001800

0800174c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_USART3_UART_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001758:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800175c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001784:	f007 fb6c 	bl	8008e60 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800178e:	f000 ff8f 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20004cfc 	.word	0x20004cfc
 800179c:	40004800 	.word	0x40004800

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <MX_GPIO_Init+0x130>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <MX_GPIO_Init+0x130>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <MX_GPIO_Init+0x130>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <MX_GPIO_Init+0x130>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <MX_GPIO_Init+0x130>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2101      	movs	r1, #1
 800182a:	482a      	ldr	r0, [pc, #168]	; (80018d4 <MX_GPIO_Init+0x134>)
 800182c:	f004 fdea 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2160      	movs	r1, #96	; 0x60
 8001834:	4828      	ldr	r0, [pc, #160]	; (80018d8 <MX_GPIO_Init+0x138>)
 8001836:	f004 fde5 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800183a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001840:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4820      	ldr	r0, [pc, #128]	; (80018d4 <MX_GPIO_Init+0x134>)
 8001852:	f004 fc2b 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <MX_GPIO_Init+0x134>)
 800186e:	f004 fc1d 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001872:	230c      	movs	r3, #12
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001882:	2307      	movs	r3, #7
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <MX_GPIO_Init+0x138>)
 800188e:	f004 fc0d 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ULTRASONIC_TRIGGER_Pin;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <MX_GPIO_Init+0x138>)
 80018aa:	f004 fbff 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_GPIO_Init+0x134>)
 80018c2:	f004 fbf3 	bl	80060ac <HAL_GPIO_Init>

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020000 	.word	0x40020000

080018dc <MAIN_DATASTREAM_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DATASTREAM_Init(void){
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0

	DATASTREAM_InitTypeDef DATASTREAM_InitStruct;

	DATASTREAM_InitStruct.DMA_Rx_Enable= false;
 80018e2:	2300      	movs	r3, #0
 80018e4:	723b      	strb	r3, [r7, #8]
	DATASTREAM_InitStruct.huart= &huart3;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MAIN_DATASTREAM_Init+0x2c>)
 80018e8:	607b      	str	r3, [r7, #4]

	hstream.Init= DATASTREAM_InitStruct;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MAIN_DATASTREAM_Init+0x30>)
 80018ec:	461c      	mov	r4, r3
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	DATASTREAM_Init(&hstream);
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MAIN_DATASTREAM_Init+0x30>)
 80018fa:	f001 fa5d 	bl	8002db8 <DATASTREAM_Init>

}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	20004cfc 	.word	0x20004cfc
 800190c:	20004ef8 	.word	0x20004ef8

08001910 <MAIN_DIFFDRIVE_Init>:

static void MAIN_DIFFDRIVE_Init(void){
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

	uint16_t max_sample= 1200u;
 8001916:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800191a:	84fb      	strh	r3, [r7, #38]	; 0x26

	hdiffdrive.Init.timing_htim= &htim3;
 800191c:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800191e:	4a5b      	ldr	r2, [pc, #364]	; (8001a8c <MAIN_DIFFDRIVE_Init+0x17c>)
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
	hdiffdrive.Init.timing_time_step= TIME_STEP;
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001924:	4a5a      	ldr	r2, [pc, #360]	; (8001a90 <MAIN_DIFFDRIVE_Init+0x180>)
 8001926:	651a      	str	r2, [r3, #80]	; 0x50

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800192a:	4a5a      	ldr	r2, [pc, #360]	; (8001a94 <MAIN_DIFFDRIVE_Init+0x184>)
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001930:	4a59      	ldr	r2, [pc, #356]	; (8001a98 <MAIN_DIFFDRIVE_Init+0x188>)
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_tim_channel[left ]= TIM_CHANNEL_1;
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001936:	2200      	movs	r2, #0
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_tim_channel[right]= TIM_CHANNEL_1;
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
	hdiffdrive.Init.encoder_tim_arr_resolution[left ]= 32;
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.encoder_tim_arr_resolution[right]= 32;
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001952:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <MAIN_DIFFDRIVE_Init+0x18c>)
 8001954:	665a      	str	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 8001956:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001958:	4a50      	ldr	r2, [pc, #320]	; (8001a9c <MAIN_DIFFDRIVE_Init+0x18c>)
 800195a:	669a      	str	r2, [r3, #104]	; 0x68

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800195e:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <MAIN_DIFFDRIVE_Init+0x190>)
 8001960:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001964:	4a4e      	ldr	r2, [pc, #312]	; (8001aa0 <MAIN_DIFFDRIVE_Init+0x190>)
 8001966:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800196a:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <MAIN_DIFFDRIVE_Init+0x190>)
 800196c:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <MAIN_DIFFDRIVE_Init+0x190>)
 8001972:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800197c:	2204      	movs	r2, #4
 800197e:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001982:	2208      	movs	r2, #8
 8001984:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001988:	220c      	movs	r2, #12
 800198a:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	 MOTOR_MAX_VOLTAGE;
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800198e:	4a45      	ldr	r2, [pc, #276]	; (8001aa4 <MAIN_DIFFDRIVE_Init+0x194>)
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	 MOTOR_MAX_VOLTAGE;
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <MAIN_DIFFDRIVE_Init+0x194>)
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	 MOTOR_MIN_VOLTAGE;
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	 MOTOR_MIN_VOLTAGE;
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=  SUPPLY_VOLTAGE;
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019aa:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <MAIN_DIFFDRIVE_Init+0x194>)
 80019ac:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]= SUPPLY_VOLTAGE;
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019b0:	4a3c      	ldr	r2, [pc, #240]	; (8001aa4 <MAIN_DIFFDRIVE_Init+0x194>)
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x198>)
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80019bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019c0:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 80019c8:	4a38      	ldr	r2, [pc, #224]	; (8001aac <MAIN_DIFFDRIVE_Init+0x19c>)
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019d4:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <MAIN_DIFFDRIVE_Init+0x1a0>)
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <MAIN_DIFFDRIVE_Init+0x1a4>)
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	hdiffdrive.Init.control_pid_P[left ]= PID_P_L;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a28:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_P[right]= PID_P_R;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_I[left ]= PID_I_L;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a38:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_I[right]= PID_I_R;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a42:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	hdiffdrive.Init.control_pid_D[left ]= PID_D_L;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	hdiffdrive.Init.control_pid_D[right]= PID_D_R;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	hdiffdrive.Init.history_max_sample= max_sample;
 8001a5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a62:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	// --- Mechanical parameters (from real model) --- //
	hdiffdrive.Init.mech_prmtr_l= WHEEL_DISTANCE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <MAIN_DIFFDRIVE_Init+0x1ac>)
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.mech_prmtr_r= WHEEL_RADIUS;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x1b0>)
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= WHEEL_MAX_SPEED;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <MAIN_DIFFDRIVE_Init+0x1b4>)
 8001a76:	661a      	str	r2, [r3, #96]	; 0x60

	// --- Initialize handle --- //
	DIFFDRIVE_Init(&hdiffdrive);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a7a:	f001 fc19 	bl	80032b0 <DIFFDRIVE_Init>

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200051a8 	.word	0x200051a8
 8001a8c:	20004e44 	.word	0x20004e44
 8001a90:	3c23d70a 	.word	0x3c23d70a
 8001a94:	20005040 	.word	0x20005040
 8001a98:	20004d8c 	.word	0x20004d8c
 8001a9c:	44ed8000 	.word	0x44ed8000
 8001aa0:	20004f30 	.word	0x20004f30
 8001aa4:	40f00000 	.word	0x40f00000
 8001aa8:	080137cc 	.word	0x080137cc
 8001aac:	080137d8 	.word	0x080137d8
 8001ab0:	3a41b391 	.word	0x3a41b391
 8001ab4:	3a3b4831 	.word	0x3a3b4831
 8001ab8:	41c80000 	.word	0x41c80000
 8001abc:	3d9eb852 	.word	0x3d9eb852
 8001ac0:	3d0d4fdf 	.word	0x3d0d4fdf
 8001ac4:	41200000 	.word	0x41200000

08001ac8 <MAIN_ULTRASONIC_Init>:

static void MAIN_ULTRASONIC_Init(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

	hultra.Init.htim=           		&htim12;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <MAIN_ULTRASONIC_Init+0x40>)
 8001ad0:	601a      	str	r2, [r3, #0]
	hultra.Init.history_lenght= 		100;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001ad4:	2264      	movs	r2, #100	; 0x64
 8001ad6:	605a      	str	r2, [r3, #4]
	hultra.Init.io_trig_GPIOx=   	    ULTRASONIC_TRIGGER_GPIO_Port;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <MAIN_ULTRASONIC_Init+0x44>)
 8001adc:	609a      	str	r2, [r3, #8]
	hultra.Init.io_trig_Pin=   			ULTRASONIC_TRIGGER_Pin;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	60da      	str	r2, [r3, #12]
	hultra.Init.io_echo_GPIOx=  		ULTRASONIC_ECHO_GPIO_Port;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <MAIN_ULTRASONIC_Init+0x48>)
 8001ae8:	611a      	str	r2, [r3, #16]
	hultra.Init.io_echo_Pin=			ULTRASONIC_ECHO_Pin;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001aec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af0:	615a      	str	r2, [r3, #20]
	hultra.Init.io_echo_IC_tim_channel= TIM_CHANNEL_1;
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]

	ULTRASONIC_Init(&hultra);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <MAIN_ULTRASONIC_Init+0x3c>)
 8001afa:	f003 ff35 	bl	8005968 <ULTRASONIC_Init>

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20004fe4 	.word	0x20004fe4
 8001b08:	200050f4 	.word	0x200050f4
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400

08001b14 <MAIN_MAF_Init>:


// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

	int filtr_v_size_1=  15; // 15;
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int filtr_om_size_1= 7; // 7;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28

	int filtr_v_size_2=  12;//50;
 8001b22:	230c      	movs	r3, #12
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_om_size_2= 12;//50;
 8001b26:	230c      	movs	r3, #12
 8001b28:	623b      	str	r3, [r7, #32]

	int filtr_infrared_size= 100;
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hmaf_trajGen_v		 = MAF_Create(filtr_v_size_1, 	   weights_buff);
 8001b32:	4c27      	ldr	r4, [pc, #156]	; (8001bd0 <MAIN_MAF_Init+0xbc>)
 8001b34:	463b      	mov	r3, r7
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fa6a 	bl	8005014 <MAF_Create>
 8001b40:	4625      	mov	r5, r4
 8001b42:	463c      	mov	r4, r7
 8001b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b4c:	e885 0003 	stmia.w	r5, {r0, r1}
	hmaf_trajGen_om		 = MAF_Create(filtr_om_size_1, 	   weights_buff);
 8001b50:	4c20      	ldr	r4, [pc, #128]	; (8001bd4 <MAIN_MAF_Init+0xc0>)
 8001b52:	463b      	mov	r3, r7
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fa5b 	bl	8005014 <MAF_Create>
 8001b5e:	4625      	mov	r5, r4
 8001b60:	463c      	mov	r4, r7
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b6a:	e885 0003 	stmia.w	r5, {r0, r1}
	hmaf_diffDrive_v     = MAF_Create(filtr_v_size_2,	   weights_buff);
 8001b6e:	4c1a      	ldr	r4, [pc, #104]	; (8001bd8 <MAIN_MAF_Init+0xc4>)
 8001b70:	463b      	mov	r3, r7
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fa4c 	bl	8005014 <MAF_Create>
 8001b7c:	4625      	mov	r5, r4
 8001b7e:	463c      	mov	r4, r7
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b88:	e885 0003 	stmia.w	r5, {r0, r1}
	hmaf_diffDrive_om    = MAF_Create(filtr_om_size_2,     weights_buff);
 8001b8c:	4c13      	ldr	r4, [pc, #76]	; (8001bdc <MAIN_MAF_Init+0xc8>)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	6a39      	ldr	r1, [r7, #32]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fa3d 	bl	8005014 <MAF_Create>
 8001b9a:	4625      	mov	r5, r4
 8001b9c:	463c      	mov	r4, r7
 8001b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba6:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared     = MAF_Create(filtr_infrared_size, weights_buff);
 8001baa:	4c0d      	ldr	r4, [pc, #52]	; (8001be0 <MAIN_MAF_Init+0xcc>)
 8001bac:	463b      	mov	r3, r7
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	69f9      	ldr	r1, [r7, #28]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fa2e 	bl	8005014 <MAF_Create>
 8001bb8:	4625      	mov	r5, r4
 8001bba:	463c      	mov	r4, r7
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc4:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	20004c18 	.word	0x20004c18
 8001bd4:	20004f18 	.word	0x20004f18
 8001bd8:	20004c30 	.word	0x20004c30
 8001bdc:	20005028 	.word	0x20005028
 8001be0:	20004c00 	.word	0x20004c00

08001be4 <MAIN_SERVO_Init>:


static void MAIN_SERVO_Init(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

	hservo.Init.htim=        &htim8;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <MAIN_SERVO_Init+0x1c>)
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <MAIN_SERVO_Init+0x20>)
 8001bec:	601a      	str	r2, [r3, #0]
	hservo.Init.pwm_channel= TIM_CHANNEL_1;
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <MAIN_SERVO_Init+0x1c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]

	SERVO_Init(&hservo);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <MAIN_SERVO_Init+0x1c>)
 8001bf6:	f003 fd3f 	bl	8005678 <SERVO_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20004d70 	.word	0x20004d70
 8001c04:	20004c48 	.word	0x20004c48

08001c08 <MoveDiffDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MoveDiffDrive */
void MoveDiffDrive(void *argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// Local flag
	bool first_exception= true;
 8001c10:	2301      	movs	r3, #1
 8001c12:	77fb      	strb	r3, [r7, #31]

	// PID values
	float tmp_P= hdiffdrive.control[left].pid.P;
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c16:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001c1a:	613b      	str	r3, [r7, #16]
	float tmp_I= hdiffdrive.control[left].pid.I;
 8001c1c:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c1e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001c22:	60fb      	str	r3, [r7, #12]

	// Speed variables
	float v, om;

	// Setting Global flags to indicate that Diff Drive is going to move
	diffDrive_stopped= false;
 8001c24:	4b71      	ldr	r3, [pc, #452]	; (8001dec <MoveDiffDrive+0x1e4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

	// Start control
	DIFFDRIVE_TrackingStart();
 8001c2a:	f003 f989 	bl	8004f40 <DIFFDRIVE_TrackingStart>

	/* Infinite loop */
	for (;;) {

		// If movement is enabled
		if (diffDrive_enabled) {
 8001c2e:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <MoveDiffDrive+0x1e8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80b9 	beq.w	8001dac <MoveDiffDrive+0x1a4>

			// Near obstacle not detected
			if (!near_obstacle) {
 8001c3a:	4b6e      	ldr	r3, [pc, #440]	; (8001df4 <MoveDiffDrive+0x1ec>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03c      	beq.n	8001cc4 <MoveDiffDrive+0xbc>

				// DO SOMETHING AT EXCEPTION END
				if (!first_exception) {
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01d      	beq.n	8001c92 <MoveDiffDrive+0x8a>

					// Restart motion
					DIFFDRIVE_TrackingSuspend();
 8001c56:	f003 f987 	bl	8004f68 <DIFFDRIVE_TrackingSuspend>
					DIFFDRIVE_TrackingResume();
 8001c5a:	f003 f97f 	bl	8004f5c <DIFFDRIVE_TrackingResume>

					MAF_Reset(&hmaf_diffDrive_v,  0);
 8001c5e:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001df8 <MoveDiffDrive+0x1f0>
 8001c62:	4866      	ldr	r0, [pc, #408]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001c64:	f003 f9fd 	bl	8005062 <MAF_Reset>
					MAF_Reset(&hmaf_diffDrive_om, 0);
 8001c68:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8001df8 <MoveDiffDrive+0x1f0>
 8001c6c:	4864      	ldr	r0, [pc, #400]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001c6e:	f003 f9f8 	bl	8005062 <MAF_Reset>

					hdiffdrive.control[left ].pid.P = tmp_P;
 8001c72:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
					hdiffdrive.control[right].pid.P = tmp_P;
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
					hdiffdrive.control[left ].pid.I = tmp_I;
 8001c82:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
					hdiffdrive.control[right].pid.I = tmp_I;
 8001c8a:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8
				}

				// Then set first = true
				first_exception = true;
 8001c92:	2301      	movs	r3, #1
 8001c94:	77fb      	strb	r3, [r7, #31]

				MAF_Update(&hmaf_diffDrive_v, linear);
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <MoveDiffDrive+0x1fc>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	4856      	ldr	r0, [pc, #344]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001ca2:	f003 fa06 	bl	80050b2 <MAF_Update>
				v = __MAF_GET_VAL(&hmaf_diffDrive_v);
 8001ca6:	4b55      	ldr	r3, [pc, #340]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]

				MAF_Update(&hmaf_diffDrive_om, angular);
 8001cac:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <MoveDiffDrive+0x200>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	4852      	ldr	r0, [pc, #328]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001cb8:	f003 f9fb 	bl	80050b2 <MAF_Update>
				om = __MAF_GET_VAL(&hmaf_diffDrive_om);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e062      	b.n	8001d8a <MoveDiffDrive+0x182>

			}
			// Near obstacle detected
			else {
				// DO SOMETHING AT EXCEPTION START
				if (first_exception) {
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d047      	beq.n	8001d5a <MoveDiffDrive+0x152>

					hdiffdrive.control[left ].pid.P = tmp_P * 0.1;
 8001cca:	6938      	ldr	r0, [r7, #16]
 8001ccc:	f7fe fc5c 	bl	8000588 <__aeabi_f2d>
 8001cd0:	a343      	add	r3, pc, #268	; (adr r3, 8001de0 <MoveDiffDrive+0x1d8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fcaf 	bl	8000638 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ffa1 	bl	8000c28 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001cea:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
					hdiffdrive.control[right].pid.P = tmp_P * 0.1;
 8001cee:	6938      	ldr	r0, [r7, #16]
 8001cf0:	f7fe fc4a 	bl	8000588 <__aeabi_f2d>
 8001cf4:	a33a      	add	r3, pc, #232	; (adr r3, 8001de0 <MoveDiffDrive+0x1d8>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc9d 	bl	8000638 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff8f 	bl	8000c28 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001d0e:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
					hdiffdrive.control[left ].pid.I = tmp_I * 0.1;
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7fe fc38 	bl	8000588 <__aeabi_f2d>
 8001d18:	a331      	add	r3, pc, #196	; (adr r3, 8001de0 <MoveDiffDrive+0x1d8>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc8b 	bl	8000638 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff7d 	bl	8000c28 <__aeabi_d2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a2d      	ldr	r2, [pc, #180]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001d32:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
					hdiffdrive.control[right].pid.I = tmp_I * 0.1;
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7fe fc26 	bl	8000588 <__aeabi_f2d>
 8001d3c:	a328      	add	r3, pc, #160	; (adr r3, 8001de0 <MoveDiffDrive+0x1d8>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc79 	bl	8000638 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff6b 	bl	8000c28 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <MoveDiffDrive+0x1e0>)
 8001d56:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8
				}

				// Then set first = false
				first_exception = false;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	77fb      	strb	r3, [r7, #31]

				// Filtering values generated from TrajectoryGenerator task
				MAF_Update(&hmaf_diffDrive_v, linear);
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <MoveDiffDrive+0x1fc>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	4824      	ldr	r0, [pc, #144]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001d6a:	f003 f9a2 	bl	80050b2 <MAF_Update>
				MAF_Update(&hmaf_diffDrive_om, angular);
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <MoveDiffDrive+0x200>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb0 0a67 	vmov.f32	s0, s15
 8001d78:	4821      	ldr	r0, [pc, #132]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001d7a:	f003 f99a 	bl	80050b2 <MAF_Update>

				// Extract filtered values
				v =  __MAF_GET_VAL(&hmaf_diffDrive_v);
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
				om = __MAF_GET_VAL(&hmaf_diffDrive_om);
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	617b      	str	r3, [r7, #20]
			}

			// If diff drive has been previously stopped
			if( diffDrive_stopped ){
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MoveDiffDrive+0x1e4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <MoveDiffDrive+0x196>
				// Restart control
				DIFFDRIVE_TrackingResume();
 8001d94:	f003 f8e2 	bl	8004f5c <DIFFDRIVE_TrackingResume>
				// Set flag to indicate that is going to move
				diffDrive_stopped= false;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MoveDiffDrive+0x1e4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			}

			// Make normal step of trajectory tracking
			DIFFDRIVE_TrackingStep(v, om);
 8001d9e:	edd7 0a05 	vldr	s1, [r7, #20]
 8001da2:	ed97 0a06 	vldr	s0, [r7, #24]
 8001da6:	f003 f8e5 	bl	8004f74 <DIFFDRIVE_TrackingStep>
 8001daa:	e740      	b.n	8001c2e <MoveDiffDrive+0x26>

		}
		// if movement is disabled and diffDrive is moving
		else if( !diffDrive_stopped ){
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MoveDiffDrive+0x1e4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f43f af38 	beq.w	8001c2e <MoveDiffDrive+0x26>
			// Suspend control (stop diff drive)
			DIFFDRIVE_TrackingSuspend();
 8001dbe:	f003 f8d3 	bl	8004f68 <DIFFDRIVE_TrackingSuspend>

			// Reset filters
			MAF_Reset(&hmaf_diffDrive_v,  0);
 8001dc2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001df8 <MoveDiffDrive+0x1f0>
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MoveDiffDrive+0x1f4>)
 8001dc8:	f003 f94b 	bl	8005062 <MAF_Reset>
			MAF_Reset(&hmaf_diffDrive_om, 0);
 8001dcc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001df8 <MoveDiffDrive+0x1f0>
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <MoveDiffDrive+0x1f8>)
 8001dd2:	f003 f946 	bl	8005062 <MAF_Reset>

			// Set global flag to indicate that diff drive is now stopped
			diffDrive_stopped= true;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <MoveDiffDrive+0x1e4>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
		if (diffDrive_enabled) {
 8001ddc:	e727      	b.n	8001c2e <MoveDiffDrive+0x26>
 8001dde:	bf00      	nop
 8001de0:	9999999a 	.word	0x9999999a
 8001de4:	3fb99999 	.word	0x3fb99999
 8001de8:	200051a8 	.word	0x200051a8
 8001dec:	20000002 	.word	0x20000002
 8001df0:	20000001 	.word	0x20000001
 8001df4:	20000000 	.word	0x20000000
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	20004c30 	.word	0x20004c30
 8001e00:	20005028 	.word	0x20005028
 8001e04:	20000208 	.word	0x20000208
 8001e08:	2000020c 	.word	0x2000020c
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TrajectoryGenerator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TrajectoryGenerator */
void TrajectoryGenerator(void *argument)
{
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b0b4      	sub	sp, #208	; 0xd0
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrajectoryGenerator */

	// ------------ Servo variables ---------- //

	// Servo degree "equilibrium"
	float deg_eq= 82;
 8001e18:	4bd1      	ldr	r3, [pc, #836]	; (8002160 <TrajectoryGenerator+0x350>)
 8001e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// Array of angular position
	float deg_array[30];
	int N_deg= sizeof(deg_array)/sizeof(float);
 8001e1e:	231e      	movs	r3, #30
 8001e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	// Generate values for servo positions
	float deg_start= -8;
 8001e24:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8001e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	for(int i=0; i<N_deg; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e32:	e040      	b.n	8001eb6 <TrajectoryGenerator+0xa6>
		if( i <= N_deg/2 )
 8001e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e38:	0fda      	lsrs	r2, r3, #31
 8001e3a:	4413      	add	r3, r2
 8001e3c:	105b      	asrs	r3, r3, #1
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e44:	4293      	cmp	r3, r2
 8001e46:	dc17      	bgt.n	8001e78 <TrajectoryGenerator+0x68>
			deg_array[i]= deg_start+i*12;
 8001e48:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001e6e:	4413      	add	r3, r2
 8001e70:	3bb8      	subs	r3, #184	; 0xb8
 8001e72:	edc3 7a00 	vstr	s15, [r3]
 8001e76:	e019      	b.n	8001eac <TrajectoryGenerator+0x9c>
		else
			deg_array[i]= deg_start+(N_deg-i)*12;
 8001e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3bb8      	subs	r3, #184	; 0xb8
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<N_deg; i++)
 8001eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eb6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbb8      	blt.n	8001e34 <TrajectoryGenerator+0x24>

	// Counter variables
	int cnt_1=0, cnt_2=0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Status variable
	ULTRASONIC_StatusTypeDef status;

	float distance;
	float distance_threshold= 15;
 8001ece:	4ba5      	ldr	r3, [pc, #660]	; (8002164 <TrajectoryGenerator+0x354>)
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float max_distance= ULTRASONIC_MAX_DISTANCE*0.5;
 8001ed4:	4ba4      	ldr	r3, [pc, #656]	; (8002168 <TrajectoryGenerator+0x358>)
 8001ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float min_distance= ULTRASONIC_MIN_DISTANCE;
 8001eda:	4ba4      	ldr	r3, [pc, #656]	; (800216c <TrajectoryGenerator+0x35c>)
 8001edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float om;
	float om_max; //= 0.025;

	// Extracting Max wheels speed (radiant each second)
	float wheel_speed[2];
	float wheel_speed_max= hdiffdrive.mech_prmtr.max_wheel_speed;
 8001ee0:	4ba3      	ldr	r3, [pc, #652]	; (8002170 <TrajectoryGenerator+0x360>)
 8001ee2:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001ee6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	wheel_speed[left ]= wheel_speed_max;
 8001eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eee:	60bb      	str	r3, [r7, #8]
	wheel_speed[right]= wheel_speed_max;
 8001ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef4:	60fb      	str	r3, [r7, #12]

	// Delta_a_max computation (linear variation, is max when wheels rotate at max speed on same direction)
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v_max, NULL, wheel_speed);
 8001ef6:	f107 0208 	add.w	r2, r7, #8
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 ff2f 	bl	8004d64 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	v_max *= 1; // Here you could modulate max value
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	617b      	str	r3, [r7, #20]

	// Delta_th_max computation (angular variation, is max when wheel rotate at max speed on opposite direction)
	wheel_speed[left]= -wheel_speed_max;
 8001f0a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001f0e:	eef1 7a67 	vneg.f32	s15, s15
 8001f12:	edc7 7a02 	vstr	s15, [r7, #8]
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(NULL, &om_max, wheel_speed);
 8001f16:	f107 0208 	add.w	r2, r7, #8
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	2000      	movs	r0, #0
 8001f22:	f002 ff1f 	bl	8004d64 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	om_max *= 1; // Here you could modulate max value
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	613b      	str	r3, [r7, #16]


	/* Infinite loop */
	for(;;){
		for(int deg_idx=0; deg_idx < N_deg; deg_idx++){
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f30:	e1d5      	b.n	80022de <TrajectoryGenerator+0x4ce>

			// Setting up sensor direction using a servo
			SERVO_SetDegree(&hservo, deg_array[deg_idx]);
 8001f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3bb8      	subs	r3, #184	; 0xb8
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	488a      	ldr	r0, [pc, #552]	; (8002174 <TrajectoryGenerator+0x364>)
 8001f4a:	f003 fc9f 	bl	800588c <SERVO_SetDegree>

			// Wait a bit for servo settlement and between ultrasonic acquisition
			osDelay(120);
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f007 fd34 	bl	80099bc <osDelay>

			/* Capture measured distance */

			status= ULTRASONIC_CaptureMeasure(&hultra);
 8001f54:	4888      	ldr	r0, [pc, #544]	; (8002178 <TrajectoryGenerator+0x368>)
 8001f56:	f003 fdf5 	bl	8005b44 <ULTRASONIC_CaptureMeasure>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

			// If there is an error set max distance (an error can occur when a sensor timeout
			// take place, because the ultrasonic signal is lost)
			if( status == ULTRASONIC_OK )
 8001f60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d104      	bne.n	8001f72 <TrajectoryGenerator+0x162>
				distance= __ULTRASONIC_GET_DISTANCE(&hultra);
 8001f68:	4b83      	ldr	r3, [pc, #524]	; (8002178 <TrajectoryGenerator+0x368>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f70:	e003      	b.n	8001f7a <TrajectoryGenerator+0x16a>
			else
				distance= max_distance;
 8001f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

			// Sensor fusion with IR Sensor
			IR_val = __MAF_GET_VAL(&hfilter_infrared);
 8001f7a:	4b80      	ldr	r3, [pc, #512]	; (800217c <TrajectoryGenerator+0x36c>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			distance *= IR_val;
 8001f82:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001f86:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

			// Set minimum distance
			if (distance < min_distance)
 8001f92:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001f96:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	d503      	bpl.n	8001fac <TrajectoryGenerator+0x19c>
				distance = min_distance;
 8001fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

			/* Using measured distance and servo angular position to generate a trajectory */

			// Robot linear position variation (direct proportional to distance) and negative below a distance threshold
			v = (distance - distance_threshold) * 4e-3;
 8001fac:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001fb0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb8:	ee17 0a90 	vmov	r0, s15
 8001fbc:	f7fe fae4 	bl	8000588 <__aeabi_f2d>
 8001fc0:	a35f      	add	r3, pc, #380	; (adr r3, 8002140 <TrajectoryGenerator+0x330>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fb37 	bl	8000638 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fe29 	bl	8000c28 <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if (distance < distance_threshold)
 8001fdc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001fe0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	d507      	bpl.n	8001ffe <TrajectoryGenerator+0x1ee>
				v *= 1.5;
 8001fee:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001ff2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

			// Robot angular position (theta) variation (inversely proportional to distance with sign that
			// depends on servo degree position)
			if (deg_array[deg_idx] > deg_eq)
 8001ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002008:	4413      	add	r3, r2
 800200a:	3bb8      	subs	r3, #184	; 0xb8
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d514      	bpl.n	8002048 <TrajectoryGenerator+0x238>
				om = -43.2/distance;
 800201e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002022:	f7fe fab1 	bl	8000588 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	a147      	add	r1, pc, #284	; (adr r1, 8002148 <TrajectoryGenerator+0x338>)
 800202c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fdf4 	bl	8000c28 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002046:	e013      	b.n	8002070 <TrajectoryGenerator+0x260>
			else
				om =  43.2/distance;
 8002048:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800204c:	f7fe fa9c 	bl	8000588 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	a13e      	add	r1, pc, #248	; (adr r1, 8002150 <TrajectoryGenerator+0x340>)
 8002056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800205a:	f7fe fc17 	bl	800088c <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fddf 	bl	8000c28 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

			// Enroll angular variations
			if(fabsf(om) > om_max)
 8002070:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002074:	eeb0 7ae7 	vabs.f32	s14, s15
 8002078:	edd7 7a04 	vldr	s15, [r7, #16]
 800207c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	dd0d      	ble.n	80020a2 <TrajectoryGenerator+0x292>
				// x/|x| == sign(x)
				om = om_max*om/fabsf(om);
 8002086:	ed97 7a04 	vldr	s14, [r7, #16]
 800208a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800208e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002092:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002096:	eeb0 7ae7 	vabs.f32	s14, s15
 800209a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800209e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
			// 0 below between a fixed range
			if (fabsf(om) < 0.01)
 80020a2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80020a6:	eef0 7ae7 	vabs.f32	s15, s15
 80020aa:	ee17 0a90 	vmov	r0, s15
 80020ae:	f7fe fa6b 	bl	8000588 <__aeabi_f2d>
 80020b2:	a329      	add	r3, pc, #164	; (adr r3, 8002158 <TrajectoryGenerator+0x348>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe fd30 	bl	8000b1c <__aeabi_dcmplt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <TrajectoryGenerator+0x2ba>
				om = 0;
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				v_max= r*wheel_speed_max - om*l;
			else
				v_max= r*wheel_speed_max + om*l;
*/
			// Enroll linear variations
			if(fabsf(v) > v_max)
 80020ca:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80020ce:	eeb0 7ae7 	vabs.f32	s14, s15
 80020d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	dd0d      	ble.n	80020fc <TrajectoryGenerator+0x2ec>
				// x/|x| == sign(x)
				v = v_max*v/fabsf(v);
 80020e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020e4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80020e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80020f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80020f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

			// If distance is above a fixed threshold use the generated trajectory variation
			if (distance > distance_threshold) {
 80020fc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002100:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	dd42      	ble.n	8002194 <TrajectoryGenerator+0x384>

				cnt_1 = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

				// No near obstacle detected
				near_obstacle = false;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <TrajectoryGenerator+0x370>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]

				// Smoothing measure using a Moving Average Filter

				MAF_Update(&hmaf_trajGen_v, v);
 800211a:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 800211e:	4819      	ldr	r0, [pc, #100]	; (8002184 <TrajectoryGenerator+0x374>)
 8002120:	f002 ffc7 	bl	80050b2 <MAF_Update>
				linear = __MAF_GET_VAL(&hmaf_trajGen_v);
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <TrajectoryGenerator+0x374>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <TrajectoryGenerator+0x378>)
 800212a:	6013      	str	r3, [r2, #0]

				MAF_Update(&hmaf_trajGen_om, om);
 800212c:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8002130:	4816      	ldr	r0, [pc, #88]	; (800218c <TrajectoryGenerator+0x37c>)
 8002132:	f002 ffbe 	bl	80050b2 <MAF_Update>
				angular = __MAF_GET_VAL(&hmaf_trajGen_om);
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <TrajectoryGenerator+0x37c>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <TrajectoryGenerator+0x380>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e09f      	b.n	8002280 <TrajectoryGenerator+0x470>
 8002140:	d2f1a9fc 	.word	0xd2f1a9fc
 8002144:	3f70624d 	.word	0x3f70624d
 8002148:	9999999a 	.word	0x9999999a
 800214c:	c0459999 	.word	0xc0459999
 8002150:	9999999a 	.word	0x9999999a
 8002154:	40459999 	.word	0x40459999
 8002158:	47ae147b 	.word	0x47ae147b
 800215c:	3f847ae1 	.word	0x3f847ae1
 8002160:	42a40000 	.word	0x42a40000
 8002164:	41700000 	.word	0x41700000
 8002168:	43480000 	.word	0x43480000
 800216c:	40400000 	.word	0x40400000
 8002170:	200051a8 	.word	0x200051a8
 8002174:	20004d70 	.word	0x20004d70
 8002178:	20004fe4 	.word	0x20004fe4
 800217c:	20004c00 	.word	0x20004c00
 8002180:	20000000 	.word	0x20000000
 8002184:	20004c18 	.word	0x20004c18
 8002188:	20000208 	.word	0x20000208
 800218c:	20004f18 	.word	0x20004f18
 8002190:	2000020c 	.word	0x2000020c

			}
			// Otherwise, if distance is below a fixed threshold freeze servo in that position and move 'way from obstacle
			else {
				// This do freeze servo
				deg_idx--;
 8002194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002198:	3b01      	subs	r3, #1
 800219a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				if (++cnt_1 > 1 || IR_val <= 0.5) {
 800219e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021a2:	3301      	adds	r3, #1
 80021a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	dc08      	bgt.n	80021c2 <TrajectoryGenerator+0x3b2>
 80021b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80021b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	d85e      	bhi.n	8002280 <TrajectoryGenerator+0x470>

					// Trajectory following relaxed (it doesn't need to follow the trajectory perfectly, it just
					// need to move away from a really near obstacle)
					near_obstacle = true;
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <TrajectoryGenerator+0x4f0>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]

					/* Avoiding the use of filtered values to have a fast response near an obstacle. Anyway,
					      keep update filters just to not have discontinuities after this exception ends.     */

					// Force a minimum Delta_a value, otherwise, near threshold, sometimes robot stand still
					linear = (v - v_max * 0.1) * 1;
 80021c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80021cc:	f7fe f9dc 	bl	8000588 <__aeabi_f2d>
 80021d0:	4604      	mov	r4, r0
 80021d2:	460d      	mov	r5, r1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9d6 	bl	8000588 <__aeabi_f2d>
 80021dc:	a344      	add	r3, pc, #272	; (adr r3, 80022f0 <TrajectoryGenerator+0x4e0>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fe fa29 	bl	8000638 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4620      	mov	r0, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	f7fe f86b 	bl	80002c8 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fd15 	bl	8000c28 <__aeabi_d2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a40      	ldr	r2, [pc, #256]	; (8002304 <TrajectoryGenerator+0x4f4>)
 8002202:	6013      	str	r3, [r2, #0]

					if (linear > 0)
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <TrajectoryGenerator+0x4f4>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	dd07      	ble.n	8002224 <TrajectoryGenerator+0x414>
						linear = -linear;
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <TrajectoryGenerator+0x4f4>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	eef1 7a67 	vneg.f32	s15, s15
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <TrajectoryGenerator+0x4f4>)
 8002220:	edc3 7a00 	vstr	s15, [r3]

					// Set current Delta_theta angle
					angular = om * 0.4;
 8002224:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002228:	f7fe f9ae 	bl	8000588 <__aeabi_f2d>
 800222c:	a332      	add	r3, pc, #200	; (adr r3, 80022f8 <TrajectoryGenerator+0x4e8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fa01 	bl	8000638 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fcf3 	bl	8000c28 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
 8002244:	4a30      	ldr	r2, [pc, #192]	; (8002308 <TrajectoryGenerator+0x4f8>)
 8002246:	6013      	str	r3, [r2, #0]

					// Filters updates
					MAF_Update(&hmaf_trajGen_v, v);
 8002248:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 800224c:	482f      	ldr	r0, [pc, #188]	; (800230c <TrajectoryGenerator+0x4fc>)
 800224e:	f002 ff30 	bl	80050b2 <MAF_Update>
					//linear= __MAF_GET_VAL(&hmaf_trajGen_v);
					MAF_Update(&hmaf_trajGen_om, angular);
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <TrajectoryGenerator+0x4f8>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	482c      	ldr	r0, [pc, #176]	; (8002310 <TrajectoryGenerator+0x500>)
 800225e:	f002 ff28 	bl	80050b2 <MAF_Update>
					// angular= __MAF_GET_VAL(&hmaf_trajGen_om);

					// Freeze servo just for a fixed time
					if (cnt_1++ > 30) {
 8002262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800226c:	2b1e      	cmp	r3, #30
 800226e:	dd07      	ble.n	8002280 <TrajectoryGenerator+0x470>
						cnt_1 = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
						deg_idx++;
 8002276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800227a:	3301      	adds	r3, #1
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						//v= -v;
					}
				}
			}

			if ( distance > distance_threshold && distance < distance_threshold * 4 ) {
 8002280:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002284:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd20      	ble.n	80022d4 <TrajectoryGenerator+0x4c4>
 8002292:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002296:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800229a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80022a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d513      	bpl.n	80022d4 <TrajectoryGenerator+0x4c4>
				deg_idx--;
 80022ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022b0:	3b01      	subs	r3, #1
 80022b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				if (cnt_2++ > 10) {
 80022b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	dd07      	ble.n	80022d4 <TrajectoryGenerator+0x4c4>
					cnt_2 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					deg_idx++;
 80022ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ce:	3301      	adds	r3, #1
 80022d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		for(int deg_idx=0; deg_idx < N_deg; deg_idx++){
 80022d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d8:	3301      	adds	r3, #1
 80022da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e6:	429a      	cmp	r2, r3
 80022e8:	f6ff ae23 	blt.w	8001f32 <TrajectoryGenerator+0x122>
 80022ec:	e61d      	b.n	8001f2a <TrajectoryGenerator+0x11a>
 80022ee:	bf00      	nop
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	3fb99999 	.word	0x3fb99999
 80022f8:	9999999a 	.word	0x9999999a
 80022fc:	3fd99999 	.word	0x3fd99999
 8002300:	20000000 	.word	0x20000000
 8002304:	20000208 	.word	0x20000208
 8002308:	2000020c 	.word	0x2000020c
 800230c:	20004c18 	.word	0x20004c18
 8002310:	20004f18 	.word	0x20004f18

08002314 <InfraredSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InfraredSensor */
void InfraredSensor(void *argument)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InfraredSensor */
	/* Infinite loop */

	// Infrared variable
	float sens = 0;
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// Read current value on IR pin
		sens = HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <InfraredSensor+0x38>)
 8002326:	f004 f855 	bl	80063d4 <HAL_GPIO_ReadPin>
 800232a:	4603      	mov	r3, r0
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002334:	edc7 7a03 	vstr	s15, [r7, #12]

		// Use MAF filter to transform only 0 or 1 state in values that span from 0 to 1
		MAF_Update(&hfilter_infrared, sens);
 8002338:	ed97 0a03 	vldr	s0, [r7, #12]
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <InfraredSensor+0x3c>)
 800233e:	f002 feb8 	bl	80050b2 <MAF_Update>

		osDelay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f007 fb3a 	bl	80099bc <osDelay>
		sens = HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8002348:	e7eb      	b.n	8002322 <InfraredSensor+0xe>
 800234a:	bf00      	nop
 800234c:	40020800 	.word	0x40020800
 8002350:	20004c00 	.word	0x20004c00

08002354 <TxStream>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TxStream */
void TxStream(void *argument)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b0e4      	sub	sp, #400	; 0x190
 800235a:	af24      	add	r7, sp, #144	; 0x90
 800235c:	6778      	str	r0, [r7, #116]	; 0x74

	/* Infinite loop */
	for(;;){

		// If blue button is pressed
		if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 800235e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002362:	48bf      	ldr	r0, [pc, #764]	; (8002660 <TxStream+0x30c>)
 8002364:	f004 f836 	bl	80063d4 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f7      	bne.n	800235e <TxStream+0xa>
			// When I'm here, I use HAL_Delay(ms) and not osDelay(ms), because during Tx stream
			// I suspend other theads, so I don't need os timing. Moreover, osDelay sometimes hangs forever
			// without no reason, I guess 'cause other threads are suspended and scheduler try to wait for them.

			// Stop Differential Drive motion
			diffDrive_enabled= false;
 800236e:	4bbd      	ldr	r3, [pc, #756]	; (8002664 <TxStream+0x310>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]

			// Wait until diff drive is still
			while( !diffDrive_stopped )
 8002374:	bf00      	nop
 8002376:	4bbc      	ldr	r3, [pc, #752]	; (8002668 <TxStream+0x314>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f7      	bne.n	8002376 <TxStream+0x22>
				;

			// Suspend other threads while sending values
			osThreadSuspend(DiffDriveTaskHandle);
 8002386:	4bb9      	ldr	r3, [pc, #740]	; (800266c <TxStream+0x318>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f007 faf5 	bl	800997a <osThreadSuspend>
			osThreadSuspend(TrajGenTaskHandle);
 8002390:	4bb7      	ldr	r3, [pc, #732]	; (8002670 <TxStream+0x31c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f007 faf0 	bl	800997a <osThreadSuspend>
			osThreadSuspend(InfraredTaskHandle);
 800239a:	4bb6      	ldr	r3, [pc, #728]	; (8002674 <TxStream+0x320>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f007 faeb 	bl	800997a <osThreadSuspend>

			// Turn on LED
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2120      	movs	r1, #32
 80023a8:	48b3      	ldr	r0, [pc, #716]	; (8002678 <TxStream+0x324>)
 80023aa:	f004 f82b 	bl	8006404 <HAL_GPIO_WritePin>

			// Reset ESP-8266
			HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2101      	movs	r1, #1
 80023b2:	48ab      	ldr	r0, [pc, #684]	; (8002660 <TxStream+0x30c>)
 80023b4:	f004 f826 	bl	8006404 <HAL_GPIO_WritePin>

			// Debounce button
			osDelay(200);
 80023b8:	20c8      	movs	r0, #200	; 0xc8
 80023ba:	f007 faff 	bl	80099bc <osDelay>

			// Send values forever
			for(;;){

				// If blue button is pressed again
				if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 80023be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c2:	48a7      	ldr	r0, [pc, #668]	; (8002660 <TxStream+0x30c>)
 80023c4:	f004 f806 	bl	80063d4 <HAL_GPIO_ReadPin>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f7      	bne.n	80023be <TxStream+0x6a>

					// Enable ESP-8266
					HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2101      	movs	r1, #1
 80023d2:	48a3      	ldr	r0, [pc, #652]	; (8002660 <TxStream+0x30c>)
 80023d4:	f004 f816 	bl	8006404 <HAL_GPIO_WritePin>

					// Rapidly flash led to show MCU ready to send values
					for(int i=0; i<20; i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80023de:	e00b      	b.n	80023f8 <TxStream+0xa4>
						HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80023e0:	2120      	movs	r1, #32
 80023e2:	48a5      	ldr	r0, [pc, #660]	; (8002678 <TxStream+0x324>)
 80023e4:	f004 f827 	bl	8006436 <HAL_GPIO_TogglePin>
						osDelay(50);
 80023e8:	2032      	movs	r0, #50	; 0x32
 80023ea:	f007 fae7 	bl	80099bc <osDelay>
					for(int i=0; i<20; i++){
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80023f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023fc:	2b13      	cmp	r3, #19
 80023fe:	ddef      	ble.n	80023e0 <TxStream+0x8c>
					}

					// Turn off LED
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002400:	2200      	movs	r2, #0
 8002402:	2120      	movs	r1, #32
 8002404:	489c      	ldr	r0, [pc, #624]	; (8002678 <TxStream+0x324>)
 8002406:	f003 fffd 	bl	8006404 <HAL_GPIO_WritePin>

					// Wait for 10 received chars, receiver must send something before to start receiving
					char ch[10];
					HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 800240a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800240e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002412:	220a      	movs	r2, #10
 8002414:	4899      	ldr	r0, [pc, #612]	; (800267c <TxStream+0x328>)
 8002416:	f006 fe0f 	bl	8009038 <HAL_UART_Receive>

					// Wait a bit
					osDelay(2000);
 800241a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800241e:	f007 facd 	bl	80099bc <osDelay>

					// Histroy variable
					DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 8002422:	4b97      	ldr	r3, [pc, #604]	; (8002680 <TxStream+0x32c>)
 8002424:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8002428:	f503 7510 	add.w	r5, r3, #576	; 0x240
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002434:	e884 0003 	stmia.w	r4, {r0, r1}

					// Number of saved samples
					int N_sample;
					if( tmphist.sample_cnt < tmphist.max_sample )
 8002438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800243a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243e:	429a      	cmp	r2, r3
 8002440:	d203      	bcs.n	800244a <TxStream+0xf6>
						N_sample=  tmphist.sample_cnt;
 8002442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002448:	e003      	b.n	8002452 <TxStream+0xfe>
					else
						N_sample=  tmphist.max_sample;
 800244a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800244e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

					// First values send is the actual number of samples
					DATASTREAM_Print(&hstream, int_csv, 1, N_sample);
 8002452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002456:	2201      	movs	r2, #1
 8002458:	2100      	movs	r1, #0
 800245a:	488a      	ldr	r0, [pc, #552]	; (8002684 <TxStream+0x330>)
 800245c:	f000 fd02 	bl	8002e64 <DATASTREAM_Print>
					// Bit of transfer delay
					osDelay(5);
 8002460:	2005      	movs	r0, #5
 8002462:	f007 faab 	bl	80099bc <osDelay>

					// Init History Get function
					DIFFDRIVE_HISTORY_Get_Init();
 8002466:	f002 f92b 	bl	80046c0 <DIFFDRIVE_HISTORY_Get_Init>

					for(int k= 0; k < N_sample; k++){
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002470:	e0e4      	b.n	800263c <TxStream+0x2e8>

						// Get one state sample from history
						DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 8002472:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002476:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 f947 	bl	8004710 <DIFFDRIVE_HISTORY_Get_Sample>

						// Send values to serial connected to ESP WiFi module
						DATASTREAM_Print(
								&hstream, float_csv, 18,
								state_measure.input[left], state_measure.input[right],
 8002482:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
						DATASTREAM_Print(
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
								state_measure.input[left], state_measure.input[right],
 8002490:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
						DATASTREAM_Print(
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f877 	bl	8000588 <__aeabi_f2d>
 800249a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
								state_target .input[left], state_target .input[right],
 800249e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
						DATASTREAM_Print(
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f870 	bl	8000588 <__aeabi_f2d>
 80024a8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
								state_target .input[left], state_target .input[right],
 80024ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
						DATASTREAM_Print(
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f869 	bl	8000588 <__aeabi_f2d>
 80024b6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
								state_measure.wheel[left], state_measure.wheel[right],
 80024ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
						DATASTREAM_Print(
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f862 	bl	8000588 <__aeabi_f2d>
 80024c4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
								state_measure.wheel[left], state_measure.wheel[right],
 80024c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
						DATASTREAM_Print(
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f85b 	bl	8000588 <__aeabi_f2d>
 80024d2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
								state_target .wheel[left], state_target .wheel[right],
 80024d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
						DATASTREAM_Print(
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f854 	bl	8000588 <__aeabi_f2d>
 80024e0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
								state_target .wheel[left], state_target .wheel[right],
 80024e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
						DATASTREAM_Print(
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f84d 	bl	8000588 <__aeabi_f2d>
 80024ee:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
								state_measure.pose.x_a,    state_measure.pose.y_a,
 80024f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
						DATASTREAM_Print(
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f846 	bl	8000588 <__aeabi_f2d>
 80024fc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
								state_measure.pose.x_a,    state_measure.pose.y_a,
 8002500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
						DATASTREAM_Print(
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f83f 	bl	8000588 <__aeabi_f2d>
 800250a:	e9c7 0108 	strd	r0, r1, [r7, #32]
								state_measure.pose.theta,  state_measure.pose.v,
 800250e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
						DATASTREAM_Print(
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f838 	bl	8000588 <__aeabi_f2d>
 8002518:	e9c7 0106 	strd	r0, r1, [r7, #24]
								state_measure.pose.theta,  state_measure.pose.v,
 800251c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
						DATASTREAM_Print(
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f831 	bl	8000588 <__aeabi_f2d>
 8002526:	e9c7 0104 	strd	r0, r1, [r7, #16]
								state_measure.pose.om,
 800252a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
						DATASTREAM_Print(
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f82a 	bl	8000588 <__aeabi_f2d>
 8002534:	e9c7 0102 	strd	r0, r1, [r7, #8]
                                state_target .pose.x_a,    state_target.pose.y_a,
 8002538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
						DATASTREAM_Print(
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f823 	bl	8000588 <__aeabi_f2d>
 8002542:	e9c7 0100 	strd	r0, r1, [r7]
                                state_target .pose.x_a,    state_target.pose.y_a,
 8002546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
						DATASTREAM_Print(
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f81c 	bl	8000588 <__aeabi_f2d>
 8002550:	4682      	mov	sl, r0
 8002552:	468b      	mov	fp, r1
								state_target .pose.theta,  state_target.pose.v,
 8002554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
						DATASTREAM_Print(
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe f815 	bl	8000588 <__aeabi_f2d>
 800255e:	4680      	mov	r8, r0
 8002560:	4689      	mov	r9, r1
								state_target .pose.theta,  state_target.pose.v,
 8002562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
						DATASTREAM_Print(
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f80e 	bl	8000588 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
								state_target .pose.om
 8002570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
						DATASTREAM_Print(
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f807 	bl	8000588 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8002582:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8002586:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 800258a:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 800258e:	ed97 7b00 	vldr	d7, [r7]
 8002592:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002596:	ed97 7b02 	vldr	d7, [r7, #8]
 800259a:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800259e:	ed97 7b04 	vldr	d7, [r7, #16]
 80025a2:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 80025a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80025aa:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80025ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80025b2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80025b6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80025ba:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80025be:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80025c2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80025c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80025ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80025ce:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80025d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80025d6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80025da:	ed8d 7b08 	vstr	d7, [sp, #32]
 80025de:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80025e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80025e6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80025ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80025ee:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80025f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025f6:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80025fa:	ed8d 7b00 	vstr	d7, [sp]
 80025fe:	2212      	movs	r2, #18
 8002600:	2101      	movs	r1, #1
 8002602:	4820      	ldr	r0, [pc, #128]	; (8002684 <TxStream+0x330>)
 8002604:	f000 fc2e 	bl	8002e64 <DATASTREAM_Print>
						);
						// Bit of transfer delay
						osDelay(5);
 8002608:	2005      	movs	r0, #5
 800260a:	f007 f9d7 	bl	80099bc <osDelay>
						// Toggling led to show data transfer operation
						if( !(k%50) )
 800260e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <TxStream+0x334>)
 8002614:	fb83 1302 	smull	r1, r3, r3, r2
 8002618:	1119      	asrs	r1, r3, #4
 800261a:	17d3      	asrs	r3, r2, #31
 800261c:	1acb      	subs	r3, r1, r3
 800261e:	2132      	movs	r1, #50	; 0x32
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <TxStream+0x2de>
							HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800262a:	2120      	movs	r1, #32
 800262c:	4812      	ldr	r0, [pc, #72]	; (8002678 <TxStream+0x324>)
 800262e:	f003 ff02 	bl	8006436 <HAL_GPIO_TogglePin>
					for(int k= 0; k < N_sample; k++){
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002636:	3301      	adds	r3, #1
 8002638:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800263c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002644:	429a      	cmp	r2, r3
 8002646:	f6ff af14 	blt.w	8002472 <TxStream+0x11e>
					}

					// Turn off LED
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	2120      	movs	r1, #32
 800264e:	480a      	ldr	r0, [pc, #40]	; (8002678 <TxStream+0x324>)
 8002650:	f003 fed8 	bl	8006404 <HAL_GPIO_WritePin>

					// Reset ESP-8266
					HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	4801      	ldr	r0, [pc, #4]	; (8002660 <TxStream+0x30c>)
 800265a:	f003 fed3 	bl	8006404 <HAL_GPIO_WritePin>
				if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 800265e:	e6ae      	b.n	80023be <TxStream+0x6a>
 8002660:	40020800 	.word	0x40020800
 8002664:	20000001 	.word	0x20000001
 8002668:	20000002 	.word	0x20000002
 800266c:	20004bfc 	.word	0x20004bfc
 8002670:	20004f14 	.word	0x20004f14
 8002674:	20004e40 	.word	0x20004e40
 8002678:	40020000 	.word	0x40020000
 800267c:	20004cfc 	.word	0x20004cfc
 8002680:	200051a8 	.word	0x200051a8
 8002684:	20004ef8 	.word	0x20004ef8
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800269e:	f003 fbdf 	bl	8005e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40001000 	.word	0x40001000

080026b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <Error_Handler+0x8>
	...

080026bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_MspInit+0x54>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a11      	ldr	r2, [pc, #68]	; (8002710 <HAL_MspInit+0x54>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_MspInit+0x54>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_MspInit+0x54>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_MspInit+0x54>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_MspInit+0x54>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	210f      	movs	r1, #15
 80026fe:	f06f 0001 	mvn.w	r0, #1
 8002702:	f003 fca9 	bl	8006058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a43      	ldr	r2, [pc, #268]	; (8002840 <HAL_TIM_Base_MspInit+0x12c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002752:	e071      	b.n	8002838 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_TIM_Base_MspInit+0x134>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d116      	bne.n	800278c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a37      	ldr	r2, [pc, #220]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2105      	movs	r1, #5
 800277e:	201d      	movs	r0, #29
 8002780:	f003 fc6a 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002784:	201d      	movs	r0, #29
 8002786:	f003 fc83 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 800278a:	e055      	b.n	8002838 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM8)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_TIM_Base_MspInit+0x138>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d116      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	202b      	movs	r0, #43	; 0x2b
 80027b8:	f003 fc4e 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027bc:	202b      	movs	r0, #43	; 0x2b
 80027be:	f003 fc67 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 80027c2:	e039      	b.n	8002838 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM12)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_TIM_Base_MspInit+0x13c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d134      	bne.n	8002838 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_TIM_Base_MspInit+0x130>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ULTRASONIC_ECHO_Pin;
 8002806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002818:	2309      	movs	r3, #9
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ULTRASONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <HAL_TIM_Base_MspInit+0x140>)
 8002824:	f003 fc42 	bl	80060ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2105      	movs	r1, #5
 800282c:	202b      	movs	r0, #43	; 0x2b
 800282e:	f003 fc13 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002832:	202b      	movs	r0, #43	; 0x2b
 8002834:	f003 fc2c 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 8002838:	bf00      	nop
 800283a:	3730      	adds	r7, #48	; 0x30
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40010000 	.word	0x40010000
 8002844:	40023800 	.word	0x40023800
 8002848:	40000400 	.word	0x40000400
 800284c:	40010400 	.word	0x40010400
 8002850:	40001800 	.word	0x40001800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d12d      	bne.n	80028d6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 80028b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028c4:	2301      	movs	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	481d      	ldr	r0, [pc, #116]	; (8002944 <HAL_TIM_Encoder_MspInit+0xec>)
 80028d0:	f003 fbec 	bl	80060ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028d4:	e030      	b.n	8002938 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_TIM_Encoder_MspInit+0xf0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d12b      	bne.n	8002938 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028ea:	f043 0308 	orr.w	r3, r3, #8
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_TIM_Encoder_MspInit+0xe8>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002928:	2302      	movs	r3, #2
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002934:	f003 fbba 	bl	80060ac <HAL_GPIO_Init>
}
 8002938:	bf00      	nop
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	40020400 	.word	0x40020400
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_TIM_MspPostInit+0xb0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d11f      	bne.n	80029b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_FORWARD_Pin|MOTOR_LEFT_BACKWARD_Pin|MOTOR_RIGHT_FORWARD_Pin|MOTOR_RIGHT_BACKWARD_Pin;
 800298e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	4817      	ldr	r0, [pc, #92]	; (8002a08 <HAL_TIM_MspPostInit+0xb8>)
 80029ac:	f003 fb7e 	bl	80060ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80029b0:	e022      	b.n	80029f8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_TIM_MspPostInit+0xbc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11d      	bne.n	80029f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6313      	str	r3, [r2, #48]	; 0x30
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_TIM_MspPostInit+0xb4>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029e8:	2303      	movs	r3, #3
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4807      	ldr	r0, [pc, #28]	; (8002a10 <HAL_TIM_MspPostInit+0xc0>)
 80029f4:	f003 fb5a 	bl	80060ac <HAL_GPIO_Init>
}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40020800 	.word	0x40020800

08002a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_UART_MspInit+0xc0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d14a      	bne.n	8002acc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_UART_MspInit+0xc4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a96:	2303      	movs	r3, #3
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480d      	ldr	r0, [pc, #52]	; (8002adc <HAL_UART_MspInit+0xc8>)
 8002aa6:	f003 fb01 	bl	80060ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002abc:	2307      	movs	r3, #7
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <HAL_UART_MspInit+0xcc>)
 8002ac8:	f003 faf0 	bl	80060ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002acc:	bf00      	nop
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	2036      	movs	r0, #54	; 0x36
 8002afa:	f003 faad 	bl	8006058 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002afe:	2036      	movs	r0, #54	; 0x36
 8002b00:	f003 fac6 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_InitTick+0xa4>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_InitTick+0xa4>)
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	6413      	str	r3, [r2, #64]	; 0x40
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_InitTick+0xa4>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b20:	f107 0210 	add.w	r2, r7, #16
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fdb8 	bl	80066a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b30:	f003 fd8e 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8002b34:	4603      	mov	r3, r0
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_InitTick+0xa8>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9b      	lsrs	r3, r3, #18
 8002b44:	3b01      	subs	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_InitTick+0xac>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_InitTick+0xb0>)
 8002b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_InitTick+0xac>)
 8002b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_InitTick+0xac>)
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_InitTick+0xac>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_InitTick+0xac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b68:	4809      	ldr	r0, [pc, #36]	; (8002b90 <HAL_InitTick+0xac>)
 8002b6a:	f004 fa1b 	bl	8006fa4 <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b74:	4806      	ldr	r0, [pc, #24]	; (8002b90 <HAL_InitTick+0xac>)
 8002b76:	f004 fb01 	bl	800717c <HAL_TIM_Base_Start_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3730      	adds	r7, #48	; 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	20005400 	.word	0x20005400
 8002b94:	40001000 	.word	0x40001000

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <NMI_Handler+0x4>

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM3_IRQHandler+0x10>)
 8002bca:	f005 f823 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20004e44 	.word	0x20004e44

08002bd8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002bde:	f005 f819 	bl	8007c14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002be4:	f005 f816 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20004c48 	.word	0x20004c48
 8002bf0:	200050f4 	.word	0x200050f4

08002bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <TIM6_DAC_IRQHandler+0x10>)
 8002bfa:	f005 f80b 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20005400 	.word	0x20005400

08002c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_kill>:

int _kill(int pid, int sig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c22:	f00a f93b 	bl	800ce9c <__errno>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2216      	movs	r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_exit>:

void _exit (int status)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ffe7 	bl	8002c18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c4a:	e7fe      	b.n	8002c4a <_exit+0x12>

08002c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c5e:	f3af 8000 	nop.w
 8002c62:	4601      	mov	r1, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <_read+0x12>
	}

return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e009      	b.n	8002cac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	60ba      	str	r2, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbf1      	blt.n	8002c98 <_write+0x12>
	}
	return len;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_close>:

int _close(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <_isatty>:

int _isatty(int file)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f00a f8a0 	bl	800ce9c <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <_sbrk+0x64>)
 8002d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20020000 	.word	0x20020000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	20000210 	.word	0x20000210
 8002d90:	200056a8 	.word	0x200056a8

08002d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <SystemInit+0x20>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <SystemInit+0x20>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <DATASTREAM_Init>:


/* ----------------- Functions definition --------------------- */

// Setting up streaming
DATASTREAM_StatusTypeDef DATASTREAM_Init(DATASTREAM_HandleTypeDef* hstream){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new stream
	if( glbl_idx < MAX_STREAMS ){
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <DATASTREAM_Init+0x9c>)
 8002dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	dc2e      	bgt.n	8002e28 <DATASTREAM_Init+0x70>

		// Realloc array of handles pointers
		hdatastream= (DATASTREAM_HandleTypeDef**)realloc(hdatastream, glbl_idx*sizeof(DATASTREAM_HandleTypeDef*));
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <DATASTREAM_Init+0xa0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <DATASTREAM_Init+0x9c>)
 8002dd0:	f992 2000 	ldrsb.w	r2, [r2]
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f00b f8d5 	bl	800df88 <realloc>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <DATASTREAM_Init+0xa0>)
 8002de2:	6013      	str	r3, [r2, #0]

		// Connect current handle with input handle using pointers
		hdatastream[glbl_idx]= hstream;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <DATASTREAM_Init+0xa0>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <DATASTREAM_Init+0x9c>)
 8002dea:	f993 3000 	ldrsb.w	r3, [r3]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	601a      	str	r2, [r3, #0]
	else
		// Return failure
		return DATASTREAM_ERROR;

	// Assign handle id and increment global index
	hstream->id= glbl_idx++;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <DATASTREAM_Init+0x9c>)
 8002df8:	f993 2000 	ldrsb.w	r2, [r3]
 8002dfc:	b2d3      	uxtb	r3, r2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	b259      	sxtb	r1, r3
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <DATASTREAM_Init+0x9c>)
 8002e06:	7019      	strb	r1, [r3, #0]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	765a      	strb	r2, [r3, #25]

	// Local UART handle
	hstream->huart=              hstream->Init.huart;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]
	// DMA Enable
	hstream->DMA_Rx_Enable=      hstream->Init.DMA_Rx_Enable;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	791a      	ldrb	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	741a      	strb	r2, [r3, #16]

	if( hstream->DMA_Rx_Enable ){
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7c1b      	ldrb	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <DATASTREAM_Init+0x8a>
 8002e26:	e001      	b.n	8002e2c <DATASTREAM_Init+0x74>
		return DATASTREAM_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e00f      	b.n	8002e4c <DATASTREAM_Init+0x94>
		// DMA Interrupt Request "id"
		hstream->DMA_Rx_Stream_IRQn= hstream->Init.DMA_Rx_Stream_IRQn;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	615a      	str	r2, [r3, #20]
		// Assign Rx callback
		hstream->huart->RxCpltCallback= DATASTREAM_RxCpltCallback;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <DATASTREAM_Init+0xa4>)
 8002e3a:	651a      	str	r2, [r3, #80]	; 0x50
		// Assign default true value to flag
		hstream->RxCpltFlag= true;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	761a      	strb	r2, [r3, #24]
	}

	// Assign Error callback
	hstream->huart->ErrorCallback=  DATASTREAM_ErrorCallback;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <DATASTREAM_Init+0xa8>)
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

	// Return success
	return DATASTREAM_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000214 	.word	0x20000214
 8002e58:	200054b4 	.word	0x200054b4
 8002e5c:	08002fe1 	.word	0x08002fe1
 8002e60:	08003041 	.word	0x08003041

08002e64 <DATASTREAM_Print>:
}


// Do send values into serial, using a Variadic function. This version is for freeRTOS that doesn't support
// printf and sprintf
void DATASTREAM_Print(DATASTREAM_HandleTypeDef* hstream, DATASTREAM_PrintMode mode, int vargn, ...){
 8002e64:	b40c      	push	{r2, r3}
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b094      	sub	sp, #80	; 0x50
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 8002e72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38

	// Timeout of ms
	uint32_t timeout= 1;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(mode){
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	f200 80a6 	bhi.w	8002fd0 <DATASTREAM_Print+0x16c>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <DATASTREAM_Print+0x28>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002f43 	.word	0x08002f43
 8002e90:	08002e9d 	.word	0x08002e9d
 8002e94:	08002fd1 	.word	0x08002fd1
 8002e98:	08002fd1 	.word	0x08002fd1
		// ------------ Streaming values in csv format --------------------
		// (Using this mode I send N values separated by comma character,
		//  each stream is ended with a newline)
		case float_csv:

			for(int i=0; i<vargn; i++){
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	e03e      	b.n	8002f20 <DATASTREAM_Print+0xbc>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea6:	e008      	b.n	8002eba <DATASTREAM_Print+0x56>
					data_buff[k]= '\0';
 8002ea8:	f107 0220 	add.w	r2, r7, #32
 8002eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eae:	4413      	add	r3, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ebc:	2b0e      	cmp	r3, #14
 8002ebe:	d9f3      	bls.n	8002ea8 <DATASTREAM_Print+0x44>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), data_buff, 7);
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	f023 0307 	bic.w	r3, r3, #7
 8002ec8:	f103 0208 	add.w	r2, r3, #8
 8002ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7fd fea7 	bl	8000c28 <__aeabi_d2f>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f107 0320 	add.w	r3, r7, #32
 8002ee0:	2107      	movs	r1, #7
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	ee00 2a10 	vmov	s0, r2
 8002ee8:	f000 f942 	bl	8003170 <ftoa>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68d8      	ldr	r0, [r3, #12]
 8002ef0:	f107 0120 	add.w	r1, r7, #32
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	f006 f80c 	bl	8008f14 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d009      	beq.n	8002f1a <DATASTREAM_Print+0xb6>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68d8      	ldr	r0, [r3, #12]
 8002f0a:	232c      	movs	r3, #44	; 0x2c
 8002f0c:	773b      	strb	r3, [r7, #28]
 8002f0e:	f107 011c 	add.w	r1, r7, #28
 8002f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f14:	2201      	movs	r2, #1
 8002f16:	f005 fffd 	bl	8008f14 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbbc      	blt.n	8002ea2 <DATASTREAM_Print+0x3e>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68d8      	ldr	r0, [r3, #12]
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002f32:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f005 ffea 	bl	8008f14 <HAL_UART_Transmit>

			break;
 8002f40:	e047      	b.n	8002fd2 <DATASTREAM_Print+0x16e>

		case int_csv:

			for(int i=0; i<vargn; i++){
 8002f42:	2300      	movs	r3, #0
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
 8002f46:	e032      	b.n	8002fae <DATASTREAM_Print+0x14a>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4c:	e008      	b.n	8002f60 <DATASTREAM_Print+0xfc>
					data_buff[k]= '\0';
 8002f4e:	f107 020c 	add.w	r2, r7, #12
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	4413      	add	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	2b0e      	cmp	r3, #14
 8002f64:	d9f3      	bls.n	8002f4e <DATASTREAM_Print+0xea>

				// Float to Array!
				itostr(va_arg(vargp, int), data_buff, 0);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	1d1a      	adds	r2, r3, #4
 8002f6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f107 010c 	add.w	r1, r7, #12
 8002f72:	2200      	movs	r2, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f89d 	bl	80030b4 <itostr>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68d8      	ldr	r0, [r3, #12]
 8002f7e:	f107 010c 	add.w	r1, r7, #12
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	220f      	movs	r2, #15
 8002f86:	f005 ffc5 	bl	8008f14 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d009      	beq.n	8002fa8 <DATASTREAM_Print+0x144>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68d8      	ldr	r0, [r3, #12]
 8002f98:	232c      	movs	r3, #44	; 0x2c
 8002f9a:	723b      	strb	r3, [r7, #8]
 8002f9c:	f107 0108 	add.w	r1, r7, #8
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f005 ffb6 	bl	8008f14 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	3301      	adds	r3, #1
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
 8002fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbc8      	blt.n	8002f48 <DATASTREAM_Print+0xe4>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68d8      	ldr	r0, [r3, #12]
 8002fba:	230a      	movs	r3, #10
 8002fbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002fc0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f005 ffa3 	bl	8008f14 <HAL_UART_Transmit>

			break;
 8002fce:	e000      	b.n	8002fd2 <DATASTREAM_Print+0x16e>

		case int_binary:
			break;

		default:
			break;
 8002fd0:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 8002fd2:	bf00      	nop
 8002fd4:	3750      	adds	r7, #80	; 0x50
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fdc:	b002      	add	sp, #8
 8002fde:	4770      	bx	lr

08002fe0 <DATASTREAM_RxCpltCallback>:


// --- Rx Callback --- //

void DATASTREAM_RxCpltCallback(UART_HandleTypeDef *huart){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

	// Checking which stream caused the callback, then assign true value to Rx complete flag
	for(int i=0; i<glbl_idx; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e015      	b.n	800301a <DATASTREAM_RxCpltCallback+0x3a>
		if(hdatastream[i]->huart == huart){
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <DATASTREAM_RxCpltCallback+0x58>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d108      	bne.n	8003014 <DATASTREAM_RxCpltCallback+0x34>
			hdatastream[i]->RxCpltFlag= true;
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <DATASTREAM_RxCpltCallback+0x58>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	761a      	strb	r2, [r3, #24]
			break;
 8003012:	e00a      	b.n	800302a <DATASTREAM_RxCpltCallback+0x4a>
	for(int i=0; i<glbl_idx; i++)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <DATASTREAM_RxCpltCallback+0x5c>)
 800301c:	f993 3000 	ldrsb.w	r3, [r3]
 8003020:	461a      	mov	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4293      	cmp	r3, r2
 8003026:	dbe2      	blt.n	8002fee <DATASTREAM_RxCpltCallback+0xe>
		}

}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200054b4 	.word	0x200054b4
 800303c:	20000214 	.word	0x20000214

08003040 <DATASTREAM_ErrorCallback>:


// --- Error callback --- //

void DATASTREAM_ErrorCallback(UART_HandleTypeDef *huart){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	__NOP();
 8003048:	bf00      	nop
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800306a:	e018      	b.n	800309e <reverse+0x48>
        temp = str[i];
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	441a      	add	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	440b      	add	r3, r1
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        i++;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
        j--;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3b01      	subs	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbe2      	blt.n	800306c <reverse+0x16>
    }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <itostr>:

int itostr(int x, char str[], int d){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
    int i = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
    int neg= 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da23      	bge.n	8003116 <itostr+0x62>
    	x= -x;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	425b      	negs	r3, r3
 80030d2:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 80030d8:	e01d      	b.n	8003116 <itostr+0x62>
        str[i++] = (x % 10) + '0';
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <itostr+0xb4>)
 80030de:	fb83 1302 	smull	r1, r3, r3, r2
 80030e2:	1099      	asrs	r1, r3, #2
 80030e4:	17d3      	asrs	r3, r2, #31
 80030e6:	1ac9      	subs	r1, r1, r3
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	1ad1      	subs	r1, r2, r3
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	6179      	str	r1, [r7, #20]
 80030fa:	4619      	mov	r1, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	440b      	add	r3, r1
 8003100:	3230      	adds	r2, #48	; 0x30
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a17      	ldr	r2, [pc, #92]	; (8003168 <itostr+0xb4>)
 800310a:	fb82 1203 	smull	r1, r2, r2, r3
 800310e:	1092      	asrs	r2, r2, #2
 8003110:	17db      	asrs	r3, r3, #31
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	60fb      	str	r3, [r7, #12]
    while (x) {
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1de      	bne.n	80030da <itostr+0x26>
    }

    while (i < d)
 800311c:	e007      	b.n	800312e <itostr+0x7a>
        str[i++] = '0';
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	617a      	str	r2, [r7, #20]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	2230      	movs	r2, #48	; 0x30
 800312c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	dbf3      	blt.n	800311e <itostr+0x6a>

    if(neg)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <itostr+0x98>
    	str[i++]= '-';
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	617a      	str	r2, [r7, #20]
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4413      	add	r3, r2
 8003148:	222d      	movs	r2, #45	; 0x2d
 800314a:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 800314c:	6979      	ldr	r1, [r7, #20]
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f7ff ff81 	bl	8003056 <reverse>

    str[i] = '\0';
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]

    return i;
 800315e:	697b      	ldr	r3, [r7, #20]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	66666667 	.word	0x66666667
 800316c:	00000000 	.word	0x00000000

08003170 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	ed87 0a03 	vstr	s0, [r7, #12]
 800317a:	60b8      	str	r0, [r7, #8]
 800317c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800317e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003186:	ee17 3a90 	vmov	r3, s15
 800318a:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 800318c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	d50d      	bpl.n	80031b6 <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80031a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ac:	eef1 7a67 	vneg.f32	s15, s15
 80031b0:	edc7 7a07 	vstr	s15, [r7, #28]
 80031b4:	e00a      	b.n	80031cc <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80031c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c8:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 80031cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d50c      	bpl.n	80031f8 <ftoa+0x88>
 80031de:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	dd05      	ble.n	80031f8 <ftoa+0x88>
    	res[0]= '0';
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2230      	movs	r2, #48	; 0x30
 80031f0:	701a      	strb	r2, [r3, #0]
    	i= 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e01f      	b.n	8003238 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 80031f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d512      	bpl.n	800322c <ftoa+0xbc>
 8003206:	edd7 7a03 	vldr	s15, [r7, #12]
 800320a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800320e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	dd09      	ble.n	800322c <ftoa+0xbc>
    	res[0]= '-';
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	222d      	movs	r2, #45	; 0x2d
 800321c:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3301      	adds	r3, #1
 8003222:	2230      	movs	r2, #48	; 0x30
 8003224:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e005      	b.n	8003238 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7ff ff3f 	bl	80030b4 <itostr>
 8003236:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d030      	beq.n	80032a0 <ftoa+0x130>
        res[i] = '.';
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4413      	add	r3, r2
 8003244:	222e      	movs	r2, #46	; 0x2e
 8003246:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8003248:	69f8      	ldr	r0, [r7, #28]
 800324a:	f7fd f99d 	bl	8000588 <__aeabi_f2d>
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd f986 	bl	8000564 <__aeabi_i2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	ec43 2b11 	vmov	d1, r2, r3
 8003260:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80032a8 <ftoa+0x138>
 8003264:	f00e fb88 	bl	8011978 <pow>
 8003268:	ec53 2b10 	vmov	r2, r3, d0
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fd f9e2 	bl	8000638 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7fd fcd4 	bl	8000c28 <__aeabi_d2f>
 8003280:	4603      	mov	r3, r0
 8003282:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8003284:	edd7 7a07 	vldr	s15, [r7, #28]
 8003288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	3301      	adds	r3, #1
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4413      	add	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4619      	mov	r1, r3
 8003298:	ee17 0a90 	vmov	r0, s15
 800329c:	f7ff ff0a 	bl	80030b4 <itostr>
    }
}
 80032a0:	bf00      	nop
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bdb0      	pop	{r4, r5, r7, pc}
 80032a8:	00000000 	.word	0x00000000
 80032ac:	40240000 	.word	0x40240000

080032b0 <DIFFDRIVE_Init>:
#endif

/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 80032b8:	4a83      	ldr	r2, [pc, #524]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 80032be:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032c6:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 80032c8:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b7e      	ldr	r3, [pc, #504]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 80032d6:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b77      	ldr	r3, [pc, #476]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80032ee:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 80032f2:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b74      	ldr	r3, [pc, #464]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032fc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8003300:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800330a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800330e:	2300      	movs	r3, #0
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003314:	e273      	b.n	80037fe <DIFFDRIVE_Init+0x54e>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003322:	2068      	movs	r0, #104	; 0x68
 8003324:	fb00 f202 	mul.w	r2, r0, r2
 8003328:	6a38      	ldr	r0, [r7, #32]
 800332a:	4402      	add	r2, r0
 800332c:	3334      	adds	r3, #52	; 0x34
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	440b      	add	r3, r1
 8003332:	889b      	ldrh	r3, [r3, #4]
 8003334:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8003336:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800333e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003342:	2068      	movs	r0, #104	; 0x68
 8003344:	fb00 f303 	mul.w	r3, r0, r3
 8003348:	6a38      	ldr	r0, [r7, #32]
 800334a:	4403      	add	r3, r0
 800334c:	3138      	adds	r1, #56	; 0x38
 800334e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003352:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8003354:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003360:	2068      	movs	r0, #104	; 0x68
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	6a38      	ldr	r0, [r7, #32]
 8003368:	4403      	add	r3, r0
 800336a:	311e      	adds	r1, #30
 800336c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003370:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800337a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800337e:	2068      	movs	r0, #104	; 0x68
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	6a38      	ldr	r0, [r7, #32]
 8003386:	4403      	add	r3, r0
 8003388:	3120      	adds	r1, #32
 800338a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800338e:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003398:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800339c:	2068      	movs	r0, #104	; 0x68
 800339e:	fb00 f202 	mul.w	r2, r0, r2
 80033a2:	6a38      	ldr	r0, [r7, #32]
 80033a4:	4402      	add	r2, r0
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	889b      	ldrh	r3, [r3, #4]
 80033ae:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 80033b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b4:	2268      	movs	r2, #104	; 0x68
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	4413      	add	r3, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 ff02 	bl	80051c8 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033d0:	2068      	movs	r0, #104	; 0x68
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	6a38      	ldr	r0, [r7, #32]
 80033d8:	4403      	add	r3, r0
 80033da:	3222      	adds	r2, #34	; 0x22
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	440a      	add	r2, r1
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 80033e4:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f0:	2068      	movs	r0, #104	; 0x68
 80033f2:	fb00 f303 	mul.w	r3, r0, r3
 80033f6:	6a38      	ldr	r0, [r7, #32]
 80033f8:	4403      	add	r3, r0
 80033fa:	3224      	adds	r2, #36	; 0x24
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	440a      	add	r2, r1
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8003404:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800340c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003410:	2068      	movs	r0, #104	; 0x68
 8003412:	fb00 f303 	mul.w	r3, r0, r3
 8003416:	6a38      	ldr	r0, [r7, #32]
 8003418:	4403      	add	r3, r0
 800341a:	3226      	adds	r2, #38	; 0x26
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	440a      	add	r2, r1
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342c:	2168      	movs	r1, #104	; 0x68
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	6a39      	ldr	r1, [r7, #32]
 8003434:	440b      	add	r3, r1
 8003436:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 800343c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003440:	2268      	movs	r2, #104	; 0x68
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	6a3a      	ldr	r2, [r7, #32]
 8003448:	4413      	add	r3, r2
 800344a:	3334      	adds	r3, #52	; 0x34
 800344c:	4618      	mov	r0, r3
 800344e:	f002 f862 	bl	8005516 <PID_Init>

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003462:	3208      	adds	r2, #8
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4402      	add	r2, r0
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	202c      	movs	r0, #44	; 0x2c
 800346c:	fb00 f303 	mul.w	r3, r0, r3
 8003470:	440b      	add	r3, r1
 8003472:	33c0      	adds	r3, #192	; 0xc0
 8003474:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003486:	320a      	adds	r2, #10
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4402      	add	r2, r0
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	fb00 f303 	mul.w	r3, r0, r3
 8003494:	440b      	add	r3, r1
 8003496:	33c4      	adds	r3, #196	; 0xc4
 8003498:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <DIFFDRIVE_Init+0x218>)
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034aa:	320c      	adds	r2, #12
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4402      	add	r2, r0
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	202c      	movs	r0, #44	; 0x2c
 80034b4:	fb00 f303 	mul.w	r3, r0, r3
 80034b8:	440b      	add	r3, r1
 80034ba:	33c8      	adds	r3, #200	; 0xc8
 80034bc:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034c4:	e05c      	b.n	8003580 <DIFFDRIVE_Init+0x2d0>
 80034c6:	bf00      	nop
 80034c8:	20005648 	.word	0x20005648
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 80034cc:	4bab      	ldr	r3, [pc, #684]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80034d4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80034d8:	4aa8      	ldr	r2, [pc, #672]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80034da:	6811      	ldr	r1, [r2, #0]
 80034dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034e0:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 80034e4:	006d      	lsls	r5, r5, #1
 80034e6:	4428      	add	r0, r5
 80034e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	4423      	add	r3, r4
 80034f8:	332c      	adds	r3, #44	; 0x2c
 80034fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 80034fe:	4b9f      	ldr	r3, [pc, #636]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003506:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800350a:	4a9c      	ldr	r2, [pc, #624]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003512:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8003516:	006d      	lsls	r5, r5, #1
 8003518:	4428      	add	r0, r5
 800351a:	3004      	adds	r0, #4
 800351c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	4423      	add	r3, r4
 800352c:	332e      	adds	r3, #46	; 0x2e
 800352e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8003532:	4b92      	ldr	r3, [pc, #584]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800353a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	4403      	add	r3, r0
 800354a:	332c      	adds	r3, #44	; 0x2c
 800354c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003550:	4b8a      	ldr	r3, [pc, #552]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003558:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	4403      	add	r3, r0
 8003568:	332e      	adds	r3, #46	; 0x2e
 800356a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800356e:	4619      	mov	r1, r3
 8003570:	4620      	mov	r0, r4
 8003572:	f003 ff09 	bl	8007388 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8003576:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800357a:	3301      	adds	r3, #1
 800357c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003580:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003584:	2b01      	cmp	r3, #1
 8003586:	d9a1      	bls.n	80034cc <DIFFDRIVE_Init+0x21c>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8003588:	4b7c      	ldr	r3, [pc, #496]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	33c0      	adds	r3, #192	; 0xc0
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	33c8      	adds	r3, #200	; 0xc8
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 80035b4:	4b71      	ldr	r3, [pc, #452]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	33c4      	adds	r3, #196	; 0xc4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	33b0      	adds	r3, #176	; 0xb0
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80035f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fa:	4b60      	ldr	r3, [pc, #384]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003606:	ee17 0a90 	vmov	r0, s15
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	33cc      	adds	r3, #204	; 0xcc
 8003614:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	33b0      	adds	r3, #176	; 0xb0
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003636:	edd7 7a03 	vldr	s15, [r7, #12]
 800363a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800363e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003646:	4b4d      	ldr	r3, [pc, #308]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	ee17 0a90 	vmov	r0, s15
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	33d0      	adds	r3, #208	; 0xd0
 8003660:	6018      	str	r0, [r3, #0]

		// Encoder Sensors
		hdiffdrv->encoder[side].htim=               hdiffdrv->Init.encoder_htim[side];
 8003662:	4b46      	ldr	r3, [pc, #280]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800366a:	4a44      	ldr	r2, [pc, #272]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800366c:	6810      	ldr	r0, [r2, #0]
 800366e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003672:	310e      	adds	r1, #14
 8003674:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4403      	add	r3, r0
 8003682:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003686:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].tim_channel=        hdiffdrv->Init.encoder_tim_channel[side];
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003690:	4a3a      	ldr	r2, [pc, #232]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003692:	6810      	ldr	r0, [r2, #0]
 8003694:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003698:	3110      	adds	r1, #16
 800369a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4403      	add	r3, r0
 80036a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80036ac:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution=         hdiffdrv->Init.encoder_resolution[side];
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b6:	4a31      	ldr	r2, [pc, #196]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80036b8:	6810      	ldr	r0, [r2, #0]
 80036ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036be:	3318      	adds	r3, #24
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3304      	adds	r3, #4
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4403      	add	r3, r0
 80036d2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80036d6:	6019      	str	r1, [r3, #0]

		// AutoReloadRegister bit resolution
		hdiffdrv->encoder[side].tim_arr_resolution= hdiffdrv->Init.encoder_tim_arr_resolution[side];
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e0:	4a26      	ldr	r2, [pc, #152]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036e8:	4403      	add	r3, r0
 80036ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80036fc:	4602      	mov	r2, r0
 80036fe:	701a      	strb	r2, [r3, #0]

		// Setting up encoders' timers
		__HAL_TIM_SET_PRESCALER(hdiffdrv->encoder[side].htim, 0);
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	; 0x28

		// Set max autoreload value
		if( hdiffdrv->encoder[side].tim_arr_resolution == 32 )
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d122      	bne.n	8003780 <DIFFDRIVE_Init+0x4d0>
			// 32 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffffffu);
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <DIFFDRIVE_Init+0x4cc>)
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e021      	b.n	80037be <DIFFDRIVE_Init+0x50e>
 800377a:	bf00      	nop
 800377c:	20005648 	.word	0x20005648
		else
			// Default 16 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffu);
 8003780:	4bb9      	ldr	r3, [pc, #740]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
 80037a0:	4bb1      	ldr	r3, [pc, #708]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037bc:	60da      	str	r2, [r3, #12]

		// Starting Encoder Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].tim_channel);
 80037be:	4baa      	ldr	r3, [pc, #680]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	4ba4      	ldr	r3, [pc, #656]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	f004 f982 	bl	8007af8 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80037f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f8:	3301      	adds	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003802:	2b01      	cmp	r3, #1
 8003804:	f67f ad87 	bls.w	8003316 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   =  0;
 8003808:	4b97      	ldr	r3, [pc, #604]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hdiffdrv->state.pose.y_a   =  0;
 8003814:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	hdiffdrv->state.pose.theta =  0;
 8003820:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 800382c:	4b8e      	ldr	r3, [pc, #568]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003834:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 800383c:	4b8a      	ldr	r3, [pc, #552]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8003844:	4a88      	ldr	r2, [pc, #544]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003846:	6814      	ldr	r4, [r2, #0]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	4618      	mov	r0, r3
 800384c:	f009 fb1e 	bl	800ce8c <calloc>
 8003850:	4603      	mov	r3, r0
 8003852:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8003856:	4b84      	ldr	r3, [pc, #528]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800385e:	4a82      	ldr	r2, [pc, #520]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003860:	6814      	ldr	r4, [r2, #0]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	4618      	mov	r0, r3
 8003866:	f009 fb11 	bl	800ce8c <calloc>
 800386a:	4603      	mov	r3, r0
 800386c:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

	// Initializing time index
	hdiffdrv->history.index= 0;
 8003870:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	hdiffdrv->history.sample_cnt= 0;
 800387a:	4b7b      	ldr	r3, [pc, #492]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 8003884:	4b78      	ldr	r3, [pc, #480]	; (8003a68 <DIFFDRIVE_Init+0x7b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	33a4      	adds	r3, #164	; 0xa4
 800388a:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a76      	ldr	r2, [pc, #472]	; (8003a6c <DIFFDRIVE_Init+0x7bc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d017      	beq.n	80038c8 <DIFFDRIVE_Init+0x618>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a74      	ldr	r2, [pc, #464]	; (8003a70 <DIFFDRIVE_Init+0x7c0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d011      	beq.n	80038c8 <DIFFDRIVE_Init+0x618>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a72      	ldr	r2, [pc, #456]	; (8003a74 <DIFFDRIVE_Init+0x7c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <DIFFDRIVE_Init+0x618>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a70      	ldr	r2, [pc, #448]	; (8003a78 <DIFFDRIVE_Init+0x7c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d005      	beq.n	80038c8 <DIFFDRIVE_Init+0x618>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <DIFFDRIVE_Init+0x7cc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d11b      	bne.n	8003900 <DIFFDRIVE_Init+0x650>
 80038c8:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <DIFFDRIVE_Init+0x7d0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <DIFFDRIVE_Init+0x63a>
 80038d4:	f002 fed0 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe2e 	bl	8000544 <__aeabi_ui2d>
 80038e8:	e025      	b.n	8003936 <DIFFDRIVE_Init+0x686>
 80038ea:	f002 fec5 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe23 	bl	8000544 <__aeabi_ui2d>
 80038fe:	e01a      	b.n	8003936 <DIFFDRIVE_Init+0x686>
 8003900:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <DIFFDRIVE_Init+0x7d0>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <DIFFDRIVE_Init+0x672>
 800390c:	f002 fea0 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8003910:	4602      	mov	r2, r0
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fe12 	bl	8000544 <__aeabi_ui2d>
 8003920:	e009      	b.n	8003936 <DIFFDRIVE_Init+0x686>
 8003922:	f002 fe95 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8003926:	4602      	mov	r2, r0
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fe07 	bl	8000544 <__aeabi_ui2d>
 8003936:	a34a      	add	r3, pc, #296	; (adr r3, 8003a60 <DIFFDRIVE_Init+0x7b0>)
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f7fc ffa6 	bl	800088c <__aeabi_ddiv>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <DIFFDRIVE_Init+0x7d4>)
 800394e:	f7fc fcbb 	bl	80002c8 <__aeabi_dsub>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	f7fd f945 	bl	8000be8 <__aeabi_d2uiz>
 800395e:	4603      	mov	r3, r0
 8003960:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <DIFFDRIVE_Init+0x7bc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d017      	beq.n	800399e <DIFFDRIVE_Init+0x6ee>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <DIFFDRIVE_Init+0x7c0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d011      	beq.n	800399e <DIFFDRIVE_Init+0x6ee>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <DIFFDRIVE_Init+0x7c4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <DIFFDRIVE_Init+0x6ee>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a3a      	ldr	r2, [pc, #232]	; (8003a78 <DIFFDRIVE_Init+0x7c8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d005      	beq.n	800399e <DIFFDRIVE_Init+0x6ee>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <DIFFDRIVE_Init+0x7cc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d115      	bne.n	80039ca <DIFFDRIVE_Init+0x71a>
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <DIFFDRIVE_Init+0x7d0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <DIFFDRIVE_Init+0x708>
 80039aa:	f002 fe65 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80039ae:	ee07 0a90 	vmov	s15, r0
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	e01d      	b.n	80039f4 <DIFFDRIVE_Init+0x744>
 80039b8:	f002 fe5e 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80039bc:	4603      	mov	r3, r0
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c8:	e014      	b.n	80039f4 <DIFFDRIVE_Init+0x744>
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <DIFFDRIVE_Init+0x7d0>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <DIFFDRIVE_Init+0x734>
 80039d6:	f002 fe3b 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80039da:	ee07 0a90 	vmov	s15, r0
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	e007      	b.n	80039f4 <DIFFDRIVE_Init+0x744>
 80039e4:	f002 fe34 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80039e8:	4603      	mov	r3, r0
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f4:	8b7b      	ldrh	r3, [r7, #26]
 80039f6:	3301      	adds	r3, #1
 80039f8:	ee07 3a10 	vmov	s14, r3
 80039fc:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a06:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003a0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1a:	ee17 3a90 	vmov	r3, s15
 8003a1e:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	8b7a      	ldrh	r2, [r7, #26]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	8b3a      	ldrh	r2, [r7, #24]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	8b3a      	ldrh	r2, [r7, #24]
 8003a3a:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_PeriodElapsedCallback;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <DIFFDRIVE_Init+0x7d8>)
 8003a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifdef DIFFDRIVE_RTOS_V_
	  /* Creation of diffDrive_semaphore */
	  timing->semaphore_id = osSemaphoreNew(1, 1, &diffDrive_semaphore_attributes);
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <DIFFDRIVE_Init+0x7dc>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f005 ffd1 	bl	80099f2 <osSemaphoreNew>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	609a      	str	r2, [r3, #8]
#else
	// Reset timing flag
	timing->flag= false;
#endif

}
 8003a56:	bf00      	nop
 8003a58:	3728      	adds	r7, #40	; 0x28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	00000000 	.word	0x00000000
 8003a64:	412e8480 	.word	0x412e8480
 8003a68:	20005648 	.word	0x20005648
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800
 8003a80:	40023800 	.word	0x40023800
 8003a84:	3ff00000 	.word	0x3ff00000
 8003a88:	08004ff1 	.word	0x08004ff1
 8003a8c:	080138b8 	.word	0x080138b8

08003a90 <DIFFDRIVE_MOTOR_Stop>:
	osSemaphoreDelete(hdiffdrv->timing.semaphore_id);
#endif
}


void DIFFDRIVE_MOTOR_Stop(){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f805 	bl	8003ab4 <DIFFDRIVE_MOTOR_SetPWMs>

}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8003abc:	4bb4      	ldr	r3, [pc, #720]	; (8003d90 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	33b0      	adds	r3, #176	; 0xb0
 8003ac2:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0c8      	b.n	8003c5c <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8003aca:	7ffb      	ldrb	r3, [r7, #31]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	7ffb      	ldrb	r3, [r7, #31]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f107 0120 	add.w	r1, r7, #32
 8003adc:	440b      	add	r3, r1
 8003ade:	3b14      	subs	r3, #20
 8003ae0:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8003ae2:	7ffb      	ldrb	r3, [r7, #31]
 8003ae4:	222c      	movs	r2, #44	; 0x2c
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f107 0220 	add.w	r2, r7, #32
 8003afa:	4413      	add	r3, r2
 8003afc:	3b14      	subs	r3, #20
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0a:	dd09      	ble.n	8003b20 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8003b0c:	7ffb      	ldrb	r3, [r7, #31]
 8003b0e:	222c      	movs	r2, #44	; 0x2c
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003b1e:	e027      	b.n	8003b70 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8003b20:	7ffb      	ldrb	r3, [r7, #31]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f107 0220 	add.w	r2, r7, #32
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b14      	subs	r3, #20
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d51a      	bpl.n	8003b70 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	222c      	movs	r2, #44	; 0x2c
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4413      	add	r3, r2
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8003b4c:	7ffb      	ldrb	r3, [r7, #31]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f107 0220 	add.w	r2, r7, #32
 8003b54:	4413      	add	r3, r2
 8003b56:	3b14      	subs	r3, #20
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	7ffb      	ldrb	r3, [r7, #31]
 8003b5e:	eef1 7a67 	vneg.f32	s15, s15
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f107 0220 	add.w	r2, r7, #32
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b14      	subs	r3, #20
 8003b6c:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003b70:	7ffb      	ldrb	r3, [r7, #31]
 8003b72:	222c      	movs	r2, #44	; 0x2c
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f107 0220 	add.w	r2, r7, #32
 8003b92:	4413      	add	r3, r2
 8003b94:	3b14      	subs	r3, #20
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	222c      	movs	r2, #44	; 0x2c
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb6:	ee17 2a90 	vmov	r2, s15
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
 8003bbe:	222c      	movs	r2, #44	; 0x2c
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bca:	7ffb      	ldrb	r3, [r7, #31]
 8003bcc:	222c      	movs	r2, #44	; 0x2c
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	7ffb      	ldrb	r3, [r7, #31]
 8003bda:	202c      	movs	r0, #44	; 0x2c
 8003bdc:	fb00 f303 	mul.w	r3, r0, r3
 8003be0:	69b8      	ldr	r0, [r7, #24]
 8003be2:	4403      	add	r3, r0
 8003be4:	440a      	add	r2, r1
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8003be8:	7ffb      	ldrb	r3, [r7, #31]
 8003bea:	222c      	movs	r2, #44	; 0x2c
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	440b      	add	r3, r1
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d90e      	bls.n	8003c26 <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
 8003c0a:	222c      	movs	r2, #44	; 0x2c
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	441a      	add	r2, r3
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	440b      	add	r3, r1
 8003c20:	6a12      	ldr	r2, [r2, #32]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
 8003c24:	e017      	b.n	8003c56 <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8003c26:	7ffb      	ldrb	r3, [r7, #31]
 8003c28:	222c      	movs	r2, #44	; 0x2c
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	440b      	add	r3, r1
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d107      	bne.n	8003c56 <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	222c      	movs	r2, #44	; 0x2c
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4413      	add	r3, r2
 8003c52:	2200      	movs	r2, #0
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	f67f af33 	bls.w	8003aca <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c64:	2300      	movs	r3, #0
 8003c66:	77bb      	strb	r3, [r7, #30]
 8003c68:	e14f      	b.n	8003f0a <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003c6a:	7fbb      	ldrb	r3, [r7, #30]
 8003c6c:	222c      	movs	r2, #44	; 0x2c
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	7fba      	ldrb	r2, [r7, #30]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f202 	mul.w	r2, r1, r2
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	440a      	add	r2, r1
 8003c82:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	bf0c      	ite	eq
 8003c8a:	2201      	moveq	r2, #1
 8003c8c:	2200      	movne	r2, #0
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	3202      	adds	r2, #2
 8003c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8003c9a:	7fbb      	ldrb	r3, [r7, #30]
 8003c9c:	222c      	movs	r2, #44	; 0x2c
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	7fba      	ldrb	r2, [r7, #30]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f202 	mul.w	r2, r1, r2
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	bf0c      	ite	eq
 8003cba:	2201      	moveq	r2, #1
 8003cbc:	2200      	movne	r2, #0
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cca:	e07b      	b.n	8003dc4 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003ccc:	7fbb      	ldrb	r3, [r7, #30]
 8003cce:	222c      	movs	r2, #44	; 0x2c
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	7fba      	ldrb	r2, [r7, #30]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f202 	mul.w	r2, r1, r2
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2201      	moveq	r2, #1
 8003cee:	2200      	movne	r2, #0
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	3202      	adds	r2, #2
 8003cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d118      	bne.n	8003d2e <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003cfc:	7fbb      	ldrb	r3, [r7, #30]
 8003cfe:	222c      	movs	r2, #44	; 0x2c
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4413      	add	r3, r2
 8003d08:	7fba      	ldrb	r2, [r7, #30]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f202 	mul.w	r2, r1, r2
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	440a      	add	r2, r1
 8003d14:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2201      	moveq	r2, #1
 8003d1e:	2200      	movne	r2, #0
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6393      	str	r3, [r2, #56]	; 0x38
 8003d2c:	e04a      	b.n	8003dc4 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003d2e:	7fbb      	ldrb	r3, [r7, #30]
 8003d30:	222c      	movs	r2, #44	; 0x2c
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	7fba      	ldrb	r2, [r7, #30]
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	fb01 f202 	mul.w	r2, r1, r2
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	440a      	add	r2, r1
 8003d46:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2201      	moveq	r2, #1
 8003d50:	2200      	movne	r2, #0
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	3202      	adds	r2, #2
 8003d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11a      	bne.n	8003d94 <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003d5e:	7fbb      	ldrb	r3, [r7, #30]
 8003d60:	222c      	movs	r2, #44	; 0x2c
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	7fba      	ldrb	r2, [r7, #30]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f202 	mul.w	r2, r1, r2
 8003d72:	69b9      	ldr	r1, [r7, #24]
 8003d74:	440a      	add	r2, r1
 8003d76:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003d7a:	2a00      	cmp	r2, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2201      	moveq	r2, #1
 8003d80:	2200      	movne	r2, #0
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003d8e:	e019      	b.n	8003dc4 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003d90:	20005648 	.word	0x20005648
 8003d94:	7fbb      	ldrb	r3, [r7, #30]
 8003d96:	222c      	movs	r2, #44	; 0x2c
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	7fba      	ldrb	r2, [r7, #30]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f202 	mul.w	r2, r1, r2
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	440a      	add	r2, r1
 8003dac:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2201      	moveq	r2, #1
 8003db6:	2200      	movne	r2, #0
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8003dc4:	7fbb      	ldrb	r3, [r7, #30]
 8003dc6:	222c      	movs	r2, #44	; 0x2c
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	7fba      	ldrb	r2, [r7, #30]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f202 	mul.w	r2, r1, r2
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003de0:	3202      	adds	r2, #2
 8003de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d119      	bne.n	8003e1e <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8003dea:	7fbb      	ldrb	r3, [r7, #30]
 8003dec:	222c      	movs	r2, #44	; 0x2c
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	441a      	add	r2, r3
 8003df6:	7fbb      	ldrb	r3, [r7, #30]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	440b      	add	r3, r1
 8003e02:	7fb9      	ldrb	r1, [r7, #30]
 8003e04:	202c      	movs	r0, #44	; 0x2c
 8003e06:	fb00 f101 	mul.w	r1, r0, r1
 8003e0a:	69b8      	ldr	r0, [r7, #24]
 8003e0c:	4401      	add	r1, r0
 8003e0e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e1c:	e072      	b.n	8003f04 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003e1e:	7fbb      	ldrb	r3, [r7, #30]
 8003e20:	222c      	movs	r2, #44	; 0x2c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	7fba      	ldrb	r2, [r7, #30]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f202 	mul.w	r2, r1, r2
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	440a      	add	r2, r1
 8003e36:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003e3a:	3202      	adds	r2, #2
 8003e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d119      	bne.n	8003e78 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8003e44:	7fbb      	ldrb	r3, [r7, #30]
 8003e46:	222c      	movs	r2, #44	; 0x2c
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	7fba      	ldrb	r2, [r7, #30]
 8003e52:	212c      	movs	r1, #44	; 0x2c
 8003e54:	fb01 f202 	mul.w	r2, r1, r2
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	7fb9      	ldrb	r1, [r7, #30]
 8003e5e:	202c      	movs	r0, #44	; 0x2c
 8003e60:	fb00 f101 	mul.w	r1, r0, r1
 8003e64:	69b8      	ldr	r0, [r7, #24]
 8003e66:	4401      	add	r1, r0
 8003e68:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003e6c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	6393      	str	r3, [r2, #56]	; 0x38
 8003e76:	e045      	b.n	8003f04 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003e78:	7fbb      	ldrb	r3, [r7, #30]
 8003e7a:	222c      	movs	r2, #44	; 0x2c
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	7fba      	ldrb	r2, [r7, #30]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f202 	mul.w	r2, r1, r2
 8003e8c:	69b9      	ldr	r1, [r7, #24]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003e94:	3202      	adds	r2, #2
 8003e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d119      	bne.n	8003ed2 <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8003e9e:	7fbb      	ldrb	r3, [r7, #30]
 8003ea0:	222c      	movs	r2, #44	; 0x2c
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	7fba      	ldrb	r2, [r7, #30]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f202 	mul.w	r2, r1, r2
 8003eb2:	69b9      	ldr	r1, [r7, #24]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	7fb9      	ldrb	r1, [r7, #30]
 8003eb8:	202c      	movs	r0, #44	; 0x2c
 8003eba:	fb00 f101 	mul.w	r1, r0, r1
 8003ebe:	69b8      	ldr	r0, [r7, #24]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003ec6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ed0:	e018      	b.n	8003f04 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003ed2:	7fbb      	ldrb	r3, [r7, #30]
 8003ed4:	222c      	movs	r2, #44	; 0x2c
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4413      	add	r3, r2
 8003ede:	7fba      	ldrb	r2, [r7, #30]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f202 	mul.w	r2, r1, r2
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	440a      	add	r2, r1
 8003eea:	7fb9      	ldrb	r1, [r7, #30]
 8003eec:	202c      	movs	r0, #44	; 0x2c
 8003eee:	fb00 f101 	mul.w	r1, r0, r1
 8003ef2:	69b8      	ldr	r0, [r7, #24]
 8003ef4:	4401      	add	r1, r0
 8003ef6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003efa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003f04:	7fbb      	ldrb	r3, [r7, #30]
 8003f06:	3301      	adds	r3, #1
 8003f08:	77bb      	strb	r3, [r7, #30]
 8003f0a:	7fbb      	ldrb	r3, [r7, #30]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f67f aeac 	bls.w	8003c6a <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	3724      	adds	r7, #36	; 0x24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003f20:	b5b0      	push	{r4, r5, r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <DIFFDRIVE_ENCODER_CaptureMeasure+0x218>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f2e:	613b      	str	r3, [r7, #16]
	int32_t tmp_32, counter_max_32;
	int16_t tmp_16, counter_max_16;

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
 8003f34:	e0f3      	b.n	800411e <DIFFDRIVE_ENCODER_CaptureMeasure+0x1fe>
		// 32 bit timer
		if( tmpsens[side].tim_arr_resolution == 32 ){
 8003f36:	7dfa      	ldrb	r2, [r7, #23]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	461a      	mov	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	7a1b      	ldrb	r3, [r3, #8]
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d170      	bne.n	800402e <DIFFDRIVE_ENCODER_CaptureMeasure+0x10e>
			// Counter max int32 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_32= 0x7fffffff-tmpsens[side].resolution;
 8003f4c:	7dfa      	ldrb	r2, [r7, #23]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	461a      	mov	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f60:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800413c <DIFFDRIVE_ENCODER_CaptureMeasure+0x21c>
 8003f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6c:	ee17 3a90 	vmov	r3, s15
 8003f70:	60bb      	str	r3, [r7, #8]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003f72:	7dfa      	ldrb	r2, [r7, #23]
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1899      	adds	r1, r3, r2
 8003f82:	7dfa      	ldrb	r2, [r7, #23]
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	690a      	ldr	r2, [r1, #16]
 8003f94:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
			// 32 bit integer (signed) to have positive and negative values.
			tmp_32= (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003f96:	7dfa      	ldrb	r2, [r7, #23]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	607b      	str	r3, [r7, #4]

			// If counter reached threshold value return an exception
			if( tmp_32 <= -(int32_t)counter_max_32 || tmp_32 >= (int32_t)counter_max_32  )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	dd03      	ble.n	8003fc0 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa0>
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	db01      	blt.n	8003fc4 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa4>
				return DIFFDRIVE_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b1      	b.n	8004128 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_32*(2*M_PI)/tmpsens[side].resolution;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fce:	ee17 0a90 	vmov	r0, s15
 8003fd2:	f7fc fad9 	bl	8000588 <__aeabi_f2d>
 8003fd6:	a356      	add	r3, pc, #344	; (adr r3, 8004130 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc fb2c 	bl	8000638 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	7dfa      	ldrb	r2, [r7, #23]
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fac4 	bl	8000588 <__aeabi_f2d>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4620      	mov	r0, r4
 8004006:	4629      	mov	r1, r5
 8004008:	f7fc fc40 	bl	800088c <__aeabi_ddiv>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	7dfa      	ldrb	r2, [r7, #23]
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	461a      	mov	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	189c      	adds	r4, r3, r2
 8004024:	f7fc fe00 	bl	8000c28 <__aeabi_d2f>
 8004028:	4603      	mov	r3, r0
 800402a:	6123      	str	r3, [r4, #16]
 800402c:	e074      	b.n	8004118 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1f8>
		}
		// 16 bit timer
		else{
			// Counter max int16 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_16= 0x7fff-tmpsens[side].resolution;
 800402e:	7dfa      	ldrb	r2, [r7, #23]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	461a      	mov	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004042:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004140 <DIFFDRIVE_ENCODER_CaptureMeasure+0x220>
 8004046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404e:	ee17 3a90 	vmov	r3, s15
 8004052:	81fb      	strh	r3, [r7, #14]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8004054:	7dfa      	ldrb	r2, [r7, #23]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	461a      	mov	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1899      	adds	r1, r3, r2
 8004064:	7dfa      	ldrb	r2, [r7, #23]
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	461a      	mov	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	690a      	ldr	r2, [r1, #16]
 8004076:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 16 bit unsigned integer so I cast in
			// 16 bit integer (signed) to have positive and negative values.
			tmp_16= (int16_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8004078:	7dfa      	ldrb	r2, [r7, #23]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	461a      	mov	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	81bb      	strh	r3, [r7, #12]

			// If counter reached threshold value return an exception
			if( tmp_16 <= -(int16_t)counter_max_16 || tmp_16 >= (int16_t)counter_max_16  )
 8004090:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004098:	425b      	negs	r3, r3
 800409a:	429a      	cmp	r2, r3
 800409c:	dd05      	ble.n	80040aa <DIFFDRIVE_ENCODER_CaptureMeasure+0x18a>
 800409e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	db01      	blt.n	80040ae <DIFFDRIVE_ENCODER_CaptureMeasure+0x18e>
				return DIFFDRIVE_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e03c      	b.n	8004128 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_16*(2*M_PI)/tmpsens[side].resolution;
 80040ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ba:	ee17 0a90 	vmov	r0, s15
 80040be:	f7fc fa63 	bl	8000588 <__aeabi_f2d>
 80040c2:	a31b      	add	r3, pc, #108	; (adr r3, 8004130 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc fab6 	bl	8000638 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4614      	mov	r4, r2
 80040d2:	461d      	mov	r5, r3
 80040d4:	7dfa      	ldrb	r2, [r7, #23]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	461a      	mov	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fa4e 	bl	8000588 <__aeabi_f2d>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc fbca 	bl	800088c <__aeabi_ddiv>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	7dfa      	ldrb	r2, [r7, #23]
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	461a      	mov	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	189c      	adds	r4, r3, r2
 8004110:	f7fc fd8a 	bl	8000c28 <__aeabi_d2f>
 8004114:	4603      	mov	r3, r0
 8004116:	6123      	str	r3, [r4, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	3301      	adds	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f67f af08 	bls.w	8003f36 <DIFFDRIVE_ENCODER_CaptureMeasure+0x16>
		}
	}

	return DIFFDRIVE_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bdb0      	pop	{r4, r5, r7, pc}
 8004130:	54442d18 	.word	0x54442d18
 8004134:	401921fb 	.word	0x401921fb
 8004138:	20005648 	.word	0x20005648
 800413c:	4f000000 	.word	0x4f000000
 8004140:	46fffe00 	.word	0x46fffe00

08004144 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <DIFFDRIVE_ENCODER_Reset+0x60>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004152:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8004154:	2300      	movs	r3, #0
 8004156:	71fb      	strb	r3, [r7, #7]
 8004158:	e019      	b.n	800418e <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 800415a:	79fa      	ldrb	r2, [r7, #7]
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	461a      	mov	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	4413      	add	r3, r2
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	461a      	mov	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	4413      	add	r3, r2
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	3301      	adds	r3, #1
 800418c:	71fb      	strb	r3, [r7, #7]
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d9e2      	bls.n	800415a <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20005648 	.word	0x20005648

080041a8 <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 80041ac:	4b07      	ldr	r3, [pc, #28]	; (80041cc <DIFFDRIVE_HISTORY_Start+0x24>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hdiffdrv->history.Enabled= true;
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <DIFFDRIVE_HISTORY_Start+0x24>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20005648 	.word	0x20005648

080041d0 <DIFFDRIVE_HISTORY_Resume>:


void DIFFDRIVE_HISTORY_Resume(void){
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0

	// Enable history again
	hdiffdrv->history.Enabled= true;
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <DIFFDRIVE_HISTORY_Resume+0x18>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20005648 	.word	0x20005648

080041ec <DIFFDRIVE_HISTORY_Suspend>:
	hdiffdrv->history.Enabled= false;

}


void DIFFDRIVE_HISTORY_Suspend(void){
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <DIFFDRIVE_HISTORY_Suspend+0x18>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20005648 	.word	0x20005648

08004208 <DIFFDRIVE_HISTORY_Update>:


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float v_target, float om_target){
 8004208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800420c:	b094      	sub	sp, #80	; 0x50
 800420e:	af00      	add	r7, sp, #0
 8004210:	ed87 0a01 	vstr	s0, [r7, #4]
 8004214:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8004218:	4b62      	ldr	r3, [pc, #392]	; (80043a4 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8004222:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <DIFFDRIVE_HISTORY_Update+0x19c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800422a:	643b      	str	r3, [r7, #64]	; 0x40
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 800422c:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f107 0408 	add.w	r4, r7, #8
 8004234:	f503 7502 	add.w	r5, r3, #520	; 0x208
 8004238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004244:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float theta;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004248:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Current index (using operator % to enroll k between 0 and max_sample; sample_cnt, instead, is unbounded)
	uint32_t k_curr= tmphist->sample_cnt%tmphist->max_sample;
 8004252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	fbb3 f1f2 	udiv	r1, r3, r2
 800425e:	fb02 f201 	mul.w	r2, r2, r1
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38

	// Update index
	tmphist->index= k_curr;
 8004266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426a:	60da      	str	r2, [r3, #12]

	// Previous index
	uint32_t k_prev;
	if( tmphist->sample_cnt != 0 )
 800426c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <DIFFDRIVE_HISTORY_Update+0x82>
		k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8004274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	3b01      	subs	r3, #1
 800427a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004282:	fb02 f201 	mul.w	r2, r2, r1
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Update history if is enabled
	if( tmphist->Enabled ){
 800428a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8210 	beq.w	80046b4 <DIFFDRIVE_HISTORY_Update+0x4ac>

		/* ------ Target history ------ */

		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004294:	2300      	movs	r3, #0
 8004296:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800429a:	e09a      	b.n	80043d2 <DIFFDRIVE_HISTORY_Update+0x1ca>

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k_curr].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 800429c:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80042a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a6:	6919      	ldr	r1, [r3, #16]
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	242c      	movs	r4, #44	; 0x2c
 80042ac:	fb04 f303 	mul.w	r3, r4, r3
 80042b0:	4419      	add	r1, r3
 80042b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042b6:	2468      	movs	r4, #104	; 0x68
 80042b8:	fb04 f202 	mul.w	r2, r4, r2
 80042bc:	4402      	add	r2, r0
 80042be:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	3304      	adds	r3, #4
 80042cc:	601a      	str	r2, [r3, #0]

			// Target wheel values
			tmphist->state_target[k_curr].wheel[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 80042ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042d2:	2268      	movs	r2, #104	; 0x68
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042da:	441a      	add	r2, r3
 80042dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042de:	6919      	ldr	r1, [r3, #16]
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	202c      	movs	r0, #44	; 0x2c
 80042e4:	fb00 f303 	mul.w	r3, r0, r3
 80042e8:	4419      	add	r1, r3
 80042ea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042f0:	3304      	adds	r3, #4
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3304      	adds	r3, #4
 80042f8:	601a      	str	r2, [r3, #0]
			if( tmphist->sample_cnt != 0 ){
 80042fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d052      	beq.n	80043a8 <DIFFDRIVE_HISTORY_Update+0x1a0>
				// This is the law: wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8004302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	441a      	add	r2, r3
 8004310:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004314:	3304      	adds	r3, #4
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	3304      	adds	r3, #4
 800431c:	ed93 7a00 	vldr	s14, [r3]
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8004320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	441a      	add	r2, r3
 800432e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004332:	3304      	adds	r3, #4
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	3304      	adds	r3, #4
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	ee37 7a67 	vsub.f32	s14, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8004342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	441a      	add	r2, r3
 8004350:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8004354:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004358:	ee67 7a27 	vmul.f32	s15, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 800435c:	3306      	adds	r3, #6
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	edc3 7a00 	vstr	s15, [r3]
				// To have continuity I set also the current variable at same value. Next step it will be update
				tmphist->state_target[k_curr].wheel_speed[side]= tmphist->state_target[k_prev].wheel_speed[side];
 8004368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	18d0      	adds	r0, r2, r3
 8004376:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	242c      	movs	r4, #44	; 0x2c
 8004382:	fb04 f303 	mul.w	r3, r4, r3
 8004386:	4419      	add	r1, r3
 8004388:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800438c:	3206      	adds	r2, #6
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	4402      	add	r2, r0
 8004392:	3204      	adds	r2, #4
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	3306      	adds	r3, #6
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3304      	adds	r3, #4
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e012      	b.n	80043c8 <DIFFDRIVE_HISTORY_Update+0x1c0>
 80043a2:	bf00      	nop
 80043a4:	20005648 	.word	0x20005648
			}
			else
				tmphist->state_target[k_curr].wheel_speed[side]= 0;
 80043a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	441a      	add	r2, r3
 80043b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80043ba:	3306      	adds	r3, #6
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	3304      	adds	r3, #4
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80043c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80043cc:	3301      	adds	r3, #1
 80043ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80043d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f67f af60 	bls.w	800429c <DIFFDRIVE_HISTORY_Update+0x94>
		}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 80043dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80c2 	beq.w	800456a <DIFFDRIVE_HISTORY_Update+0x362>
			theta= tmphist->state_target[k_prev].pose.theta;
 80043e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + v_target*Ts*cos(theta);
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f8bd 	bl	8000588 <__aeabi_f2d>
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
 8004412:	ed97 7a01 	vldr	s14, [r7, #4]
 8004416:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	ee17 0a90 	vmov	r0, s15
 8004422:	f7fc f8b1 	bl	8000588 <__aeabi_f2d>
 8004426:	4680      	mov	r8, r0
 8004428:	4689      	mov	r9, r1
 800442a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800442c:	f7fc f8ac 	bl	8000588 <__aeabi_f2d>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	ec43 2b10 	vmov	d0, r2, r3
 8004438:	f00d f9fa 	bl	8011830 <cos>
 800443c:	ec53 2b10 	vmov	r2, r3, d0
 8004440:	4640      	mov	r0, r8
 8004442:	4649      	mov	r1, r9
 8004444:	f7fc f8f8 	bl	8000638 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4620      	mov	r0, r4
 800444e:	4629      	mov	r1, r5
 8004450:	f7fb ff3c 	bl	80002cc <__adddf3>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	242c      	movs	r4, #44	; 0x2c
 8004464:	fb04 f303 	mul.w	r3, r4, r3
 8004468:	18d4      	adds	r4, r2, r3
 800446a:	f7fc fbdd 	bl	8000c28 <__aeabi_d2f>
 800446e:	4603      	mov	r3, r0
 8004470:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + v_target*Ts*sin(theta);
 8004472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc f880 	bl	8000588 <__aeabi_f2d>
 8004488:	4604      	mov	r4, r0
 800448a:	460d      	mov	r5, r1
 800448c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004490:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004498:	ee17 0a90 	vmov	r0, s15
 800449c:	f7fc f874 	bl	8000588 <__aeabi_f2d>
 80044a0:	4680      	mov	r8, r0
 80044a2:	4689      	mov	r9, r1
 80044a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044a6:	f7fc f86f 	bl	8000588 <__aeabi_f2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	ec43 2b10 	vmov	d0, r2, r3
 80044b2:	f00d fa0d 	bl	80118d0 <sin>
 80044b6:	ec53 2b10 	vmov	r2, r3, d0
 80044ba:	4640      	mov	r0, r8
 80044bc:	4649      	mov	r1, r9
 80044be:	f7fc f8bb 	bl	8000638 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4620      	mov	r0, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7fb feff 	bl	80002cc <__adddf3>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	242c      	movs	r4, #44	; 0x2c
 80044de:	fb04 f303 	mul.w	r3, r4, r3
 80044e2:	18d4      	adds	r4, r2, r3
 80044e4:	f7fc fba0 	bl	8000c28 <__aeabi_d2f>
 80044e8:	4603      	mov	r3, r0
 80044ea:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  tmphist->state_target[k_prev].pose.theta + om_target*Ts;
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80044fe:	edd7 6a00 	vldr	s13, [r7]
 8004502:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800450a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	212c      	movs	r1, #44	; 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451c:	edc3 7a02 	vstr	s15, [r3, #8]
			// The law is: pose(k)= pose(k-1) + TrajSpeed(k-1)*Ts, because is a discrete time Dynamic System
			// so here I update previous speed
			tmphist->state_target[k_prev].pose.v= v_target;
 8004520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004526:	212c      	movs	r1, #44	; 0x2c
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	4413      	add	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_prev].pose.om= om_target;
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	611a      	str	r2, [r3, #16]
			// To have continuity I set also the current variable at same value. Next step it will be update
			tmphist->state_target[k_curr].pose.v= v_target;
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_curr].pose.om= om_target;
 8004556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	212c      	movs	r1, #44	; 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	611a      	str	r2, [r3, #16]
 8004568:	e065      	b.n	8004636 <DIFFDRIVE_HISTORY_Update+0x42e>
		}else{
			theta= 0;
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  v_target*Ts*cos(theta);
 8004570:	ed97 7a01 	vldr	s14, [r7, #4]
 8004574:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457c:	ee17 0a90 	vmov	r0, s15
 8004580:	f7fc f802 	bl	8000588 <__aeabi_f2d>
 8004584:	4604      	mov	r4, r0
 8004586:	460d      	mov	r5, r1
 8004588:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800458a:	f7fb fffd 	bl	8000588 <__aeabi_f2d>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	ec43 2b10 	vmov	d0, r2, r3
 8004596:	f00d f94b 	bl	8011830 <cos>
 800459a:	ec53 2b10 	vmov	r2, r3, d0
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fc f849 	bl	8000638 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	242c      	movs	r4, #44	; 0x2c
 80045b6:	fb04 f303 	mul.w	r3, r4, r3
 80045ba:	18d4      	adds	r4, r2, r3
 80045bc:	f7fc fb34 	bl	8000c28 <__aeabi_d2f>
 80045c0:	4603      	mov	r3, r0
 80045c2:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  v_target*Ts*sin(theta);
 80045c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80045c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	ee17 0a90 	vmov	r0, s15
 80045d4:	f7fb ffd8 	bl	8000588 <__aeabi_f2d>
 80045d8:	4604      	mov	r4, r0
 80045da:	460d      	mov	r5, r1
 80045dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045de:	f7fb ffd3 	bl	8000588 <__aeabi_f2d>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	ec43 2b10 	vmov	d0, r2, r3
 80045ea:	f00d f971 	bl	80118d0 <sin>
 80045ee:	ec53 2b10 	vmov	r2, r3, d0
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc f81f 	bl	8000638 <__aeabi_dmul>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	242c      	movs	r4, #44	; 0x2c
 800460a:	fb04 f303 	mul.w	r3, r4, r3
 800460e:	18d4      	adds	r4, r2, r3
 8004610:	f7fc fb0a 	bl	8000c28 <__aeabi_d2f>
 8004614:	4603      	mov	r3, r0
 8004616:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  om_target*Ts;
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	212c      	movs	r1, #44	; 0x2c
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	4413      	add	r3, r2
 8004626:	ed97 7a00 	vldr	s14, [r7]
 800462a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		/* ------ State history ------ */

		// State measure, extracted from state register
		tmphist->state_measure[k_curr]= tmpstate;
 8004636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	461d      	mov	r5, r3
 8004646:	f107 0408 	add.w	r4, r7, #8
 800464a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004652:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004656:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// Assigning PREVIOUS speed, because the law is:
		// wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
		if( tmphist->sample_cnt != 0 ){
 800465a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d023      	beq.n	80046aa <DIFFDRIVE_HISTORY_Update+0x4a2>
			tmphist->state_measure[k_prev].wheel_speed[left ]= tmpstate.wheel_speed[left ];
 8004662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	61da      	str	r2, [r3, #28]
			tmphist->state_measure[k_prev].wheel_speed[right]= tmpstate.wheel_speed[right];
 8004674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004684:	621a      	str	r2, [r3, #32]
			// Same for trajectory speed
			tmphist->state_measure[k_prev].pose.v=  tmpstate.pose.v;
 8004686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	60da      	str	r2, [r3, #12]
			tmphist->state_measure[k_prev].pose.om= tmpstate.pose.om;
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	611a      	str	r2, [r3, #16]

		}

		/* Increment sample counter */
		tmphist->sample_cnt++;
 80046aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b2:	605a      	str	r2, [r3, #4]
	}
}
 80046b4:	bf00      	nop
 80046b6:	3750      	adds	r7, #80	; 0x50
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046be:	bf00      	nop

080046c0 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0

	// Disabling history recording
	DIFFDRIVE_HISTORY_Suspend();
 80046c6:	f7ff fd91 	bl	80041ec <DIFFDRIVE_HISTORY_Suspend>

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80046d2:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d30e      	bcc.n	80046fe <DIFFDRIVE_HISTORY_Get_Init+0x3e>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80046f2:	fb02 f201 	mul.w	r2, r2, r1
 80046f6:	1a9a      	subs	r2, r3, r2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 80046fc:	e002      	b.n	8004704 <DIFFDRIVE_HISTORY_Get_Init+0x44>
		tmphist->index= 0;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20005648 	.word	0x20005648

08004710 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8004710:	b4b0      	push	{r4, r5, r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <DIFFDRIVE_HISTORY_Get_Sample+0xb4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004722:	60fb      	str	r3, [r7, #12]

	if( state_measure != NULL )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d012      	beq.n	8004750 <DIFFDRIVE_HISTORY_Get_Sample+0x40>
		*state_measure= tmphist->state_measure[tmphist->index];
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800474c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if( state_target != NULL )
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <DIFFDRIVE_HISTORY_Get_Sample+0x6c>
		*state_target = tmphist->state_target[tmphist->index];
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4614      	mov	r4, r2
 800476a:	461d      	mov	r5, r3
 800476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004778:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// If history is disabled (it means that I read history after the movement happened) update index.
	// Otherwise just read current sample.
	if( !(tmphist->Enabled) ){
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
 		// Update index for next step reading
		if( tmphist->sample_cnt >= tmphist->max_sample )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d30c      	bcc.n	80047b0 <DIFFDRIVE_HISTORY_Get_Sample+0xa0>
			tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80047a4:	fb02 f201 	mul.w	r2, r2, r1
 80047a8:	1a9a      	subs	r2, r3, r2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	60da      	str	r2, [r3, #12]
		else
			tmphist->index++;
	}
}
 80047ae:	e004      	b.n	80047ba <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
			tmphist->index++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	60da      	str	r2, [r3, #12]
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bcb0      	pop	{r4, r5, r7}
 80047c2:	4770      	bx	lr
 80047c4:	20005648 	.word	0x20005648

080047c8 <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0

	// Reset Encoders
	DIFFDRIVE_ENCODER_Reset();
 80047cc:	f7ff fcba 	bl	8004144 <DIFFDRIVE_ENCODER_Reset>

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80047d0:	f000 f81a 	bl	8004808 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 80047d4:	f7ff fce8 	bl	80041a8 <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 80047d8:	f000 f8b4 	bl	8004944 <DIFFDRIVE_TIMING_Start>

}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}

080047e0 <DIFFDRIVE_CONTROL_Resume>:

void DIFFDRIVE_CONTROL_Resume(void){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80047e4:	f000 f810 	bl	8004808 <DIFFDRIVE_CONTROL_Reset>

	// Enabling again history
	DIFFDRIVE_HISTORY_Resume();
 80047e8:	f7ff fcf2 	bl	80041d0 <DIFFDRIVE_HISTORY_Resume>

	// Restart control timing
	DIFFDRIVE_TIMING_Start();
 80047ec:	f000 f8aa 	bl	8004944 <DIFFDRIVE_TIMING_Start>

}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <DIFFDRIVE_CONTROL_Suspend>:
	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();

}

void DIFFDRIVE_CONTROL_Suspend(void){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0

	// Disabling history
	DIFFDRIVE_HISTORY_Suspend();
 80047f8:	f7ff fcf8 	bl	80041ec <DIFFDRIVE_HISTORY_Suspend>

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 80047fc:	f000 f8bc 	bl	8004978 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8004800:	f7ff f946 	bl	8003a90 <DIFFDRIVE_MOTOR_Stop>

}
 8004804:	bf00      	nop
 8004806:	bd80      	pop	{r7, pc}

08004808 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 800480e:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004816:	613b      	str	r3, [r7, #16]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <DIFFDRIVE_CONTROL_Reset+0x138>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004820:	60fb      	str	r3, [r7, #12]

	// Capture current wheel measure
	DIFFDRIVE_ENCODER_CaptureMeasure();
 8004822:	f7ff fb7d 	bl	8003f20 <DIFFDRIVE_ENCODER_CaptureMeasure>

	// Update diffDrive state (input is {0,0} because at restart i guess input voltage is zero)
	DIFFDRIVE_STATE_Update((float[2]){0,0});
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	463b      	mov	r3, r7
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f8e5 	bl	8004a04 <DIFFDRIVE_STATE_Update>

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
 800483e:	e021      	b.n	8004884 <DIFFDRIVE_CONTROL_Reset+0x7c>

		// Reset feed-forward buffer with initial values the same with measured ones
		FEEDFORWARD_Reset(&hctrl[side].fdfrwrd, hdiffdrv->state.wheel[side]);
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2268      	movs	r2, #104	; 0x68
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	4619      	mov	r1, r3
 800484e:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	3386      	adds	r3, #134	; 0x86
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	eeb0 0a67 	vmov.f32	s0, s15
 8004864:	4608      	mov	r0, r1
 8004866:	f000 fd1b 	bl	80052a0 <FEEDFORWARD_Reset>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2268      	movs	r2, #104	; 0x68
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	3334      	adds	r3, #52	; 0x34
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fe7a 	bl	8005572 <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	3301      	adds	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d9da      	bls.n	8004840 <DIFFDRIVE_CONTROL_Reset+0x38>
	}

	// If a reset occurred let converge pose target and pose measure. Because it's like that control start again
	// from a new initial point.
	uint32_t k_curr= tmphist->index;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	60bb      	str	r3, [r7, #8]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8004890:	2300      	movs	r3, #0
 8004892:	75bb      	strb	r3, [r7, #22]
 8004894:	e01c      	b.n	80048d0 <DIFFDRIVE_CONTROL_Reset+0xc8>
		tmphist->state_target[k_curr].wheel[side]= tmphist->state_measure[k_curr].wheel[side];
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	18d0      	adds	r0, r2, r3
 80048a4:	7dba      	ldrb	r2, [r7, #22]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	242c      	movs	r4, #44	; 0x2c
 80048ae:	fb04 f303 	mul.w	r3, r4, r3
 80048b2:	4419      	add	r1, r3
 80048b4:	7dbb      	ldrb	r3, [r7, #22]
 80048b6:	3204      	adds	r2, #4
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4402      	add	r2, r0
 80048bc:	3204      	adds	r2, #4
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	3304      	adds	r3, #4
 80048c8:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 80048ca:	7dbb      	ldrb	r3, [r7, #22]
 80048cc:	3301      	adds	r3, #1
 80048ce:	75bb      	strb	r3, [r7, #22]
 80048d0:	7dbb      	ldrb	r3, [r7, #22]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d9df      	bls.n	8004896 <DIFFDRIVE_CONTROL_Reset+0x8e>
	tmphist->state_target[k_curr].pose.theta= tmphist->state_measure[k_curr].pose.theta;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6919      	ldr	r1, [r3, #16]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	202c      	movs	r0, #44	; 0x2c
 80048ec:	fb00 f303 	mul.w	r3, r0, r3
 80048f0:	440b      	add	r3, r1
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	609a      	str	r2, [r3, #8]
	tmphist->state_target[k_curr].pose.x_a=   tmphist->state_measure[k_curr].pose.x_a;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6919      	ldr	r1, [r3, #16]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	202c      	movs	r0, #44	; 0x2c
 800490c:	fb00 f303 	mul.w	r3, r0, r3
 8004910:	440b      	add	r3, r1
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	601a      	str	r2, [r3, #0]
	tmphist->state_target[k_curr].pose.y_a=   tmphist->state_measure[k_curr].pose.y_a;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6919      	ldr	r1, [r3, #16]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	202c      	movs	r0, #44	; 0x2c
 800492c:	fb00 f303 	mul.w	r3, r0, r3
 8004930:	440b      	add	r3, r1
 8004932:	6852      	ldr	r2, [r2, #4]
 8004934:	605a      	str	r2, [r3, #4]

}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd90      	pop	{r4, r7, pc}
 800493e:	bf00      	nop
 8004940:	20005648 	.word	0x20005648

08004944 <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_
	// At starting take the only one available token
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, 0);
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <DIFFDRIVE_TIMING_Start+0x30>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f005 f8d5 	bl	8009b04 <osSemaphoreAcquire>
 800495a:	6078      	str	r0, [r7, #4]
	(void)stat;
#endif
	// Starting timer in interrupt mode for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <DIFFDRIVE_TIMING_Start+0x30>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004964:	4618      	mov	r0, r3
 8004966:	f002 fc09 	bl	800717c <HAL_TIM_Base_Start_IT>

}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20005648 	.word	0x20005648

08004978 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <DIFFDRIVE_TIMING_Stop+0x24>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fc69 	bl	800725c <HAL_TIM_Base_Stop_IT>

#ifdef DIFFDRIVE_RTOS_V_
	// Try to release a token when timing is being stopped (if the token was already released, by callback, it doesn't mind)
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <DIFFDRIVE_TIMING_Stop+0x24>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004992:	4618      	mov	r0, r3
 8004994:	f005 f908 	bl	8009ba8 <osSemaphoreRelease>
#endif

}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20005648 	.word	0x20005648

080049a0 <DIFFDRIVE_TIMING_Wait>:
#ifdef DIFFDRIVE_DEBUG_TIMING_
	// Variable used to check system timing
	uint32_t tic=0, toc[100], i_=0;
#endif

void DIFFDRIVE_TIMING_Wait(void){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_

	// Wait for an available token (TIMING_Callback function will release the only token when invoked by ISR)
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, osWaitForever);
 80049a6:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <DIFFDRIVE_TIMING_Wait+0x54>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049b2:	4618      	mov	r0, r3
 80049b4:	f005 f8a6 	bl	8009b04 <osSemaphoreAcquire>
 80049b8:	6078      	str	r0, [r7, #4]
	(void)stat;

#ifdef DIFFDRIVE_DEBUG_TIMING_

			// Check if control timing is really working
			if( i_ < sizeof(toc)/sizeof(uint32_t) )
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <DIFFDRIVE_TIMING_Wait+0x58>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b63      	cmp	r3, #99	; 0x63
 80049c0:	d80a      	bhi.n	80049d8 <DIFFDRIVE_TIMING_Wait+0x38>
				toc[i_]= osKernelGetTickCount()-tic;
 80049c2:	f004 ff33 	bl	800982c <osKernelGetTickCount>
 80049c6:	4601      	mov	r1, r0
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <DIFFDRIVE_TIMING_Wait+0x5c>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <DIFFDRIVE_TIMING_Wait+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1a8a      	subs	r2, r1, r2
 80049d2:	490b      	ldr	r1, [pc, #44]	; (8004a00 <DIFFDRIVE_TIMING_Wait+0x60>)
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i_++;
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <DIFFDRIVE_TIMING_Wait+0x58>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <DIFFDRIVE_TIMING_Wait+0x58>)
 80049e0:	6013      	str	r3, [r2, #0]

			tic= osKernelGetTickCount();
 80049e2:	f004 ff23 	bl	800982c <osKernelGetTickCount>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4a04      	ldr	r2, [pc, #16]	; (80049fc <DIFFDRIVE_TIMING_Wait+0x5c>)
 80049ea:	6013      	str	r3, [r2, #0]
			tic=  HAL_GetTick();

#endif /* DIFFDRIVE_DEBUG_TIMING_ */
#endif /* DIFFDRIVE_RTOS_V */

}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20005648 	.word	0x20005648
 80049f8:	2000021c 	.word	0x2000021c
 80049fc:	20000218 	.word	0x20000218
 8004a00:	200054b8 	.word	0x200054b8

08004a04 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8004a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a08:	b08a      	sub	sp, #40	; 0x28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8004a0e:	4ba4      	ldr	r3, [pc, #656]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a16:	623b      	str	r3, [r7, #32]

	float min_volt;
	float max_volt;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004a18:	4ba1      	ldr	r3, [pc, #644]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a20:	61fb      	str	r3, [r7, #28]

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a28:	e0ad      	b.n	8004b86 <DIFFDRIVE_STATE_Update+0x182>
		tmpstate->wheel[side]=        hdiffdrv->encoder[side].current_value;
 8004a2a:	4b9d      	ldr	r3, [pc, #628]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a32:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6a39      	ldr	r1, [r7, #32]
 8004a48:	1d03      	adds	r3, r0, #4
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3304      	adds	r3, #4
 8004a50:	601a      	str	r2, [r3, #0]
		tmpstate->wheel_speed[side]= (hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value)/Ts;
 8004a52:	4b93      	ldr	r3, [pc, #588]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	440b      	add	r3, r1
 8004a64:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004a68:	ed93 7a00 	vldr	s14, [r3]
 8004a6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004a82:	edd3 7a00 	vldr	s15, [r3]
 8004a86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	3306      	adds	r3, #6
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	edc3 7a00 	vstr	s15, [r3]

		min_volt= hdiffdrv->motor[side].min_voltage;
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	33c8      	adds	r3, #200	; 0xc8
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	617b      	str	r3, [r7, #20]
		max_volt= hdiffdrv->motor[side].max_voltage;
 8004aba:	4b79      	ldr	r3, [pc, #484]	; (8004ca0 <DIFFDRIVE_STATE_Update+0x29c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	33c4      	adds	r3, #196	; 0xc4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]

		// Input Saturation limits, for "measured" tension-------------------------
		if( input[side] > (max_volt-min_volt))
 8004ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	ed93 7a00 	vldr	s14, [r3]
 8004ade:	edd7 6a04 	vldr	s13, [r7, #16]
 8004ae2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	dd0f      	ble.n	8004b14 <DIFFDRIVE_STATE_Update+0x110>
			tmpstate->input[side]= max_volt-min_volt;
 8004af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004af8:	ed97 7a04 	vldr	s14, [r7, #16]
 8004afc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	3308      	adds	r3, #8
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	edc3 7a00 	vstr	s15, [r3]
 8004b12:	e033      	b.n	8004b7c <DIFFDRIVE_STATE_Update+0x178>
		else
		if( input[side] < -(max_volt-min_volt))
 8004b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	ed93 7a00 	vldr	s14, [r3]
 8004b22:	edd7 6a04 	vldr	s13, [r7, #16]
 8004b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b2e:	eef1 7a67 	vneg.f32	s15, s15
 8004b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	d511      	bpl.n	8004b60 <DIFFDRIVE_STATE_Update+0x15c>
			tmpstate->input[side]= -(max_volt-min_volt);
 8004b3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b4c:	eef1 7a67 	vneg.f32	s15, s15
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	3308      	adds	r3, #8
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	3304      	adds	r3, #4
 8004b5a:	edc3 7a00 	vstr	s15, [r3]
 8004b5e:	e00d      	b.n	8004b7c <DIFFDRIVE_STATE_Update+0x178>
		else
			tmpstate->input[side]= input[side];
 8004b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	441a      	add	r2, r3
 8004b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	6a39      	ldr	r1, [r7, #32]
 8004b72:	3308      	adds	r3, #8
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3304      	adds	r3, #4
 8004b7a:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b80:	3301      	adds	r3, #1
 8004b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	f67f af4d 	bls.w	8004a2a <DIFFDRIVE_STATE_Update+0x26>
		// ------------------------------------------------------------------------
	}

	// Compute and update current pose an speed
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v, &om,  tmpstate->wheel_speed);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f103 021c 	add.w	r2, r3, #28
 8004b96:	f107 0108 	add.w	r1, r7, #8
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f8e0 	bl	8004d64 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>

	theta= tmpstate->pose.theta;
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
	tmpstate->pose.x_a   +=  v*Ts*cos(theta);
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fcea 	bl	8000588 <__aeabi_f2d>
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	460d      	mov	r5, r1
 8004bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc4:	ee17 0a90 	vmov	r0, s15
 8004bc8:	f7fb fcde 	bl	8000588 <__aeabi_f2d>
 8004bcc:	4680      	mov	r8, r0
 8004bce:	4689      	mov	r9, r1
 8004bd0:	69b8      	ldr	r0, [r7, #24]
 8004bd2:	f7fb fcd9 	bl	8000588 <__aeabi_f2d>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	ec43 2b10 	vmov	d0, r2, r3
 8004bde:	f00c fe27 	bl	8011830 <cos>
 8004be2:	ec53 2b10 	vmov	r2, r3, d0
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f7fb fd25 	bl	8000638 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb fb69 	bl	80002cc <__adddf3>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7fc f811 	bl	8000c28 <__aeabi_d2f>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  v*Ts*sin(theta);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fb fcb9 	bl	8000588 <__aeabi_f2d>
 8004c16:	4604      	mov	r4, r0
 8004c18:	460d      	mov	r5, r1
 8004c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	ee17 0a90 	vmov	r0, s15
 8004c2a:	f7fb fcad 	bl	8000588 <__aeabi_f2d>
 8004c2e:	4680      	mov	r8, r0
 8004c30:	4689      	mov	r9, r1
 8004c32:	69b8      	ldr	r0, [r7, #24]
 8004c34:	f7fb fca8 	bl	8000588 <__aeabi_f2d>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	ec43 2b10 	vmov	d0, r2, r3
 8004c40:	f00c fe46 	bl	80118d0 <sin>
 8004c44:	ec53 2b10 	vmov	r2, r3, d0
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	f7fb fcf4 	bl	8000638 <__aeabi_dmul>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7fb fb38 	bl	80002cc <__adddf3>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7fb ffe0 	bl	8000c28 <__aeabi_d2f>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  om*Ts;
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c74:	edd7 6a02 	vldr	s13, [r7, #8]
 8004c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	edc3 7a02 	vstr	s15, [r3, #8]
	tmpstate->pose.v=  v;
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	60da      	str	r2, [r3, #12]
	tmpstate->pose.om= om;
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	611a      	str	r2, [r3, #16]
}
 8004c96:	bf00      	nop
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ca0:	20005648 	.word	0x20005648

08004ca4 <DIFFDRIVE_TrajectorySpeed2WheelAngle>:


void DIFFDRIVE_TrajectorySpeed2WheelAngle(float* wheel, float v, float om){
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cb0:	edc7 0a01 	vstr	s1, [r7, #4]

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cbc:	61fb      	str	r3, [r7, #28]

	float r= hdiffdrv->mech_prmtr.r;
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004cc6:	61bb      	str	r3, [r7, #24]
	float l= hdiffdrv->mech_prmtr.l;
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8004cd0:	617b      	str	r3, [r7, #20]

	// Wheel target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d03d      	beq.n	8004d54 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xb0>
		wheel[left ] +=  (v/r - l*om/r)*Ts;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	ed93 7a00 	vldr	s14, [r3]
 8004cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ce6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004cea:	ed97 6a05 	vldr	s12, [r7, #20]
 8004cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf2:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004cf6:	ed97 6a06 	vldr	s12, [r7, #24]
 8004cfa:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004cfe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d02:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  (v/r + l*om/r)*Ts;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	ed93 7a00 	vldr	s14, [r3]
 8004d1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d24:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004d28:	ed97 6a05 	vldr	s12, [r7, #20]
 8004d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d30:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004d34:	ed97 6a06 	vldr	s12, [r7, #24]
 8004d38:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004d3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d50:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8004d54:	bf00      	nop
 8004d56:	3724      	adds	r7, #36	; 0x24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20005648 	.word	0x20005648

08004d64 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>:

void DIFFDRIVE_WheelSpeed2TrajectorySpeed(float* v_p, float* om_p, float* wheel_speed){
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004d70:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004d78:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8004d82:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars v_p and om_p because are pointers)
	if( v_p != NULL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d013      	beq.n	8004db2 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x4e>
		*v_p= (wheel_speed[right] + wheel_speed[left])*r/2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	edd3 7a00 	vldr	s15, [r3]
 8004d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004da4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	edc3 7a00 	vstr	s15, [r3]

	if( om_p != NULL )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x80>
		*om_p= (wheel_speed[right] - wheel_speed[left])*r/(2*l);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	ed93 7a00 	vldr	s14, [r3]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dd6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	edc3 7a00 	vstr	s15, [r3]

}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20005648 	.word	0x20005648

08004df4 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b08b      	sub	sp, #44	; 0x2c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004dfc:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004e04:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8004e06:	f7ff fdcb 	bl	80049a0 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8004e0a:	f7ff f889 	bl	8003f20 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d10a      	bne.n	8004e2e <DIFFDRIVE_CONTROL_WheelStep+0x3a>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8004e18:	f7ff fcf6 	bl	8004808 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e34:	e06f      	b.n	8004f16 <DIFFDRIVE_CONTROL_WheelStep+0x122>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8004e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3a:	2268      	movs	r2, #104	; 0x68
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	6a3a      	ldr	r2, [r7, #32]
 8004e42:	4413      	add	r3, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	edd3 7a00 	vldr	s15, [r3]
 8004e54:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004e58:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	f000 fa78 	bl	8005352 <FEEDFORWARD_InversionControl>
 8004e62:	eef0 7a40 	vmov.f32	s15, s0
 8004e66:	00a3      	lsls	r3, r4, #2
 8004e68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3b20      	subs	r3, #32
 8004e70:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8004e74:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004e76:	6819      	ldr	r1, [r3, #0]
 8004e78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e92:	2268      	movs	r2, #104	; 0x68
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3b18      	subs	r3, #24
 8004eac:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8004eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb2:	2268      	movs	r2, #104	; 0x68
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004eca:	440b      	add	r3, r1
 8004ecc:	3b18      	subs	r3, #24
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	edd7 0a06 	vldr	s1, [r7, #24]
 8004ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 fb67 	bl	80055ae <PID_Control>
 8004ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004eee:	4413      	add	r3, r2
 8004ef0:	3b20      	subs	r3, #32
 8004ef2:	edd3 7a00 	vldr	s15, [r3]
 8004ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f04:	4413      	add	r3, r2
 8004f06:	3b20      	subs	r3, #32
 8004f08:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f10:	3301      	adds	r3, #1
 8004f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d98b      	bls.n	8004e36 <DIFFDRIVE_CONTROL_WheelStep+0x42>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fdc6 	bl	8003ab4 <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fd69 	bl	8004a04 <DIFFDRIVE_STATE_Update>

}
 8004f32:	bf00      	nop
 8004f34:	372c      	adds	r7, #44	; 0x2c
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20005648 	.word	0x20005648

08004f40 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8004f44:	f7ff fc40 	bl	80047c8 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8004f48:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004f58 <DIFFDRIVE_TrackingStart+0x18>
 8004f4c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004f58 <DIFFDRIVE_TrackingStart+0x18>
 8004f50:	f000 f810 	bl	8004f74 <DIFFDRIVE_TrackingStep>

}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	00000000 	.word	0x00000000

08004f5c <DIFFDRIVE_TrackingResume>:

void DIFFDRIVE_TrackingResume(void){
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0

	// Resume control
	DIFFDRIVE_CONTROL_Resume();
 8004f60:	f7ff fc3e 	bl	80047e0 <DIFFDRIVE_CONTROL_Resume>

}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <DIFFDRIVE_TrackingSuspend>:
	// Stop control
	DIFFDRIVE_CONTROL_Stop();

}

void DIFFDRIVE_TrackingSuspend(void){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0

	// Suspend control
	DIFFDRIVE_CONTROL_Suspend();
 8004f6c:	f7ff fc42 	bl	80047f4 <DIFFDRIVE_CONTROL_Suspend>

}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <DIFFDRIVE_TrackingStep>:

void DIFFDRIVE_TrackingStep(float v, float om){
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004f7e:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004f82:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <DIFFDRIVE_TrackingStep+0x78>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004f8a:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
 8004f90:	e010      	b.n	8004fb4 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2268      	movs	r2, #104	; 0x68
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	441a      	add	r2, r3
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	f107 0118 	add.w	r1, r7, #24
 8004fa8:	440b      	add	r3, r1
 8004faa:	3b10      	subs	r3, #16
 8004fac:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d9eb      	bls.n	8004f92 <DIFFDRIVE_TrackingStep+0x1e>

	// Computing newest target
	DIFFDRIVE_TrajectorySpeed2WheelAngle(newest_target, v, om);
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	edd7 0a00 	vldr	s1, [r7]
 8004fc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fe6c 	bl	8004ca4 <DIFFDRIVE_TrajectorySpeed2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff0f 	bl	8004df4 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(v, om);
 8004fd6:	edd7 0a00 	vldr	s1, [r7]
 8004fda:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fde:	f7ff f913 	bl	8004208 <DIFFDRIVE_HISTORY_Update>

}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20005648 	.word	0x20005648

08004ff0 <DIFFDRIVE_TIMING_PeriodElapsedCallback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

#ifdef DIFFDRIVE_RTOS_V_
	// Release the token
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <DIFFDRIVE_TIMING_PeriodElapsedCallback+0x20>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005000:	4618      	mov	r0, r3
 8005002:	f004 fdd1 	bl	8009ba8 <osSemaphoreRelease>
#else
	// Enabling timing flag
	hdiffdrv->timing.flag= true;
#endif

}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20005648 	.word	0x20005648

08005014 <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2104      	movs	r1, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f007 ff2f 	bl	800ce8c <calloc>
 800502e:	4603      	mov	r3, r0
 8005030:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	461d      	mov	r5, r3
 800504a:	f107 0410 	add.w	r4, r7, #16
 800504e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005052:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005056:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bdb0      	pop	{r4, r5, r7, pc}

08005062 <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e009      	b.n	800509a <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	dbf0      	blt.n	8005086 <MAF_Reset+0x24>
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03e      	beq.n	8005144 <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 80050dc:	2301      	movs	r3, #1
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e027      	b.n	8005132 <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80050f2:	fb02 f201 	mul.w	r2, r2, r1
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	ed93 7a00 	vldr	s14, [r3]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005112:	3b01      	subs	r3, #1
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	edd3 7a00 	vldr	s15, [r3]
 800511c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005120:	ed97 7a05 	vldr	s14, [r7, #20]
 8005124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005128:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	3301      	adds	r3, #1
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	ddd2      	ble.n	80050e2 <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e02f      	b.n	80051a4 <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	ed93 7a01 	vldr	s14, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	ed93 7a01 	vldr	s14, [r3, #4]
 800516a:	edd7 7a00 	vldr	s15, [r7]
 800516e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	edd3 6a01 	vldr	s13, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800518a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	3301      	adds	r3, #1
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80051b2:	fb02 f201 	mul.w	r2, r2, r1
 80051b6:	1a9a      	subs	r2, r3, r2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]

}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	885a      	ldrh	r2, [r3, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	889a      	ldrh	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8a1b      	ldrh	r3, [r3, #16]
 80051ec:	2104      	movs	r1, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f007 fe4c 	bl	800ce8c <calloc>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e00e      	b.n	8005220 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6999      	ldr	r1, [r3, #24]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8a1b      	ldrh	r3, [r3, #16]
 8005224:	461a      	mov	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4293      	cmp	r3, r2
 800522a:	dbea      	blt.n	8005202 <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8a5b      	ldrh	r3, [r3, #18]
 8005230:	2104      	movs	r1, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f007 fe2a 	bl	800ce8c <calloc>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e00e      	b.n	8005264 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	441a      	add	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	3301      	adds	r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8a5b      	ldrh	r3, [r3, #18]
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4293      	cmp	r3, r2
 800526e:	dbea      	blt.n	8005246 <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8a1b      	ldrh	r3, [r3, #16]
 8005274:	2104      	movs	r1, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f007 fe08 	bl	800ce8c <calloc>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8a5b      	ldrh	r3, [r3, #18]
 8005288:	2104      	movs	r1, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fdfe 	bl	800ce8c <calloc>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <FEEDFORWARD_Reset>:
	free(hctrl->target_buffer);
	free(hctrl->input_buffer);

}

void FEEDFORWARD_Reset(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	ed87 0a00 	vstr	s0, [r7]

	// Reset feed-forward target buffer, with all all initial conditon
	FEEDFORWARD_BufferInit(hctrl, target_init);
 80052ac:	ed97 0a00 	vldr	s0, [r7]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f804 	bl	80052be <FEEDFORWARD_BufferInit>

}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <FEEDFORWARD_BufferInit>:

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 80052be:	b490      	push	{r4, r7}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	ed87 0a00 	vstr	s0, [r7]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f107 040c 	add.w	r4, r7, #12
 80052d0:	3310      	adds	r3, #16
 80052d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 80052d8:	89bb      	ldrh	r3, [r7, #12]
 80052da:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t n_ma= arma.n_ma;
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	843b      	strh	r3, [r7, #32]
	uint16_t  tau= arma.tau;
 80052e0:	8a3b      	ldrh	r3, [r7, #16]
 80052e2:	83fb      	strh	r3, [r7, #30]

	// Complete first values with the same initial value
	for(int i= 0; i < n_ar; i++)
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	e009      	b.n	80052fe <FEEDFORWARD_BufferInit+0x40>
		hctrl->target_buffer[i]= target_init;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	601a      	str	r2, [r3, #0]
	for(int i= 0; i < n_ar; i++)
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	dbf1      	blt.n	80052ea <FEEDFORWARD_BufferInit+0x2c>

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800530a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800530c:	1e59      	subs	r1, r3, #1
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	1acb      	subs	r3, r1, r3
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	8c3b      	ldrh	r3, [r7, #32]
 8005322:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005326:	3b01      	subs	r3, #1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005336:	89bb      	ldrh	r3, [r7, #12]
 8005338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800533c:	3b01      	subs	r3, #1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005348:	bf00      	nop
 800534a:	3728      	adds	r7, #40	; 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc90      	pop	{r4, r7}
 8005350:	4770      	bx	lr

08005352 <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8005352:	b590      	push	{r4, r7, lr}
 8005354:	b08f      	sub	sp, #60	; 0x3c
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f107 040c 	add.w	r4, r7, #12
 800536a:	3310      	adds	r3, #16
 800536c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800536e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 8005372:	2300      	movs	r3, #0
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 8005376:	89bb      	ldrh	r3, [r7, #12]
 8005378:	3b01      	subs	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 800537c:	2300      	movs	r3, #0
 800537e:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	3b01      	subs	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
 8005398:	e019      	b.n	80053ce <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	1acb      	subs	r3, r1, r3
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	ed93 7a00 	vldr	s14, [r3]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80053c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	3301      	adds	r3, #1
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	429a      	cmp	r2, r3
 80053d4:	dde1      	ble.n	800539a <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	e01b      	b.n	8005414 <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	69f9      	ldr	r1, [r7, #28]
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	1acb      	subs	r3, r1, r3
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	eeb1 7a67 	vneg.f32	s14, s15
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	edd3 7a00 	vldr	s15, [r3]
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	3301      	adds	r3, #1
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	429a      	cmp	r2, r3
 800541a:	dcdf      	bgt.n	80053dc <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	ed93 7a00 	vldr	s14, [r3]
 8005422:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543a:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f808 	bl	8005452 <FEEDFORWARD_BufferUpdate>

	return input;
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	ee07 3a90 	vmov	s15, r3
}
 8005448:	eeb0 0a67 	vmov.f32	s0, s15
 800544c:	373c      	adds	r7, #60	; 0x3c
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}

08005452 <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8005452:	b490      	push	{r4, r7}
 8005454:	b088      	sub	sp, #32
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f107 0408 	add.w	r4, r7, #8
 8005460:	3310      	adds	r3, #16
 8005462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546c:	893b      	ldrh	r3, [r7, #8]
 800546e:	3b01      	subs	r3, #1
 8005470:	89b9      	ldrh	r1, [r7, #12]
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005488:	3b01      	subs	r3, #1
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800549e:	3b01      	subs	r3, #1
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e00f      	b.n	80054d0 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3301      	adds	r3, #1
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	893b      	ldrh	r3, [r7, #8]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	dbea      	blt.n	80054b0 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e00f      	b.n	8005500 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a19      	ldr	r1, [r3, #32]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3301      	adds	r3, #1
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	897b      	ldrh	r3, [r7, #10]
 8005502:	3b01      	subs	r3, #1
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	429a      	cmp	r2, r3
 8005508:	dbea      	blt.n	80054e0 <FEEDFORWARD_BufferUpdate+0x8e>

}
 800550a:	bf00      	nop
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bc90      	pop	{r4, r7}
 8005514:	4770      	bx	lr

08005516 <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_P= 0;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

	// Init Previous variables
	hpid->u_prev= 0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <PID_Reset>:



// Reset previous state and contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]

	hpid->u_P= 0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	625a      	str	r2, [r3, #36]	; 0x24

	hpid->u_prev= 0;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <PID_Control>:


float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 80055ae:	b480      	push	{r7}
 80055b0:	b089      	sub	sp, #36	; 0x24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80055ba:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 80055c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80055c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d0:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80055e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	edd3 6a05 	vldr	s13, [r3, #20]
 80055fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80055fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005602:	edd7 7a07 	vldr	s15, [r7, #28]
 8005606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800560a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	ed93 7a06 	vldr	s14, [r3, #24]
 800561a:	edd7 6a06 	vldr	s13, [r7, #24]
 800561e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005626:	ee67 6a27 	vmul.f32	s13, s14, s15
 800562a:	ed97 7a07 	vldr	s14, [r7, #28]
 800562e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Control Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	ed93 7a07 	vldr	s14, [r3, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	edd3 7a08 	vldr	s15, [r3, #32]
 8005644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800564e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005652:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	ee07 3a90 	vmov	s15, r3

}
 8005668:	eeb0 0a67 	vmov.f32	s0, s15
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <SERVO_Init>:


/*
 * Initialization
 */
void SERVO_Init(SERVO_HandleTypeDef* hservo){
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

	// Assign timer handler
	hservo->htim = hservo->Init.htim;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	609a      	str	r2, [r3, #8]

	/* Computing prescaler ad autoreload period to obtain an update event with frequency of SERVO_FREQ Hertz */

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(hservo->htim)*1/1e6 - 1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a76      	ldr	r2, [pc, #472]	; (8005868 <SERVO_Init+0x1f0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d017      	beq.n	80056c4 <SERVO_Init+0x4c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a74      	ldr	r2, [pc, #464]	; (800586c <SERVO_Init+0x1f4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d011      	beq.n	80056c4 <SERVO_Init+0x4c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a72      	ldr	r2, [pc, #456]	; (8005870 <SERVO_Init+0x1f8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <SERVO_Init+0x4c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a70      	ldr	r2, [pc, #448]	; (8005874 <SERVO_Init+0x1fc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d005      	beq.n	80056c4 <SERVO_Init+0x4c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6e      	ldr	r2, [pc, #440]	; (8005878 <SERVO_Init+0x200>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d114      	bne.n	80056ee <SERVO_Init+0x76>
 80056c4:	4b6d      	ldr	r3, [pc, #436]	; (800587c <SERVO_Init+0x204>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <SERVO_Init+0x66>
 80056d0:	f000 ffd2 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa ff34 	bl	8000544 <__aeabi_ui2d>
 80056dc:	e01b      	b.n	8005716 <SERVO_Init+0x9e>
 80056de:	f000 ffcb 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 80056e2:	4603      	mov	r3, r0
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fa ff2c 	bl	8000544 <__aeabi_ui2d>
 80056ec:	e013      	b.n	8005716 <SERVO_Init+0x9e>
 80056ee:	4b63      	ldr	r3, [pc, #396]	; (800587c <SERVO_Init+0x204>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <SERVO_Init+0x90>
 80056fa:	f000 ffa9 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80056fe:	4603      	mov	r3, r0
 8005700:	4618      	mov	r0, r3
 8005702:	f7fa ff1f 	bl	8000544 <__aeabi_ui2d>
 8005706:	e006      	b.n	8005716 <SERVO_Init+0x9e>
 8005708:	f000 ffa2 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 800570c:	4603      	mov	r3, r0
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa ff17 	bl	8000544 <__aeabi_ui2d>
 8005716:	a352      	add	r3, pc, #328	; (adr r3, 8005860 <SERVO_Init+0x1e8>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fb f8b6 	bl	800088c <__aeabi_ddiv>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	4b54      	ldr	r3, [pc, #336]	; (8005880 <SERVO_Init+0x208>)
 800572e:	f7fa fdcb 	bl	80002c8 <__aeabi_dsub>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f7fb fa55 	bl	8000be8 <__aeabi_d2uiz>
 800573e:	4603      	mov	r3, r0
 8005740:	81fb      	strh	r3, [r7, #14]
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(hservo->htim)/( (prescaler+1)*SERVO_FREQ ) - 1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a47      	ldr	r2, [pc, #284]	; (8005868 <SERVO_Init+0x1f0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d017      	beq.n	800577e <SERVO_Init+0x106>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a45      	ldr	r2, [pc, #276]	; (800586c <SERVO_Init+0x1f4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d011      	beq.n	800577e <SERVO_Init+0x106>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a43      	ldr	r2, [pc, #268]	; (8005870 <SERVO_Init+0x1f8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <SERVO_Init+0x106>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a41      	ldr	r2, [pc, #260]	; (8005874 <SERVO_Init+0x1fc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d005      	beq.n	800577e <SERVO_Init+0x106>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <SERVO_Init+0x200>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10e      	bne.n	800579c <SERVO_Init+0x124>
 800577e:	4b3f      	ldr	r3, [pc, #252]	; (800587c <SERVO_Init+0x204>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <SERVO_Init+0x11a>
 800578a:	f000 ff75 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 800578e:	4603      	mov	r3, r0
 8005790:	e012      	b.n	80057b8 <SERVO_Init+0x140>
 8005792:	f000 ff71 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 8005796:	4603      	mov	r3, r0
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	e00d      	b.n	80057b8 <SERVO_Init+0x140>
 800579c:	4b37      	ldr	r3, [pc, #220]	; (800587c <SERVO_Init+0x204>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <SERVO_Init+0x138>
 80057a8:	f000 ff52 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80057ac:	4603      	mov	r3, r0
 80057ae:	e003      	b.n	80057b8 <SERVO_Init+0x140>
 80057b0:	f000 ff4e 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80057b4:	4603      	mov	r3, r0
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	89fa      	ldrh	r2, [r7, #14]
 80057ba:	3201      	adds	r2, #1
 80057bc:	2132      	movs	r1, #50	; 0x32
 80057be:	fb01 f202 	mul.w	r2, r1, r2
 80057c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	81bb      	strh	r3, [r7, #12]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(hservo->htim, prescaler);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	89fa      	ldrh	r2, [r7, #14]
 80057d4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(hservo->htim, autoreload);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	89ba      	ldrh	r2, [r7, #12]
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	89ba      	ldrh	r2, [r7, #12]
 80057e6:	60da      	str	r2, [r3, #12]

	// Compute min and max duty beats
	// min =  0  degree
	// max = 180 degree
	hservo->min_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MIN_PERC/100;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	3301      	adds	r3, #1
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80057fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005802:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005884 <SERVO_Init+0x20c>
 8005806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800580a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800580e:	ee17 2a90 	vmov	r2, s15
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]
	hservo->max_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MAX_PERC/100;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	3301      	adds	r3, #1
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005828:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005888 <SERVO_Init+0x210>
 800582c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005830:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005884 <SERVO_Init+0x20c>
 8005834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800583c:	ee17 2a90 	vmov	r2, s15
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	615a      	str	r2, [r3, #20]

	HAL_TIM_PWM_Start(hservo->htim, hservo->pwm_channel);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f001 fd9a 	bl	8007388 <HAL_TIM_PWM_Start>

}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	f3af 8000 	nop.w
 8005860:	00000000 	.word	0x00000000
 8005864:	412e8480 	.word	0x412e8480
 8005868:	40010000 	.word	0x40010000
 800586c:	40010400 	.word	0x40010400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800
 800587c:	40023800 	.word	0x40023800
 8005880:	3ff00000 	.word	0x3ff00000
 8005884:	42c80000 	.word	0x42c80000
 8005888:	4151999a 	.word	0x4151999a

0800588c <SERVO_SetDegree>:
 * Set degree for SERVO (it can move from 0 to 180 degree):
 *
 * num_duty_beats = (max – min)*deg/180 + min
 *
 */
void SERVO_SetDegree(SERVO_HandleTypeDef* hservo, float degree){
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	ed87 0a00 	vstr	s0, [r7]

	int num_beats = (hservo->max_duty_beats - hservo->min_duty_beats)*degree/180 + hservo->min_duty_beats;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058aa:	edd7 7a00 	vldr	s15, [r7]
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80058e4 <SERVO_SetDegree+0x58>
 80058b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ce:	ee17 3a90 	vmov	r3, s15
 80058d2:	60fb      	str	r3, [r7, #12]
	SERVO_SetBeats(hservo, num_beats);
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f806 	bl	80058e8 <SERVO_SetBeats>

}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	43340000 	.word	0x43340000

080058e8 <SERVO_SetBeats>:

/*
 * Set duty cycle beats for SERVO
 * 	  num_beats must be between MIN and MAX
 */
void SERVO_SetBeats(SERVO_HandleTypeDef* hservo, int num_beats){
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

	// Avoiding to set num_beats outside ranges
	if( num_beats < hservo->min_duty_beats )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	da03      	bge.n	8005904 <SERVO_SetBeats+0x1c>
		num_beats = hservo->min_duty_beats;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	e007      	b.n	8005914 <SERVO_SetBeats+0x2c>
	else
	if( num_beats > hservo->max_duty_beats )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	dd02      	ble.n	8005914 <SERVO_SetBeats+0x2c>
		num_beats = hservo->max_duty_beats;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	603b      	str	r3, [r7, #0]

	// Setting current PWM duty cycle (via CCR: Capture/Compare TIM's Register)
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <SERVO_SetBeats+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005926:	e018      	b.n	800595a <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d105      	bne.n	800593c <SERVO_SetBeats+0x54>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6393      	str	r3, [r2, #56]	; 0x38
}
 800593a:	e00e      	b.n	800595a <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d105      	bne.n	8005950 <SERVO_SetBeats+0x68>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800594e:	e004      	b.n	800595a <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6413      	str	r3, [r2, #64]	; 0x40
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <ULTRASONIC_Init>:
ULTRASONIC_HandleTypeDef** hultrasonic;

// Global index associated with each sensor (here static is for limiting this variable in this src file)
static uint8_t glbl_idx= 0;

ULTRASONIC_StatusTypeDef ULTRASONIC_Init(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new sensor
	if( glbl_idx < MAX_SENSORS ){
 8005970:	4b69      	ldr	r3, [pc, #420]	; (8005b18 <ULTRASONIC_Init+0x1b0>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d85b      	bhi.n	8005a30 <ULTRASONIC_Init+0xc8>

		// Realloc array of handles pointers
		hultrasonic= (ULTRASONIC_HandleTypeDef**)realloc(hultrasonic, glbl_idx*sizeof(ULTRASONIC_HandleTypeDef*));
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <ULTRASONIC_Init+0x1b4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a66      	ldr	r2, [pc, #408]	; (8005b18 <ULTRASONIC_Init+0x1b0>)
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	0092      	lsls	r2, r2, #2
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f008 faff 	bl	800df88 <realloc>
 800598a:	4603      	mov	r3, r0
 800598c:	4a63      	ldr	r2, [pc, #396]	; (8005b1c <ULTRASONIC_Init+0x1b4>)
 800598e:	6013      	str	r3, [r2, #0]

		// Link current handle with input handle using pointers
		hultrasonic[glbl_idx]= hultrsnc;
 8005990:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <ULTRASONIC_Init+0x1b4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b60      	ldr	r3, [pc, #384]	; (8005b18 <ULTRASONIC_Init+0x1b0>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
	else
		// Return exception
		return ULTRASONIC_ERROR;

	// Assign sensor id and increment global index
	hultrsnc->id= glbl_idx++;
 80059a0:	4b5d      	ldr	r3, [pc, #372]	; (8005b18 <ULTRASONIC_Init+0x1b0>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	b2d1      	uxtb	r1, r2
 80059a8:	4a5b      	ldr	r2, [pc, #364]	; (8005b18 <ULTRASONIC_Init+0x1b0>)
 80059aa:	7011      	strb	r1, [r2, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

	// Init fields
	hultrsnc->htim=		  		      hultrsnc->Init.htim;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	61da      	str	r2, [r3, #28]
	hultrsnc->io.trig_GPIOx= 		  hultrsnc->Init.io_trig_GPIOx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hultrsnc->io.trig_Pin=  		  hultrsnc->Init.io_trig_Pin;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
	hultrsnc->io.echo_GPIOx= 		  hultrsnc->Init.io_echo_GPIOx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	635a      	str	r2, [r3, #52]	; 0x34
	hultrsnc->io.echo_Pin=  		  hultrsnc->Init.io_echo_Pin;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
	hultrsnc->io.echo_IC_tim_channel= hultrsnc->Init.io_echo_IC_tim_channel;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c
	uint32_t n=          			  hultrsnc->Init.history_lenght;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
	hultrsnc->hist_idx= 0;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28

	// Default flags value is reset
	hultrsnc->flag.input_captured= false;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hultrsnc->flag.timeout=        false;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// Allocating history array
	hultrsnc->distance_history= (float*)calloc(n,sizeof(float));
 80059fe:	2104      	movs	r1, #4
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f007 fa43 	bl	800ce8c <calloc>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

	// Assigning timer callback
	hultrsnc->htim->PeriodElapsedCallback= ULTRASONIC_Timeout_Callback;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4a43      	ldr	r2, [pc, #268]	; (8005b20 <ULTRASONIC_Init+0x1b8>)
 8005a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hultrsnc->htim->IC_CaptureCallback=    ULTRASONIC_IC_Callback;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4a41      	ldr	r2, [pc, #260]	; (8005b24 <ULTRASONIC_Init+0x1bc>)
 8005a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	// Computing prescaler to obtain a timer with frequency of 1MHz
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3f      	ldr	r2, [pc, #252]	; (8005b28 <ULTRASONIC_Init+0x1c0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01a      	beq.n	8005a64 <ULTRASONIC_Init+0xfc>
 8005a2e:	e001      	b.n	8005a34 <ULTRASONIC_Init+0xcc>
		return ULTRASONIC_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e067      	b.n	8005b04 <ULTRASONIC_Init+0x19c>
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <ULTRASONIC_Init+0x1c4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d011      	beq.n	8005a64 <ULTRASONIC_Init+0xfc>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <ULTRASONIC_Init+0x1c8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <ULTRASONIC_Init+0xfc>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <ULTRASONIC_Init+0x1cc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d005      	beq.n	8005a64 <ULTRASONIC_Init+0xfc>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a36      	ldr	r2, [pc, #216]	; (8005b38 <ULTRASONIC_Init+0x1d0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d114      	bne.n	8005a8e <ULTRASONIC_Init+0x126>
 8005a64:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <ULTRASONIC_Init+0x1d4>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <ULTRASONIC_Init+0x116>
 8005a70:	f000 fe02 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fa fd64 	bl	8000544 <__aeabi_ui2d>
 8005a7c:	e01b      	b.n	8005ab6 <ULTRASONIC_Init+0x14e>
 8005a7e:	f000 fdfb 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 8005a82:	4603      	mov	r3, r0
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fa fd5c 	bl	8000544 <__aeabi_ui2d>
 8005a8c:	e013      	b.n	8005ab6 <ULTRASONIC_Init+0x14e>
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <ULTRASONIC_Init+0x1d4>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <ULTRASONIC_Init+0x140>
 8005a9a:	f000 fdd9 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fa fd4f 	bl	8000544 <__aeabi_ui2d>
 8005aa6:	e006      	b.n	8005ab6 <ULTRASONIC_Init+0x14e>
 8005aa8:	f000 fdd2 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8005aac:	4603      	mov	r3, r0
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fd47 	bl	8000544 <__aeabi_ui2d>
 8005ab6:	a316      	add	r3, pc, #88	; (adr r3, 8005b10 <ULTRASONIC_Init+0x1a8>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fee6 	bl	800088c <__aeabi_ddiv>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <ULTRASONIC_Init+0x1d8>)
 8005ace:	f7fa fbfb 	bl	80002c8 <__aeabi_dsub>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fb f885 	bl	8000be8 <__aeabi_d2uiz>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	60bb      	str	r3, [r7, #8]

	// Set counter with 1MHz update counter frequency (period of one microsecond)
	__HAL_TIM_SET_PRESCALER(hultrsnc->htim,prescaler);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

	// Set counter autoreload period (is the maximum microsecond echo time allowed by sensor, plus a small margin )
	__HAL_TIM_SET_AUTORELOAD(hultrsnc->htim,(uint32_t)(ULTRASONIC_MAX_DISTANCE/SOUND_SPEED_cm_us)+1000);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f243 1275 	movw	r2, #12661	; 0x3175
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f243 1275 	movw	r2, #12661	; 0x3175
 8005b00:	60da      	str	r2, [r3, #12]

	// Return success
	return ULTRASONIC_OK;
 8005b02:	2300      	movs	r3, #0

}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	f3af 8000 	nop.w
 8005b10:	00000000 	.word	0x00000000
 8005b14:	412e8480 	.word	0x412e8480
 8005b18:	20000220 	.word	0x20000220
 8005b1c:	2000564c 	.word	0x2000564c
 8005b20:	08005d69 	.word	0x08005d69
 8005b24:	08005cf5 	.word	0x08005cf5
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	3ff00000 	.word	0x3ff00000

08005b44 <ULTRASONIC_CaptureMeasure>:
	free(hultrasonic);

}


ULTRASONIC_StatusTypeDef ULTRASONIC_CaptureMeasure(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b08c      	sub	sp, #48	; 0x30
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28

	ULTRASONIC_IO_TypeDef io= hultrsnc->io;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f107 0408 	add.w	r4, r7, #8
 8005b58:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8005b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	6023      	str	r3, [r4, #0]

	uint32_t echo_time = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24

	/* Starting Ultrasonic Sensor measure */

	// Reset flags
	hultrsnc->flag.input_captured= false;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hultrsnc->flag.timeout=        false;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// Start period elapsed interrupt to handle timeout events
	HAL_TIM_Base_Start_IT(htim);
 8005b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7a:	f001 faff 	bl	800717c <HAL_TIM_Base_Start_IT>

	// Start input capture interrupt, needed to measure ECHO high pulse time
	HAL_TIM_IC_Start_IT(htim, io.echo_IC_tim_channel);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b84:	f001 fd2e 	bl	80075e4 <HAL_TIM_IC_Start_IT>

	// Start Timer in order to use ULTRASONIC_Delay_us
	HAL_TIM_Base_Start(htim);
 8005b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8a:	f001 fa67 	bl	800705c <HAL_TIM_Base_Start>

	// Pull TRIG pin low for at least 2 us
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	b291      	uxth	r1, r2
 8005b94:	2200      	movs	r2, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc34 	bl	8006404 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 2);
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f88c 	bl	8005cbc <ULTRASONIC_Delay_us>

	// Keep TRIG pin High for 10 us to start sensor
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_SET);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	b291      	uxth	r1, r2
 8005baa:	2201      	movs	r2, #1
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fc29 	bl	8006404 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 10);
 8005bb2:	210a      	movs	r1, #10
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f881 	bl	8005cbc <ULTRASONIC_Delay_us>

	// Then keep low
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	b291      	uxth	r1, r2
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fc1e 	bl	8006404 <HAL_GPIO_WritePin>
	// Start input capture interrupt, needed to measure ECHO high pulse time
	HAL_TIM_IC_Start_IT(htim, io.echo_IC_tim_channel);
*/
	// Measure ECHO High pulse time, waiting twice for a captured input interrupt. Note that the IC callback function
	// reset the timer counter. THE TIMER MUST BE PREVIOUSLY CONFIGURED IN BOTH EDGES INPUT CAPTURE MODE!!
	for(int i=0; i<2; i++){
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bcc:	e019      	b.n	8005c02 <ULTRASONIC_CaptureMeasure+0xbe>
		// Wait for an input captured or timeout event
		while ( !(hultrsnc->flag.input_captured) && !hultrsnc->flag.timeout )
			__NOP();
 8005bce:	bf00      	nop
		while ( !(hultrsnc->flag.input_captured) && !hultrsnc->flag.timeout )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f083 0301 	eor.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <ULTRASONIC_CaptureMeasure+0xb0>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1ec      	bne.n	8005bce <ULTRASONIC_CaptureMeasure+0x8a>
		// Reset IC flag
		hultrsnc->flag.input_captured= false;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	for(int i=0; i<2; i++){
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	3301      	adds	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	dde3      	ble.n	8005bd0 <ULTRASONIC_CaptureMeasure+0x8c>
	}

	// Stop IC interrupt
	HAL_TIM_IC_Stop_IT(htim, io.echo_IC_tim_channel);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0e:	f001 fe11 	bl	8007834 <HAL_TIM_IC_Stop_IT>

	// Stop Base interrupt
	HAL_TIM_Base_Stop_IT(htim);
 8005c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c14:	f001 fb22 	bl	800725c <HAL_TIM_Base_Stop_IT>

	// Stop Timer
	HAL_TIM_Base_Stop(htim);
 8005c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c1a:	f001 fa87 	bl	800712c <HAL_TIM_Base_Stop>

	// If timeout occurred return a sensor error
	if( hultrsnc->flag.timeout )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <ULTRASONIC_CaptureMeasure+0xea>
		return ULTRASONIC_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e03f      	b.n	8005cae <ULTRASONIC_CaptureMeasure+0x16a>
	// Else, measured time from timer Compare Register
	else
		echo_time= __HAL_TIM_GET_COMPARE(htim, io.echo_IC_tim_channel);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <ULTRASONIC_CaptureMeasure+0xf8>
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	e010      	b.n	8005c5e <ULTRASONIC_CaptureMeasure+0x11a>
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d103      	bne.n	8005c4a <ULTRASONIC_CaptureMeasure+0x106>
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	e009      	b.n	8005c5e <ULTRASONIC_CaptureMeasure+0x11a>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d103      	bne.n	8005c58 <ULTRASONIC_CaptureMeasure+0x114>
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	e002      	b.n	8005c5e <ULTRASONIC_CaptureMeasure+0x11a>
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24


	// Computing distance in cm (division by 2 because the wave travels double distance going back to sensor)
	float distance  = (float)echo_time*SOUND_SPEED_cm_us/2;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005cb8 <ULTRASONIC_CaptureMeasure+0x174>
 8005c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c7a:	edc7 7a08 	vstr	s15, [r7, #32]

	// Saving current distance
	hultrsnc->distance= distance;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	621a      	str	r2, [r3, #32]

	// Updating History (as circular buffer)
	uint32_t hist_idx= hultrsnc->hist_idx++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	1c59      	adds	r1, r3, #1
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6291      	str	r1, [r2, #40]	; 0x28
 8005c8e:	61fb      	str	r3, [r7, #28]
	hultrsnc->distance_history[hist_idx%(hultrsnc->Init.history_lenght)]= distance;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c9e:	fb02 f200 	mul.w	r2, r2, r0
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	601a      	str	r2, [r3, #0]

	return ULTRASONIC_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3730      	adds	r7, #48	; 0x30
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	3d0c7e28 	.word	0x3d0c7e28

08005cbc <ULTRASONIC_Delay_us>:


void ULTRASONIC_Delay_us(ULTRASONIC_HandleTypeDef* hultrsnc, uint16_t us){
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	60fb      	str	r3, [r7, #12]

	// Reset Counter
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait until timer reach target delay (counter frequency is 1Mhz, so 1us every time step)
	while ((__HAL_TIM_GET_COUNTER(htim)) < us)
 8005cd6:	bf00      	nop
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cde:	887b      	ldrh	r3, [r7, #2]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3f9      	bcc.n	8005cd8 <ULTRASONIC_Delay_us+0x1c>
		;

}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <ULTRASONIC_IC_Callback>:


void ULTRASONIC_IC_Callback(TIM_HandleTypeDef* htim){
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

	// Checking which htim caused the callback and set flag
	for(int idx= 0; idx<glbl_idx; idx++)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e020      	b.n	8005d44 <ULTRASONIC_IC_Callback+0x50>
		if( hultrasonic[idx]->htim == htim ){
 8005d02:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <ULTRASONIC_IC_Callback+0x6c>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d113      	bne.n	8005d3e <ULTRASONIC_IC_Callback+0x4a>
			hultrasonic[idx]->flag.input_captured= true;
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <ULTRASONIC_IC_Callback+0x6c>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			// Reset counter
			__HAL_TIM_SET_COUNTER(hultrasonic[idx]->htim, 0);
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <ULTRASONIC_IC_Callback+0x6c>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8005d3c:	e009      	b.n	8005d52 <ULTRASONIC_IC_Callback+0x5e>
	for(int idx= 0; idx<glbl_idx; idx++)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <ULTRASONIC_IC_Callback+0x70>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	dbd8      	blt.n	8005d02 <ULTRASONIC_IC_Callback+0xe>
		}

}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000564c 	.word	0x2000564c
 8005d64:	20000220 	.word	0x20000220

08005d68 <ULTRASONIC_Timeout_Callback>:

void ULTRASONIC_Timeout_Callback(TIM_HandleTypeDef* htim){
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

	// Checking which htim caused the callback and set flag
	for(int idx= 0; idx<glbl_idx; idx++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e016      	b.n	8005da4 <ULTRASONIC_Timeout_Callback+0x3c>
		if( hultrasonic[idx]->htim == htim ){
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <ULTRASONIC_Timeout_Callback+0x58>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d109      	bne.n	8005d9e <ULTRASONIC_Timeout_Callback+0x36>
			hultrasonic[idx]->flag.timeout= true;
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <ULTRASONIC_Timeout_Callback+0x58>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			break;
 8005d9c:	e009      	b.n	8005db2 <ULTRASONIC_Timeout_Callback+0x4a>
	for(int idx= 0; idx<glbl_idx; idx++)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <ULTRASONIC_Timeout_Callback+0x5c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	dbe2      	blt.n	8005d76 <ULTRASONIC_Timeout_Callback+0xe>
		}

}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000564c 	.word	0x2000564c
 8005dc4:	20000220 	.word	0x20000220

08005dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dce:	490e      	ldr	r1, [pc, #56]	; (8005e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dd0:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd4:	e002      	b.n	8005ddc <LoopCopyDataInit>

08005dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dda:	3304      	adds	r3, #4

08005ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de0:	d3f9      	bcc.n	8005dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de2:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005de4:	4c0b      	ldr	r4, [pc, #44]	; (8005e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005de8:	e001      	b.n	8005dee <LoopFillZerobss>

08005dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dec:	3204      	adds	r2, #4

08005dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df0:	d3fb      	bcc.n	8005dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005df2:	f7fc ffcf 	bl	8002d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005df6:	f007 f94d 	bl	800d094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfa:	f7fb f917 	bl	800102c <main>
  bx  lr    
 8005dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e08:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8005e0c:	08013fa8 	.word	0x08013fa8
  ldr r2, =_sbss
 8005e10:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8005e14:	200056a4 	.word	0x200056a4

08005e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e18:	e7fe      	b.n	8005e18 <ADC_IRQHandler>
	...

08005e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e20:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <HAL_Init+0x40>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <HAL_Init+0x40>)
 8005e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_Init+0x40>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_Init+0x40>)
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_Init+0x40>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_Init+0x40>)
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e44:	2003      	movs	r0, #3
 8005e46:	f000 f8fc 	bl	8006042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f7fc fe4a 	bl	8002ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e50:	f7fc fc34 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40023c00 	.word	0x40023c00

08005e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_IncTick+0x20>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_IncTick+0x24>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4413      	add	r3, r2
 8005e70:	4a04      	ldr	r2, [pc, #16]	; (8005e84 <HAL_IncTick+0x24>)
 8005e72:	6013      	str	r3, [r2, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	2000000c 	.word	0x2000000c
 8005e84:	20005650 	.word	0x20005650

08005e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <HAL_GetTick+0x14>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20005650 	.word	0x20005650

08005ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ea8:	f7ff ffee 	bl	8005e88 <HAL_GetTick>
 8005eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb8:	d005      	beq.n	8005ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_Delay+0x44>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ec6:	bf00      	nop
 8005ec8:	f7ff ffde 	bl	8005e88 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d8f7      	bhi.n	8005ec8 <HAL_Delay+0x28>
  {
  }
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c

08005ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	60d3      	str	r3, [r2, #12]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <__NVIC_GetPriorityGrouping+0x18>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	f003 0307 	and.w	r3, r3, #7
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	db0b      	blt.n	8005f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	f003 021f 	and.w	r2, r3, #31
 8005f64:	4907      	ldr	r1, [pc, #28]	; (8005f84 <__NVIC_EnableIRQ+0x38>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000e100 	.word	0xe000e100

08005f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db0a      	blt.n	8005fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	490c      	ldr	r1, [pc, #48]	; (8005fd4 <__NVIC_SetPriority+0x4c>)
 8005fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa6:	0112      	lsls	r2, r2, #4
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	440b      	add	r3, r1
 8005fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fb0:	e00a      	b.n	8005fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	4908      	ldr	r1, [pc, #32]	; (8005fd8 <__NVIC_SetPriority+0x50>)
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	0112      	lsls	r2, r2, #4
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	761a      	strb	r2, [r3, #24]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000e100 	.word	0xe000e100
 8005fd8:	e000ed00 	.word	0xe000ed00

08005fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f1c3 0307 	rsb	r3, r3, #7
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	bf28      	it	cs
 8005ffa:	2304      	movcs	r3, #4
 8005ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3304      	adds	r3, #4
 8006002:	2b06      	cmp	r3, #6
 8006004:	d902      	bls.n	800600c <NVIC_EncodePriority+0x30>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	3b03      	subs	r3, #3
 800600a:	e000      	b.n	800600e <NVIC_EncodePriority+0x32>
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43da      	mvns	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	401a      	ands	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	43d9      	mvns	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006034:	4313      	orrs	r3, r2
         );
}
 8006036:	4618      	mov	r0, r3
 8006038:	3724      	adds	r7, #36	; 0x24
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff4c 	bl	8005ee8 <__NVIC_SetPriorityGrouping>
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800606a:	f7ff ff61 	bl	8005f30 <__NVIC_GetPriorityGrouping>
 800606e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f7ff ffb1 	bl	8005fdc <NVIC_EncodePriority>
 800607a:	4602      	mov	r2, r0
 800607c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ff80 	bl	8005f88 <__NVIC_SetPriority>
}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800609a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ff54 	bl	8005f4c <__NVIC_EnableIRQ>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	e165      	b.n	8006394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060c8:	2201      	movs	r2, #1
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4013      	ands	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	f040 8154 	bne.w	800638e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d005      	beq.n	80060fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d130      	bne.n	8006160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2203      	movs	r2, #3
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006134:	2201      	movs	r2, #1
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 0201 	and.w	r2, r3, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b03      	cmp	r3, #3
 800616a:	d017      	beq.n	800619c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	2203      	movs	r2, #3
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4013      	ands	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d123      	bne.n	80061f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	08da      	lsrs	r2, r3, #3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3208      	adds	r2, #8
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	220f      	movs	r2, #15
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4313      	orrs	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	08da      	lsrs	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3208      	adds	r2, #8
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0203 	and.w	r2, r3, #3
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80ae 	beq.w	800638e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	4b5d      	ldr	r3, [pc, #372]	; (80063ac <HAL_GPIO_Init+0x300>)
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	4a5c      	ldr	r2, [pc, #368]	; (80063ac <HAL_GPIO_Init+0x300>)
 800623c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006240:	6453      	str	r3, [r2, #68]	; 0x44
 8006242:	4b5a      	ldr	r3, [pc, #360]	; (80063ac <HAL_GPIO_Init+0x300>)
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800624e:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_GPIO_Init+0x304>)
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	089b      	lsrs	r3, r3, #2
 8006254:	3302      	adds	r3, #2
 8006256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800625a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	220f      	movs	r2, #15
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	43db      	mvns	r3, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a4f      	ldr	r2, [pc, #316]	; (80063b4 <HAL_GPIO_Init+0x308>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d025      	beq.n	80062c6 <HAL_GPIO_Init+0x21a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a4e      	ldr	r2, [pc, #312]	; (80063b8 <HAL_GPIO_Init+0x30c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01f      	beq.n	80062c2 <HAL_GPIO_Init+0x216>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a4d      	ldr	r2, [pc, #308]	; (80063bc <HAL_GPIO_Init+0x310>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d019      	beq.n	80062be <HAL_GPIO_Init+0x212>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4c      	ldr	r2, [pc, #304]	; (80063c0 <HAL_GPIO_Init+0x314>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_GPIO_Init+0x20e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a4b      	ldr	r2, [pc, #300]	; (80063c4 <HAL_GPIO_Init+0x318>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00d      	beq.n	80062b6 <HAL_GPIO_Init+0x20a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a4a      	ldr	r2, [pc, #296]	; (80063c8 <HAL_GPIO_Init+0x31c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <HAL_GPIO_Init+0x206>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a49      	ldr	r2, [pc, #292]	; (80063cc <HAL_GPIO_Init+0x320>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <HAL_GPIO_Init+0x202>
 80062aa:	2306      	movs	r3, #6
 80062ac:	e00c      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062ae:	2307      	movs	r3, #7
 80062b0:	e00a      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062b2:	2305      	movs	r3, #5
 80062b4:	e008      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062b6:	2304      	movs	r3, #4
 80062b8:	e006      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062ba:	2303      	movs	r3, #3
 80062bc:	e004      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062be:	2302      	movs	r3, #2
 80062c0:	e002      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <HAL_GPIO_Init+0x21c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	f002 0203 	and.w	r2, r2, #3
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	4093      	lsls	r3, r2
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d8:	4935      	ldr	r1, [pc, #212]	; (80063b0 <HAL_GPIO_Init+0x304>)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	3302      	adds	r3, #2
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062e6:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <HAL_GPIO_Init+0x324>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800630a:	4a31      	ldr	r2, [pc, #196]	; (80063d0 <HAL_GPIO_Init+0x324>)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006310:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <HAL_GPIO_Init+0x324>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	43db      	mvns	r3, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006334:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <HAL_GPIO_Init+0x324>)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800633a:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <HAL_GPIO_Init+0x324>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	43db      	mvns	r3, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4013      	ands	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_GPIO_Init+0x324>)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <HAL_GPIO_Init+0x324>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006388:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <HAL_GPIO_Init+0x324>)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3301      	adds	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	f67f ae96 	bls.w	80060c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	3724      	adds	r7, #36	; 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40023800 	.word	0x40023800
 80063b0:	40013800 	.word	0x40013800
 80063b4:	40020000 	.word	0x40020000
 80063b8:	40020400 	.word	0x40020400
 80063bc:	40020800 	.word	0x40020800
 80063c0:	40020c00 	.word	0x40020c00
 80063c4:	40021000 	.word	0x40021000
 80063c8:	40021400 	.word	0x40021400
 80063cc:	40021800 	.word	0x40021800
 80063d0:	40013c00 	.word	0x40013c00

080063d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e001      	b.n	80063f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006414:	787b      	ldrb	r3, [r7, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006420:	e003      	b.n	800642a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	041a      	lsls	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006448:	887a      	ldrh	r2, [r7, #2]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4013      	ands	r3, r2
 800644e:	041a      	lsls	r2, r3, #16
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	43d9      	mvns	r1, r3
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	400b      	ands	r3, r1
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	619a      	str	r2, [r3, #24]
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0cc      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90c      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b65      	ldr	r3, [pc, #404]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b63      	ldr	r3, [pc, #396]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b8      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4a58      	ldr	r2, [pc, #352]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d8:	4b53      	ldr	r3, [pc, #332]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a52      	ldr	r2, [pc, #328]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e4:	4b50      	ldr	r3, [pc, #320]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	494d      	ldr	r1, [pc, #308]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d044      	beq.n	800658c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e07f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006526:	2b03      	cmp	r3, #3
 8006528:	d107      	bne.n	800653a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e06f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653a:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e067      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4934      	ldr	r1, [pc, #208]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655c:	f7ff fc94 	bl	8005e88 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7ff fc90 	bl	8005e88 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e04f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d20c      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b22      	ldr	r3, [pc, #136]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e032      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4916      	ldr	r1, [pc, #88]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490e      	ldr	r1, [pc, #56]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065f2:	f000 f887 	bl	8006704 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490a      	ldr	r1, [pc, #40]	; (800662c <HAL_RCC_ClockConfig+0x1c0>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCC_ClockConfig+0x1c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fc fa66 	bl	8002ae4 <HAL_InitTick>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00
 8006628:	40023800 	.word	0x40023800
 800662c:	080138a0 	.word	0x080138a0
 8006630:	20000004 	.word	0x20000004
 8006634:	20000008 	.word	0x20000008

08006638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <HAL_RCC_GetHCLKFreq+0x14>)
 800663e:	681b      	ldr	r3, [r3, #0]
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000004 	.word	0x20000004

08006650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006654:	f7ff fff0 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0a9b      	lsrs	r3, r3, #10
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	080138b0 	.word	0x080138b0

08006678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800667c:	f7ff ffdc 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0b5b      	lsrs	r3, r3, #13
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <HAL_RCC_GetPCLK2Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	080138b0 	.word	0x080138b0

080066a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	220f      	movs	r2, #15
 80066ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0203 	and.w	r2, r3, #3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066d4:	4b09      	ldr	r3, [pc, #36]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <HAL_RCC_GetClockConfig+0x60>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40023800 	.word	0x40023800
 8006700:	40023c00 	.word	0x40023c00

08006704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006720:	4bce      	ldr	r3, [pc, #824]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b0c      	cmp	r3, #12
 800672a:	f200 818d 	bhi.w	8006a48 <HAL_RCC_GetSysClockFreq+0x344>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_RCC_GetSysClockFreq+0x30>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006769 	.word	0x08006769
 8006738:	08006a49 	.word	0x08006a49
 800673c:	08006a49 	.word	0x08006a49
 8006740:	08006a49 	.word	0x08006a49
 8006744:	0800676f 	.word	0x0800676f
 8006748:	08006a49 	.word	0x08006a49
 800674c:	08006a49 	.word	0x08006a49
 8006750:	08006a49 	.word	0x08006a49
 8006754:	08006775 	.word	0x08006775
 8006758:	08006a49 	.word	0x08006a49
 800675c:	08006a49 	.word	0x08006a49
 8006760:	08006a49 	.word	0x08006a49
 8006764:	080068e9 	.word	0x080068e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006768:	4bbd      	ldr	r3, [pc, #756]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800676a:	61bb      	str	r3, [r7, #24]
       break;
 800676c:	e16f      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800676e:	4bbd      	ldr	r3, [pc, #756]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x360>)
 8006770:	61bb      	str	r3, [r7, #24]
      break;
 8006772:	e16c      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006774:	4bb9      	ldr	r3, [pc, #740]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800677c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800677e:	4bb7      	ldr	r3, [pc, #732]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d053      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678a:	4bb4      	ldr	r3, [pc, #720]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	099b      	lsrs	r3, r3, #6
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	ea02 0400 	and.w	r4, r2, r0
 80067a2:	603c      	str	r4, [r7, #0]
 80067a4:	400b      	ands	r3, r1
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	014b      	lsls	r3, r1, #5
 80067ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067be:	0142      	lsls	r2, r0, #5
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	4623      	mov	r3, r4
 80067c6:	1ac0      	subs	r0, r0, r3
 80067c8:	462b      	mov	r3, r5
 80067ca:	eb61 0103 	sbc.w	r1, r1, r3
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	018b      	lsls	r3, r1, #6
 80067d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067dc:	0182      	lsls	r2, r0, #6
 80067de:	1a12      	subs	r2, r2, r0
 80067e0:	eb63 0301 	sbc.w	r3, r3, r1
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	00d9      	lsls	r1, r3, #3
 80067ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067f2:	00d0      	lsls	r0, r2, #3
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4621      	mov	r1, r4
 80067fa:	1852      	adds	r2, r2, r1
 80067fc:	4629      	mov	r1, r5
 80067fe:	eb43 0101 	adc.w	r1, r3, r1
 8006802:	460b      	mov	r3, r1
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	0259      	lsls	r1, r3, #9
 800680e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006812:	0250      	lsls	r0, r2, #9
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	461a      	mov	r2, r3
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	f7fa fa50 	bl	8000cc8 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4613      	mov	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	e04c      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006832:	4b8a      	ldr	r3, [pc, #552]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	ea02 0a00 	and.w	sl, r2, r0
 800684a:	ea03 0b01 	and.w	fp, r3, r1
 800684e:	4650      	mov	r0, sl
 8006850:	4659      	mov	r1, fp
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	014b      	lsls	r3, r1, #5
 800685c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006860:	0142      	lsls	r2, r0, #5
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	ebb0 000a 	subs.w	r0, r0, sl
 800686a:	eb61 010b 	sbc.w	r1, r1, fp
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	018b      	lsls	r3, r1, #6
 8006878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800687c:	0182      	lsls	r2, r0, #6
 800687e:	1a12      	subs	r2, r2, r0
 8006880:	eb63 0301 	sbc.w	r3, r3, r1
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	00d9      	lsls	r1, r3, #3
 800688e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006892:	00d0      	lsls	r0, r2, #3
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	eb12 020a 	adds.w	r2, r2, sl
 800689c:	eb43 030b 	adc.w	r3, r3, fp
 80068a0:	f04f 0000 	mov.w	r0, #0
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	0299      	lsls	r1, r3, #10
 80068aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068ae:	0290      	lsls	r0, r2, #10
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	f7fa fa02 	bl	8000cc8 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068cc:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	61bb      	str	r3, [r7, #24]
      break;
 80068e6:	e0b2      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e8:	4b5c      	ldr	r3, [pc, #368]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f2:	4b5a      	ldr	r3, [pc, #360]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04d      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068fe:	4b57      	ldr	r3, [pc, #348]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	461a      	mov	r2, r3
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800690e:	f04f 0100 	mov.w	r1, #0
 8006912:	ea02 0800 	and.w	r8, r2, r0
 8006916:	ea03 0901 	and.w	r9, r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	014b      	lsls	r3, r1, #5
 8006928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800692c:	0142      	lsls	r2, r0, #5
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	ebb0 0008 	subs.w	r0, r0, r8
 8006936:	eb61 0109 	sbc.w	r1, r1, r9
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	018b      	lsls	r3, r1, #6
 8006944:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006948:	0182      	lsls	r2, r0, #6
 800694a:	1a12      	subs	r2, r2, r0
 800694c:	eb63 0301 	sbc.w	r3, r3, r1
 8006950:	f04f 0000 	mov.w	r0, #0
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	00d9      	lsls	r1, r3, #3
 800695a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800695e:	00d0      	lsls	r0, r2, #3
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	eb12 0208 	adds.w	r2, r2, r8
 8006968:	eb43 0309 	adc.w	r3, r3, r9
 800696c:	f04f 0000 	mov.w	r0, #0
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	0259      	lsls	r1, r3, #9
 8006976:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800697a:	0250      	lsls	r0, r2, #9
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f7fa f99c 	bl	8000cc8 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e04a      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	ea02 0400 	and.w	r4, r2, r0
 80069b2:	ea03 0501 	and.w	r5, r3, r1
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	014b      	lsls	r3, r1, #5
 80069c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069c8:	0142      	lsls	r2, r0, #5
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	1b00      	subs	r0, r0, r4
 80069d0:	eb61 0105 	sbc.w	r1, r1, r5
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	018b      	lsls	r3, r1, #6
 80069de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069e2:	0182      	lsls	r2, r0, #6
 80069e4:	1a12      	subs	r2, r2, r0
 80069e6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ea:	f04f 0000 	mov.w	r0, #0
 80069ee:	f04f 0100 	mov.w	r1, #0
 80069f2:	00d9      	lsls	r1, r3, #3
 80069f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f8:	00d0      	lsls	r0, r2, #3
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	1912      	adds	r2, r2, r4
 8006a00:	eb45 0303 	adc.w	r3, r5, r3
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	0299      	lsls	r1, r3, #10
 8006a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a12:	0290      	lsls	r0, r2, #10
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f7fa f950 	bl	8000cc8 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0f1b      	lsrs	r3, r3, #28
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	61bb      	str	r3, [r7, #24]
      break;
 8006a46:	e002      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006a4a:	61bb      	str	r3, [r7, #24]
      break;
 8006a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	007a1200 	.word	0x007a1200

08006a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e28d      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8083 	beq.w	8006b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a88:	4b94      	ldr	r3, [pc, #592]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d019      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a94:	4b91      	ldr	r3, [pc, #580]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d106      	bne.n	8006aae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006aa0:	4b8e      	ldr	r3, [pc, #568]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aac:	d00c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aae:	4b8b      	ldr	r3, [pc, #556]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ab6:	2b0c      	cmp	r3, #12
 8006ab8:	d112      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b88      	ldr	r3, [pc, #544]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	4b84      	ldr	r3, [pc, #528]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05b      	beq.n	8006b8c <HAL_RCC_OscConfig+0x124>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d157      	bne.n	8006b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e25a      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x90>
 8006aea:	4b7c      	ldr	r3, [pc, #496]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7b      	ldr	r2, [pc, #492]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e01d      	b.n	8006b34 <HAL_RCC_OscConfig+0xcc>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0xb4>
 8006b02:	4b76      	ldr	r3, [pc, #472]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a75      	ldr	r2, [pc, #468]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b73      	ldr	r3, [pc, #460]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a72      	ldr	r2, [pc, #456]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0xcc>
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6e      	ldr	r2, [pc, #440]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b6c      	ldr	r3, [pc, #432]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6b      	ldr	r2, [pc, #428]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7ff f9a4 	bl	8005e88 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b44:	f7ff f9a0 	bl	8005e88 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	; 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e21f      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b61      	ldr	r3, [pc, #388]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0xdc>
 8006b62:	e014      	b.n	8006b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7ff f990 	bl	8005e88 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6c:	f7ff f98c 	bl	8005e88 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	; 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e20b      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x104>
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06f      	beq.n	8006c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b9a:	4b50      	ldr	r3, [pc, #320]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ba6:	4b4d      	ldr	r3, [pc, #308]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d105      	bne.n	8006bbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bb2:	4b4a      	ldr	r3, [pc, #296]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bbe:	4b47      	ldr	r3, [pc, #284]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bc6:	2b0c      	cmp	r3, #12
 8006bc8:	d11c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b44      	ldr	r3, [pc, #272]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd6:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_RCC_OscConfig+0x186>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e1d3      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4937      	ldr	r1, [pc, #220]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	e03a      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c0c:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <HAL_RCC_OscConfig+0x278>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c12:	f7ff f939 	bl	8005e88 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1a:	f7ff f935 	bl	8005e88 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e1b4      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2c:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c38:	4b28      	ldr	r3, [pc, #160]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4925      	ldr	r1, [pc, #148]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]
 8006c4c:	e015      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <HAL_RCC_OscConfig+0x278>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7ff f918 	bl	8005e88 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5c:	f7ff f914 	bl	8005e88 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e193      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d036      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_RCC_OscConfig+0x27c>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c94:	f7ff f8f8 	bl	8005e88 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c9c:	f7ff f8f4 	bl	8005e88 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e173      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x234>
 8006cba:	e01b      	b.n	8006cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <HAL_RCC_OscConfig+0x27c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc2:	f7ff f8e1 	bl	8005e88 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc8:	e00e      	b.n	8006ce8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cca:	f7ff f8dd 	bl	8005e88 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d907      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e15c      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	42470000 	.word	0x42470000
 8006ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce8:	4b8a      	ldr	r3, [pc, #552]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ea      	bne.n	8006cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8097 	beq.w	8006e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d02:	2300      	movs	r3, #0
 8006d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d06:	4b83      	ldr	r3, [pc, #524]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	4b7f      	ldr	r3, [pc, #508]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	4a7e      	ldr	r2, [pc, #504]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d20:	6413      	str	r3, [r2, #64]	; 0x40
 8006d22:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	60bb      	str	r3, [r7, #8]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d32:	4b79      	ldr	r3, [pc, #484]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d118      	bne.n	8006d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3e:	4b76      	ldr	r3, [pc, #472]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a75      	ldr	r2, [pc, #468]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4a:	f7ff f89d 	bl	8005e88 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d52:	f7ff f899 	bl	8005e88 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e118      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	4b6c      	ldr	r3, [pc, #432]	; (8006f18 <HAL_RCC_OscConfig+0x4b0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d106      	bne.n	8006d86 <HAL_RCC_OscConfig+0x31e>
 8006d78:	4b66      	ldr	r3, [pc, #408]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	4a65      	ldr	r2, [pc, #404]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6713      	str	r3, [r2, #112]	; 0x70
 8006d84:	e01c      	b.n	8006dc0 <HAL_RCC_OscConfig+0x358>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0x340>
 8006d8e:	4b61      	ldr	r3, [pc, #388]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	4a60      	ldr	r2, [pc, #384]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9a:	4b5e      	ldr	r3, [pc, #376]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	4a5d      	ldr	r2, [pc, #372]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x358>
 8006da8:	4b5a      	ldr	r3, [pc, #360]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	4a59      	ldr	r2, [pc, #356]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	6713      	str	r3, [r2, #112]	; 0x70
 8006db4:	4b57      	ldr	r3, [pc, #348]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a56      	ldr	r2, [pc, #344]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	f023 0304 	bic.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d015      	beq.n	8006df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7ff f85e 	bl	8005e88 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	e00a      	b.n	8006de6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd0:	f7ff f85a 	bl	8005e88 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0d7      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de6:	4b4b      	ldr	r3, [pc, #300]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0ee      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x368>
 8006df2:	e014      	b.n	8006e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7ff f848 	bl	8005e88 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfc:	f7ff f844 	bl	8005e88 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e0c1      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e12:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1ee      	bne.n	8006dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d105      	bne.n	8006e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80ad 	beq.w	8006f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d060      	beq.n	8006f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d145      	bne.n	8006eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4e:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7ff f818 	bl	8005e88 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e5c:	f7ff f814 	bl	8005e88 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e093      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6e:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	3b01      	subs	r3, #1
 8006e94:	041b      	lsls	r3, r3, #16
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	071b      	lsls	r3, r3, #28
 8006ea6:	491b      	ldr	r1, [pc, #108]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fe ffe9 	bl	8005e88 <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eba:	f7fe ffe5 	bl	8005e88 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e064      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0f0      	beq.n	8006eba <HAL_RCC_OscConfig+0x452>
 8006ed8:	e05c      	b.n	8006f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eda:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <HAL_RCC_OscConfig+0x4b4>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fe ffd2 	bl	8005e88 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7fe ffce 	bl	8005e88 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04d      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_RCC_OscConfig+0x4ac>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x480>
 8006f06:	e045      	b.n	8006f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e040      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40007000 	.word	0x40007000
 8006f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <HAL_RCC_OscConfig+0x538>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d030      	beq.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d129      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d122      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f50:	4013      	ands	r3, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d119      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d10f      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d107      	bne.n	8006f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800

08006fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e04c      	b.n	8007050 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d111      	bne.n	8006fe6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fe04 	bl	8008bd8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_TIM_Base_Init+0xb4>)
 8006fdc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f001 f9b3 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	08002715 	.word	0x08002715

0800705c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e046      	b.n	8007102 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a23      	ldr	r2, [pc, #140]	; (8007110 <HAL_TIM_Base_Start+0xb4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d022      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708e:	d01d      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <HAL_TIM_Base_Start+0xb8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d018      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1e      	ldr	r2, [pc, #120]	; (8007118 <HAL_TIM_Base_Start+0xbc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d013      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1c      	ldr	r2, [pc, #112]	; (800711c <HAL_TIM_Base_Start+0xc0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00e      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_TIM_Base_Start+0xc4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d009      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a19      	ldr	r2, [pc, #100]	; (8007124 <HAL_TIM_Base_Start+0xc8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d004      	beq.n	80070cc <HAL_TIM_Base_Start+0x70>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a18      	ldr	r2, [pc, #96]	; (8007128 <HAL_TIM_Base_Start+0xcc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d111      	bne.n	80070f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d010      	beq.n	8007100 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0201 	orr.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ee:	e007      	b.n	8007100 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40010400 	.word	0x40010400
 8007124:	40014000 	.word	0x40014000
 8007128:	40001800 	.word	0x40001800

0800712c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f241 1311 	movw	r3, #4369	; 0x1111
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <HAL_TIM_Base_Stop+0x38>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f240 4344 	movw	r3, #1092	; 0x444
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_TIM_Base_Stop+0x38>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d001      	beq.n	8007194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e04e      	b.n	8007232 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a23      	ldr	r2, [pc, #140]	; (8007240 <HAL_TIM_Base_Start_IT+0xc4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d022      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071be:	d01d      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <HAL_TIM_Base_Start_IT+0xc8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d018      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <HAL_TIM_Base_Start_IT+0xcc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_TIM_Base_Start_IT+0xd0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00e      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <HAL_TIM_Base_Start_IT+0xd4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a19      	ldr	r2, [pc, #100]	; (8007254 <HAL_TIM_Base_Start_IT+0xd8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a18      	ldr	r2, [pc, #96]	; (8007258 <HAL_TIM_Base_Start_IT+0xdc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d111      	bne.n	8007220 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b06      	cmp	r3, #6
 800720c:	d010      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721e:	e007      	b.n	8007230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40001800 	.word	0x40001800

0800725c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6a1a      	ldr	r2, [r3, #32]
 800727a:	f241 1311 	movw	r3, #4369	; 0x1111
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	f240 4344 	movw	r3, #1092	; 0x444
 800728e:	4013      	ands	r3, r2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0201 	bic.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
	...

080072bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e04c      	b.n	8007368 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d111      	bne.n	80072fe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fc78 	bl	8008bd8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <HAL_TIM_PWM_Init+0xb4>)
 80072f4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f001 f827 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	08007375 	.word	0x08007375

08007374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_TIM_PWM_Start+0x24>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e022      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d109      	bne.n	80073c6 <HAL_TIM_PWM_Start+0x3e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e015      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d109      	bne.n	80073e0 <HAL_TIM_PWM_Start+0x58>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e008      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07c      	b.n	80074f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_TIM_PWM_Start+0x82>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007408:	e013      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d104      	bne.n	800741a <HAL_TIM_PWM_Start+0x92>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007418:	e00b      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d104      	bne.n	800742a <HAL_TIM_PWM_Start+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007428:	e003      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2201      	movs	r2, #1
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f001 fba6 	bl	8008b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2d      	ldr	r2, [pc, #180]	; (80074fc <HAL_TIM_PWM_Start+0x174>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_TIM_PWM_Start+0xcc>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2c      	ldr	r2, [pc, #176]	; (8007500 <HAL_TIM_PWM_Start+0x178>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d101      	bne.n	8007458 <HAL_TIM_PWM_Start+0xd0>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_TIM_PWM_Start+0xd2>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a22      	ldr	r2, [pc, #136]	; (80074fc <HAL_TIM_PWM_Start+0x174>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d01d      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <HAL_TIM_PWM_Start+0x17c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <HAL_TIM_PWM_Start+0x180>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1c      	ldr	r2, [pc, #112]	; (800750c <HAL_TIM_PWM_Start+0x184>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a16      	ldr	r2, [pc, #88]	; (8007500 <HAL_TIM_PWM_Start+0x178>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <HAL_TIM_PWM_Start+0x188>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_TIM_PWM_Start+0x136>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a16      	ldr	r2, [pc, #88]	; (8007514 <HAL_TIM_PWM_Start+0x18c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d111      	bne.n	80074e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b06      	cmp	r3, #6
 80074ce:	d010      	beq.n	80074f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e0:	e007      	b.n	80074f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0201 	orr.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40010000 	.word	0x40010000
 8007500:	40010400 	.word	0x40010400
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40014000 	.word	0x40014000
 8007514:	40001800 	.word	0x40001800

08007518 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e04c      	b.n	80075c4 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d111      	bne.n	800755a <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fb4a 	bl	8008bd8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <HAL_TIM_IC_Init+0xb4>)
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f000 fef9 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	080075d1 	.word	0x080075d1

080075d0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_IC_Start_IT+0x1e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	e013      	b.n	800762a <HAL_TIM_IC_Start_IT+0x46>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d104      	bne.n	8007612 <HAL_TIM_IC_Start_IT+0x2e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	e00b      	b.n	800762a <HAL_TIM_IC_Start_IT+0x46>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d104      	bne.n	8007622 <HAL_TIM_IC_Start_IT+0x3e>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800761e:	b2db      	uxtb	r3, r3
 8007620:	e003      	b.n	800762a <HAL_TIM_IC_Start_IT+0x46>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007628:	b2db      	uxtb	r3, r3
 800762a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <HAL_TIM_IC_Start_IT+0x58>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007638:	b2db      	uxtb	r3, r3
 800763a:	e013      	b.n	8007664 <HAL_TIM_IC_Start_IT+0x80>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b04      	cmp	r3, #4
 8007640:	d104      	bne.n	800764c <HAL_TIM_IC_Start_IT+0x68>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007648:	b2db      	uxtb	r3, r3
 800764a:	e00b      	b.n	8007664 <HAL_TIM_IC_Start_IT+0x80>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b08      	cmp	r3, #8
 8007650:	d104      	bne.n	800765c <HAL_TIM_IC_Start_IT+0x78>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007658:	b2db      	uxtb	r3, r3
 800765a:	e003      	b.n	8007664 <HAL_TIM_IC_Start_IT+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007662:	b2db      	uxtb	r3, r3
 8007664:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d102      	bne.n	8007672 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800766c:	7b7b      	ldrb	r3, [r7, #13]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d001      	beq.n	8007676 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0cc      	b.n	8007810 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <HAL_TIM_IC_Start_IT+0xa2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007684:	e013      	b.n	80076ae <HAL_TIM_IC_Start_IT+0xca>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b04      	cmp	r3, #4
 800768a:	d104      	bne.n	8007696 <HAL_TIM_IC_Start_IT+0xb2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007694:	e00b      	b.n	80076ae <HAL_TIM_IC_Start_IT+0xca>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d104      	bne.n	80076a6 <HAL_TIM_IC_Start_IT+0xc2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a4:	e003      	b.n	80076ae <HAL_TIM_IC_Start_IT+0xca>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <HAL_TIM_IC_Start_IT+0xda>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076bc:	e013      	b.n	80076e6 <HAL_TIM_IC_Start_IT+0x102>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_IC_Start_IT+0xea>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076cc:	e00b      	b.n	80076e6 <HAL_TIM_IC_Start_IT+0x102>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d104      	bne.n	80076de <HAL_TIM_IC_Start_IT+0xfa>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076dc:	e003      	b.n	80076e6 <HAL_TIM_IC_Start_IT+0x102>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	d841      	bhi.n	8007770 <HAL_TIM_IC_Start_IT+0x18c>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <HAL_TIM_IC_Start_IT+0x110>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007729 	.word	0x08007729
 80076f8:	08007771 	.word	0x08007771
 80076fc:	08007771 	.word	0x08007771
 8007700:	08007771 	.word	0x08007771
 8007704:	0800773b 	.word	0x0800773b
 8007708:	08007771 	.word	0x08007771
 800770c:	08007771 	.word	0x08007771
 8007710:	08007771 	.word	0x08007771
 8007714:	0800774d 	.word	0x0800774d
 8007718:	08007771 	.word	0x08007771
 800771c:	08007771 	.word	0x08007771
 8007720:	08007771 	.word	0x08007771
 8007724:	0800775f 	.word	0x0800775f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0202 	orr.w	r2, r2, #2
 8007736:	60da      	str	r2, [r3, #12]
      break;
 8007738:	e01d      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0204 	orr.w	r2, r2, #4
 8007748:	60da      	str	r2, [r3, #12]
      break;
 800774a:	e014      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	60da      	str	r2, [r3, #12]
      break;
 800775c:	e00b      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0210 	orr.w	r2, r2, #16
 800776c:	60da      	str	r2, [r3, #12]
      break;
 800776e:	e002      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
      break;
 8007774:	bf00      	nop
  }

  if (status == HAL_OK)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d148      	bne.n	800780e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2201      	movs	r2, #1
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fa01 	bl	8008b8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a22      	ldr	r2, [pc, #136]	; (8007818 <HAL_TIM_IC_Start_IT+0x234>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d022      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779c:	d01d      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_TIM_IC_Start_IT+0x238>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d018      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <HAL_TIM_IC_Start_IT+0x23c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_TIM_IC_Start_IT+0x240>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00e      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <HAL_TIM_IC_Start_IT+0x244>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d009      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_TIM_IC_Start_IT+0x248>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIM_IC_Start_IT+0x1f6>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_TIM_IC_Start_IT+0x24c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d111      	bne.n	80077fe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b06      	cmp	r3, #6
 80077ea:	d010      	beq.n	800780e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fc:	e007      	b.n	800780e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40010000 	.word	0x40010000
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800
 8007824:	40000c00 	.word	0x40000c00
 8007828:	40010400 	.word	0x40010400
 800782c:	40014000 	.word	0x40014000
 8007830:	40001800 	.word	0x40001800

08007834 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b0c      	cmp	r3, #12
 8007846:	d841      	bhi.n	80078cc <HAL_TIM_IC_Stop_IT+0x98>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <HAL_TIM_IC_Stop_IT+0x1c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007885 	.word	0x08007885
 8007854:	080078cd 	.word	0x080078cd
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078cd 	.word	0x080078cd
 8007860:	08007897 	.word	0x08007897
 8007864:	080078cd 	.word	0x080078cd
 8007868:	080078cd 	.word	0x080078cd
 800786c:	080078cd 	.word	0x080078cd
 8007870:	080078a9 	.word	0x080078a9
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078cd 	.word	0x080078cd
 800787c:	080078cd 	.word	0x080078cd
 8007880:	080078bb 	.word	0x080078bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0202 	bic.w	r2, r2, #2
 8007892:	60da      	str	r2, [r3, #12]
      break;
 8007894:	e01d      	b.n	80078d2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0204 	bic.w	r2, r2, #4
 80078a4:	60da      	str	r2, [r3, #12]
      break;
 80078a6:	e014      	b.n	80078d2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0208 	bic.w	r2, r2, #8
 80078b6:	60da      	str	r2, [r3, #12]
      break;
 80078b8:	e00b      	b.n	80078d2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0210 	bic.w	r2, r2, #16
 80078c8:	60da      	str	r2, [r3, #12]
      break;
 80078ca:	e002      	b.n	80078d2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
      break;
 80078d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d156      	bne.n	8007986 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2200      	movs	r2, #0
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 f953 	bl	8008b8c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1a      	ldr	r2, [r3, #32]
 80078ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10f      	bne.n	8007916 <HAL_TIM_IC_Stop_IT+0xe2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	f240 4344 	movw	r3, #1092	; 0x444
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <HAL_TIM_IC_Stop_IT+0xe2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <HAL_TIM_IC_Stop_IT+0xf2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007924:	e013      	b.n	800794e <HAL_TIM_IC_Stop_IT+0x11a>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b04      	cmp	r3, #4
 800792a:	d104      	bne.n	8007936 <HAL_TIM_IC_Stop_IT+0x102>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007934:	e00b      	b.n	800794e <HAL_TIM_IC_Stop_IT+0x11a>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d104      	bne.n	8007946 <HAL_TIM_IC_Stop_IT+0x112>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007944:	e003      	b.n	800794e <HAL_TIM_IC_Stop_IT+0x11a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_TIM_IC_Stop_IT+0x12a>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795c:	e013      	b.n	8007986 <HAL_TIM_IC_Stop_IT+0x152>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d104      	bne.n	800796e <HAL_TIM_IC_Stop_IT+0x13a>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800796c:	e00b      	b.n	8007986 <HAL_TIM_IC_Stop_IT+0x152>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d104      	bne.n	800797e <HAL_TIM_IC_Stop_IT+0x14a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797c:	e003      	b.n	8007986 <HAL_TIM_IC_Stop_IT+0x152>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0a2      	b.n	8007aea <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d111      	bne.n	80079d4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f90d 	bl	8008bd8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a4a      	ldr	r2, [pc, #296]	; (8007af4 <HAL_TIM_Encoder_Init+0x164>)
 80079ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f000 fcb2 	bl	8008364 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a46:	f023 030c 	bic.w	r3, r3, #12
 8007a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	4313      	orrs	r3, r2
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	031b      	lsls	r3, r3, #12
 8007a76:	4313      	orrs	r3, r2
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a84:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08002859 	.word	0x08002859

08007af8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d110      	bne.n	8007b4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d102      	bne.n	8007b34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b2e:	7b7b      	ldrb	r3, [r7, #13]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d001      	beq.n	8007b38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e069      	b.n	8007c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b48:	e031      	b.n	8007bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d110      	bne.n	8007b72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d102      	bne.n	8007b5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b56:	7b3b      	ldrb	r3, [r7, #12]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d001      	beq.n	8007b60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e055      	b.n	8007c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b70:	e01d      	b.n	8007bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d108      	bne.n	8007b8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d105      	bne.n	8007b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b7e:	7b7b      	ldrb	r3, [r7, #13]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d102      	bne.n	8007b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b84:	7b3b      	ldrb	r3, [r7, #12]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d001      	beq.n	8007b8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e03e      	b.n	8007c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_TIM_Encoder_Start+0xc4>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d008      	beq.n	8007bcc <HAL_TIM_Encoder_Start+0xd4>
 8007bba:	e00f      	b.n	8007bdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 ffe1 	bl	8008b8c <TIM_CCxChannelCmd>
      break;
 8007bca:	e016      	b.n	8007bfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	2104      	movs	r1, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 ffd9 	bl	8008b8c <TIM_CCxChannelCmd>
      break;
 8007bda:	e00e      	b.n	8007bfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2201      	movs	r2, #1
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 ffd1 	bl	8008b8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 ffca 	bl	8008b8c <TIM_CCxChannelCmd>
      break;
 8007bf8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d128      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d121      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0202 	mvn.w	r2, #2
 8007c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
 8007c60:	e009      	b.n	8007c76 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d128      	bne.n	8007cdc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d121      	bne.n	8007cdc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0204 	mvn.w	r2, #4
 8007ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
 8007cc0:	e009      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d128      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d121      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0208 	mvn.w	r2, #8
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
 8007d20:	e009      	b.n	8007d36 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0310 	and.w	r3, r3, #16
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d128      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d121      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0210 	mvn.w	r2, #16
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2208      	movs	r2, #8
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
 8007d80:	e009      	b.n	8007d96 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d110      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d109      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0201 	mvn.w	r2, #1
 8007dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b80      	cmp	r3, #128	; 0x80
 8007dd8:	d110      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d109      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d110      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d109      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d110      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d109      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0220 	mvn.w	r2, #32
 8007e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e088      	b.n	8007f94 <HAL_TIM_IC_ConfigChannel+0x130>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	6819      	ldr	r1, [r3, #0]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f000 fcb0 	bl	8008804 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 020c 	bic.w	r2, r2, #12
 8007eb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6999      	ldr	r1, [r3, #24]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	619a      	str	r2, [r3, #24]
 8007ec6:	e060      	b.n	8007f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d11c      	bne.n	8007f08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6819      	ldr	r1, [r3, #0]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f000 fd34 	bl	800894a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6999      	ldr	r1, [r3, #24]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	021a      	lsls	r2, r3, #8
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	619a      	str	r2, [r3, #24]
 8007f06:	e040      	b.n	8007f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d11b      	bne.n	8007f46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f000 fd81 	bl	8008a24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 020c 	bic.w	r2, r2, #12
 8007f30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69d9      	ldr	r1, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	61da      	str	r2, [r3, #28]
 8007f44:	e021      	b.n	8007f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b0c      	cmp	r3, #12
 8007f4a:	d11c      	bne.n	8007f86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f000 fd9e 	bl	8008a9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69d9      	ldr	r1, [r3, #28]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	021a      	lsls	r2, r3, #8
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	61da      	str	r2, [r3, #28]
 8007f84:	e001      	b.n	8007f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e0ae      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	f200 809f 	bhi.w	8008108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08008005 	.word	0x08008005
 8007fd4:	08008109 	.word	0x08008109
 8007fd8:	08008109 	.word	0x08008109
 8007fdc:	08008109 	.word	0x08008109
 8007fe0:	08008045 	.word	0x08008045
 8007fe4:	08008109 	.word	0x08008109
 8007fe8:	08008109 	.word	0x08008109
 8007fec:	08008109 	.word	0x08008109
 8007ff0:	08008087 	.word	0x08008087
 8007ff4:	08008109 	.word	0x08008109
 8007ff8:	08008109 	.word	0x08008109
 8007ffc:	08008109 	.word	0x08008109
 8008000:	080080c7 	.word	0x080080c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fa4a 	bl	80084a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0208 	orr.w	r2, r2, #8
 800801e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6999      	ldr	r1, [r3, #24]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	619a      	str	r2, [r3, #24]
      break;
 8008042:	e064      	b.n	800810e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fa9a 	bl	8008584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800805e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800806e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6999      	ldr	r1, [r3, #24]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	021a      	lsls	r2, r3, #8
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	619a      	str	r2, [r3, #24]
      break;
 8008084:	e043      	b.n	800810e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 faef 	bl	8008670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0208 	orr.w	r2, r2, #8
 80080a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0204 	bic.w	r2, r2, #4
 80080b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69d9      	ldr	r1, [r3, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	61da      	str	r2, [r3, #28]
      break;
 80080c4:	e023      	b.n	800810e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb43 	bl	8008758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69d9      	ldr	r1, [r3, #28]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	021a      	lsls	r2, r3, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	61da      	str	r2, [r3, #28]
      break;
 8008106:	e002      	b.n	800810e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	75fb      	strb	r3, [r7, #23]
      break;
 800810c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_TIM_ConfigClockSource+0x1c>
 8008138:	2302      	movs	r3, #2
 800813a:	e0b4      	b.n	80082a6 <HAL_TIM_ConfigClockSource+0x186>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800815a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008174:	d03e      	beq.n	80081f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817a:	f200 8087 	bhi.w	800828c <HAL_TIM_ConfigClockSource+0x16c>
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	f000 8086 	beq.w	8008292 <HAL_TIM_ConfigClockSource+0x172>
 8008186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818a:	d87f      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 800818c:	2b70      	cmp	r3, #112	; 0x70
 800818e:	d01a      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008190:	2b70      	cmp	r3, #112	; 0x70
 8008192:	d87b      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 8008194:	2b60      	cmp	r3, #96	; 0x60
 8008196:	d050      	beq.n	800823a <HAL_TIM_ConfigClockSource+0x11a>
 8008198:	2b60      	cmp	r3, #96	; 0x60
 800819a:	d877      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 800819c:	2b50      	cmp	r3, #80	; 0x50
 800819e:	d03c      	beq.n	800821a <HAL_TIM_ConfigClockSource+0xfa>
 80081a0:	2b50      	cmp	r3, #80	; 0x50
 80081a2:	d873      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d058      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x13a>
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d86f      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 80081ac:	2b30      	cmp	r3, #48	; 0x30
 80081ae:	d064      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x15a>
 80081b0:	2b30      	cmp	r3, #48	; 0x30
 80081b2:	d86b      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d060      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x15a>
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d867      	bhi.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d05c      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x15a>
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d05a      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x15a>
 80081c4:	e062      	b.n	800828c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6899      	ldr	r1, [r3, #8]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f000 fcb9 	bl	8008b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	609a      	str	r2, [r3, #8]
      break;
 80081f2:	e04f      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	6899      	ldr	r1, [r3, #8]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f000 fca2 	bl	8008b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008216:	609a      	str	r2, [r3, #8]
      break;
 8008218:	e03c      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6859      	ldr	r1, [r3, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	461a      	mov	r2, r3
 8008228:	f000 fb60 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2150      	movs	r1, #80	; 0x50
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fc6f 	bl	8008b16 <TIM_ITRx_SetConfig>
      break;
 8008238:	e02c      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6859      	ldr	r1, [r3, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	461a      	mov	r2, r3
 8008248:	f000 fbbc 	bl	80089c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2160      	movs	r1, #96	; 0x60
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fc5f 	bl	8008b16 <TIM_ITRx_SetConfig>
      break;
 8008258:	e01c      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6859      	ldr	r1, [r3, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	461a      	mov	r2, r3
 8008268:	f000 fb40 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2140      	movs	r1, #64	; 0x40
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fc4f 	bl	8008b16 <TIM_ITRx_SetConfig>
      break;
 8008278:	e00c      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f000 fc46 	bl	8008b16 <TIM_ITRx_SetConfig>
      break;
 800828a:	e003      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
      break;
 8008290:	e000      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a40      	ldr	r2, [pc, #256]	; (8008478 <TIM_Base_SetConfig+0x114>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008382:	d00f      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a3d      	ldr	r2, [pc, #244]	; (800847c <TIM_Base_SetConfig+0x118>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00b      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a3c      	ldr	r2, [pc, #240]	; (8008480 <TIM_Base_SetConfig+0x11c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d007      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a3b      	ldr	r2, [pc, #236]	; (8008484 <TIM_Base_SetConfig+0x120>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a3a      	ldr	r2, [pc, #232]	; (8008488 <TIM_Base_SetConfig+0x124>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d108      	bne.n	80083b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a2f      	ldr	r2, [pc, #188]	; (8008478 <TIM_Base_SetConfig+0x114>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c4:	d027      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a2c      	ldr	r2, [pc, #176]	; (800847c <TIM_Base_SetConfig+0x118>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d023      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2b      	ldr	r2, [pc, #172]	; (8008480 <TIM_Base_SetConfig+0x11c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d01f      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a2a      	ldr	r2, [pc, #168]	; (8008484 <TIM_Base_SetConfig+0x120>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a29      	ldr	r2, [pc, #164]	; (8008488 <TIM_Base_SetConfig+0x124>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d017      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a28      	ldr	r2, [pc, #160]	; (800848c <TIM_Base_SetConfig+0x128>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d013      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a27      	ldr	r2, [pc, #156]	; (8008490 <TIM_Base_SetConfig+0x12c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00f      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a26      	ldr	r2, [pc, #152]	; (8008494 <TIM_Base_SetConfig+0x130>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a25      	ldr	r2, [pc, #148]	; (8008498 <TIM_Base_SetConfig+0x134>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d007      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a24      	ldr	r2, [pc, #144]	; (800849c <TIM_Base_SetConfig+0x138>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <TIM_Base_SetConfig+0x13c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d108      	bne.n	8008428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800841c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a0a      	ldr	r2, [pc, #40]	; (8008478 <TIM_Base_SetConfig+0x114>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0xf8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <TIM_Base_SetConfig+0x124>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d103      	bne.n	8008464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	615a      	str	r2, [r3, #20]
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40010000 	.word	0x40010000
 800847c:	40000400 	.word	0x40000400
 8008480:	40000800 	.word	0x40000800
 8008484:	40000c00 	.word	0x40000c00
 8008488:	40010400 	.word	0x40010400
 800848c:	40014000 	.word	0x40014000
 8008490:	40014400 	.word	0x40014400
 8008494:	40014800 	.word	0x40014800
 8008498:	40001800 	.word	0x40001800
 800849c:	40001c00 	.word	0x40001c00
 80084a0:	40002000 	.word	0x40002000

080084a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 0302 	bic.w	r3, r3, #2
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a20      	ldr	r2, [pc, #128]	; (800857c <TIM_OC1_SetConfig+0xd8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC1_SetConfig+0x64>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <TIM_OC1_SetConfig+0xdc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d10c      	bne.n	8008522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f023 0308 	bic.w	r3, r3, #8
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 0304 	bic.w	r3, r3, #4
 8008520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a15      	ldr	r2, [pc, #84]	; (800857c <TIM_OC1_SetConfig+0xd8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_OC1_SetConfig+0x8e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a14      	ldr	r2, [pc, #80]	; (8008580 <TIM_OC1_SetConfig+0xdc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d111      	bne.n	8008556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	621a      	str	r2, [r3, #32]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40010000 	.word	0x40010000
 8008580:	40010400 	.word	0x40010400

08008584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0210 	bic.w	r2, r3, #16
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 0320 	bic.w	r3, r3, #32
 80085ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a22      	ldr	r2, [pc, #136]	; (8008668 <TIM_OC2_SetConfig+0xe4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <TIM_OC2_SetConfig+0x68>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a21      	ldr	r2, [pc, #132]	; (800866c <TIM_OC2_SetConfig+0xe8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d10d      	bne.n	8008608 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008606:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <TIM_OC2_SetConfig+0xe4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC2_SetConfig+0x94>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a16      	ldr	r2, [pc, #88]	; (800866c <TIM_OC2_SetConfig+0xe8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d113      	bne.n	8008640 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	40010000 	.word	0x40010000
 800866c:	40010400 	.word	0x40010400

08008670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a21      	ldr	r2, [pc, #132]	; (8008750 <TIM_OC3_SetConfig+0xe0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d003      	beq.n	80086d6 <TIM_OC3_SetConfig+0x66>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a20      	ldr	r2, [pc, #128]	; (8008754 <TIM_OC3_SetConfig+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d10d      	bne.n	80086f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a16      	ldr	r2, [pc, #88]	; (8008750 <TIM_OC3_SetConfig+0xe0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d003      	beq.n	8008702 <TIM_OC3_SetConfig+0x92>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a15      	ldr	r2, [pc, #84]	; (8008754 <TIM_OC3_SetConfig+0xe4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d113      	bne.n	800872a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4313      	orrs	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	621a      	str	r2, [r3, #32]
}
 8008744:	bf00      	nop
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	40010000 	.word	0x40010000
 8008754:	40010400 	.word	0x40010400

08008758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	031b      	lsls	r3, r3, #12
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a12      	ldr	r2, [pc, #72]	; (80087fc <TIM_OC4_SetConfig+0xa4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_OC4_SetConfig+0x68>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a11      	ldr	r2, [pc, #68]	; (8008800 <TIM_OC4_SetConfig+0xa8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d109      	bne.n	80087d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	019b      	lsls	r3, r3, #6
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	621a      	str	r2, [r3, #32]
}
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400

08008804 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4a28      	ldr	r2, [pc, #160]	; (80088d0 <TIM_TI1_SetConfig+0xcc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01b      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008838:	d017      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <TIM_TI1_SetConfig+0xd0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <TIM_TI1_SetConfig+0xd4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00f      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4a23      	ldr	r2, [pc, #140]	; (80088dc <TIM_TI1_SetConfig+0xd8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00b      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a22      	ldr	r2, [pc, #136]	; (80088e0 <TIM_TI1_SetConfig+0xdc>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d007      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a21      	ldr	r2, [pc, #132]	; (80088e4 <TIM_TI1_SetConfig+0xe0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_TI1_SetConfig+0x66>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4a20      	ldr	r2, [pc, #128]	; (80088e8 <TIM_TI1_SetConfig+0xe4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d101      	bne.n	800886e <TIM_TI1_SetConfig+0x6a>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <TIM_TI1_SetConfig+0x6c>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e003      	b.n	800888e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	b2db      	uxtb	r3, r3
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f023 030a 	bic.w	r3, r3, #10
 80088a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f003 030a 	and.w	r3, r3, #10
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40001800 	.word	0x40001800

080088ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 030a 	bic.w	r3, r3, #10
 8008928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800894a:	b480      	push	{r7}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	f023 0210 	bic.w	r2, r3, #16
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008976:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	021b      	lsls	r3, r3, #8
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	031b      	lsls	r3, r3, #12
 800898e:	b29b      	uxth	r3, r3
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800899c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	621a      	str	r2, [r3, #32]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	f023 0210 	bic.w	r2, r3, #16
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	031b      	lsls	r3, r3, #12
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	621a      	str	r2, [r3, #32]
}
 8008a18:	bf00      	nop
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f023 0303 	bic.w	r3, r3, #3
 8008a50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008a74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	621a      	str	r2, [r3, #32]
}
 8008a90:	bf00      	nop
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ada:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	031b      	lsls	r3, r3, #12
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008aee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	031b      	lsls	r3, r3, #12
 8008af4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	621a      	str	r2, [r3, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f043 0307 	orr.w	r3, r3, #7
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	609a      	str	r2, [r3, #8]
}
 8008b40:	bf00      	nop
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	021a      	lsls	r2, r3, #8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	609a      	str	r2, [r3, #8]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f003 031f 	and.w	r3, r3, #31
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1a      	ldr	r2, [r3, #32]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	43db      	mvns	r3, r3
 8008bae:	401a      	ands	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 031f 	and.w	r3, r3, #31
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	621a      	str	r2, [r3, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
	...

08008bd8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <TIM_ResetCallback+0x7c>)
 8008be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1b      	ldr	r2, [pc, #108]	; (8008c58 <TIM_ResetCallback+0x80>)
 8008bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1a      	ldr	r2, [pc, #104]	; (8008c5c <TIM_ResetCallback+0x84>)
 8008bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <TIM_ResetCallback+0x88>)
 8008bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <TIM_ResetCallback+0x8c>)
 8008c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <TIM_ResetCallback+0x90>)
 8008c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <TIM_ResetCallback+0x94>)
 8008c14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <TIM_ResetCallback+0x98>)
 8008c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <TIM_ResetCallback+0x9c>)
 8008c24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a13      	ldr	r2, [pc, #76]	; (8008c78 <TIM_ResetCallback+0xa0>)
 8008c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <TIM_ResetCallback+0xa4>)
 8008c34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <TIM_ResetCallback+0xa8>)
 8008c3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a10      	ldr	r2, [pc, #64]	; (8008c84 <TIM_ResetCallback+0xac>)
 8008c44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	0800268d 	.word	0x0800268d
 8008c58:	080082af 	.word	0x080082af
 8008c5c:	08008327 	.word	0x08008327
 8008c60:	0800833b 	.word	0x0800833b
 8008c64:	080082d7 	.word	0x080082d7
 8008c68:	080082eb 	.word	0x080082eb
 8008c6c:	080082c3 	.word	0x080082c3
 8008c70:	080082ff 	.word	0x080082ff
 8008c74:	08008313 	.word	0x08008313
 8008c78:	0800834f 	.word	0x0800834f
 8008c7c:	08008e25 	.word	0x08008e25
 8008c80:	08008e39 	.word	0x08008e39
 8008c84:	08008e4d 	.word	0x08008e4d

08008c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e05a      	b.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a21      	ldr	r2, [pc, #132]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d022      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d01d      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d018      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1a      	ldr	r2, [pc, #104]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00e      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d009      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a17      	ldr	r2, [pc, #92]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d004      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10c      	bne.n	8008d44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40010000 	.word	0x40010000
 8008d68:	40000400 	.word	0x40000400
 8008d6c:	40000800 	.word	0x40000800
 8008d70:	40000c00 	.word	0x40000c00
 8008d74:	40010400 	.word	0x40010400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40001800 	.word	0x40001800

08008d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e03d      	b.n	8008e18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e04a      	b.n	8008f08 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d111      	bne.n	8008ea2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f9d4 	bl	8009234 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <HAL_UART_Init+0xb0>)
 8008e98:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2224      	movs	r2, #36	; 0x24
 8008ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa60 	bl	8009380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ece:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695a      	ldr	r2, [r3, #20]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ede:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	08002a15 	.word	0x08002a15

08008f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d17c      	bne.n	800902e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <HAL_UART_Transmit+0x2c>
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e075      	b.n	8009030 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <HAL_UART_Transmit+0x3e>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e06e      	b.n	8009030 <HAL_UART_Transmit+0x11c>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2221      	movs	r2, #33	; 0x21
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f68:	f7fc ff8e 	bl	8005e88 <HAL_GetTick>
 8008f6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	88fa      	ldrh	r2, [r7, #6]
 8008f78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f82:	d108      	bne.n	8008f96 <HAL_UART_Transmit+0x82>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e003      	b.n	8008f9e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fa6:	e02a      	b.n	8008ffe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f976 	bl	80092a4 <UART_WaitOnFlagUntilTimeout>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e036      	b.n	8009030 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fd6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e007      	b.n	8008ff0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	781a      	ldrb	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	3301      	adds	r3, #1
 8008fee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1cf      	bne.n	8008fa8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2200      	movs	r2, #0
 8009010:	2140      	movs	r1, #64	; 0x40
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 f946 	bl	80092a4 <UART_WaitOnFlagUntilTimeout>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e006      	b.n	8009030 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
  }
}
 8009030:	4618      	mov	r0, r3
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08a      	sub	sp, #40	; 0x28
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b20      	cmp	r3, #32
 8009056:	f040 808c 	bne.w	8009172 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_UART_Receive+0x2e>
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e084      	b.n	8009174 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_UART_Receive+0x40>
 8009074:	2302      	movs	r3, #2
 8009076:	e07d      	b.n	8009174 <HAL_UART_Receive+0x13c>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2222      	movs	r2, #34	; 0x22
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009094:	f7fc fef8 	bl	8005e88 <HAL_GetTick>
 8009098:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	88fa      	ldrh	r2, [r7, #6]
 800909e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ae:	d108      	bne.n	80090c2 <HAL_UART_Receive+0x8a>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	e003      	b.n	80090ca <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80090d2:	e043      	b.n	800915c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2200      	movs	r2, #0
 80090dc:	2120      	movs	r1, #32
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f8e0 	bl	80092a4 <UART_WaitOnFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e042      	b.n	8009174 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10c      	bne.n	800910e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009100:	b29a      	uxth	r2, r3
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	3302      	adds	r3, #2
 800910a:	61bb      	str	r3, [r7, #24]
 800910c:	e01f      	b.n	800914e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009116:	d007      	beq.n	8009128 <HAL_UART_Receive+0xf0>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <HAL_UART_Receive+0xfe>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d106      	bne.n	8009136 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	e008      	b.n	8009148 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009142:	b2da      	uxtb	r2, r3
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	3301      	adds	r3, #1
 800914c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1b6      	bne.n	80090d4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009172:	2302      	movs	r3, #2
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a10      	ldr	r2, [pc, #64]	; (8009280 <UART_InitCallbacksToDefault+0x4c>)
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a0f      	ldr	r2, [pc, #60]	; (8009284 <UART_InitCallbacksToDefault+0x50>)
 8009246:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a0f      	ldr	r2, [pc, #60]	; (8009288 <UART_InitCallbacksToDefault+0x54>)
 800924c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a0e      	ldr	r2, [pc, #56]	; (800928c <UART_InitCallbacksToDefault+0x58>)
 8009252:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a0e      	ldr	r2, [pc, #56]	; (8009290 <UART_InitCallbacksToDefault+0x5c>)
 8009258:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a0d      	ldr	r2, [pc, #52]	; (8009294 <UART_InitCallbacksToDefault+0x60>)
 800925e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <UART_InitCallbacksToDefault+0x64>)
 8009264:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a0c      	ldr	r2, [pc, #48]	; (800929c <UART_InitCallbacksToDefault+0x68>)
 800926a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <UART_InitCallbacksToDefault+0x6c>)
 8009270:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	08009191 	.word	0x08009191
 8009284:	0800917d 	.word	0x0800917d
 8009288:	080091b9 	.word	0x080091b9
 800928c:	080091a5 	.word	0x080091a5
 8009290:	080091cd 	.word	0x080091cd
 8009294:	080091e1 	.word	0x080091e1
 8009298:	080091f5 	.word	0x080091f5
 800929c:	08009209 	.word	0x08009209
 80092a0:	0800921d 	.word	0x0800921d

080092a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b090      	sub	sp, #64	; 0x40
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b4:	e050      	b.n	8009358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092bc:	d04c      	beq.n	8009358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092c4:	f7fc fde0 	bl	8005e88 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d241      	bcs.n	8009358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	330c      	adds	r3, #12
 80092f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092f4:	637a      	str	r2, [r7, #52]	; 0x34
 80092f6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e5      	bne.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	613b      	str	r3, [r7, #16]
   return(result);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3314      	adds	r3, #20
 8009326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009328:	623a      	str	r2, [r7, #32]
 800932a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	69f9      	ldr	r1, [r7, #28]
 800932e:	6a3a      	ldr	r2, [r7, #32]
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	61bb      	str	r3, [r7, #24]
   return(result);
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e5      	bne.n	8009308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e00f      	b.n	8009378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4013      	ands	r3, r2
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	429a      	cmp	r2, r3
 8009366:	bf0c      	ite	eq
 8009368:	2301      	moveq	r3, #1
 800936a:	2300      	movne	r3, #0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	461a      	mov	r2, r3
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	429a      	cmp	r2, r3
 8009374:	d09f      	beq.n	80092b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3740      	adds	r7, #64	; 0x40
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	b09f      	sub	sp, #124	; 0x7c
 8009386:	af00      	add	r7, sp, #0
 8009388:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800938a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	68d9      	ldr	r1, [r3, #12]
 8009398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	ea40 0301 	orr.w	r3, r0, r1
 80093a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	431a      	orrs	r2, r3
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80093ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093c4:	f021 010c 	bic.w	r1, r1, #12
 80093c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093ce:	430b      	orrs	r3, r1
 80093d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093de:	6999      	ldr	r1, [r3, #24]
 80093e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	ea40 0301 	orr.w	r3, r0, r1
 80093e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4bc5      	ldr	r3, [pc, #788]	; (8009704 <UART_SetConfig+0x384>)
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d004      	beq.n	80093fe <UART_SetConfig+0x7e>
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	4bc3      	ldr	r3, [pc, #780]	; (8009708 <UART_SetConfig+0x388>)
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d103      	bne.n	8009406 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093fe:	f7fd f93b 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 8009402:	6778      	str	r0, [r7, #116]	; 0x74
 8009404:	e002      	b.n	800940c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009406:	f7fd f923 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 800940a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800940c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009414:	f040 80b6 	bne.w	8009584 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800941a:	461c      	mov	r4, r3
 800941c:	f04f 0500 	mov.w	r5, #0
 8009420:	4622      	mov	r2, r4
 8009422:	462b      	mov	r3, r5
 8009424:	1891      	adds	r1, r2, r2
 8009426:	6439      	str	r1, [r7, #64]	; 0x40
 8009428:	415b      	adcs	r3, r3
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
 800942c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009430:	1912      	adds	r2, r2, r4
 8009432:	eb45 0303 	adc.w	r3, r5, r3
 8009436:	f04f 0000 	mov.w	r0, #0
 800943a:	f04f 0100 	mov.w	r1, #0
 800943e:	00d9      	lsls	r1, r3, #3
 8009440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009444:	00d0      	lsls	r0, r2, #3
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	1911      	adds	r1, r2, r4
 800944c:	6639      	str	r1, [r7, #96]	; 0x60
 800944e:	416b      	adcs	r3, r5
 8009450:	667b      	str	r3, [r7, #100]	; 0x64
 8009452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	461a      	mov	r2, r3
 8009458:	f04f 0300 	mov.w	r3, #0
 800945c:	1891      	adds	r1, r2, r2
 800945e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009460:	415b      	adcs	r3, r3
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009468:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800946c:	f7f7 fc2c 	bl	8000cc8 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4ba5      	ldr	r3, [pc, #660]	; (800970c <UART_SetConfig+0x38c>)
 8009476:	fba3 2302 	umull	r2, r3, r3, r2
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	011e      	lsls	r6, r3, #4
 800947e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009480:	461c      	mov	r4, r3
 8009482:	f04f 0500 	mov.w	r5, #0
 8009486:	4622      	mov	r2, r4
 8009488:	462b      	mov	r3, r5
 800948a:	1891      	adds	r1, r2, r2
 800948c:	6339      	str	r1, [r7, #48]	; 0x30
 800948e:	415b      	adcs	r3, r3
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
 8009492:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009496:	1912      	adds	r2, r2, r4
 8009498:	eb45 0303 	adc.w	r3, r5, r3
 800949c:	f04f 0000 	mov.w	r0, #0
 80094a0:	f04f 0100 	mov.w	r1, #0
 80094a4:	00d9      	lsls	r1, r3, #3
 80094a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094aa:	00d0      	lsls	r0, r2, #3
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	1911      	adds	r1, r2, r4
 80094b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80094b4:	416b      	adcs	r3, r5
 80094b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	461a      	mov	r2, r3
 80094be:	f04f 0300 	mov.w	r3, #0
 80094c2:	1891      	adds	r1, r2, r2
 80094c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80094c6:	415b      	adcs	r3, r3
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094d2:	f7f7 fbf9 	bl	8000cc8 <__aeabi_uldivmod>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4b8c      	ldr	r3, [pc, #560]	; (800970c <UART_SetConfig+0x38c>)
 80094dc:	fba3 1302 	umull	r1, r3, r3, r2
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	2164      	movs	r1, #100	; 0x64
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	3332      	adds	r3, #50	; 0x32
 80094ee:	4a87      	ldr	r2, [pc, #540]	; (800970c <UART_SetConfig+0x38c>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094fc:	441e      	add	r6, r3
 80094fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009500:	4618      	mov	r0, r3
 8009502:	f04f 0100 	mov.w	r1, #0
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	1894      	adds	r4, r2, r2
 800950c:	623c      	str	r4, [r7, #32]
 800950e:	415b      	adcs	r3, r3
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
 8009512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009516:	1812      	adds	r2, r2, r0
 8009518:	eb41 0303 	adc.w	r3, r1, r3
 800951c:	f04f 0400 	mov.w	r4, #0
 8009520:	f04f 0500 	mov.w	r5, #0
 8009524:	00dd      	lsls	r5, r3, #3
 8009526:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800952a:	00d4      	lsls	r4, r2, #3
 800952c:	4622      	mov	r2, r4
 800952e:	462b      	mov	r3, r5
 8009530:	1814      	adds	r4, r2, r0
 8009532:	653c      	str	r4, [r7, #80]	; 0x50
 8009534:	414b      	adcs	r3, r1
 8009536:	657b      	str	r3, [r7, #84]	; 0x54
 8009538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	461a      	mov	r2, r3
 800953e:	f04f 0300 	mov.w	r3, #0
 8009542:	1891      	adds	r1, r2, r2
 8009544:	61b9      	str	r1, [r7, #24]
 8009546:	415b      	adcs	r3, r3
 8009548:	61fb      	str	r3, [r7, #28]
 800954a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800954e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009552:	f7f7 fbb9 	bl	8000cc8 <__aeabi_uldivmod>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4b6c      	ldr	r3, [pc, #432]	; (800970c <UART_SetConfig+0x38c>)
 800955c:	fba3 1302 	umull	r1, r3, r3, r2
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	2164      	movs	r1, #100	; 0x64
 8009564:	fb01 f303 	mul.w	r3, r1, r3
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	3332      	adds	r3, #50	; 0x32
 800956e:	4a67      	ldr	r2, [pc, #412]	; (800970c <UART_SetConfig+0x38c>)
 8009570:	fba2 2303 	umull	r2, r3, r2, r3
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	f003 0207 	and.w	r2, r3, #7
 800957a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4432      	add	r2, r6
 8009580:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009582:	e0b9      	b.n	80096f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009586:	461c      	mov	r4, r3
 8009588:	f04f 0500 	mov.w	r5, #0
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	1891      	adds	r1, r2, r2
 8009592:	6139      	str	r1, [r7, #16]
 8009594:	415b      	adcs	r3, r3
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800959c:	1912      	adds	r2, r2, r4
 800959e:	eb45 0303 	adc.w	r3, r5, r3
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f04f 0100 	mov.w	r1, #0
 80095aa:	00d9      	lsls	r1, r3, #3
 80095ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095b0:	00d0      	lsls	r0, r2, #3
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	eb12 0804 	adds.w	r8, r2, r4
 80095ba:	eb43 0905 	adc.w	r9, r3, r5
 80095be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f04f 0100 	mov.w	r1, #0
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	008b      	lsls	r3, r1, #2
 80095d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095d6:	0082      	lsls	r2, r0, #2
 80095d8:	4640      	mov	r0, r8
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f7 fb74 	bl	8000cc8 <__aeabi_uldivmod>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4b49      	ldr	r3, [pc, #292]	; (800970c <UART_SetConfig+0x38c>)
 80095e6:	fba3 2302 	umull	r2, r3, r3, r2
 80095ea:	095b      	lsrs	r3, r3, #5
 80095ec:	011e      	lsls	r6, r3, #4
 80095ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f0:	4618      	mov	r0, r3
 80095f2:	f04f 0100 	mov.w	r1, #0
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	1894      	adds	r4, r2, r2
 80095fc:	60bc      	str	r4, [r7, #8]
 80095fe:	415b      	adcs	r3, r3
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009606:	1812      	adds	r2, r2, r0
 8009608:	eb41 0303 	adc.w	r3, r1, r3
 800960c:	f04f 0400 	mov.w	r4, #0
 8009610:	f04f 0500 	mov.w	r5, #0
 8009614:	00dd      	lsls	r5, r3, #3
 8009616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800961a:	00d4      	lsls	r4, r2, #3
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	1814      	adds	r4, r2, r0
 8009622:	64bc      	str	r4, [r7, #72]	; 0x48
 8009624:	414b      	adcs	r3, r1
 8009626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	008b      	lsls	r3, r1, #2
 800963c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009640:	0082      	lsls	r2, r0, #2
 8009642:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009646:	f7f7 fb3f 	bl	8000cc8 <__aeabi_uldivmod>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4b2f      	ldr	r3, [pc, #188]	; (800970c <UART_SetConfig+0x38c>)
 8009650:	fba3 1302 	umull	r1, r3, r3, r2
 8009654:	095b      	lsrs	r3, r3, #5
 8009656:	2164      	movs	r1, #100	; 0x64
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	3332      	adds	r3, #50	; 0x32
 8009662:	4a2a      	ldr	r2, [pc, #168]	; (800970c <UART_SetConfig+0x38c>)
 8009664:	fba2 2303 	umull	r2, r3, r2, r3
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800966e:	441e      	add	r6, r3
 8009670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009672:	4618      	mov	r0, r3
 8009674:	f04f 0100 	mov.w	r1, #0
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	1894      	adds	r4, r2, r2
 800967e:	603c      	str	r4, [r7, #0]
 8009680:	415b      	adcs	r3, r3
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009688:	1812      	adds	r2, r2, r0
 800968a:	eb41 0303 	adc.w	r3, r1, r3
 800968e:	f04f 0400 	mov.w	r4, #0
 8009692:	f04f 0500 	mov.w	r5, #0
 8009696:	00dd      	lsls	r5, r3, #3
 8009698:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800969c:	00d4      	lsls	r4, r2, #3
 800969e:	4622      	mov	r2, r4
 80096a0:	462b      	mov	r3, r5
 80096a2:	eb12 0a00 	adds.w	sl, r2, r0
 80096a6:	eb43 0b01 	adc.w	fp, r3, r1
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f04f 0100 	mov.w	r1, #0
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	008b      	lsls	r3, r1, #2
 80096be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096c2:	0082      	lsls	r2, r0, #2
 80096c4:	4650      	mov	r0, sl
 80096c6:	4659      	mov	r1, fp
 80096c8:	f7f7 fafe 	bl	8000cc8 <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4b0e      	ldr	r3, [pc, #56]	; (800970c <UART_SetConfig+0x38c>)
 80096d2:	fba3 1302 	umull	r1, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	2164      	movs	r1, #100	; 0x64
 80096da:	fb01 f303 	mul.w	r3, r1, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	3332      	adds	r3, #50	; 0x32
 80096e4:	4a09      	ldr	r2, [pc, #36]	; (800970c <UART_SetConfig+0x38c>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4432      	add	r2, r6
 80096f6:	609a      	str	r2, [r3, #8]
}
 80096f8:	bf00      	nop
 80096fa:	377c      	adds	r7, #124	; 0x7c
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	bf00      	nop
 8009704:	40011000 	.word	0x40011000
 8009708:	40011400 	.word	0x40011400
 800970c:	51eb851f 	.word	0x51eb851f

08009710 <__NVIC_SetPriority>:
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800971c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009720:	2b00      	cmp	r3, #0
 8009722:	db0a      	blt.n	800973a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	b2da      	uxtb	r2, r3
 8009728:	490c      	ldr	r1, [pc, #48]	; (800975c <__NVIC_SetPriority+0x4c>)
 800972a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972e:	0112      	lsls	r2, r2, #4
 8009730:	b2d2      	uxtb	r2, r2
 8009732:	440b      	add	r3, r1
 8009734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009738:	e00a      	b.n	8009750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4908      	ldr	r1, [pc, #32]	; (8009760 <__NVIC_SetPriority+0x50>)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	3b04      	subs	r3, #4
 8009748:	0112      	lsls	r2, r2, #4
 800974a:	b2d2      	uxtb	r2, r2
 800974c:	440b      	add	r3, r1
 800974e:	761a      	strb	r2, [r3, #24]
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	e000e100 	.word	0xe000e100
 8009760:	e000ed00 	.word	0xe000ed00

08009764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <SysTick_Handler+0x1c>)
 800976a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800976c:	f002 fa26 	bl	800bbbc <xTaskGetSchedulerState>
 8009770:	4603      	mov	r3, r0
 8009772:	2b01      	cmp	r3, #1
 8009774:	d001      	beq.n	800977a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009776:	f003 f90f 	bl	800c998 <xPortSysTickHandler>
  }
}
 800977a:	bf00      	nop
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	e000e010 	.word	0xe000e010

08009784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009788:	2100      	movs	r1, #0
 800978a:	f06f 0004 	mvn.w	r0, #4
 800978e:	f7ff ffbf 	bl	8009710 <__NVIC_SetPriority>
#endif
}
 8009792:	bf00      	nop
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979e:	f3ef 8305 	mrs	r3, IPSR
 80097a2:	603b      	str	r3, [r7, #0]
  return(result);
 80097a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097aa:	f06f 0305 	mvn.w	r3, #5
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	e00c      	b.n	80097cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097b2:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <osKernelInitialize+0x44>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <osKernelInitialize+0x44>)
 80097bc:	2201      	movs	r2, #1
 80097be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e002      	b.n	80097cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097cc:	687b      	ldr	r3, [r7, #4]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20000224 	.word	0x20000224

080097e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e6:	f3ef 8305 	mrs	r3, IPSR
 80097ea:	603b      	str	r3, [r7, #0]
  return(result);
 80097ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80097f2:	f06f 0305 	mvn.w	r3, #5
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	e010      	b.n	800981c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <osKernelStart+0x48>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d109      	bne.n	8009816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009802:	f7ff ffbf 	bl	8009784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009806:	4b08      	ldr	r3, [pc, #32]	; (8009828 <osKernelStart+0x48>)
 8009808:	2202      	movs	r2, #2
 800980a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800980c:	f001 fd68 	bl	800b2e0 <vTaskStartScheduler>
      stat = osOK;
 8009810:	2300      	movs	r3, #0
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e002      	b.n	800981c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800981a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800981c:	687b      	ldr	r3, [r7, #4]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000224 	.word	0x20000224

0800982c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009832:	f3ef 8305 	mrs	r3, IPSR
 8009836:	603b      	str	r3, [r7, #0]
  return(result);
 8009838:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800983e:	f001 fe7b 	bl	800b538 <xTaskGetTickCountFromISR>
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	e002      	b.n	800984c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009846:	f001 fe67 	bl	800b518 <xTaskGetTickCount>
 800984a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800984c:	687b      	ldr	r3, [r7, #4]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009856:	b580      	push	{r7, lr}
 8009858:	b08e      	sub	sp, #56	; 0x38
 800985a:	af04      	add	r7, sp, #16
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009866:	f3ef 8305 	mrs	r3, IPSR
 800986a:	617b      	str	r3, [r7, #20]
  return(result);
 800986c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800986e:	2b00      	cmp	r3, #0
 8009870:	d17e      	bne.n	8009970 <osThreadNew+0x11a>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d07b      	beq.n	8009970 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800987c:	2318      	movs	r3, #24
 800987e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009880:	2300      	movs	r3, #0
 8009882:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009888:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d045      	beq.n	800991c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <osThreadNew+0x48>
        name = attr->name;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <osThreadNew+0x6e>
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b38      	cmp	r3, #56	; 0x38
 80098b6:	d805      	bhi.n	80098c4 <osThreadNew+0x6e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <osThreadNew+0x72>
        return (NULL);
 80098c4:	2300      	movs	r3, #0
 80098c6:	e054      	b.n	8009972 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	089b      	lsrs	r3, r3, #2
 80098d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00e      	beq.n	80098fe <osThreadNew+0xa8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2bbb      	cmp	r3, #187	; 0xbb
 80098e6:	d90a      	bls.n	80098fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <osThreadNew+0xa8>
        mem = 1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	61bb      	str	r3, [r7, #24]
 80098fc:	e010      	b.n	8009920 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10c      	bne.n	8009920 <osThreadNew+0xca>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d108      	bne.n	8009920 <osThreadNew+0xca>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d104      	bne.n	8009920 <osThreadNew+0xca>
          mem = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e001      	b.n	8009920 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d110      	bne.n	8009948 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800992e:	9202      	str	r2, [sp, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6a3a      	ldr	r2, [r7, #32]
 800993a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f001 fa6d 	bl	800ae1c <xTaskCreateStatic>
 8009942:	4603      	mov	r3, r0
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	e013      	b.n	8009970 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d110      	bne.n	8009970 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	b29a      	uxth	r2, r3
 8009952:	f107 0310 	add.w	r3, r7, #16
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f001 fab8 	bl	800aed6 <xTaskCreate>
 8009966:	4603      	mov	r3, r0
 8009968:	2b01      	cmp	r3, #1
 800996a:	d001      	beq.n	8009970 <osThreadNew+0x11a>
            hTask = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009970:	693b      	ldr	r3, [r7, #16]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3728      	adds	r7, #40	; 0x28
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009986:	f3ef 8305 	mrs	r3, IPSR
 800998a:	60fb      	str	r3, [r7, #12]
  return(result);
 800998c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <osThreadSuspend+0x20>
    stat = osErrorISR;
 8009992:	f06f 0305 	mvn.w	r3, #5
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	e00b      	b.n	80099b2 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80099a0:	f06f 0303 	mvn.w	r3, #3
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e004      	b.n	80099b2 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80099ac:	6938      	ldr	r0, [r7, #16]
 80099ae:	f001 fc21 	bl	800b1f4 <vTaskSuspend>
  }

  return (stat);
 80099b2:	697b      	ldr	r3, [r7, #20]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3718      	adds	r7, #24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c4:	f3ef 8305 	mrs	r3, IPSR
 80099c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <osDelay+0x1c>
    stat = osErrorISR;
 80099d0:	f06f 0305 	mvn.w	r3, #5
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	e007      	b.n	80099e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 fbd2 	bl	800b18c <vTaskDelay>
    }
  }

  return (stat);
 80099e8:	68fb      	ldr	r3, [r7, #12]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b08a      	sub	sp, #40	; 0x28
 80099f6:	af02      	add	r7, sp, #8
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a02:	f3ef 8305 	mrs	r3, IPSR
 8009a06:	613b      	str	r3, [r7, #16]
  return(result);
 8009a08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d175      	bne.n	8009afa <osSemaphoreNew+0x108>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d072      	beq.n	8009afa <osSemaphoreNew+0x108>
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d86e      	bhi.n	8009afa <osSemaphoreNew+0x108>
    mem = -1;
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d015      	beq.n	8009a54 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <osSemaphoreNew+0x4c>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b4f      	cmp	r3, #79	; 0x4f
 8009a36:	d902      	bls.n	8009a3e <osSemaphoreNew+0x4c>
        mem = 1;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	e00c      	b.n	8009a58 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d108      	bne.n	8009a58 <osSemaphoreNew+0x66>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <osSemaphoreNew+0x66>
          mem = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61bb      	str	r3, [r7, #24]
 8009a52:	e001      	b.n	8009a58 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a5e:	d04c      	beq.n	8009afa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d128      	bne.n	8009ab8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d10a      	bne.n	8009a82 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	2203      	movs	r2, #3
 8009a72:	9200      	str	r2, [sp, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f000 fa29 	bl	8009ed0 <xQueueGenericCreateStatic>
 8009a7e:	61f8      	str	r0, [r7, #28]
 8009a80:	e005      	b.n	8009a8e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a82:	2203      	movs	r2, #3
 8009a84:	2100      	movs	r1, #0
 8009a86:	2001      	movs	r0, #1
 8009a88:	f000 fa9a 	bl	8009fc0 <xQueueGenericCreate>
 8009a8c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d022      	beq.n	8009ada <osSemaphoreNew+0xe8>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01f      	beq.n	8009ada <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	69f8      	ldr	r0, [r7, #28]
 8009aa2:	f000 fb55 	bl	800a150 <xQueueGenericSend>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d016      	beq.n	8009ada <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009aac:	69f8      	ldr	r0, [r7, #28]
 8009aae:	f000 ffe1 	bl	800aa74 <vQueueDelete>
            hSemaphore = NULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	e010      	b.n	8009ada <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d108      	bne.n	8009ad0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 fad7 	bl	800a07a <xQueueCreateCountingSemaphoreStatic>
 8009acc:	61f8      	str	r0, [r7, #28]
 8009ace:	e004      	b.n	8009ada <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fb08 	bl	800a0e8 <xQueueCreateCountingSemaphore>
 8009ad8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00c      	beq.n	8009afa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <osSemaphoreNew+0xfc>
          name = attr->name;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e001      	b.n	8009af2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009af2:	6979      	ldr	r1, [r7, #20]
 8009af4:	69f8      	ldr	r0, [r7, #28]
 8009af6:	f001 f909 	bl	800ad0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009afa:	69fb      	ldr	r3, [r7, #28]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3720      	adds	r7, #32
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d103      	bne.n	8009b24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009b1c:	f06f 0303 	mvn.w	r3, #3
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e039      	b.n	8009b98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b24:	f3ef 8305 	mrs	r3, IPSR
 8009b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d022      	beq.n	8009b76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009b36:	f06f 0303 	mvn.w	r3, #3
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e02c      	b.n	8009b98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b42:	f107 0308 	add.w	r3, r7, #8
 8009b46:	461a      	mov	r2, r3
 8009b48:	2100      	movs	r1, #0
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f000 ff12 	bl	800a974 <xQueueReceiveFromISR>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d003      	beq.n	8009b5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b56:	f06f 0302 	mvn.w	r3, #2
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e01c      	b.n	8009b98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d019      	beq.n	8009b98 <osSemaphoreAcquire+0x94>
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <osSemaphoreAcquire+0xa0>)
 8009b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	e010      	b.n	8009b98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6938      	ldr	r0, [r7, #16]
 8009b7a:	f000 fdef 	bl	800a75c <xQueueSemaphoreTake>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d009      	beq.n	8009b98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009b8a:	f06f 0301 	mvn.w	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e002      	b.n	8009b98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009b92:	f06f 0302 	mvn.w	r3, #2
 8009b96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b98:	697b      	ldr	r3, [r7, #20]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009bbe:	f06f 0303 	mvn.w	r3, #3
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e02c      	b.n	8009c20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc6:	f3ef 8305 	mrs	r3, IPSR
 8009bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d01a      	beq.n	8009c08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009bd6:	f107 0308 	add.w	r3, r7, #8
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6938      	ldr	r0, [r7, #16]
 8009bde:	f000 fc50 	bl	800a482 <xQueueGiveFromISR>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d003      	beq.n	8009bf0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009be8:	f06f 0302 	mvn.w	r3, #2
 8009bec:	617b      	str	r3, [r7, #20]
 8009bee:	e017      	b.n	8009c20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d014      	beq.n	8009c20 <osSemaphoreRelease+0x78>
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <osSemaphoreRelease+0x84>)
 8009bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	e00b      	b.n	8009c20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6938      	ldr	r0, [r7, #16]
 8009c10:	f000 fa9e 	bl	800a150 <xQueueGenericSend>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009c1a:	f06f 0302 	mvn.w	r3, #2
 8009c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c20:	697b      	ldr	r3, [r7, #20]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4a07      	ldr	r2, [pc, #28]	; (8009c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8009c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vApplicationGetIdleTaskMemory+0x30>)
 8009c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2280      	movs	r2, #128	; 0x80
 8009c4c:	601a      	str	r2, [r3, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000228 	.word	0x20000228
 8009c60:	200002e4 	.word	0x200002e4

08009c64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4a07      	ldr	r2, [pc, #28]	; (8009c90 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	4a06      	ldr	r2, [pc, #24]	; (8009c94 <vApplicationGetTimerTaskMemory+0x30>)
 8009c7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	200004e4 	.word	0x200004e4
 8009c94:	200005a0 	.word	0x200005a0

08009c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f103 0208 	add.w	r2, r3, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f103 0208 	add.w	r2, r3, #8
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f103 0208 	add.w	r2, r3, #8
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d50:	d103      	bne.n	8009d5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	e00c      	b.n	8009d74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e002      	b.n	8009d68 <vListInsert+0x2e>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d2f6      	bcs.n	8009d62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	601a      	str	r2, [r3, #0]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6892      	ldr	r2, [r2, #8]
 8009dc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6852      	ldr	r2, [r2, #4]
 8009dcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d103      	bne.n	8009de0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e2a:	f002 fd23 	bl	800c874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e36:	68f9      	ldr	r1, [r7, #12]
 8009e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	441a      	add	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	68f9      	ldr	r1, [r7, #12]
 8009e5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	; 0xff
 8009e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	22ff      	movs	r2, #255	; 0xff
 8009e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d114      	bne.n	8009eaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01a      	beq.n	8009ebe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3310      	adds	r3, #16
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f001 fcd3 	bl	800b838 <xTaskRemoveFromEventList>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d012      	beq.n	8009ebe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e98:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <xQueueGenericReset+0xcc>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	e009      	b.n	8009ebe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3310      	adds	r3, #16
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff fef2 	bl	8009c98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff feed 	bl	8009c98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ebe:	f002 fd09 	bl	800c8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ec2:	2301      	movs	r3, #1
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08e      	sub	sp, #56	; 0x38
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <xQueueGenericCreateStatic+0x52>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <xQueueGenericCreateStatic+0x56>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <xQueueGenericCreateStatic+0x58>
 8009f26:	2300      	movs	r3, #0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <xQueueGenericCreateStatic+0x7e>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <xQueueGenericCreateStatic+0x82>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xQueueGenericCreateStatic+0x84>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	61fb      	str	r3, [r7, #28]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f6e:	2350      	movs	r3, #80	; 0x50
 8009f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b50      	cmp	r3, #80	; 0x50
 8009f76:	d00a      	beq.n	8009f8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	61bb      	str	r3, [r7, #24]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	4613      	mov	r3, r2
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f83f 	bl	800a034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3730      	adds	r7, #48	; 0x30
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xQueueGenericCreate+0x2a>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	613b      	str	r3, [r7, #16]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	fb02 f303 	mul.w	r3, r2, r3
 8009ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3350      	adds	r3, #80	; 0x50
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 fd5d 	bl	800cab8 <pvPortMalloc>
 8009ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d011      	beq.n	800a02a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	3350      	adds	r3, #80	; 0x50
 800a00e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a018:	79fa      	ldrb	r2, [r7, #7]
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	4613      	mov	r3, r2
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f805 	bl	800a034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a02a:	69bb      	ldr	r3, [r7, #24]
	}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3720      	adds	r7, #32
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d103      	bne.n	800a050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	e002      	b.n	800a056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a062:	2101      	movs	r1, #1
 800a064:	69b8      	ldr	r0, [r7, #24]
 800a066:	f7ff fecb 	bl	8009e00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08a      	sub	sp, #40	; 0x28
 800a07e:	af02      	add	r7, sp, #8
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	61bb      	str	r3, [r7, #24]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d90a      	bls.n	800a0c0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	617b      	str	r3, [r7, #20]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff ff00 	bl	8009ed0 <xQueueGenericCreateStatic>
 800a0d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0de:	69fb      	ldr	r3, [r7, #28]
	}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	613b      	str	r3, [r7, #16]
}
 800a10a:	bf00      	nop
 800a10c:	e7fe      	b.n	800a10c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	429a      	cmp	r2, r3
 800a114:	d90a      	bls.n	800a12c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a12c:	2202      	movs	r2, #2
 800a12e:	2100      	movs	r1, #0
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff ff45 	bl	8009fc0 <xQueueGenericCreate>
 800a136:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a144:	697b      	ldr	r3, [r7, #20]
	}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08e      	sub	sp, #56	; 0x38
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a15e:	2300      	movs	r3, #0
 800a160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericSend+0x32>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d103      	bne.n	800a190 <xQueueGenericSend+0x40>
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <xQueueGenericSend+0x44>
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <xQueueGenericSend+0x46>
 800a194:	2300      	movs	r3, #0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10a      	bne.n	800a1b0 <xQueueGenericSend+0x60>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d103      	bne.n	800a1be <xQueueGenericSend+0x6e>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <xQueueGenericSend+0x72>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <xQueueGenericSend+0x74>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericSend+0x8e>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	623b      	str	r3, [r7, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1de:	f001 fced 	bl	800bbbc <xTaskGetSchedulerState>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <xQueueGenericSend+0x9e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xQueueGenericSend+0xa2>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericSend+0xa4>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10a      	bne.n	800a20e <xQueueGenericSend+0xbe>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	61fb      	str	r3, [r7, #28]
}
 800a20a:	bf00      	nop
 800a20c:	e7fe      	b.n	800a20c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a20e:	f002 fb31 	bl	800c874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d302      	bcc.n	800a224 <xQueueGenericSend+0xd4>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d129      	bne.n	800a278 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a22a:	f000 fc5e 	bl	800aaea <prvCopyDataToQueue>
 800a22e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d010      	beq.n	800a25a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	3324      	adds	r3, #36	; 0x24
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 fafb 	bl	800b838 <xTaskRemoveFromEventList>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d013      	beq.n	800a270 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a248:	4b3f      	ldr	r3, [pc, #252]	; (800a348 <xQueueGenericSend+0x1f8>)
 800a24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	e00a      	b.n	800a270 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a260:	4b39      	ldr	r3, [pc, #228]	; (800a348 <xQueueGenericSend+0x1f8>)
 800a262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a270:	f002 fb30 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a274:	2301      	movs	r3, #1
 800a276:	e063      	b.n	800a340 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a27e:	f002 fb29 	bl	800c8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a282:	2300      	movs	r3, #0
 800a284:	e05c      	b.n	800a340 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d106      	bne.n	800a29a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a28c:	f107 0314 	add.w	r3, r7, #20
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fb35 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a29a:	f002 fb1b 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a29e:	f001 f88f 	bl	800b3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2a2:	f002 fae7 	bl	800c874 <vPortEnterCritical>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ac:	b25b      	sxtb	r3, r3
 800a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2b2:	d103      	bne.n	800a2bc <xQueueGenericSend+0x16c>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2c2:	b25b      	sxtb	r3, r3
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c8:	d103      	bne.n	800a2d2 <xQueueGenericSend+0x182>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2d2:	f002 faff 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2d6:	1d3a      	adds	r2, r7, #4
 800a2d8:	f107 0314 	add.w	r3, r7, #20
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fb24 	bl	800b92c <xTaskCheckForTimeOut>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d124      	bne.n	800a334 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ec:	f000 fcf5 	bl	800acda <prvIsQueueFull>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d018      	beq.n	800a328 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fa4a 	bl	800b798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a306:	f000 fc80 	bl	800ac0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a30a:	f001 f867 	bl	800b3dc <xTaskResumeAll>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	f47f af7c 	bne.w	800a20e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a316:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <xQueueGenericSend+0x1f8>)
 800a318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	e772      	b.n	800a20e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a32a:	f000 fc6e 	bl	800ac0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a32e:	f001 f855 	bl	800b3dc <xTaskResumeAll>
 800a332:	e76c      	b.n	800a20e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a336:	f000 fc68 	bl	800ac0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a33a:	f001 f84f 	bl	800b3dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a33e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a340:	4618      	mov	r0, r3
 800a342:	3738      	adds	r7, #56	; 0x38
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b090      	sub	sp, #64	; 0x40
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d103      	bne.n	800a388 <xQueueGenericSendFromISR+0x3c>
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <xQueueGenericSendFromISR+0x40>
 800a388:	2301      	movs	r3, #1
 800a38a:	e000      	b.n	800a38e <xQueueGenericSendFromISR+0x42>
 800a38c:	2300      	movs	r3, #0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d103      	bne.n	800a3b6 <xQueueGenericSendFromISR+0x6a>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <xQueueGenericSendFromISR+0x6e>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <xQueueGenericSendFromISR+0x70>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	623b      	str	r3, [r7, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3d6:	f002 fb2f 	bl	800ca38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3da:	f3ef 8211 	mrs	r2, BASEPRI
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	61fa      	str	r2, [r7, #28]
 800a3f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d302      	bcc.n	800a408 <xQueueGenericSendFromISR+0xbc>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d12f      	bne.n	800a468 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a41e:	f000 fb64 	bl	800aaea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a422:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a42a:	d112      	bne.n	800a452 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	3324      	adds	r3, #36	; 0x24
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f9fd 	bl	800b838 <xTaskRemoveFromEventList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00e      	beq.n	800a462 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00b      	beq.n	800a462 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e007      	b.n	800a462 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a456:	3301      	adds	r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	b25a      	sxtb	r2, r3
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a462:	2301      	movs	r3, #1
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a466:	e001      	b.n	800a46c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a468:	2300      	movs	r3, #0
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a476:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3740      	adds	r7, #64	; 0x40
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b08e      	sub	sp, #56	; 0x38
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	623b      	str	r3, [r7, #32]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <xQueueGiveFromISR+0x48>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61fb      	str	r3, [r7, #28]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d103      	bne.n	800a4da <xQueueGiveFromISR+0x58>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <xQueueGiveFromISR+0x5c>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <xQueueGiveFromISR+0x5e>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGiveFromISR+0x78>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	61bb      	str	r3, [r7, #24]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4fa:	f002 fa9d 	bl	800ca38 <vPortValidateInterruptPriority>
	__asm volatile
 800a4fe:	f3ef 8211 	mrs	r2, BASEPRI
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	617a      	str	r2, [r7, #20]
 800a514:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a516:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a526:	429a      	cmp	r2, r3
 800a528:	d22b      	bcs.n	800a582 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a53c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a544:	d112      	bne.n	800a56c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d016      	beq.n	800a57c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	4618      	mov	r0, r3
 800a554:	f001 f970 	bl	800b838 <xTaskRemoveFromEventList>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00e      	beq.n	800a57c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	e007      	b.n	800a57c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a570:	3301      	adds	r3, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	b25a      	sxtb	r2, r3
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a57c:	2301      	movs	r3, #1
 800a57e:	637b      	str	r3, [r7, #52]	; 0x34
 800a580:	e001      	b.n	800a586 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a582:	2300      	movs	r3, #0
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f383 8811 	msr	BASEPRI, r3
}
 800a590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a594:	4618      	mov	r0, r3
 800a596:	3738      	adds	r7, #56	; 0x38
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08c      	sub	sp, #48	; 0x30
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <xQueueReceive+0x30>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	623b      	str	r3, [r7, #32]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <xQueueReceive+0x3e>
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <xQueueReceive+0x42>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <xQueueReceive+0x44>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xQueueReceive+0x5e>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61fb      	str	r3, [r7, #28]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5fa:	f001 fadf 	bl	800bbbc <xTaskGetSchedulerState>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <xQueueReceive+0x6e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueReceive+0x72>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueReceive+0x74>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueReceive+0x8e>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61bb      	str	r3, [r7, #24]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a62a:	f002 f923 	bl	800c874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01f      	beq.n	800a67a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63e:	f000 fabe 	bl	800abbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	1e5a      	subs	r2, r3, #1
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00f      	beq.n	800a672 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	3310      	adds	r3, #16
 800a656:	4618      	mov	r0, r3
 800a658:	f001 f8ee 	bl	800b838 <xTaskRemoveFromEventList>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a662:	4b3d      	ldr	r3, [pc, #244]	; (800a758 <xQueueReceive+0x1bc>)
 800a664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a672:	f002 f92f 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a676:	2301      	movs	r3, #1
 800a678:	e069      	b.n	800a74e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a680:	f002 f928 	bl	800c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a684:	2300      	movs	r3, #0
 800a686:	e062      	b.n	800a74e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	4618      	mov	r0, r3
 800a694:	f001 f934 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a698:	2301      	movs	r3, #1
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a69c:	f002 f91a 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6a0:	f000 fe8e 	bl	800b3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6a4:	f002 f8e6 	bl	800c874 <vPortEnterCritical>
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b4:	d103      	bne.n	800a6be <xQueueReceive+0x122>
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ca:	d103      	bne.n	800a6d4 <xQueueReceive+0x138>
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6d4:	f002 f8fe 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6d8:	1d3a      	adds	r2, r7, #4
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 f923 	bl	800b92c <xTaskCheckForTimeOut>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d123      	bne.n	800a734 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ee:	f000 fade 	bl	800acae <prvIsQueueEmpty>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d017      	beq.n	800a728 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f001 f849 	bl	800b798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a708:	f000 fa7f 	bl	800ac0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a70c:	f000 fe66 	bl	800b3dc <xTaskResumeAll>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d189      	bne.n	800a62a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <xQueueReceive+0x1bc>)
 800a718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	e780      	b.n	800a62a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72a:	f000 fa6e 	bl	800ac0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a72e:	f000 fe55 	bl	800b3dc <xTaskResumeAll>
 800a732:	e77a      	b.n	800a62a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a736:	f000 fa68 	bl	800ac0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a73a:	f000 fe4f 	bl	800b3dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a740:	f000 fab5 	bl	800acae <prvIsQueueEmpty>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	f43f af6f 	beq.w	800a62a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a74c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3730      	adds	r7, #48	; 0x30
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a766:	2300      	movs	r3, #0
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a76e:	2300      	movs	r3, #0
 800a770:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	623b      	str	r3, [r7, #32]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	61fb      	str	r3, [r7, #28]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7ac:	f001 fa06 	bl	800bbbc <xTaskGetSchedulerState>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <xQueueSemaphoreTake+0x60>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <xQueueSemaphoreTake+0x64>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <xQueueSemaphoreTake+0x66>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	61bb      	str	r3, [r7, #24]
}
 800a7d8:	bf00      	nop
 800a7da:	e7fe      	b.n	800a7da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7dc:	f002 f84a 	bl	800c874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d024      	beq.n	800a836 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7fc:	f001 fb54 	bl	800bea8 <pvTaskIncrementMutexHeldCount>
 800a800:	4602      	mov	r2, r0
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00f      	beq.n	800a82e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	3310      	adds	r3, #16
 800a812:	4618      	mov	r0, r3
 800a814:	f001 f810 	bl	800b838 <xTaskRemoveFromEventList>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d007      	beq.n	800a82e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a81e:	4b54      	ldr	r3, [pc, #336]	; (800a970 <xQueueSemaphoreTake+0x214>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a82e:	f002 f851 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800a832:	2301      	movs	r3, #1
 800a834:	e097      	b.n	800a966 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d111      	bne.n	800a860 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	617b      	str	r3, [r7, #20]
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a858:	f002 f83c 	bl	800c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a85c:	2300      	movs	r3, #0
 800a85e:	e082      	b.n	800a966 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a866:	f107 030c 	add.w	r3, r7, #12
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 f848 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a870:	2301      	movs	r3, #1
 800a872:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a874:	f002 f82e 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a878:	f000 fda2 	bl	800b3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a87c:	f001 fffa 	bl	800c874 <vPortEnterCritical>
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a886:	b25b      	sxtb	r3, r3
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a88c:	d103      	bne.n	800a896 <xQueueSemaphoreTake+0x13a>
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a89c:	b25b      	sxtb	r3, r3
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a2:	d103      	bne.n	800a8ac <xQueueSemaphoreTake+0x150>
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ac:	f002 f812 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8b0:	463a      	mov	r2, r7
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 f837 	bl	800b92c <xTaskCheckForTimeOut>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d132      	bne.n	800a92a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c6:	f000 f9f2 	bl	800acae <prvIsQueueEmpty>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d026      	beq.n	800a91e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a8d8:	f001 ffcc 	bl	800c874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f001 f989 	bl	800bbf8 <xTaskPriorityInherit>
 800a8e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a8e8:	f001 fff4 	bl	800c8d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	3324      	adds	r3, #36	; 0x24
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 ff4f 	bl	800b798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8fc:	f000 f985 	bl	800ac0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a900:	f000 fd6c 	bl	800b3dc <xTaskResumeAll>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	f47f af68 	bne.w	800a7dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a90c:	4b18      	ldr	r3, [pc, #96]	; (800a970 <xQueueSemaphoreTake+0x214>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	e75e      	b.n	800a7dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a91e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a920:	f000 f973 	bl	800ac0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a924:	f000 fd5a 	bl	800b3dc <xTaskResumeAll>
 800a928:	e758      	b.n	800a7dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a92c:	f000 f96d 	bl	800ac0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a930:	f000 fd54 	bl	800b3dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a936:	f000 f9ba 	bl	800acae <prvIsQueueEmpty>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f43f af4d 	beq.w	800a7dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00d      	beq.n	800a964 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a948:	f001 ff94 	bl	800c874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a94c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94e:	f000 f8b4 	bl	800aaba <prvGetDisinheritPriorityAfterTimeout>
 800a952:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fa22 	bl	800bda4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a960:	f001 ffb8 	bl	800c8d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a966:	4618      	mov	r0, r3
 800a968:	3738      	adds	r7, #56	; 0x38
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10a      	bne.n	800a9a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	623b      	str	r3, [r7, #32]
}
 800a99c:	bf00      	nop
 800a99e:	e7fe      	b.n	800a99e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d103      	bne.n	800a9ae <xQueueReceiveFromISR+0x3a>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <xQueueReceiveFromISR+0x3e>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <xQueueReceiveFromISR+0x40>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	61fb      	str	r3, [r7, #28]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9ce:	f002 f833 	bl	800ca38 <vPortValidateInterruptPriority>
	__asm volatile
 800a9d2:	f3ef 8211 	mrs	r2, BASEPRI
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	61ba      	str	r2, [r7, #24]
 800a9e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d02f      	beq.n	800aa5a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa04:	68b9      	ldr	r1, [r7, #8]
 800aa06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa08:	f000 f8d9 	bl	800abbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	1e5a      	subs	r2, r3, #1
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa1c:	d112      	bne.n	800aa44 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d016      	beq.n	800aa54 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	3310      	adds	r3, #16
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 ff04 	bl	800b838 <xTaskRemoveFromEventList>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	e007      	b.n	800aa54 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa48:	3301      	adds	r3, #1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	b25a      	sxtb	r2, r3
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aa54:	2301      	movs	r3, #1
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
 800aa58:	e001      	b.n	800aa5e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f383 8811 	msr	BASEPRI, r3
}
 800aa68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3738      	adds	r7, #56	; 0x38
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <vQueueDelete+0x28>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60bb      	str	r3, [r7, #8]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 f95f 	bl	800ad60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f002 f8cf 	bl	800cc50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aaba:	b480      	push	{r7}
 800aabc:	b085      	sub	sp, #20
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d006      	beq.n	800aad8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	e001      	b.n	800aadc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aadc:	68fb      	ldr	r3, [r7, #12]
	}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10d      	bne.n	800ab24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d14d      	bne.n	800abac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 f8d7 	bl	800bcc8 <xTaskPriorityDisinherit>
 800ab1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	609a      	str	r2, [r3, #8]
 800ab22:	e043      	b.n	800abac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d119      	bne.n	800ab5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6858      	ldr	r0, [r3, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	461a      	mov	r2, r3
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	f002 fadd 	bl	800d0f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	441a      	add	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d32b      	bcc.n	800abac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	605a      	str	r2, [r3, #4]
 800ab5c:	e026      	b.n	800abac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68d8      	ldr	r0, [r3, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	461a      	mov	r2, r3
 800ab68:	68b9      	ldr	r1, [r7, #8]
 800ab6a:	f002 fac3 	bl	800d0f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab76:	425b      	negs	r3, r3
 800ab78:	441a      	add	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d207      	bcs.n	800ab9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	425b      	negs	r3, r3
 800ab94:	441a      	add	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d105      	bne.n	800abac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abb4:	697b      	ldr	r3, [r7, #20]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d018      	beq.n	800ac02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	441a      	add	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d303      	bcc.n	800abf2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68d9      	ldr	r1, [r3, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	461a      	mov	r2, r3
 800abfc:	6838      	ldr	r0, [r7, #0]
 800abfe:	f002 fa79 	bl	800d0f4 <memcpy>
	}
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac12:	f001 fe2f 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac1e:	e011      	b.n	800ac44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d012      	beq.n	800ac4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3324      	adds	r3, #36	; 0x24
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fe03 	bl	800b838 <xTaskRemoveFromEventList>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac38:	f000 feda 	bl	800b9f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dce9      	bgt.n	800ac20 <prvUnlockQueue+0x16>
 800ac4c:	e000      	b.n	800ac50 <prvUnlockQueue+0x46>
					break;
 800ac4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	22ff      	movs	r2, #255	; 0xff
 800ac54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac58:	f001 fe3c 	bl	800c8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac5c:	f001 fe0a 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac68:	e011      	b.n	800ac8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d012      	beq.n	800ac98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3310      	adds	r3, #16
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fdde 	bl	800b838 <xTaskRemoveFromEventList>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac82:	f000 feb5 	bl	800b9f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dce9      	bgt.n	800ac6a <prvUnlockQueue+0x60>
 800ac96:	e000      	b.n	800ac9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	22ff      	movs	r2, #255	; 0xff
 800ac9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aca2:	f001 fe17 	bl	800c8d4 <vPortExitCritical>
}
 800aca6:	bf00      	nop
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acb6:	f001 fddd 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d102      	bne.n	800acc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	e001      	b.n	800accc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acc8:	2300      	movs	r3, #0
 800acca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800accc:	f001 fe02 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800acd0:	68fb      	ldr	r3, [r7, #12]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ace2:	f001 fdc7 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acee:	429a      	cmp	r2, r3
 800acf0:	d102      	bne.n	800acf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acf2:	2301      	movs	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e001      	b.n	800acfc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acfc:	f001 fdea 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800ad00:	68fb      	ldr	r3, [r7, #12]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e014      	b.n	800ad46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad1c:	4a0f      	ldr	r2, [pc, #60]	; (800ad5c <vQueueAddToRegistry+0x50>)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10b      	bne.n	800ad40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad28:	490c      	ldr	r1, [pc, #48]	; (800ad5c <vQueueAddToRegistry+0x50>)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad32:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <vQueueAddToRegistry+0x50>)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad3e:	e006      	b.n	800ad4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3301      	adds	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b07      	cmp	r3, #7
 800ad4a:	d9e7      	bls.n	800ad1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20005654 	.word	0x20005654

0800ad60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60fb      	str	r3, [r7, #12]
 800ad6c:	e016      	b.n	800ad9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad6e:	4a10      	ldr	r2, [pc, #64]	; (800adb0 <vQueueUnregisterQueue+0x50>)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d10b      	bne.n	800ad96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad7e:	4a0c      	ldr	r2, [pc, #48]	; (800adb0 <vQueueUnregisterQueue+0x50>)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2100      	movs	r1, #0
 800ad84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad88:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <vQueueUnregisterQueue+0x50>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	4413      	add	r3, r2
 800ad90:	2200      	movs	r2, #0
 800ad92:	605a      	str	r2, [r3, #4]
				break;
 800ad94:	e006      	b.n	800ada4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b07      	cmp	r3, #7
 800ada0:	d9e5      	bls.n	800ad6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	20005654 	.word	0x20005654

0800adb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adc4:	f001 fd56 	bl	800c874 <vPortEnterCritical>
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adce:	b25b      	sxtb	r3, r3
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800add4:	d103      	bne.n	800adde <vQueueWaitForMessageRestricted+0x2a>
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ade4:	b25b      	sxtb	r3, r3
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adea:	d103      	bne.n	800adf4 <vQueueWaitForMessageRestricted+0x40>
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adf4:	f001 fd6e 	bl	800c8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	3324      	adds	r3, #36	; 0x24
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fce9 	bl	800b7e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f7ff fefb 	bl	800ac0a <prvUnlockQueue>
	}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08e      	sub	sp, #56	; 0x38
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	623b      	str	r3, [r7, #32]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10a      	bne.n	800ae62 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	61fb      	str	r3, [r7, #28]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae62:	23bc      	movs	r3, #188	; 0xbc
 800ae64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2bbc      	cmp	r3, #188	; 0xbc
 800ae6a:	d00a      	beq.n	800ae82 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	61bb      	str	r3, [r7, #24]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01e      	beq.n	800aec8 <xTaskCreateStatic+0xac>
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01b      	beq.n	800aec8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aea2:	2300      	movs	r3, #0
 800aea4:	9303      	str	r3, [sp, #12]
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	9302      	str	r3, [sp, #8]
 800aeaa:	f107 0314 	add.w	r3, r7, #20
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f000 f850 	bl	800af60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aec2:	f000 f8f3 	bl	800b0ac <prvAddNewTaskToReadyList>
 800aec6:	e001      	b.n	800aecc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aecc:	697b      	ldr	r3, [r7, #20]
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	3728      	adds	r7, #40	; 0x28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08c      	sub	sp, #48	; 0x30
 800aeda:	af04      	add	r7, sp, #16
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aee6:	88fb      	ldrh	r3, [r7, #6]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 fde4 	bl	800cab8 <pvPortMalloc>
 800aef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aef8:	20bc      	movs	r0, #188	; 0xbc
 800aefa:	f001 fddd 	bl	800cab8 <pvPortMalloc>
 800aefe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	631a      	str	r2, [r3, #48]	; 0x30
 800af0c:	e005      	b.n	800af1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af0e:	6978      	ldr	r0, [r7, #20]
 800af10:	f001 fe9e 	bl	800cc50 <vPortFree>
 800af14:	e001      	b.n	800af1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d017      	beq.n	800af50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af28:	88fa      	ldrh	r2, [r7, #6]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9303      	str	r3, [sp, #12]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	9302      	str	r3, [sp, #8]
 800af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	68b9      	ldr	r1, [r7, #8]
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 f80e 	bl	800af60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af44:	69f8      	ldr	r0, [r7, #28]
 800af46:	f000 f8b1 	bl	800b0ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af4a:	2301      	movs	r3, #1
 800af4c:	61bb      	str	r3, [r7, #24]
 800af4e:	e002      	b.n	800af56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af56:	69bb      	ldr	r3, [r7, #24]
	}
 800af58:	4618      	mov	r0, r3
 800af5a:	3720      	adds	r7, #32
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	461a      	mov	r2, r3
 800af78:	21a5      	movs	r1, #165	; 0xa5
 800af7a:	f002 f8c9 	bl	800d110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af88:	3b01      	subs	r3, #1
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	617b      	str	r3, [r7, #20]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d01f      	beq.n	800affe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afbe:	2300      	movs	r3, #0
 800afc0:	61fb      	str	r3, [r7, #28]
 800afc2:	e012      	b.n	800afea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	7819      	ldrb	r1, [r3, #0]
 800afcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	4413      	add	r3, r2
 800afd2:	3334      	adds	r3, #52	; 0x34
 800afd4:	460a      	mov	r2, r1
 800afd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d006      	beq.n	800aff2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	3301      	adds	r3, #1
 800afe8:	61fb      	str	r3, [r7, #28]
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2b0f      	cmp	r3, #15
 800afee:	d9e9      	bls.n	800afc4 <prvInitialiseNewTask+0x64>
 800aff0:	e000      	b.n	800aff4 <prvInitialiseNewTask+0x94>
			{
				break;
 800aff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800affc:	e003      	b.n	800b006 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	2b37      	cmp	r3, #55	; 0x37
 800b00a:	d901      	bls.n	800b010 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b00c:	2337      	movs	r3, #55	; 0x37
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b01a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	2200      	movs	r2, #0
 800b020:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	3304      	adds	r3, #4
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe fe56 	bl	8009cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	3318      	adds	r3, #24
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fe51 	bl	8009cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b03a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	2200      	movs	r2, #0
 800b058:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	3354      	adds	r3, #84	; 0x54
 800b060:	2260      	movs	r2, #96	; 0x60
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f002 f853 	bl	800d110 <memset>
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	4a0c      	ldr	r2, [pc, #48]	; (800b0a0 <prvInitialiseNewTask+0x140>)
 800b06e:	659a      	str	r2, [r3, #88]	; 0x58
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	4a0c      	ldr	r2, [pc, #48]	; (800b0a4 <prvInitialiseNewTask+0x144>)
 800b074:	65da      	str	r2, [r3, #92]	; 0x5c
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	4a0b      	ldr	r2, [pc, #44]	; (800b0a8 <prvInitialiseNewTask+0x148>)
 800b07a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	69b8      	ldr	r0, [r7, #24]
 800b082:	f001 fac7 	bl	800c614 <pxPortInitialiseStack>
 800b086:	4602      	mov	r2, r0
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b096:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b098:	bf00      	nop
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	080138e8 	.word	0x080138e8
 800b0a4:	08013908 	.word	0x08013908
 800b0a8:	080138c8 	.word	0x080138c8

0800b0ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0b4:	f001 fbde 	bl	800c874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0b8:	4b2d      	ldr	r3, [pc, #180]	; (800b170 <prvAddNewTaskToReadyList+0xc4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	4a2c      	ldr	r2, [pc, #176]	; (800b170 <prvAddNewTaskToReadyList+0xc4>)
 800b0c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0c2:	4b2c      	ldr	r3, [pc, #176]	; (800b174 <prvAddNewTaskToReadyList+0xc8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0ca:	4a2a      	ldr	r2, [pc, #168]	; (800b174 <prvAddNewTaskToReadyList+0xc8>)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0d0:	4b27      	ldr	r3, [pc, #156]	; (800b170 <prvAddNewTaskToReadyList+0xc4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d110      	bne.n	800b0fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0d8:	f000 fcae 	bl	800ba38 <prvInitialiseTaskLists>
 800b0dc:	e00d      	b.n	800b0fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0de:	4b26      	ldr	r3, [pc, #152]	; (800b178 <prvAddNewTaskToReadyList+0xcc>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d109      	bne.n	800b0fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0e6:	4b23      	ldr	r3, [pc, #140]	; (800b174 <prvAddNewTaskToReadyList+0xc8>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d802      	bhi.n	800b0fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0f4:	4a1f      	ldr	r2, [pc, #124]	; (800b174 <prvAddNewTaskToReadyList+0xc8>)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0fa:	4b20      	ldr	r3, [pc, #128]	; (800b17c <prvAddNewTaskToReadyList+0xd0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3301      	adds	r3, #1
 800b100:	4a1e      	ldr	r2, [pc, #120]	; (800b17c <prvAddNewTaskToReadyList+0xd0>)
 800b102:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b104:	4b1d      	ldr	r3, [pc, #116]	; (800b17c <prvAddNewTaskToReadyList+0xd0>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b110:	4b1b      	ldr	r3, [pc, #108]	; (800b180 <prvAddNewTaskToReadyList+0xd4>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d903      	bls.n	800b120 <prvAddNewTaskToReadyList+0x74>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	4a18      	ldr	r2, [pc, #96]	; (800b180 <prvAddNewTaskToReadyList+0xd4>)
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4a15      	ldr	r2, [pc, #84]	; (800b184 <prvAddNewTaskToReadyList+0xd8>)
 800b12e:	441a      	add	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3304      	adds	r3, #4
 800b134:	4619      	mov	r1, r3
 800b136:	4610      	mov	r0, r2
 800b138:	f7fe fddb 	bl	8009cf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b13c:	f001 fbca 	bl	800c8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b140:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <prvAddNewTaskToReadyList+0xcc>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00e      	beq.n	800b166 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b148:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <prvAddNewTaskToReadyList+0xc8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b152:	429a      	cmp	r2, r3
 800b154:	d207      	bcs.n	800b166 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <prvAddNewTaskToReadyList+0xdc>)
 800b158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20000e74 	.word	0x20000e74
 800b174:	200009a0 	.word	0x200009a0
 800b178:	20000e80 	.word	0x20000e80
 800b17c:	20000e90 	.word	0x20000e90
 800b180:	20000e7c 	.word	0x20000e7c
 800b184:	200009a4 	.word	0x200009a4
 800b188:	e000ed04 	.word	0xe000ed04

0800b18c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d017      	beq.n	800b1ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <vTaskDelay+0x60>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <vTaskDelay+0x30>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	60bb      	str	r3, [r7, #8]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1bc:	f000 f900 	bl	800b3c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fe84 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1c8:	f000 f908 	bl	800b3dc <xTaskResumeAll>
 800b1cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d107      	bne.n	800b1e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1d4:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <vTaskDelay+0x64>)
 800b1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1e4:	bf00      	nop
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000e9c 	.word	0x20000e9c
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b1fc:	f001 fb3a 	bl	800c874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <vTaskSuspend+0x18>
 800b206:	4b30      	ldr	r3, [pc, #192]	; (800b2c8 <vTaskSuspend+0xd4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	e000      	b.n	800b20e <vTaskSuspend+0x1a>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3304      	adds	r3, #4
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fdc9 	bl	8009dac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3318      	adds	r3, #24
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fdc0 	bl	8009dac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3304      	adds	r3, #4
 800b230:	4619      	mov	r1, r3
 800b232:	4826      	ldr	r0, [pc, #152]	; (800b2cc <vTaskSuspend+0xd8>)
 800b234:	f7fe fd5d 	bl	8009cf2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b01      	cmp	r3, #1
 800b242:	d103      	bne.n	800b24c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b24c:	f001 fb42 	bl	800c8d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b250:	4b1f      	ldr	r3, [pc, #124]	; (800b2d0 <vTaskSuspend+0xdc>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b258:	f001 fb0c 	bl	800c874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b25c:	f000 fc8e 	bl	800bb7c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b260:	f001 fb38 	bl	800c8d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b264:	4b18      	ldr	r3, [pc, #96]	; (800b2c8 <vTaskSuspend+0xd4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d127      	bne.n	800b2be <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b26e:	4b18      	ldr	r3, [pc, #96]	; (800b2d0 <vTaskSuspend+0xdc>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d017      	beq.n	800b2a6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b276:	4b17      	ldr	r3, [pc, #92]	; (800b2d4 <vTaskSuspend+0xe0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <vTaskSuspend+0xa0>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60bb      	str	r3, [r7, #8]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b294:	4b10      	ldr	r3, [pc, #64]	; (800b2d8 <vTaskSuspend+0xe4>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2a4:	e00b      	b.n	800b2be <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <vTaskSuspend+0xd8>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <vTaskSuspend+0xe8>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d103      	bne.n	800b2ba <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <vTaskSuspend+0xd4>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	601a      	str	r2, [r3, #0]
	}
 800b2b8:	e001      	b.n	800b2be <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b2ba:	f000 fa09 	bl	800b6d0 <vTaskSwitchContext>
	}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200009a0 	.word	0x200009a0
 800b2cc:	20000e60 	.word	0x20000e60
 800b2d0:	20000e80 	.word	0x20000e80
 800b2d4:	20000e9c 	.word	0x20000e9c
 800b2d8:	e000ed04 	.word	0xe000ed04
 800b2dc:	20000e74 	.word	0x20000e74

0800b2e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	1d39      	adds	r1, r7, #4
 800b2f2:	f107 0308 	add.w	r3, r7, #8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fc9a 	bl	8009c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	9202      	str	r2, [sp, #8]
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	2300      	movs	r3, #0
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	2300      	movs	r3, #0
 800b30c:	460a      	mov	r2, r1
 800b30e:	4924      	ldr	r1, [pc, #144]	; (800b3a0 <vTaskStartScheduler+0xc0>)
 800b310:	4824      	ldr	r0, [pc, #144]	; (800b3a4 <vTaskStartScheduler+0xc4>)
 800b312:	f7ff fd83 	bl	800ae1c <xTaskCreateStatic>
 800b316:	4603      	mov	r3, r0
 800b318:	4a23      	ldr	r2, [pc, #140]	; (800b3a8 <vTaskStartScheduler+0xc8>)
 800b31a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b31c:	4b22      	ldr	r3, [pc, #136]	; (800b3a8 <vTaskStartScheduler+0xc8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b324:	2301      	movs	r3, #1
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	e001      	b.n	800b32e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d102      	bne.n	800b33a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b334:	f000 fe20 	bl	800bf78 <xTimerCreateTimerTask>
 800b338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d11b      	bne.n	800b378 <vTaskStartScheduler+0x98>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b354:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <vTaskStartScheduler+0xcc>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3354      	adds	r3, #84	; 0x54
 800b35a:	4a15      	ldr	r2, [pc, #84]	; (800b3b0 <vTaskStartScheduler+0xd0>)
 800b35c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b35e:	4b15      	ldr	r3, [pc, #84]	; (800b3b4 <vTaskStartScheduler+0xd4>)
 800b360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b366:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <vTaskStartScheduler+0xd8>)
 800b368:	2201      	movs	r2, #1
 800b36a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b36c:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <vTaskStartScheduler+0xdc>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b372:	f001 f9dd 	bl	800c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b376:	e00e      	b.n	800b396 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b37e:	d10a      	bne.n	800b396 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60fb      	str	r3, [r7, #12]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <vTaskStartScheduler+0xb4>
}
 800b396:	bf00      	nop
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	080137f8 	.word	0x080137f8
 800b3a4:	0800ba09 	.word	0x0800ba09
 800b3a8:	20000e98 	.word	0x20000e98
 800b3ac:	200009a0 	.word	0x200009a0
 800b3b0:	20000014 	.word	0x20000014
 800b3b4:	20000e94 	.word	0x20000e94
 800b3b8:	20000e80 	.word	0x20000e80
 800b3bc:	20000e78 	.word	0x20000e78

0800b3c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3c4:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <vTaskSuspendAll+0x18>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4a03      	ldr	r2, [pc, #12]	; (800b3d8 <vTaskSuspendAll+0x18>)
 800b3cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3ce:	bf00      	nop
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	20000e9c 	.word	0x20000e9c

0800b3dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3ea:	4b42      	ldr	r3, [pc, #264]	; (800b4f4 <xTaskResumeAll+0x118>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10a      	bne.n	800b408 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	603b      	str	r3, [r7, #0]
}
 800b404:	bf00      	nop
 800b406:	e7fe      	b.n	800b406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b408:	f001 fa34 	bl	800c874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b40c:	4b39      	ldr	r3, [pc, #228]	; (800b4f4 <xTaskResumeAll+0x118>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3b01      	subs	r3, #1
 800b412:	4a38      	ldr	r2, [pc, #224]	; (800b4f4 <xTaskResumeAll+0x118>)
 800b414:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b416:	4b37      	ldr	r3, [pc, #220]	; (800b4f4 <xTaskResumeAll+0x118>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d162      	bne.n	800b4e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b41e:	4b36      	ldr	r3, [pc, #216]	; (800b4f8 <xTaskResumeAll+0x11c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d05e      	beq.n	800b4e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b426:	e02f      	b.n	800b488 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b428:	4b34      	ldr	r3, [pc, #208]	; (800b4fc <xTaskResumeAll+0x120>)
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3318      	adds	r3, #24
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fcb9 	bl	8009dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fcb4 	bl	8009dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4b2d      	ldr	r3, [pc, #180]	; (800b500 <xTaskResumeAll+0x124>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d903      	bls.n	800b458 <xTaskResumeAll+0x7c>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a2a      	ldr	r2, [pc, #168]	; (800b500 <xTaskResumeAll+0x124>)
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4a27      	ldr	r2, [pc, #156]	; (800b504 <xTaskResumeAll+0x128>)
 800b466:	441a      	add	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7fe fc3f 	bl	8009cf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	4b23      	ldr	r3, [pc, #140]	; (800b508 <xTaskResumeAll+0x12c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47e:	429a      	cmp	r2, r3
 800b480:	d302      	bcc.n	800b488 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b482:	4b22      	ldr	r3, [pc, #136]	; (800b50c <xTaskResumeAll+0x130>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b488:	4b1c      	ldr	r3, [pc, #112]	; (800b4fc <xTaskResumeAll+0x120>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1cb      	bne.n	800b428 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b496:	f000 fb71 	bl	800bb7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b49a:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <xTaskResumeAll+0x134>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d010      	beq.n	800b4c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4a6:	f000 f859 	bl	800b55c <xTaskIncrementTick>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4b0:	4b16      	ldr	r3, [pc, #88]	; (800b50c <xTaskResumeAll+0x130>)
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1f1      	bne.n	800b4a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <xTaskResumeAll+0x134>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <xTaskResumeAll+0x130>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d009      	beq.n	800b4e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <xTaskResumeAll+0x138>)
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4e4:	f001 f9f6 	bl	800c8d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000e9c 	.word	0x20000e9c
 800b4f8:	20000e74 	.word	0x20000e74
 800b4fc:	20000e34 	.word	0x20000e34
 800b500:	20000e7c 	.word	0x20000e7c
 800b504:	200009a4 	.word	0x200009a4
 800b508:	200009a0 	.word	0x200009a0
 800b50c:	20000e88 	.word	0x20000e88
 800b510:	20000e84 	.word	0x20000e84
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <xTaskGetTickCount+0x1c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b524:	687b      	ldr	r3, [r7, #4]
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000e78 	.word	0x20000e78

0800b538 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b53e:	f001 fa7b 	bl	800ca38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b542:	2300      	movs	r3, #0
 800b544:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b546:	4b04      	ldr	r3, [pc, #16]	; (800b558 <xTaskGetTickCountFromISR+0x20>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b54c:	683b      	ldr	r3, [r7, #0]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000e78 	.word	0x20000e78

0800b55c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b566:	4b4f      	ldr	r3, [pc, #316]	; (800b6a4 <xTaskIncrementTick+0x148>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f040 808f 	bne.w	800b68e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b570:	4b4d      	ldr	r3, [pc, #308]	; (800b6a8 <xTaskIncrementTick+0x14c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b578:	4a4b      	ldr	r2, [pc, #300]	; (800b6a8 <xTaskIncrementTick+0x14c>)
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d120      	bne.n	800b5c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b584:	4b49      	ldr	r3, [pc, #292]	; (800b6ac <xTaskIncrementTick+0x150>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	603b      	str	r3, [r7, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <xTaskIncrementTick+0x46>
 800b5a4:	4b41      	ldr	r3, [pc, #260]	; (800b6ac <xTaskIncrementTick+0x150>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	4b41      	ldr	r3, [pc, #260]	; (800b6b0 <xTaskIncrementTick+0x154>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a3f      	ldr	r2, [pc, #252]	; (800b6ac <xTaskIncrementTick+0x150>)
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	4a3f      	ldr	r2, [pc, #252]	; (800b6b0 <xTaskIncrementTick+0x154>)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	4b3e      	ldr	r3, [pc, #248]	; (800b6b4 <xTaskIncrementTick+0x158>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	4a3d      	ldr	r2, [pc, #244]	; (800b6b4 <xTaskIncrementTick+0x158>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	f000 fadb 	bl	800bb7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5c6:	4b3c      	ldr	r3, [pc, #240]	; (800b6b8 <xTaskIncrementTick+0x15c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d349      	bcc.n	800b664 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d0:	4b36      	ldr	r3, [pc, #216]	; (800b6ac <xTaskIncrementTick+0x150>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d104      	bne.n	800b5e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5da:	4b37      	ldr	r3, [pc, #220]	; (800b6b8 <xTaskIncrementTick+0x15c>)
 800b5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5e0:	601a      	str	r2, [r3, #0]
					break;
 800b5e2:	e03f      	b.n	800b664 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	4b31      	ldr	r3, [pc, #196]	; (800b6ac <xTaskIncrementTick+0x150>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d203      	bcs.n	800b604 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5fc:	4a2e      	ldr	r2, [pc, #184]	; (800b6b8 <xTaskIncrementTick+0x15c>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b602:	e02f      	b.n	800b664 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	3304      	adds	r3, #4
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fbcf 	bl	8009dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3318      	adds	r3, #24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fbc6 	bl	8009dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	4b25      	ldr	r3, [pc, #148]	; (800b6bc <xTaskIncrementTick+0x160>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d903      	bls.n	800b634 <xTaskIncrementTick+0xd8>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	4a22      	ldr	r2, [pc, #136]	; (800b6bc <xTaskIncrementTick+0x160>)
 800b632:	6013      	str	r3, [r2, #0]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4a1f      	ldr	r2, [pc, #124]	; (800b6c0 <xTaskIncrementTick+0x164>)
 800b642:	441a      	add	r2, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	3304      	adds	r3, #4
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f7fe fb51 	bl	8009cf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b654:	4b1b      	ldr	r3, [pc, #108]	; (800b6c4 <xTaskIncrementTick+0x168>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d3b8      	bcc.n	800b5d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b662:	e7b5      	b.n	800b5d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b664:	4b17      	ldr	r3, [pc, #92]	; (800b6c4 <xTaskIncrementTick+0x168>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66a:	4915      	ldr	r1, [pc, #84]	; (800b6c0 <xTaskIncrementTick+0x164>)
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	440b      	add	r3, r1
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d901      	bls.n	800b680 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b67c:	2301      	movs	r3, #1
 800b67e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b680:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <xTaskIncrementTick+0x16c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d007      	beq.n	800b698 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b688:	2301      	movs	r3, #1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e004      	b.n	800b698 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b68e:	4b0f      	ldr	r3, [pc, #60]	; (800b6cc <xTaskIncrementTick+0x170>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	4a0d      	ldr	r2, [pc, #52]	; (800b6cc <xTaskIncrementTick+0x170>)
 800b696:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b698:	697b      	ldr	r3, [r7, #20]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000e9c 	.word	0x20000e9c
 800b6a8:	20000e78 	.word	0x20000e78
 800b6ac:	20000e2c 	.word	0x20000e2c
 800b6b0:	20000e30 	.word	0x20000e30
 800b6b4:	20000e8c 	.word	0x20000e8c
 800b6b8:	20000e94 	.word	0x20000e94
 800b6bc:	20000e7c 	.word	0x20000e7c
 800b6c0:	200009a4 	.word	0x200009a4
 800b6c4:	200009a0 	.word	0x200009a0
 800b6c8:	20000e88 	.word	0x20000e88
 800b6cc:	20000e84 	.word	0x20000e84

0800b6d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6d6:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <vTaskSwitchContext+0xb0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6de:	4b29      	ldr	r3, [pc, #164]	; (800b784 <vTaskSwitchContext+0xb4>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6e4:	e046      	b.n	800b774 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b6e6:	4b27      	ldr	r3, [pc, #156]	; (800b784 <vTaskSwitchContext+0xb4>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ec:	4b26      	ldr	r3, [pc, #152]	; (800b788 <vTaskSwitchContext+0xb8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e010      	b.n	800b716 <vTaskSwitchContext+0x46>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <vTaskSwitchContext+0x40>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	607b      	str	r3, [r7, #4]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <vTaskSwitchContext+0x3e>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3b01      	subs	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	491d      	ldr	r1, [pc, #116]	; (800b78c <vTaskSwitchContext+0xbc>)
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4613      	mov	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	440b      	add	r3, r1
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0e4      	beq.n	800b6f4 <vTaskSwitchContext+0x24>
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4a15      	ldr	r2, [pc, #84]	; (800b78c <vTaskSwitchContext+0xbc>)
 800b736:	4413      	add	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	605a      	str	r2, [r3, #4]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	3308      	adds	r3, #8
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d104      	bne.n	800b75a <vTaskSwitchContext+0x8a>
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	605a      	str	r2, [r3, #4]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	4a0b      	ldr	r2, [pc, #44]	; (800b790 <vTaskSwitchContext+0xc0>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	4a08      	ldr	r2, [pc, #32]	; (800b788 <vTaskSwitchContext+0xb8>)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <vTaskSwitchContext+0xc0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3354      	adds	r3, #84	; 0x54
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <vTaskSwitchContext+0xc4>)
 800b772:	6013      	str	r3, [r2, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	20000e9c 	.word	0x20000e9c
 800b784:	20000e88 	.word	0x20000e88
 800b788:	20000e7c 	.word	0x20000e7c
 800b78c:	200009a4 	.word	0x200009a4
 800b790:	200009a0 	.word	0x200009a0
 800b794:	20000014 	.word	0x20000014

0800b798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	60fb      	str	r3, [r7, #12]
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7be:	4b07      	ldr	r3, [pc, #28]	; (800b7dc <vTaskPlaceOnEventList+0x44>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7fe fab7 	bl	8009d3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	f000 fb7e 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200009a0 	.word	0x200009a0

0800b7e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	617b      	str	r3, [r7, #20]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <vTaskPlaceOnEventListRestricted+0x54>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3318      	adds	r3, #24
 800b80e:	4619      	mov	r1, r3
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f7fe fa6e 	bl	8009cf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	68b8      	ldr	r0, [r7, #8]
 800b826:	f000 fb53 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
	}
 800b82a:	bf00      	nop
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200009a0 	.word	0x200009a0

0800b838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60fb      	str	r3, [r7, #12]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	3318      	adds	r3, #24
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fa9f 	bl	8009dac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86e:	4b1e      	ldr	r3, [pc, #120]	; (800b8e8 <xTaskRemoveFromEventList+0xb0>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d11d      	bne.n	800b8b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	3304      	adds	r3, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fa96 	bl	8009dac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	4b19      	ldr	r3, [pc, #100]	; (800b8ec <xTaskRemoveFromEventList+0xb4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d903      	bls.n	800b894 <xTaskRemoveFromEventList+0x5c>
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <xTaskRemoveFromEventList+0xb4>)
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4a13      	ldr	r2, [pc, #76]	; (800b8f0 <xTaskRemoveFromEventList+0xb8>)
 800b8a2:	441a      	add	r2, r3
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f7fe fa21 	bl	8009cf2 <vListInsertEnd>
 800b8b0:	e005      	b.n	800b8be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3318      	adds	r3, #24
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	480e      	ldr	r0, [pc, #56]	; (800b8f4 <xTaskRemoveFromEventList+0xbc>)
 800b8ba:	f7fe fa1a 	bl	8009cf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <xTaskRemoveFromEventList+0xc0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d905      	bls.n	800b8d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <xTaskRemoveFromEventList+0xc4>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	e001      	b.n	800b8dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8dc:	697b      	ldr	r3, [r7, #20]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20000e9c 	.word	0x20000e9c
 800b8ec:	20000e7c 	.word	0x20000e7c
 800b8f0:	200009a4 	.word	0x200009a4
 800b8f4:	20000e34 	.word	0x20000e34
 800b8f8:	200009a0 	.word	0x200009a0
 800b8fc:	20000e88 	.word	0x20000e88

0800b900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <vTaskInternalSetTimeOutState+0x24>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <vTaskInternalSetTimeOutState+0x28>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	605a      	str	r2, [r3, #4]
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000e8c 	.word	0x20000e8c
 800b928:	20000e78 	.word	0x20000e78

0800b92c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	613b      	str	r3, [r7, #16]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	60fb      	str	r3, [r7, #12]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b96e:	f000 ff81 	bl	800c874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b972:	4b1d      	ldr	r3, [pc, #116]	; (800b9e8 <xTaskCheckForTimeOut+0xbc>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b98a:	d102      	bne.n	800b992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e023      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <xTaskCheckForTimeOut+0xc0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d007      	beq.n	800b9ae <xTaskCheckForTimeOut+0x82>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d302      	bcc.n	800b9ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e015      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d20b      	bcs.n	800b9d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff9b 	bl	800b900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e004      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9da:	f000 ff7b 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000e78 	.word	0x20000e78
 800b9ec:	20000e8c 	.word	0x20000e8c

0800b9f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9f4:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <vTaskMissedYield+0x14>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20000e88 	.word	0x20000e88

0800ba08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba10:	f000 f852 	bl	800bab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <prvIdleTask+0x28>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d9f9      	bls.n	800ba10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <prvIdleTask+0x2c>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba2c:	e7f0      	b.n	800ba10 <prvIdleTask+0x8>
 800ba2e:	bf00      	nop
 800ba30:	200009a4 	.word	0x200009a4
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e00c      	b.n	800ba5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4a12      	ldr	r2, [pc, #72]	; (800ba98 <prvInitialiseTaskLists+0x60>)
 800ba50:	4413      	add	r3, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe f920 	bl	8009c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b37      	cmp	r3, #55	; 0x37
 800ba62:	d9ef      	bls.n	800ba44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba64:	480d      	ldr	r0, [pc, #52]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba66:	f7fe f917 	bl	8009c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba6a:	480d      	ldr	r0, [pc, #52]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba6c:	f7fe f914 	bl	8009c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba70:	480c      	ldr	r0, [pc, #48]	; (800baa4 <prvInitialiseTaskLists+0x6c>)
 800ba72:	f7fe f911 	bl	8009c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba76:	480c      	ldr	r0, [pc, #48]	; (800baa8 <prvInitialiseTaskLists+0x70>)
 800ba78:	f7fe f90e 	bl	8009c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba7c:	480b      	ldr	r0, [pc, #44]	; (800baac <prvInitialiseTaskLists+0x74>)
 800ba7e:	f7fe f90b 	bl	8009c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <prvInitialiseTaskLists+0x78>)
 800ba84:	4a05      	ldr	r2, [pc, #20]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <prvInitialiseTaskLists+0x7c>)
 800ba8a:	4a05      	ldr	r2, [pc, #20]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	200009a4 	.word	0x200009a4
 800ba9c:	20000e04 	.word	0x20000e04
 800baa0:	20000e18 	.word	0x20000e18
 800baa4:	20000e34 	.word	0x20000e34
 800baa8:	20000e48 	.word	0x20000e48
 800baac:	20000e60 	.word	0x20000e60
 800bab0:	20000e2c 	.word	0x20000e2c
 800bab4:	20000e30 	.word	0x20000e30

0800bab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800babe:	e019      	b.n	800baf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac0:	f000 fed8 	bl	800c874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac4:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <prvCheckTasksWaitingTermination+0x50>)
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3304      	adds	r3, #4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe f96b 	bl	8009dac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3b01      	subs	r3, #1
 800badc:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae0:	4b0b      	ldr	r3, [pc, #44]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	4a0a      	ldr	r2, [pc, #40]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baea:	f000 fef3 	bl	800c8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f810 	bl	800bb14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e1      	bne.n	800bac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000e48 	.word	0x20000e48
 800bb0c:	20000e74 	.word	0x20000e74
 800bb10:	20000e5c 	.word	0x20000e5c

0800bb14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3354      	adds	r3, #84	; 0x54
 800bb20:	4618      	mov	r0, r3
 800bb22:	f002 fa47 	bl	800dfb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d108      	bne.n	800bb42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f88b 	bl	800cc50 <vPortFree>
				vPortFree( pxTCB );
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f001 f888 	bl	800cc50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb40:	e018      	b.n	800bb74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d103      	bne.n	800bb54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 f87f 	bl	800cc50 <vPortFree>
	}
 800bb52:	e00f      	b.n	800bb74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d00a      	beq.n	800bb74 <prvDeleteTCB+0x60>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	60fb      	str	r3, [r7, #12]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <prvDeleteTCB+0x5e>
	}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb94:	e008      	b.n	800bba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb96:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	4a04      	ldr	r2, [pc, #16]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bba6:	6013      	str	r3, [r2, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	20000e2c 	.word	0x20000e2c
 800bbb8:	20000e94 	.word	0x20000e94

0800bbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <xTaskGetSchedulerState+0x34>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e008      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd0:	4b08      	ldr	r3, [pc, #32]	; (800bbf4 <xTaskGetSchedulerState+0x38>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	e001      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbe2:	687b      	ldr	r3, [r7, #4]
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	20000e80 	.word	0x20000e80
 800bbf4:	20000e9c 	.word	0x20000e9c

0800bbf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d051      	beq.n	800bcb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d241      	bcs.n	800bca0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db06      	blt.n	800bc32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc24:	4b25      	ldr	r3, [pc, #148]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	6959      	ldr	r1, [r3, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4a1f      	ldr	r2, [pc, #124]	; (800bcc0 <xTaskPriorityInherit+0xc8>)
 800bc44:	4413      	add	r3, r2
 800bc46:	4299      	cmp	r1, r3
 800bc48:	d122      	bne.n	800bc90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f8ac 	bl	8009dac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc54:	4b19      	ldr	r3, [pc, #100]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	4b18      	ldr	r3, [pc, #96]	; (800bcc4 <xTaskPriorityInherit+0xcc>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d903      	bls.n	800bc72 <xTaskPriorityInherit+0x7a>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <xTaskPriorityInherit+0xcc>)
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4a10      	ldr	r2, [pc, #64]	; (800bcc0 <xTaskPriorityInherit+0xc8>)
 800bc80:	441a      	add	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	3304      	adds	r3, #4
 800bc86:	4619      	mov	r1, r3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	f7fe f832 	bl	8009cf2 <vListInsertEnd>
 800bc8e:	e004      	b.n	800bc9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc90:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e008      	b.n	800bcb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <xTaskPriorityInherit+0xc4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d201      	bcs.n	800bcb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	200009a0 	.word	0x200009a0
 800bcc0:	200009a4 	.word	0x200009a4
 800bcc4:	20000e7c 	.word	0x20000e7c

0800bcc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d056      	beq.n	800bd8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcde:	4b2e      	ldr	r3, [pc, #184]	; (800bd98 <xTaskPriorityDisinherit+0xd0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d00a      	beq.n	800bcfe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60fb      	str	r3, [r7, #12]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	60bb      	str	r3, [r7, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	e7fe      	b.n	800bd1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd20:	1e5a      	subs	r2, r3, #1
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d02c      	beq.n	800bd8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d128      	bne.n	800bd8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe f834 	bl	8009dac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <xTaskPriorityDisinherit+0xd4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d903      	bls.n	800bd6c <xTaskPriorityDisinherit+0xa4>
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <xTaskPriorityDisinherit+0xd4>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <xTaskPriorityDisinherit+0xd8>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fd ffb5 	bl	8009cf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8c:	697b      	ldr	r3, [r7, #20]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	200009a0 	.word	0x200009a0
 800bd9c:	20000e7c 	.word	0x20000e7c
 800bda0:	200009a4 	.word	0x200009a4

0800bda4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d06a      	beq.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d902      	bls.n	800bdea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	61fb      	str	r3, [r7, #28]
 800bde8:	e002      	b.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d04b      	beq.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	429a      	cmp	r2, r3
 800be02:	d146      	bne.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be04:	4b25      	ldr	r3, [pc, #148]	; (800be9c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d10a      	bne.n	800be24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	60bb      	str	r3, [r7, #8]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	db04      	blt.n	800be42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	6959      	ldr	r1, [r3, #20]
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4a13      	ldr	r2, [pc, #76]	; (800bea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be52:	4413      	add	r3, r2
 800be54:	4299      	cmp	r1, r3
 800be56:	d11c      	bne.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fd ffa5 	bl	8009dac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d903      	bls.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	4a0c      	ldr	r2, [pc, #48]	; (800bea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4a07      	ldr	r2, [pc, #28]	; (800bea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be84:	441a      	add	r2, r3
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	3304      	adds	r3, #4
 800be8a:	4619      	mov	r1, r3
 800be8c:	4610      	mov	r0, r2
 800be8e:	f7fd ff30 	bl	8009cf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be92:	bf00      	nop
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	200009a0 	.word	0x200009a0
 800bea0:	200009a4 	.word	0x200009a4
 800bea4:	20000e7c 	.word	0x20000e7c

0800bea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800beb4:	4b05      	ldr	r3, [pc, #20]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800beba:	3201      	adds	r2, #1
 800bebc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bebe:	4b03      	ldr	r3, [pc, #12]	; (800becc <pvTaskIncrementMutexHeldCount+0x24>)
 800bec0:	681b      	ldr	r3, [r3, #0]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	200009a0 	.word	0x200009a0

0800bed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beda:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <prvAddCurrentTaskToDelayedList+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bee0:	4b20      	ldr	r3, [pc, #128]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fd ff60 	bl	8009dac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef2:	d10a      	bne.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befa:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	4819      	ldr	r0, [pc, #100]	; (800bf68 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf04:	f7fd fef5 	bl	8009cf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf08:	e026      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4413      	add	r3, r2
 800bf10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d209      	bcs.n	800bf36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7fd ff03 	bl	8009d3a <vListInsert>
}
 800bf34:	e010      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf36:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fd fef9 	bl	8009d3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d202      	bcs.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf52:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6013      	str	r3, [r2, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000e78 	.word	0x20000e78
 800bf64:	200009a0 	.word	0x200009a0
 800bf68:	20000e60 	.word	0x20000e60
 800bf6c:	20000e30 	.word	0x20000e30
 800bf70:	20000e2c 	.word	0x20000e2c
 800bf74:	20000e94 	.word	0x20000e94

0800bf78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf82:	f000 fb07 	bl	800c594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf86:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <xTimerCreateTimerTask+0x80>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d021      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf96:	1d3a      	adds	r2, r7, #4
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd fe5f 	bl	8009c64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	4910      	ldr	r1, [pc, #64]	; (800bffc <xTimerCreateTimerTask+0x84>)
 800bfba:	4811      	ldr	r0, [pc, #68]	; (800c000 <xTimerCreateTimerTask+0x88>)
 800bfbc:	f7fe ff2e 	bl	800ae1c <xTaskCreateStatic>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	4a10      	ldr	r2, [pc, #64]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	613b      	str	r3, [r7, #16]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000ed0 	.word	0x20000ed0
 800bffc:	08013800 	.word	0x08013800
 800c000:	0800c13d 	.word	0x0800c13d
 800c004:	20000ed4 	.word	0x20000ed4

0800c008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d02a      	beq.n	800c094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	dc18      	bgt.n	800c082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c050:	f7ff fdb4 	bl	800bbbc <xTaskGetSchedulerState>
 800c054:	4603      	mov	r3, r0
 800c056:	2b02      	cmp	r3, #2
 800c058:	d109      	bne.n	800c06e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c05a:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f107 0110 	add.w	r1, r7, #16
 800c062:	2300      	movs	r3, #0
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	f7fe f873 	bl	800a150 <xQueueGenericSend>
 800c06a:	6278      	str	r0, [r7, #36]	; 0x24
 800c06c:	e012      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	f107 0110 	add.w	r1, r7, #16
 800c076:	2300      	movs	r3, #0
 800c078:	2200      	movs	r2, #0
 800c07a:	f7fe f869 	bl	800a150 <xQueueGenericSend>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24
 800c080:	e008      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c082:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f107 0110 	add.w	r1, r7, #16
 800c08a:	2300      	movs	r3, #0
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	f7fe f95d 	bl	800a34c <xQueueGenericSendFromISR>
 800c092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c096:	4618      	mov	r0, r3
 800c098:	3728      	adds	r7, #40	; 0x28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000ed0 	.word	0x20000ed0

0800c0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <prvProcessExpiredTimer+0x94>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd fe75 	bl	8009dac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d022      	beq.n	800c116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	18d1      	adds	r1, r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	f000 f8d1 	bl	800c284 <prvInsertTimerInActiveList>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01f      	beq.n	800c128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f7ff ff88 	bl	800c008 <xTimerGenericCommand>
 800c0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d113      	bne.n	800c128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	b2da      	uxtb	r2, r3
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	4798      	blx	r3
}
 800c130:	bf00      	nop
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20000ec8 	.word	0x20000ec8

0800c13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f857 	bl	800c1fc <prvGetNextExpireTime>
 800c14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	4619      	mov	r1, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f803 	bl	800c160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c15a:	f000 f8d5 	bl	800c308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c15e:	e7f1      	b.n	800c144 <prvTimerTask+0x8>

0800c160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c16a:	f7ff f929 	bl	800b3c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4618      	mov	r0, r3
 800c174:	f000 f866 	bl	800c244 <prvSampleTimeNow>
 800c178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d130      	bne.n	800c1e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d806      	bhi.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c18e:	f7ff f925 	bl	800b3dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff ff85 	bl	800c0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c19a:	e024      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1a2:	4b13      	ldr	r3, [pc, #76]	; (800c1f0 <prvProcessTimerOrBlockTask+0x90>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <prvProcessTimerOrBlockTask+0x50>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x52>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1b4:	4b0f      	ldr	r3, [pc, #60]	; (800c1f4 <prvProcessTimerOrBlockTask+0x94>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fe fdf7 	bl	800adb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1c6:	f7ff f909 	bl	800b3dc <xTaskResumeAll>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <prvProcessTimerOrBlockTask+0x98>)
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	f3bf 8f6f 	isb	sy
}
 800c1e0:	e001      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1e2:	f7ff f8fb 	bl	800b3dc <xTaskResumeAll>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000ecc 	.word	0x20000ecc
 800c1f4:	20000ed0 	.word	0x20000ed0
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <prvGetNextExpireTime+0x16>
 800c20e:	2201      	movs	r2, #1
 800c210:	e000      	b.n	800c214 <prvGetNextExpireTime+0x18>
 800c212:	2200      	movs	r2, #0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d105      	bne.n	800c22c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e001      	b.n	800c230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c230:	68fb      	ldr	r3, [r7, #12]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	20000ec8 	.word	0x20000ec8

0800c244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c24c:	f7ff f964 	bl	800b518 <xTaskGetTickCount>
 800c250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d205      	bcs.n	800c268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c25c:	f000 f936 	bl	800c4cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	e002      	b.n	800c26e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c26e:	4a04      	ldr	r2, [pc, #16]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c274:	68fb      	ldr	r3, [r7, #12]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000ed8 	.word	0x20000ed8

0800c284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c292:	2300      	movs	r3, #0
 800c294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d812      	bhi.n	800c2d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d302      	bcc.n	800c2be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e01b      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <prvInsertTimerInActiveList+0x7c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fd fd36 	bl	8009d3a <vListInsert>
 800c2ce:	e012      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d206      	bcs.n	800c2e6 <prvInsertTimerInActiveList+0x62>
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e007      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e6:	4b07      	ldr	r3, [pc, #28]	; (800c304 <prvInsertTimerInActiveList+0x80>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fd fd22 	bl	8009d3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2f6:	697b      	ldr	r3, [r7, #20]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000ecc 	.word	0x20000ecc
 800c304:	20000ec8 	.word	0x20000ec8

0800c308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	; 0x38
 800c30c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c30e:	e0ca      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da18      	bge.n	800c348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c316:	1d3b      	adds	r3, r7, #4
 800c318:	3304      	adds	r3, #4
 800c31a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61fb      	str	r3, [r7, #28]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33e:	6850      	ldr	r0, [r2, #4]
 800c340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c342:	6892      	ldr	r2, [r2, #8]
 800c344:	4611      	mov	r1, r2
 800c346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f2c0 80aa 	blt.w	800c4a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7fd fd23 	bl	8009dac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c366:	463b      	mov	r3, r7
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff ff6b 	bl	800c244 <prvSampleTimeNow>
 800c36e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b09      	cmp	r3, #9
 800c374:	f200 8097 	bhi.w	800c4a6 <prvProcessReceivedCommands+0x19e>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <prvProcessReceivedCommands+0x78>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3a9 	.word	0x0800c3a9
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c431 	.word	0x0800c431
 800c394:	0800c47b 	.word	0x0800c47b
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3a9 	.word	0x0800c3a9
 800c3a0:	0800c41d 	.word	0x0800c41d
 800c3a4:	0800c431 	.word	0x0800c431
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	18d1      	adds	r1, r2, r3
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c8:	f7ff ff5c 	bl	800c284 <prvInsertTimerInActiveList>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d069      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d05e      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	441a      	add	r2, r3
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3fa:	f7ff fe05 	bl	800c008 <xTimerGenericCommand>
 800c3fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d14f      	bne.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	61bb      	str	r3, [r7, #24]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c42e:	e03a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	617b      	str	r3, [r7, #20]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	699a      	ldr	r2, [r3, #24]
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	18d1      	adds	r1, r2, r3
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c474:	f7ff ff06 	bl	800c284 <prvInsertTimerInActiveList>
					break;
 800c478:	e015      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48a:	f000 fbe1 	bl	800cc50 <vPortFree>
 800c48e:	e00a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4a2:	e000      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c4a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <prvProcessReceivedCommands+0x1c0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	1d39      	adds	r1, r7, #4
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe f874 	bl	800a59c <xQueueReceive>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f47f af2a 	bne.w	800c310 <prvProcessReceivedCommands+0x8>
	}
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	3730      	adds	r7, #48	; 0x30
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20000ed0 	.word	0x20000ed0

0800c4cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4d2:	e048      	b.n	800c566 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4d4:	4b2d      	ldr	r3, [pc, #180]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fd fc5d 	bl	8009dac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d02e      	beq.n	800c566 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	4413      	add	r3, r2
 800c510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	429a      	cmp	r2, r3
 800c518:	d90e      	bls.n	800c538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c526:	4b19      	ldr	r3, [pc, #100]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fd fc02 	bl	8009d3a <vListInsert>
 800c536:	e016      	b.n	800c566 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c538:	2300      	movs	r3, #0
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	2300      	movs	r3, #0
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	2100      	movs	r1, #0
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fd60 	bl	800c008 <xTimerGenericCommand>
 800c548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	603b      	str	r3, [r7, #0]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1b1      	bne.n	800c4d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a04      	ldr	r2, [pc, #16]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c57c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c57e:	4a04      	ldr	r2, [pc, #16]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	6013      	str	r3, [r2, #0]
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20000ec8 	.word	0x20000ec8
 800c590:	20000ecc 	.word	0x20000ecc

0800c594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c59a:	f000 f96b 	bl	800c874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d120      	bne.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5a6:	4814      	ldr	r0, [pc, #80]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5a8:	f7fd fb76 	bl	8009c98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5ac:	4813      	ldr	r0, [pc, #76]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5ae:	f7fd fb73 	bl	8009c98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <prvCheckForValidListAndQueue+0x6c>)
 800c5b4:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <prvCheckForValidListAndQueue+0x70>)
 800c5ba:	4a10      	ldr	r2, [pc, #64]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <prvCheckForValidListAndQueue+0x74>)
 800c5c4:	4a11      	ldr	r2, [pc, #68]	; (800c60c <prvCheckForValidListAndQueue+0x78>)
 800c5c6:	2110      	movs	r1, #16
 800c5c8:	200a      	movs	r0, #10
 800c5ca:	f7fd fc81 	bl	8009ed0 <xQueueGenericCreateStatic>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d005      	beq.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	490b      	ldr	r1, [pc, #44]	; (800c610 <prvCheckForValidListAndQueue+0x7c>)
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fb92 	bl	800ad0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e8:	f000 f974 	bl	800c8d4 <vPortExitCritical>
}
 800c5ec:	bf00      	nop
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000ed0 	.word	0x20000ed0
 800c5f8:	20000ea0 	.word	0x20000ea0
 800c5fc:	20000eb4 	.word	0x20000eb4
 800c600:	20000ec8 	.word	0x20000ec8
 800c604:	20000ecc 	.word	0x20000ecc
 800c608:	20000f7c 	.word	0x20000f7c
 800c60c:	20000edc 	.word	0x20000edc
 800c610:	08013808 	.word	0x08013808

0800c614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3b04      	subs	r3, #4
 800c624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3b04      	subs	r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	f023 0201 	bic.w	r2, r3, #1
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c644:	4a0c      	ldr	r2, [pc, #48]	; (800c678 <pxPortInitialiseStack+0x64>)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3b14      	subs	r3, #20
 800c64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3b04      	subs	r3, #4
 800c65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f06f 0202 	mvn.w	r2, #2
 800c662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3b20      	subs	r3, #32
 800c668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c66a:	68fb      	ldr	r3, [r7, #12]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	0800c67d 	.word	0x0800c67d

0800c67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c686:	4b12      	ldr	r3, [pc, #72]	; (800c6d0 <prvTaskExitError+0x54>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c68e:	d00a      	beq.n	800c6a6 <prvTaskExitError+0x2a>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <prvTaskExitError+0x28>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6ba:	bf00      	nop
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0fc      	beq.n	800c6bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	20000010 	.word	0x20000010
	...

0800c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c708:	4808      	ldr	r0, [pc, #32]	; (800c72c <prvPortStartFirstTask+0x24>)
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	f380 8808 	msr	MSP, r0
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8814 	msr	CONTROL, r0
 800c71a:	b662      	cpsie	i
 800c71c:	b661      	cpsie	f
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	df00      	svc	0
 800c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c72a:	bf00      	nop
 800c72c:	e000ed08 	.word	0xe000ed08

0800c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <xPortStartScheduler+0x120>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a46      	ldr	r2, [pc, #280]	; (800c854 <xPortStartScheduler+0x124>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10a      	bne.n	800c756 <xPortStartScheduler+0x26>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <xPortStartScheduler+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <xPortStartScheduler+0x128>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10a      	bne.n	800c776 <xPortStartScheduler+0x46>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c776:	4b39      	ldr	r3, [pc, #228]	; (800c85c <xPortStartScheduler+0x12c>)
 800c778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	4b31      	ldr	r3, [pc, #196]	; (800c860 <xPortStartScheduler+0x130>)
 800c79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c79e:	4b31      	ldr	r3, [pc, #196]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7a4:	e009      	b.n	800c7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7a6:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	4a2d      	ldr	r2, [pc, #180]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ba:	78fb      	ldrb	r3, [r7, #3]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c2:	2b80      	cmp	r3, #128	; 0x80
 800c7c4:	d0ef      	beq.n	800c7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <xPortStartScheduler+0x134>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1c3 0307 	rsb	r3, r3, #7
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d00a      	beq.n	800c7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60bb      	str	r3, [r7, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <xPortStartScheduler+0x134>)
 800c7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <xPortStartScheduler+0x138>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a17      	ldr	r2, [pc, #92]	; (800c868 <xPortStartScheduler+0x138>)
 800c80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <xPortStartScheduler+0x138>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a14      	ldr	r2, [pc, #80]	; (800c868 <xPortStartScheduler+0x138>)
 800c818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c81e:	f000 f8dd 	bl	800c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <xPortStartScheduler+0x13c>)
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c828:	f000 f8fc 	bl	800ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <xPortStartScheduler+0x140>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <xPortStartScheduler+0x140>)
 800c832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c838:	f7ff ff66 	bl	800c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c83c:	f7fe ff48 	bl	800b6d0 <vTaskSwitchContext>
	prvTaskExitError();
 800c840:	f7ff ff1c 	bl	800c67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	e000ed00 	.word	0xe000ed00
 800c854:	410fc271 	.word	0x410fc271
 800c858:	410fc270 	.word	0x410fc270
 800c85c:	e000e400 	.word	0xe000e400
 800c860:	20000fcc 	.word	0x20000fcc
 800c864:	20000fd0 	.word	0x20000fd0
 800c868:	e000ed20 	.word	0xe000ed20
 800c86c:	20000010 	.word	0x20000010
 800c870:	e000ef34 	.word	0xe000ef34

0800c874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	607b      	str	r3, [r7, #4]
}
 800c88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <vPortEnterCritical+0x58>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <vPortEnterCritical+0x58>)
 800c896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <vPortEnterCritical+0x58>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d10f      	bne.n	800c8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <vPortEnterCritical+0x5c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	603b      	str	r3, [r7, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vPortEnterCritical+0x4a>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000010 	.word	0x20000010
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <vPortExitCritical+0x50>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <vPortExitCritical+0x24>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	607b      	str	r3, [r7, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <vPortExitCritical+0x50>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4a09      	ldr	r2, [pc, #36]	; (800c924 <vPortExitCritical+0x50>)
 800c900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c902:	4b08      	ldr	r3, [pc, #32]	; (800c924 <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <vPortExitCritical+0x42>
 800c90a:	2300      	movs	r3, #0
 800c90c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f383 8811 	msr	BASEPRI, r3
}
 800c914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000010 	.word	0x20000010
	...

0800c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c930:	f3ef 8009 	mrs	r0, PSP
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4b15      	ldr	r3, [pc, #84]	; (800c990 <pxCurrentTCBConst>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f01e 0f10 	tst.w	lr, #16
 800c940:	bf08      	it	eq
 800c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c954:	f380 8811 	msr	BASEPRI, r0
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f7fe feb6 	bl	800b6d0 <vTaskSwitchContext>
 800c964:	f04f 0000 	mov.w	r0, #0
 800c968:	f380 8811 	msr	BASEPRI, r0
 800c96c:	bc09      	pop	{r0, r3}
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c976:	f01e 0f10 	tst.w	lr, #16
 800c97a:	bf08      	it	eq
 800c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c980:	f380 8809 	msr	PSP, r0
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst>:
 800c990:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	607b      	str	r3, [r7, #4]
}
 800c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9b2:	f7fe fdd3 	bl	800b55c <xTaskIncrementTick>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <xPortSysTickHandler+0x40>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <vPortSetupTimerInterrupt+0x38>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <vPortSetupTimerInterrupt+0x3c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <vPortSetupTimerInterrupt+0x40>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	099b      	lsrs	r3, r3, #6
 800c9f8:	4a09      	ldr	r2, [pc, #36]	; (800ca20 <vPortSetupTimerInterrupt+0x44>)
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9fe:	4b04      	ldr	r3, [pc, #16]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e010 	.word	0xe000e010
 800ca14:	e000e018 	.word	0xe000e018
 800ca18:	20000004 	.word	0x20000004
 800ca1c:	10624dd3 	.word	0x10624dd3
 800ca20:	e000e014 	.word	0xe000e014

0800ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca34 <vPortEnableVFP+0x10>
 800ca28:	6801      	ldr	r1, [r0, #0]
 800ca2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca2e:	6001      	str	r1, [r0, #0]
 800ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca32:	bf00      	nop
 800ca34:	e000ed88 	.word	0xe000ed88

0800ca38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca3e:	f3ef 8305 	mrs	r3, IPSR
 800ca42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b0f      	cmp	r3, #15
 800ca48:	d914      	bls.n	800ca74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <vPortValidateInterruptPriority+0x70>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca54:	4b15      	ldr	r3, [pc, #84]	; (800caac <vPortValidateInterruptPriority+0x74>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	7afa      	ldrb	r2, [r7, #11]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d20a      	bcs.n	800ca74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <vPortValidateInterruptPriority+0x78>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <vPortValidateInterruptPriority+0x7c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d90a      	bls.n	800ca9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	603b      	str	r3, [r7, #0]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <vPortValidateInterruptPriority+0x60>
	}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	e000e3f0 	.word	0xe000e3f0
 800caac:	20000fcc 	.word	0x20000fcc
 800cab0:	e000ed0c 	.word	0xe000ed0c
 800cab4:	20000fd0 	.word	0x20000fd0

0800cab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cac4:	f7fe fc7c 	bl	800b3c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cac8:	4b5b      	ldr	r3, [pc, #364]	; (800cc38 <pvPortMalloc+0x180>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cad0:	f000 f920 	bl	800cd14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cad4:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <pvPortMalloc+0x184>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8093 	bne.w	800cc08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01d      	beq.n	800cb24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cae8:	2208      	movs	r2, #8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d014      	beq.n	800cb24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f023 0307 	bic.w	r3, r3, #7
 800cb00:	3308      	adds	r3, #8
 800cb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <pvPortMalloc+0x6c>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617b      	str	r3, [r7, #20]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d06e      	beq.n	800cc08 <pvPortMalloc+0x150>
 800cb2a:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <pvPortMalloc+0x188>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d869      	bhi.n	800cc08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb34:	4b43      	ldr	r3, [pc, #268]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb38:	4b42      	ldr	r3, [pc, #264]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb3e:	e004      	b.n	800cb4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d903      	bls.n	800cb5c <pvPortMalloc+0xa4>
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f1      	bne.n	800cb40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <pvPortMalloc+0x180>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d050      	beq.n	800cc08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2208      	movs	r2, #8
 800cb6c:	4413      	add	r3, r2
 800cb6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	1ad2      	subs	r2, r2, r3
 800cb80:	2308      	movs	r3, #8
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d91f      	bls.n	800cbc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <pvPortMalloc+0xf8>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	613b      	str	r3, [r7, #16]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	1ad2      	subs	r2, r2, r3
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbc2:	69b8      	ldr	r0, [r7, #24]
 800cbc4:	f000 f908 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbc8:	4b1d      	ldr	r3, [pc, #116]	; (800cc40 <pvPortMalloc+0x188>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	4a1b      	ldr	r2, [pc, #108]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b1b      	ldr	r3, [pc, #108]	; (800cc48 <pvPortMalloc+0x190>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d203      	bcs.n	800cbea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbe2:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <pvPortMalloc+0x188>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <pvPortMalloc+0x190>)
 800cbe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <pvPortMalloc+0x184>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <pvPortMalloc+0x194>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a11      	ldr	r2, [pc, #68]	; (800cc4c <pvPortMalloc+0x194>)
 800cc06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc08:	f7fe fbe8 	bl	800b3dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <pvPortMalloc+0x174>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	60fb      	str	r3, [r7, #12]
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <pvPortMalloc+0x172>
	return pvReturn;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3728      	adds	r7, #40	; 0x28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20004bdc 	.word	0x20004bdc
 800cc3c:	20004bf0 	.word	0x20004bf0
 800cc40:	20004be0 	.word	0x20004be0
 800cc44:	20004bd4 	.word	0x20004bd4
 800cc48:	20004be4 	.word	0x20004be4
 800cc4c:	20004be8 	.word	0x20004be8

0800cc50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d04d      	beq.n	800ccfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc62:	2308      	movs	r3, #8
 800cc64:	425b      	negs	r3, r3
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4413      	add	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	4b24      	ldr	r3, [pc, #144]	; (800cd08 <vPortFree+0xb8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4013      	ands	r3, r2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10a      	bne.n	800cc94 <vPortFree+0x44>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	60fb      	str	r3, [r7, #12]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <vPortFree+0x62>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60bb      	str	r3, [r7, #8]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <vPortFree+0xb8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4013      	ands	r3, r2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01e      	beq.n	800ccfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d11a      	bne.n	800ccfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <vPortFree+0xb8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	401a      	ands	r2, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccd8:	f7fe fb72 	bl	800b3c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <vPortFree+0xbc>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4413      	add	r3, r2
 800cce6:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <vPortFree+0xbc>)
 800cce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccea:	6938      	ldr	r0, [r7, #16]
 800ccec:	f000 f874 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <vPortFree+0xc0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a06      	ldr	r2, [pc, #24]	; (800cd10 <vPortFree+0xc0>)
 800ccf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccfa:	f7fe fb6f 	bl	800b3dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccfe:	bf00      	nop
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20004bf0 	.word	0x20004bf0
 800cd0c:	20004be0 	.word	0x20004be0
 800cd10:	20004bec 	.word	0x20004bec

0800cd14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cd1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd20:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <prvHeapInit+0xac>)
 800cd22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3307      	adds	r3, #7
 800cd32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0307 	bic.w	r3, r3, #7
 800cd3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	4a1f      	ldr	r2, [pc, #124]	; (800cdc0 <prvHeapInit+0xac>)
 800cd44:	4413      	add	r3, r2
 800cd46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd4c:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd60:	2208      	movs	r2, #8
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a15      	ldr	r2, [pc, #84]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7e:	4b12      	ldr	r3, [pc, #72]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4a0a      	ldr	r2, [pc, #40]	; (800cdcc <prvHeapInit+0xb8>)
 800cda2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4a09      	ldr	r2, [pc, #36]	; (800cdd0 <prvHeapInit+0xbc>)
 800cdaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <prvHeapInit+0xc0>)
 800cdae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	20000fd4 	.word	0x20000fd4
 800cdc4:	20004bd4 	.word	0x20004bd4
 800cdc8:	20004bdc 	.word	0x20004bdc
 800cdcc:	20004be4 	.word	0x20004be4
 800cdd0:	20004be0 	.word	0x20004be0
 800cdd4:	20004bf0 	.word	0x20004bf0

0800cdd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cde0:	4b28      	ldr	r3, [pc, #160]	; (800ce84 <prvInsertBlockIntoFreeList+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e002      	b.n	800cdec <prvInsertBlockIntoFreeList+0x14>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d8f7      	bhi.n	800cde6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d108      	bne.n	800ce1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d118      	bne.n	800ce60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00d      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e008      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d002      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce76:	bf00      	nop
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20004bd4 	.word	0x20004bd4
 800ce88:	20004bdc 	.word	0x20004bdc

0800ce8c <calloc>:
 800ce8c:	4b02      	ldr	r3, [pc, #8]	; (800ce98 <calloc+0xc>)
 800ce8e:	460a      	mov	r2, r1
 800ce90:	4601      	mov	r1, r0
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	f000 b944 	b.w	800d120 <_calloc_r>
 800ce98:	20000014 	.word	0x20000014

0800ce9c <__errno>:
 800ce9c:	4b01      	ldr	r3, [pc, #4]	; (800cea4 <__errno+0x8>)
 800ce9e:	6818      	ldr	r0, [r3, #0]
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20000014 	.word	0x20000014

0800cea8 <std>:
 800cea8:	2300      	movs	r3, #0
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	4604      	mov	r4, r0
 800ceae:	e9c0 3300 	strd	r3, r3, [r0]
 800ceb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceb6:	6083      	str	r3, [r0, #8]
 800ceb8:	8181      	strh	r1, [r0, #12]
 800ceba:	6643      	str	r3, [r0, #100]	; 0x64
 800cebc:	81c2      	strh	r2, [r0, #14]
 800cebe:	6183      	str	r3, [r0, #24]
 800cec0:	4619      	mov	r1, r3
 800cec2:	2208      	movs	r2, #8
 800cec4:	305c      	adds	r0, #92	; 0x5c
 800cec6:	f000 f923 	bl	800d110 <memset>
 800ceca:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <std+0x38>)
 800cecc:	6263      	str	r3, [r4, #36]	; 0x24
 800cece:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <std+0x3c>)
 800ced0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ced2:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <std+0x40>)
 800ced4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ced6:	4b05      	ldr	r3, [pc, #20]	; (800ceec <std+0x44>)
 800ced8:	6224      	str	r4, [r4, #32]
 800ceda:	6323      	str	r3, [r4, #48]	; 0x30
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	bf00      	nop
 800cee0:	0800e0d9 	.word	0x0800e0d9
 800cee4:	0800e0fb 	.word	0x0800e0fb
 800cee8:	0800e133 	.word	0x0800e133
 800ceec:	0800e157 	.word	0x0800e157

0800cef0 <_cleanup_r>:
 800cef0:	4901      	ldr	r1, [pc, #4]	; (800cef8 <_cleanup_r+0x8>)
 800cef2:	f000 b8af 	b.w	800d054 <_fwalk_reent>
 800cef6:	bf00      	nop
 800cef8:	0800fd05 	.word	0x0800fd05

0800cefc <__sfmoreglue>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	1e4a      	subs	r2, r1, #1
 800cf00:	2568      	movs	r5, #104	; 0x68
 800cf02:	4355      	muls	r5, r2
 800cf04:	460e      	mov	r6, r1
 800cf06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf0a:	f000 f969 	bl	800d1e0 <_malloc_r>
 800cf0e:	4604      	mov	r4, r0
 800cf10:	b140      	cbz	r0, 800cf24 <__sfmoreglue+0x28>
 800cf12:	2100      	movs	r1, #0
 800cf14:	e9c0 1600 	strd	r1, r6, [r0]
 800cf18:	300c      	adds	r0, #12
 800cf1a:	60a0      	str	r0, [r4, #8]
 800cf1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf20:	f000 f8f6 	bl	800d110 <memset>
 800cf24:	4620      	mov	r0, r4
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <__sfp_lock_acquire>:
 800cf28:	4801      	ldr	r0, [pc, #4]	; (800cf30 <__sfp_lock_acquire+0x8>)
 800cf2a:	f000 b8d8 	b.w	800d0de <__retarget_lock_acquire_recursive>
 800cf2e:	bf00      	nop
 800cf30:	2000569c 	.word	0x2000569c

0800cf34 <__sfp_lock_release>:
 800cf34:	4801      	ldr	r0, [pc, #4]	; (800cf3c <__sfp_lock_release+0x8>)
 800cf36:	f000 b8d3 	b.w	800d0e0 <__retarget_lock_release_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	2000569c 	.word	0x2000569c

0800cf40 <__sinit_lock_acquire>:
 800cf40:	4801      	ldr	r0, [pc, #4]	; (800cf48 <__sinit_lock_acquire+0x8>)
 800cf42:	f000 b8cc 	b.w	800d0de <__retarget_lock_acquire_recursive>
 800cf46:	bf00      	nop
 800cf48:	20005697 	.word	0x20005697

0800cf4c <__sinit_lock_release>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	; (800cf54 <__sinit_lock_release+0x8>)
 800cf4e:	f000 b8c7 	b.w	800d0e0 <__retarget_lock_release_recursive>
 800cf52:	bf00      	nop
 800cf54:	20005697 	.word	0x20005697

0800cf58 <__sinit>:
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	f7ff fff0 	bl	800cf40 <__sinit_lock_acquire>
 800cf60:	69a3      	ldr	r3, [r4, #24]
 800cf62:	b11b      	cbz	r3, 800cf6c <__sinit+0x14>
 800cf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf68:	f7ff bff0 	b.w	800cf4c <__sinit_lock_release>
 800cf6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf70:	6523      	str	r3, [r4, #80]	; 0x50
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <__sinit+0x68>)
 800cf74:	4a13      	ldr	r2, [pc, #76]	; (800cfc4 <__sinit+0x6c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	bf04      	itt	eq
 800cf7e:	2301      	moveq	r3, #1
 800cf80:	61a3      	streq	r3, [r4, #24]
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 f820 	bl	800cfc8 <__sfp>
 800cf88:	6060      	str	r0, [r4, #4]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 f81c 	bl	800cfc8 <__sfp>
 800cf90:	60a0      	str	r0, [r4, #8]
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 f818 	bl	800cfc8 <__sfp>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	60e0      	str	r0, [r4, #12]
 800cf9c:	2104      	movs	r1, #4
 800cf9e:	6860      	ldr	r0, [r4, #4]
 800cfa0:	f7ff ff82 	bl	800cea8 <std>
 800cfa4:	68a0      	ldr	r0, [r4, #8]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	2109      	movs	r1, #9
 800cfaa:	f7ff ff7d 	bl	800cea8 <std>
 800cfae:	68e0      	ldr	r0, [r4, #12]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	2112      	movs	r1, #18
 800cfb4:	f7ff ff78 	bl	800cea8 <std>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	61a3      	str	r3, [r4, #24]
 800cfbc:	e7d2      	b.n	800cf64 <__sinit+0xc>
 800cfbe:	bf00      	nop
 800cfc0:	08013928 	.word	0x08013928
 800cfc4:	0800cef1 	.word	0x0800cef1

0800cfc8 <__sfp>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	4607      	mov	r7, r0
 800cfcc:	f7ff ffac 	bl	800cf28 <__sfp_lock_acquire>
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <__sfp+0x84>)
 800cfd2:	681e      	ldr	r6, [r3, #0]
 800cfd4:	69b3      	ldr	r3, [r6, #24]
 800cfd6:	b913      	cbnz	r3, 800cfde <__sfp+0x16>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7ff ffbd 	bl	800cf58 <__sinit>
 800cfde:	3648      	adds	r6, #72	; 0x48
 800cfe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	d503      	bpl.n	800cff0 <__sfp+0x28>
 800cfe8:	6833      	ldr	r3, [r6, #0]
 800cfea:	b30b      	cbz	r3, 800d030 <__sfp+0x68>
 800cfec:	6836      	ldr	r6, [r6, #0]
 800cfee:	e7f7      	b.n	800cfe0 <__sfp+0x18>
 800cff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cff4:	b9d5      	cbnz	r5, 800d02c <__sfp+0x64>
 800cff6:	4b16      	ldr	r3, [pc, #88]	; (800d050 <__sfp+0x88>)
 800cff8:	60e3      	str	r3, [r4, #12]
 800cffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cffe:	6665      	str	r5, [r4, #100]	; 0x64
 800d000:	f000 f86c 	bl	800d0dc <__retarget_lock_init_recursive>
 800d004:	f7ff ff96 	bl	800cf34 <__sfp_lock_release>
 800d008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d010:	6025      	str	r5, [r4, #0]
 800d012:	61a5      	str	r5, [r4, #24]
 800d014:	2208      	movs	r2, #8
 800d016:	4629      	mov	r1, r5
 800d018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d01c:	f000 f878 	bl	800d110 <memset>
 800d020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d028:	4620      	mov	r0, r4
 800d02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02c:	3468      	adds	r4, #104	; 0x68
 800d02e:	e7d9      	b.n	800cfe4 <__sfp+0x1c>
 800d030:	2104      	movs	r1, #4
 800d032:	4638      	mov	r0, r7
 800d034:	f7ff ff62 	bl	800cefc <__sfmoreglue>
 800d038:	4604      	mov	r4, r0
 800d03a:	6030      	str	r0, [r6, #0]
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d1d5      	bne.n	800cfec <__sfp+0x24>
 800d040:	f7ff ff78 	bl	800cf34 <__sfp_lock_release>
 800d044:	230c      	movs	r3, #12
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	e7ee      	b.n	800d028 <__sfp+0x60>
 800d04a:	bf00      	nop
 800d04c:	08013928 	.word	0x08013928
 800d050:	ffff0001 	.word	0xffff0001

0800d054 <_fwalk_reent>:
 800d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d058:	4606      	mov	r6, r0
 800d05a:	4688      	mov	r8, r1
 800d05c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d060:	2700      	movs	r7, #0
 800d062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d066:	f1b9 0901 	subs.w	r9, r9, #1
 800d06a:	d505      	bpl.n	800d078 <_fwalk_reent+0x24>
 800d06c:	6824      	ldr	r4, [r4, #0]
 800d06e:	2c00      	cmp	r4, #0
 800d070:	d1f7      	bne.n	800d062 <_fwalk_reent+0xe>
 800d072:	4638      	mov	r0, r7
 800d074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d078:	89ab      	ldrh	r3, [r5, #12]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d907      	bls.n	800d08e <_fwalk_reent+0x3a>
 800d07e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d082:	3301      	adds	r3, #1
 800d084:	d003      	beq.n	800d08e <_fwalk_reent+0x3a>
 800d086:	4629      	mov	r1, r5
 800d088:	4630      	mov	r0, r6
 800d08a:	47c0      	blx	r8
 800d08c:	4307      	orrs	r7, r0
 800d08e:	3568      	adds	r5, #104	; 0x68
 800d090:	e7e9      	b.n	800d066 <_fwalk_reent+0x12>
	...

0800d094 <__libc_init_array>:
 800d094:	b570      	push	{r4, r5, r6, lr}
 800d096:	4d0d      	ldr	r5, [pc, #52]	; (800d0cc <__libc_init_array+0x38>)
 800d098:	4c0d      	ldr	r4, [pc, #52]	; (800d0d0 <__libc_init_array+0x3c>)
 800d09a:	1b64      	subs	r4, r4, r5
 800d09c:	10a4      	asrs	r4, r4, #2
 800d09e:	2600      	movs	r6, #0
 800d0a0:	42a6      	cmp	r6, r4
 800d0a2:	d109      	bne.n	800d0b8 <__libc_init_array+0x24>
 800d0a4:	4d0b      	ldr	r5, [pc, #44]	; (800d0d4 <__libc_init_array+0x40>)
 800d0a6:	4c0c      	ldr	r4, [pc, #48]	; (800d0d8 <__libc_init_array+0x44>)
 800d0a8:	f006 fb68 	bl	801377c <_init>
 800d0ac:	1b64      	subs	r4, r4, r5
 800d0ae:	10a4      	asrs	r4, r4, #2
 800d0b0:	2600      	movs	r6, #0
 800d0b2:	42a6      	cmp	r6, r4
 800d0b4:	d105      	bne.n	800d0c2 <__libc_init_array+0x2e>
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0bc:	4798      	blx	r3
 800d0be:	3601      	adds	r6, #1
 800d0c0:	e7ee      	b.n	800d0a0 <__libc_init_array+0xc>
 800d0c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c6:	4798      	blx	r3
 800d0c8:	3601      	adds	r6, #1
 800d0ca:	e7f2      	b.n	800d0b2 <__libc_init_array+0x1e>
 800d0cc:	08013fa0 	.word	0x08013fa0
 800d0d0:	08013fa0 	.word	0x08013fa0
 800d0d4:	08013fa0 	.word	0x08013fa0
 800d0d8:	08013fa4 	.word	0x08013fa4

0800d0dc <__retarget_lock_init_recursive>:
 800d0dc:	4770      	bx	lr

0800d0de <__retarget_lock_acquire_recursive>:
 800d0de:	4770      	bx	lr

0800d0e0 <__retarget_lock_release_recursive>:
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <malloc>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <malloc+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f000 b879 	b.w	800d1e0 <_malloc_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000014 	.word	0x20000014

0800d0f4 <memcpy>:
 800d0f4:	440a      	add	r2, r1
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d0fc:	d100      	bne.n	800d100 <memcpy+0xc>
 800d0fe:	4770      	bx	lr
 800d100:	b510      	push	{r4, lr}
 800d102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d10a:	4291      	cmp	r1, r2
 800d10c:	d1f9      	bne.n	800d102 <memcpy+0xe>
 800d10e:	bd10      	pop	{r4, pc}

0800d110 <memset>:
 800d110:	4402      	add	r2, r0
 800d112:	4603      	mov	r3, r0
 800d114:	4293      	cmp	r3, r2
 800d116:	d100      	bne.n	800d11a <memset+0xa>
 800d118:	4770      	bx	lr
 800d11a:	f803 1b01 	strb.w	r1, [r3], #1
 800d11e:	e7f9      	b.n	800d114 <memset+0x4>

0800d120 <_calloc_r>:
 800d120:	b513      	push	{r0, r1, r4, lr}
 800d122:	434a      	muls	r2, r1
 800d124:	4611      	mov	r1, r2
 800d126:	9201      	str	r2, [sp, #4]
 800d128:	f000 f85a 	bl	800d1e0 <_malloc_r>
 800d12c:	4604      	mov	r4, r0
 800d12e:	b118      	cbz	r0, 800d138 <_calloc_r+0x18>
 800d130:	9a01      	ldr	r2, [sp, #4]
 800d132:	2100      	movs	r1, #0
 800d134:	f7ff ffec 	bl	800d110 <memset>
 800d138:	4620      	mov	r0, r4
 800d13a:	b002      	add	sp, #8
 800d13c:	bd10      	pop	{r4, pc}
	...

0800d140 <_free_r>:
 800d140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d142:	2900      	cmp	r1, #0
 800d144:	d048      	beq.n	800d1d8 <_free_r+0x98>
 800d146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d14a:	9001      	str	r0, [sp, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f1a1 0404 	sub.w	r4, r1, #4
 800d152:	bfb8      	it	lt
 800d154:	18e4      	addlt	r4, r4, r3
 800d156:	f003 f9a9 	bl	80104ac <__malloc_lock>
 800d15a:	4a20      	ldr	r2, [pc, #128]	; (800d1dc <_free_r+0x9c>)
 800d15c:	9801      	ldr	r0, [sp, #4]
 800d15e:	6813      	ldr	r3, [r2, #0]
 800d160:	4615      	mov	r5, r2
 800d162:	b933      	cbnz	r3, 800d172 <_free_r+0x32>
 800d164:	6063      	str	r3, [r4, #4]
 800d166:	6014      	str	r4, [r2, #0]
 800d168:	b003      	add	sp, #12
 800d16a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d16e:	f003 b9a3 	b.w	80104b8 <__malloc_unlock>
 800d172:	42a3      	cmp	r3, r4
 800d174:	d90b      	bls.n	800d18e <_free_r+0x4e>
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	1862      	adds	r2, r4, r1
 800d17a:	4293      	cmp	r3, r2
 800d17c:	bf04      	itt	eq
 800d17e:	681a      	ldreq	r2, [r3, #0]
 800d180:	685b      	ldreq	r3, [r3, #4]
 800d182:	6063      	str	r3, [r4, #4]
 800d184:	bf04      	itt	eq
 800d186:	1852      	addeq	r2, r2, r1
 800d188:	6022      	streq	r2, [r4, #0]
 800d18a:	602c      	str	r4, [r5, #0]
 800d18c:	e7ec      	b.n	800d168 <_free_r+0x28>
 800d18e:	461a      	mov	r2, r3
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	b10b      	cbz	r3, 800d198 <_free_r+0x58>
 800d194:	42a3      	cmp	r3, r4
 800d196:	d9fa      	bls.n	800d18e <_free_r+0x4e>
 800d198:	6811      	ldr	r1, [r2, #0]
 800d19a:	1855      	adds	r5, r2, r1
 800d19c:	42a5      	cmp	r5, r4
 800d19e:	d10b      	bne.n	800d1b8 <_free_r+0x78>
 800d1a0:	6824      	ldr	r4, [r4, #0]
 800d1a2:	4421      	add	r1, r4
 800d1a4:	1854      	adds	r4, r2, r1
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	6011      	str	r1, [r2, #0]
 800d1aa:	d1dd      	bne.n	800d168 <_free_r+0x28>
 800d1ac:	681c      	ldr	r4, [r3, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	6053      	str	r3, [r2, #4]
 800d1b2:	4421      	add	r1, r4
 800d1b4:	6011      	str	r1, [r2, #0]
 800d1b6:	e7d7      	b.n	800d168 <_free_r+0x28>
 800d1b8:	d902      	bls.n	800d1c0 <_free_r+0x80>
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	e7d3      	b.n	800d168 <_free_r+0x28>
 800d1c0:	6825      	ldr	r5, [r4, #0]
 800d1c2:	1961      	adds	r1, r4, r5
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	bf04      	itt	eq
 800d1c8:	6819      	ldreq	r1, [r3, #0]
 800d1ca:	685b      	ldreq	r3, [r3, #4]
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	bf04      	itt	eq
 800d1d0:	1949      	addeq	r1, r1, r5
 800d1d2:	6021      	streq	r1, [r4, #0]
 800d1d4:	6054      	str	r4, [r2, #4]
 800d1d6:	e7c7      	b.n	800d168 <_free_r+0x28>
 800d1d8:	b003      	add	sp, #12
 800d1da:	bd30      	pop	{r4, r5, pc}
 800d1dc:	20004bf4 	.word	0x20004bf4

0800d1e0 <_malloc_r>:
 800d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e2:	1ccd      	adds	r5, r1, #3
 800d1e4:	f025 0503 	bic.w	r5, r5, #3
 800d1e8:	3508      	adds	r5, #8
 800d1ea:	2d0c      	cmp	r5, #12
 800d1ec:	bf38      	it	cc
 800d1ee:	250c      	movcc	r5, #12
 800d1f0:	2d00      	cmp	r5, #0
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	db01      	blt.n	800d1fa <_malloc_r+0x1a>
 800d1f6:	42a9      	cmp	r1, r5
 800d1f8:	d903      	bls.n	800d202 <_malloc_r+0x22>
 800d1fa:	230c      	movs	r3, #12
 800d1fc:	6033      	str	r3, [r6, #0]
 800d1fe:	2000      	movs	r0, #0
 800d200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d202:	f003 f953 	bl	80104ac <__malloc_lock>
 800d206:	4921      	ldr	r1, [pc, #132]	; (800d28c <_malloc_r+0xac>)
 800d208:	680a      	ldr	r2, [r1, #0]
 800d20a:	4614      	mov	r4, r2
 800d20c:	b99c      	cbnz	r4, 800d236 <_malloc_r+0x56>
 800d20e:	4f20      	ldr	r7, [pc, #128]	; (800d290 <_malloc_r+0xb0>)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	b923      	cbnz	r3, 800d21e <_malloc_r+0x3e>
 800d214:	4621      	mov	r1, r4
 800d216:	4630      	mov	r0, r6
 800d218:	f000 ff28 	bl	800e06c <_sbrk_r>
 800d21c:	6038      	str	r0, [r7, #0]
 800d21e:	4629      	mov	r1, r5
 800d220:	4630      	mov	r0, r6
 800d222:	f000 ff23 	bl	800e06c <_sbrk_r>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	d123      	bne.n	800d272 <_malloc_r+0x92>
 800d22a:	230c      	movs	r3, #12
 800d22c:	6033      	str	r3, [r6, #0]
 800d22e:	4630      	mov	r0, r6
 800d230:	f003 f942 	bl	80104b8 <__malloc_unlock>
 800d234:	e7e3      	b.n	800d1fe <_malloc_r+0x1e>
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	1b5b      	subs	r3, r3, r5
 800d23a:	d417      	bmi.n	800d26c <_malloc_r+0x8c>
 800d23c:	2b0b      	cmp	r3, #11
 800d23e:	d903      	bls.n	800d248 <_malloc_r+0x68>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	441c      	add	r4, r3
 800d244:	6025      	str	r5, [r4, #0]
 800d246:	e004      	b.n	800d252 <_malloc_r+0x72>
 800d248:	6863      	ldr	r3, [r4, #4]
 800d24a:	42a2      	cmp	r2, r4
 800d24c:	bf0c      	ite	eq
 800d24e:	600b      	streq	r3, [r1, #0]
 800d250:	6053      	strne	r3, [r2, #4]
 800d252:	4630      	mov	r0, r6
 800d254:	f003 f930 	bl	80104b8 <__malloc_unlock>
 800d258:	f104 000b 	add.w	r0, r4, #11
 800d25c:	1d23      	adds	r3, r4, #4
 800d25e:	f020 0007 	bic.w	r0, r0, #7
 800d262:	1ac2      	subs	r2, r0, r3
 800d264:	d0cc      	beq.n	800d200 <_malloc_r+0x20>
 800d266:	1a1b      	subs	r3, r3, r0
 800d268:	50a3      	str	r3, [r4, r2]
 800d26a:	e7c9      	b.n	800d200 <_malloc_r+0x20>
 800d26c:	4622      	mov	r2, r4
 800d26e:	6864      	ldr	r4, [r4, #4]
 800d270:	e7cc      	b.n	800d20c <_malloc_r+0x2c>
 800d272:	1cc4      	adds	r4, r0, #3
 800d274:	f024 0403 	bic.w	r4, r4, #3
 800d278:	42a0      	cmp	r0, r4
 800d27a:	d0e3      	beq.n	800d244 <_malloc_r+0x64>
 800d27c:	1a21      	subs	r1, r4, r0
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 fef4 	bl	800e06c <_sbrk_r>
 800d284:	3001      	adds	r0, #1
 800d286:	d1dd      	bne.n	800d244 <_malloc_r+0x64>
 800d288:	e7cf      	b.n	800d22a <_malloc_r+0x4a>
 800d28a:	bf00      	nop
 800d28c:	20004bf4 	.word	0x20004bf4
 800d290:	20004bf8 	.word	0x20004bf8

0800d294 <__cvt>:
 800d294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d298:	ec55 4b10 	vmov	r4, r5, d0
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	460e      	mov	r6, r1
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	bfbb      	ittet	lt
 800d2a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d2aa:	461d      	movlt	r5, r3
 800d2ac:	2300      	movge	r3, #0
 800d2ae:	232d      	movlt	r3, #45	; 0x2d
 800d2b0:	700b      	strb	r3, [r1, #0]
 800d2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	f023 0820 	bic.w	r8, r3, #32
 800d2be:	bfbc      	itt	lt
 800d2c0:	4622      	movlt	r2, r4
 800d2c2:	4614      	movlt	r4, r2
 800d2c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2c8:	d005      	beq.n	800d2d6 <__cvt+0x42>
 800d2ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d2ce:	d100      	bne.n	800d2d2 <__cvt+0x3e>
 800d2d0:	3601      	adds	r6, #1
 800d2d2:	2102      	movs	r1, #2
 800d2d4:	e000      	b.n	800d2d8 <__cvt+0x44>
 800d2d6:	2103      	movs	r1, #3
 800d2d8:	ab03      	add	r3, sp, #12
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	ab02      	add	r3, sp, #8
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	ec45 4b10 	vmov	d0, r4, r5
 800d2e4:	4653      	mov	r3, sl
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	f001 fe9a 	bl	800f020 <_dtoa_r>
 800d2ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	d102      	bne.n	800d2fa <__cvt+0x66>
 800d2f4:	f019 0f01 	tst.w	r9, #1
 800d2f8:	d022      	beq.n	800d340 <__cvt+0xac>
 800d2fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2fe:	eb07 0906 	add.w	r9, r7, r6
 800d302:	d110      	bne.n	800d326 <__cvt+0x92>
 800d304:	783b      	ldrb	r3, [r7, #0]
 800d306:	2b30      	cmp	r3, #48	; 0x30
 800d308:	d10a      	bne.n	800d320 <__cvt+0x8c>
 800d30a:	2200      	movs	r2, #0
 800d30c:	2300      	movs	r3, #0
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f3 fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 800d316:	b918      	cbnz	r0, 800d320 <__cvt+0x8c>
 800d318:	f1c6 0601 	rsb	r6, r6, #1
 800d31c:	f8ca 6000 	str.w	r6, [sl]
 800d320:	f8da 3000 	ldr.w	r3, [sl]
 800d324:	4499      	add	r9, r3
 800d326:	2200      	movs	r2, #0
 800d328:	2300      	movs	r3, #0
 800d32a:	4620      	mov	r0, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	f7f3 fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 800d332:	b108      	cbz	r0, 800d338 <__cvt+0xa4>
 800d334:	f8cd 900c 	str.w	r9, [sp, #12]
 800d338:	2230      	movs	r2, #48	; 0x30
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	454b      	cmp	r3, r9
 800d33e:	d307      	bcc.n	800d350 <__cvt+0xbc>
 800d340:	9b03      	ldr	r3, [sp, #12]
 800d342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d344:	1bdb      	subs	r3, r3, r7
 800d346:	4638      	mov	r0, r7
 800d348:	6013      	str	r3, [r2, #0]
 800d34a:	b004      	add	sp, #16
 800d34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d350:	1c59      	adds	r1, r3, #1
 800d352:	9103      	str	r1, [sp, #12]
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	e7f0      	b.n	800d33a <__cvt+0xa6>

0800d358 <__exponent>:
 800d358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d35a:	4603      	mov	r3, r0
 800d35c:	2900      	cmp	r1, #0
 800d35e:	bfb8      	it	lt
 800d360:	4249      	neglt	r1, r1
 800d362:	f803 2b02 	strb.w	r2, [r3], #2
 800d366:	bfb4      	ite	lt
 800d368:	222d      	movlt	r2, #45	; 0x2d
 800d36a:	222b      	movge	r2, #43	; 0x2b
 800d36c:	2909      	cmp	r1, #9
 800d36e:	7042      	strb	r2, [r0, #1]
 800d370:	dd2a      	ble.n	800d3c8 <__exponent+0x70>
 800d372:	f10d 0407 	add.w	r4, sp, #7
 800d376:	46a4      	mov	ip, r4
 800d378:	270a      	movs	r7, #10
 800d37a:	46a6      	mov	lr, r4
 800d37c:	460a      	mov	r2, r1
 800d37e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d382:	fb07 1516 	mls	r5, r7, r6, r1
 800d386:	3530      	adds	r5, #48	; 0x30
 800d388:	2a63      	cmp	r2, #99	; 0x63
 800d38a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d38e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d392:	4631      	mov	r1, r6
 800d394:	dcf1      	bgt.n	800d37a <__exponent+0x22>
 800d396:	3130      	adds	r1, #48	; 0x30
 800d398:	f1ae 0502 	sub.w	r5, lr, #2
 800d39c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3a0:	1c44      	adds	r4, r0, #1
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	4561      	cmp	r1, ip
 800d3a6:	d30a      	bcc.n	800d3be <__exponent+0x66>
 800d3a8:	f10d 0209 	add.w	r2, sp, #9
 800d3ac:	eba2 020e 	sub.w	r2, r2, lr
 800d3b0:	4565      	cmp	r5, ip
 800d3b2:	bf88      	it	hi
 800d3b4:	2200      	movhi	r2, #0
 800d3b6:	4413      	add	r3, r2
 800d3b8:	1a18      	subs	r0, r3, r0
 800d3ba:	b003      	add	sp, #12
 800d3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d3c6:	e7ed      	b.n	800d3a4 <__exponent+0x4c>
 800d3c8:	2330      	movs	r3, #48	; 0x30
 800d3ca:	3130      	adds	r1, #48	; 0x30
 800d3cc:	7083      	strb	r3, [r0, #2]
 800d3ce:	70c1      	strb	r1, [r0, #3]
 800d3d0:	1d03      	adds	r3, r0, #4
 800d3d2:	e7f1      	b.n	800d3b8 <__exponent+0x60>

0800d3d4 <_printf_float>:
 800d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d8:	ed2d 8b02 	vpush	{d8}
 800d3dc:	b08d      	sub	sp, #52	; 0x34
 800d3de:	460c      	mov	r4, r1
 800d3e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d3e4:	4616      	mov	r6, r2
 800d3e6:	461f      	mov	r7, r3
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	f003 f837 	bl	801045c <_localeconv_r>
 800d3ee:	f8d0 a000 	ldr.w	sl, [r0]
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	f7f2 ff0c 	bl	8000210 <strlen>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	9305      	str	r3, [sp, #20]
 800d400:	f8d8 3000 	ldr.w	r3, [r8]
 800d404:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d408:	3307      	adds	r3, #7
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	f103 0208 	add.w	r2, r3, #8
 800d412:	f8c8 2000 	str.w	r2, [r8]
 800d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d41e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d426:	9307      	str	r3, [sp, #28]
 800d428:	f8cd 8018 	str.w	r8, [sp, #24]
 800d42c:	ee08 0a10 	vmov	s16, r0
 800d430:	4b9f      	ldr	r3, [pc, #636]	; (800d6b0 <_printf_float+0x2dc>)
 800d432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d43a:	f7f3 fb97 	bl	8000b6c <__aeabi_dcmpun>
 800d43e:	bb88      	cbnz	r0, 800d4a4 <_printf_float+0xd0>
 800d440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d444:	4b9a      	ldr	r3, [pc, #616]	; (800d6b0 <_printf_float+0x2dc>)
 800d446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d44a:	f7f3 fb71 	bl	8000b30 <__aeabi_dcmple>
 800d44e:	bb48      	cbnz	r0, 800d4a4 <_printf_float+0xd0>
 800d450:	2200      	movs	r2, #0
 800d452:	2300      	movs	r3, #0
 800d454:	4640      	mov	r0, r8
 800d456:	4649      	mov	r1, r9
 800d458:	f7f3 fb60 	bl	8000b1c <__aeabi_dcmplt>
 800d45c:	b110      	cbz	r0, 800d464 <_printf_float+0x90>
 800d45e:	232d      	movs	r3, #45	; 0x2d
 800d460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d464:	4b93      	ldr	r3, [pc, #588]	; (800d6b4 <_printf_float+0x2e0>)
 800d466:	4894      	ldr	r0, [pc, #592]	; (800d6b8 <_printf_float+0x2e4>)
 800d468:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d46c:	bf94      	ite	ls
 800d46e:	4698      	movls	r8, r3
 800d470:	4680      	movhi	r8, r0
 800d472:	2303      	movs	r3, #3
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	9b05      	ldr	r3, [sp, #20]
 800d478:	f023 0204 	bic.w	r2, r3, #4
 800d47c:	6022      	str	r2, [r4, #0]
 800d47e:	f04f 0900 	mov.w	r9, #0
 800d482:	9700      	str	r7, [sp, #0]
 800d484:	4633      	mov	r3, r6
 800d486:	aa0b      	add	r2, sp, #44	; 0x2c
 800d488:	4621      	mov	r1, r4
 800d48a:	4628      	mov	r0, r5
 800d48c:	f000 f9d8 	bl	800d840 <_printf_common>
 800d490:	3001      	adds	r0, #1
 800d492:	f040 8090 	bne.w	800d5b6 <_printf_float+0x1e2>
 800d496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d49a:	b00d      	add	sp, #52	; 0x34
 800d49c:	ecbd 8b02 	vpop	{d8}
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	464b      	mov	r3, r9
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	f7f3 fb5e 	bl	8000b6c <__aeabi_dcmpun>
 800d4b0:	b140      	cbz	r0, 800d4c4 <_printf_float+0xf0>
 800d4b2:	464b      	mov	r3, r9
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	bfbc      	itt	lt
 800d4b8:	232d      	movlt	r3, #45	; 0x2d
 800d4ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4be:	487f      	ldr	r0, [pc, #508]	; (800d6bc <_printf_float+0x2e8>)
 800d4c0:	4b7f      	ldr	r3, [pc, #508]	; (800d6c0 <_printf_float+0x2ec>)
 800d4c2:	e7d1      	b.n	800d468 <_printf_float+0x94>
 800d4c4:	6863      	ldr	r3, [r4, #4]
 800d4c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d4ca:	9206      	str	r2, [sp, #24]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	d13f      	bne.n	800d550 <_printf_float+0x17c>
 800d4d0:	2306      	movs	r3, #6
 800d4d2:	6063      	str	r3, [r4, #4]
 800d4d4:	9b05      	ldr	r3, [sp, #20]
 800d4d6:	6861      	ldr	r1, [r4, #4]
 800d4d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d4dc:	2300      	movs	r3, #0
 800d4de:	9303      	str	r3, [sp, #12]
 800d4e0:	ab0a      	add	r3, sp, #40	; 0x28
 800d4e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d4e6:	ab09      	add	r3, sp, #36	; 0x24
 800d4e8:	ec49 8b10 	vmov	d0, r8, r9
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	6022      	str	r2, [r4, #0]
 800d4f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff fecd 	bl	800d294 <__cvt>
 800d4fa:	9b06      	ldr	r3, [sp, #24]
 800d4fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4fe:	2b47      	cmp	r3, #71	; 0x47
 800d500:	4680      	mov	r8, r0
 800d502:	d108      	bne.n	800d516 <_printf_float+0x142>
 800d504:	1cc8      	adds	r0, r1, #3
 800d506:	db02      	blt.n	800d50e <_printf_float+0x13a>
 800d508:	6863      	ldr	r3, [r4, #4]
 800d50a:	4299      	cmp	r1, r3
 800d50c:	dd41      	ble.n	800d592 <_printf_float+0x1be>
 800d50e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d512:	fa5f fb8b 	uxtb.w	fp, fp
 800d516:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d51a:	d820      	bhi.n	800d55e <_printf_float+0x18a>
 800d51c:	3901      	subs	r1, #1
 800d51e:	465a      	mov	r2, fp
 800d520:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d524:	9109      	str	r1, [sp, #36]	; 0x24
 800d526:	f7ff ff17 	bl	800d358 <__exponent>
 800d52a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d52c:	1813      	adds	r3, r2, r0
 800d52e:	2a01      	cmp	r2, #1
 800d530:	4681      	mov	r9, r0
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	dc02      	bgt.n	800d53c <_printf_float+0x168>
 800d536:	6822      	ldr	r2, [r4, #0]
 800d538:	07d2      	lsls	r2, r2, #31
 800d53a:	d501      	bpl.n	800d540 <_printf_float+0x16c>
 800d53c:	3301      	adds	r3, #1
 800d53e:	6123      	str	r3, [r4, #16]
 800d540:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d544:	2b00      	cmp	r3, #0
 800d546:	d09c      	beq.n	800d482 <_printf_float+0xae>
 800d548:	232d      	movs	r3, #45	; 0x2d
 800d54a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d54e:	e798      	b.n	800d482 <_printf_float+0xae>
 800d550:	9a06      	ldr	r2, [sp, #24]
 800d552:	2a47      	cmp	r2, #71	; 0x47
 800d554:	d1be      	bne.n	800d4d4 <_printf_float+0x100>
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1bc      	bne.n	800d4d4 <_printf_float+0x100>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e7b9      	b.n	800d4d2 <_printf_float+0xfe>
 800d55e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d562:	d118      	bne.n	800d596 <_printf_float+0x1c2>
 800d564:	2900      	cmp	r1, #0
 800d566:	6863      	ldr	r3, [r4, #4]
 800d568:	dd0b      	ble.n	800d582 <_printf_float+0x1ae>
 800d56a:	6121      	str	r1, [r4, #16]
 800d56c:	b913      	cbnz	r3, 800d574 <_printf_float+0x1a0>
 800d56e:	6822      	ldr	r2, [r4, #0]
 800d570:	07d0      	lsls	r0, r2, #31
 800d572:	d502      	bpl.n	800d57a <_printf_float+0x1a6>
 800d574:	3301      	adds	r3, #1
 800d576:	440b      	add	r3, r1
 800d578:	6123      	str	r3, [r4, #16]
 800d57a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d57c:	f04f 0900 	mov.w	r9, #0
 800d580:	e7de      	b.n	800d540 <_printf_float+0x16c>
 800d582:	b913      	cbnz	r3, 800d58a <_printf_float+0x1b6>
 800d584:	6822      	ldr	r2, [r4, #0]
 800d586:	07d2      	lsls	r2, r2, #31
 800d588:	d501      	bpl.n	800d58e <_printf_float+0x1ba>
 800d58a:	3302      	adds	r3, #2
 800d58c:	e7f4      	b.n	800d578 <_printf_float+0x1a4>
 800d58e:	2301      	movs	r3, #1
 800d590:	e7f2      	b.n	800d578 <_printf_float+0x1a4>
 800d592:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d598:	4299      	cmp	r1, r3
 800d59a:	db05      	blt.n	800d5a8 <_printf_float+0x1d4>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	6121      	str	r1, [r4, #16]
 800d5a0:	07d8      	lsls	r0, r3, #31
 800d5a2:	d5ea      	bpl.n	800d57a <_printf_float+0x1a6>
 800d5a4:	1c4b      	adds	r3, r1, #1
 800d5a6:	e7e7      	b.n	800d578 <_printf_float+0x1a4>
 800d5a8:	2900      	cmp	r1, #0
 800d5aa:	bfd4      	ite	le
 800d5ac:	f1c1 0202 	rsble	r2, r1, #2
 800d5b0:	2201      	movgt	r2, #1
 800d5b2:	4413      	add	r3, r2
 800d5b4:	e7e0      	b.n	800d578 <_printf_float+0x1a4>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	055a      	lsls	r2, r3, #21
 800d5ba:	d407      	bmi.n	800d5cc <_printf_float+0x1f8>
 800d5bc:	6923      	ldr	r3, [r4, #16]
 800d5be:	4642      	mov	r2, r8
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	47b8      	blx	r7
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	d12c      	bne.n	800d624 <_printf_float+0x250>
 800d5ca:	e764      	b.n	800d496 <_printf_float+0xc2>
 800d5cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d5d0:	f240 80e0 	bls.w	800d794 <_printf_float+0x3c0>
 800d5d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f7f3 fa94 	bl	8000b08 <__aeabi_dcmpeq>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	d034      	beq.n	800d64e <_printf_float+0x27a>
 800d5e4:	4a37      	ldr	r2, [pc, #220]	; (800d6c4 <_printf_float+0x2f0>)
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	47b8      	blx	r7
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	f43f af51 	beq.w	800d496 <_printf_float+0xc2>
 800d5f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	db02      	blt.n	800d602 <_printf_float+0x22e>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	07d8      	lsls	r0, r3, #31
 800d600:	d510      	bpl.n	800d624 <_printf_float+0x250>
 800d602:	ee18 3a10 	vmov	r3, s16
 800d606:	4652      	mov	r2, sl
 800d608:	4631      	mov	r1, r6
 800d60a:	4628      	mov	r0, r5
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	f43f af41 	beq.w	800d496 <_printf_float+0xc2>
 800d614:	f04f 0800 	mov.w	r8, #0
 800d618:	f104 091a 	add.w	r9, r4, #26
 800d61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d61e:	3b01      	subs	r3, #1
 800d620:	4543      	cmp	r3, r8
 800d622:	dc09      	bgt.n	800d638 <_printf_float+0x264>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	079b      	lsls	r3, r3, #30
 800d628:	f100 8105 	bmi.w	800d836 <_printf_float+0x462>
 800d62c:	68e0      	ldr	r0, [r4, #12]
 800d62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d630:	4298      	cmp	r0, r3
 800d632:	bfb8      	it	lt
 800d634:	4618      	movlt	r0, r3
 800d636:	e730      	b.n	800d49a <_printf_float+0xc6>
 800d638:	2301      	movs	r3, #1
 800d63a:	464a      	mov	r2, r9
 800d63c:	4631      	mov	r1, r6
 800d63e:	4628      	mov	r0, r5
 800d640:	47b8      	blx	r7
 800d642:	3001      	adds	r0, #1
 800d644:	f43f af27 	beq.w	800d496 <_printf_float+0xc2>
 800d648:	f108 0801 	add.w	r8, r8, #1
 800d64c:	e7e6      	b.n	800d61c <_printf_float+0x248>
 800d64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d650:	2b00      	cmp	r3, #0
 800d652:	dc39      	bgt.n	800d6c8 <_printf_float+0x2f4>
 800d654:	4a1b      	ldr	r2, [pc, #108]	; (800d6c4 <_printf_float+0x2f0>)
 800d656:	2301      	movs	r3, #1
 800d658:	4631      	mov	r1, r6
 800d65a:	4628      	mov	r0, r5
 800d65c:	47b8      	blx	r7
 800d65e:	3001      	adds	r0, #1
 800d660:	f43f af19 	beq.w	800d496 <_printf_float+0xc2>
 800d664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d668:	4313      	orrs	r3, r2
 800d66a:	d102      	bne.n	800d672 <_printf_float+0x29e>
 800d66c:	6823      	ldr	r3, [r4, #0]
 800d66e:	07d9      	lsls	r1, r3, #31
 800d670:	d5d8      	bpl.n	800d624 <_printf_float+0x250>
 800d672:	ee18 3a10 	vmov	r3, s16
 800d676:	4652      	mov	r2, sl
 800d678:	4631      	mov	r1, r6
 800d67a:	4628      	mov	r0, r5
 800d67c:	47b8      	blx	r7
 800d67e:	3001      	adds	r0, #1
 800d680:	f43f af09 	beq.w	800d496 <_printf_float+0xc2>
 800d684:	f04f 0900 	mov.w	r9, #0
 800d688:	f104 0a1a 	add.w	sl, r4, #26
 800d68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d68e:	425b      	negs	r3, r3
 800d690:	454b      	cmp	r3, r9
 800d692:	dc01      	bgt.n	800d698 <_printf_float+0x2c4>
 800d694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d696:	e792      	b.n	800d5be <_printf_float+0x1ea>
 800d698:	2301      	movs	r3, #1
 800d69a:	4652      	mov	r2, sl
 800d69c:	4631      	mov	r1, r6
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b8      	blx	r7
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	f43f aef7 	beq.w	800d496 <_printf_float+0xc2>
 800d6a8:	f109 0901 	add.w	r9, r9, #1
 800d6ac:	e7ee      	b.n	800d68c <_printf_float+0x2b8>
 800d6ae:	bf00      	nop
 800d6b0:	7fefffff 	.word	0x7fefffff
 800d6b4:	0801392c 	.word	0x0801392c
 800d6b8:	08013930 	.word	0x08013930
 800d6bc:	08013938 	.word	0x08013938
 800d6c0:	08013934 	.word	0x08013934
 800d6c4:	0801393c 	.word	0x0801393c
 800d6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	bfa8      	it	ge
 800d6d0:	461a      	movge	r2, r3
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	4691      	mov	r9, r2
 800d6d6:	dc37      	bgt.n	800d748 <_printf_float+0x374>
 800d6d8:	f04f 0b00 	mov.w	fp, #0
 800d6dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6e0:	f104 021a 	add.w	r2, r4, #26
 800d6e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6e6:	9305      	str	r3, [sp, #20]
 800d6e8:	eba3 0309 	sub.w	r3, r3, r9
 800d6ec:	455b      	cmp	r3, fp
 800d6ee:	dc33      	bgt.n	800d758 <_printf_float+0x384>
 800d6f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	db3b      	blt.n	800d770 <_printf_float+0x39c>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	07da      	lsls	r2, r3, #31
 800d6fc:	d438      	bmi.n	800d770 <_printf_float+0x39c>
 800d6fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d700:	9b05      	ldr	r3, [sp, #20]
 800d702:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	eba2 0901 	sub.w	r9, r2, r1
 800d70a:	4599      	cmp	r9, r3
 800d70c:	bfa8      	it	ge
 800d70e:	4699      	movge	r9, r3
 800d710:	f1b9 0f00 	cmp.w	r9, #0
 800d714:	dc35      	bgt.n	800d782 <_printf_float+0x3ae>
 800d716:	f04f 0800 	mov.w	r8, #0
 800d71a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d71e:	f104 0a1a 	add.w	sl, r4, #26
 800d722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d726:	1a9b      	subs	r3, r3, r2
 800d728:	eba3 0309 	sub.w	r3, r3, r9
 800d72c:	4543      	cmp	r3, r8
 800d72e:	f77f af79 	ble.w	800d624 <_printf_float+0x250>
 800d732:	2301      	movs	r3, #1
 800d734:	4652      	mov	r2, sl
 800d736:	4631      	mov	r1, r6
 800d738:	4628      	mov	r0, r5
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	f43f aeaa 	beq.w	800d496 <_printf_float+0xc2>
 800d742:	f108 0801 	add.w	r8, r8, #1
 800d746:	e7ec      	b.n	800d722 <_printf_float+0x34e>
 800d748:	4613      	mov	r3, r2
 800d74a:	4631      	mov	r1, r6
 800d74c:	4642      	mov	r2, r8
 800d74e:	4628      	mov	r0, r5
 800d750:	47b8      	blx	r7
 800d752:	3001      	adds	r0, #1
 800d754:	d1c0      	bne.n	800d6d8 <_printf_float+0x304>
 800d756:	e69e      	b.n	800d496 <_printf_float+0xc2>
 800d758:	2301      	movs	r3, #1
 800d75a:	4631      	mov	r1, r6
 800d75c:	4628      	mov	r0, r5
 800d75e:	9205      	str	r2, [sp, #20]
 800d760:	47b8      	blx	r7
 800d762:	3001      	adds	r0, #1
 800d764:	f43f ae97 	beq.w	800d496 <_printf_float+0xc2>
 800d768:	9a05      	ldr	r2, [sp, #20]
 800d76a:	f10b 0b01 	add.w	fp, fp, #1
 800d76e:	e7b9      	b.n	800d6e4 <_printf_float+0x310>
 800d770:	ee18 3a10 	vmov	r3, s16
 800d774:	4652      	mov	r2, sl
 800d776:	4631      	mov	r1, r6
 800d778:	4628      	mov	r0, r5
 800d77a:	47b8      	blx	r7
 800d77c:	3001      	adds	r0, #1
 800d77e:	d1be      	bne.n	800d6fe <_printf_float+0x32a>
 800d780:	e689      	b.n	800d496 <_printf_float+0xc2>
 800d782:	9a05      	ldr	r2, [sp, #20]
 800d784:	464b      	mov	r3, r9
 800d786:	4442      	add	r2, r8
 800d788:	4631      	mov	r1, r6
 800d78a:	4628      	mov	r0, r5
 800d78c:	47b8      	blx	r7
 800d78e:	3001      	adds	r0, #1
 800d790:	d1c1      	bne.n	800d716 <_printf_float+0x342>
 800d792:	e680      	b.n	800d496 <_printf_float+0xc2>
 800d794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d796:	2a01      	cmp	r2, #1
 800d798:	dc01      	bgt.n	800d79e <_printf_float+0x3ca>
 800d79a:	07db      	lsls	r3, r3, #31
 800d79c:	d538      	bpl.n	800d810 <_printf_float+0x43c>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	f43f ae74 	beq.w	800d496 <_printf_float+0xc2>
 800d7ae:	ee18 3a10 	vmov	r3, s16
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b8      	blx	r7
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	f43f ae6b 	beq.w	800d496 <_printf_float+0xc2>
 800d7c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f7f3 f99e 	bl	8000b08 <__aeabi_dcmpeq>
 800d7cc:	b9d8      	cbnz	r0, 800d806 <_printf_float+0x432>
 800d7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7d0:	f108 0201 	add.w	r2, r8, #1
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	4628      	mov	r0, r5
 800d7da:	47b8      	blx	r7
 800d7dc:	3001      	adds	r0, #1
 800d7de:	d10e      	bne.n	800d7fe <_printf_float+0x42a>
 800d7e0:	e659      	b.n	800d496 <_printf_float+0xc2>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	47b8      	blx	r7
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	f43f ae52 	beq.w	800d496 <_printf_float+0xc2>
 800d7f2:	f108 0801 	add.w	r8, r8, #1
 800d7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	4543      	cmp	r3, r8
 800d7fc:	dcf1      	bgt.n	800d7e2 <_printf_float+0x40e>
 800d7fe:	464b      	mov	r3, r9
 800d800:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d804:	e6dc      	b.n	800d5c0 <_printf_float+0x1ec>
 800d806:	f04f 0800 	mov.w	r8, #0
 800d80a:	f104 0a1a 	add.w	sl, r4, #26
 800d80e:	e7f2      	b.n	800d7f6 <_printf_float+0x422>
 800d810:	2301      	movs	r3, #1
 800d812:	4642      	mov	r2, r8
 800d814:	e7df      	b.n	800d7d6 <_printf_float+0x402>
 800d816:	2301      	movs	r3, #1
 800d818:	464a      	mov	r2, r9
 800d81a:	4631      	mov	r1, r6
 800d81c:	4628      	mov	r0, r5
 800d81e:	47b8      	blx	r7
 800d820:	3001      	adds	r0, #1
 800d822:	f43f ae38 	beq.w	800d496 <_printf_float+0xc2>
 800d826:	f108 0801 	add.w	r8, r8, #1
 800d82a:	68e3      	ldr	r3, [r4, #12]
 800d82c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d82e:	1a5b      	subs	r3, r3, r1
 800d830:	4543      	cmp	r3, r8
 800d832:	dcf0      	bgt.n	800d816 <_printf_float+0x442>
 800d834:	e6fa      	b.n	800d62c <_printf_float+0x258>
 800d836:	f04f 0800 	mov.w	r8, #0
 800d83a:	f104 0919 	add.w	r9, r4, #25
 800d83e:	e7f4      	b.n	800d82a <_printf_float+0x456>

0800d840 <_printf_common>:
 800d840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d844:	4616      	mov	r6, r2
 800d846:	4699      	mov	r9, r3
 800d848:	688a      	ldr	r2, [r1, #8]
 800d84a:	690b      	ldr	r3, [r1, #16]
 800d84c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d850:	4293      	cmp	r3, r2
 800d852:	bfb8      	it	lt
 800d854:	4613      	movlt	r3, r2
 800d856:	6033      	str	r3, [r6, #0]
 800d858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d85c:	4607      	mov	r7, r0
 800d85e:	460c      	mov	r4, r1
 800d860:	b10a      	cbz	r2, 800d866 <_printf_common+0x26>
 800d862:	3301      	adds	r3, #1
 800d864:	6033      	str	r3, [r6, #0]
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	0699      	lsls	r1, r3, #26
 800d86a:	bf42      	ittt	mi
 800d86c:	6833      	ldrmi	r3, [r6, #0]
 800d86e:	3302      	addmi	r3, #2
 800d870:	6033      	strmi	r3, [r6, #0]
 800d872:	6825      	ldr	r5, [r4, #0]
 800d874:	f015 0506 	ands.w	r5, r5, #6
 800d878:	d106      	bne.n	800d888 <_printf_common+0x48>
 800d87a:	f104 0a19 	add.w	sl, r4, #25
 800d87e:	68e3      	ldr	r3, [r4, #12]
 800d880:	6832      	ldr	r2, [r6, #0]
 800d882:	1a9b      	subs	r3, r3, r2
 800d884:	42ab      	cmp	r3, r5
 800d886:	dc26      	bgt.n	800d8d6 <_printf_common+0x96>
 800d888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d88c:	1e13      	subs	r3, r2, #0
 800d88e:	6822      	ldr	r2, [r4, #0]
 800d890:	bf18      	it	ne
 800d892:	2301      	movne	r3, #1
 800d894:	0692      	lsls	r2, r2, #26
 800d896:	d42b      	bmi.n	800d8f0 <_printf_common+0xb0>
 800d898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d89c:	4649      	mov	r1, r9
 800d89e:	4638      	mov	r0, r7
 800d8a0:	47c0      	blx	r8
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d01e      	beq.n	800d8e4 <_printf_common+0xa4>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	68e5      	ldr	r5, [r4, #12]
 800d8aa:	6832      	ldr	r2, [r6, #0]
 800d8ac:	f003 0306 	and.w	r3, r3, #6
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	bf08      	it	eq
 800d8b4:	1aad      	subeq	r5, r5, r2
 800d8b6:	68a3      	ldr	r3, [r4, #8]
 800d8b8:	6922      	ldr	r2, [r4, #16]
 800d8ba:	bf0c      	ite	eq
 800d8bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8c0:	2500      	movne	r5, #0
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	bfc4      	itt	gt
 800d8c6:	1a9b      	subgt	r3, r3, r2
 800d8c8:	18ed      	addgt	r5, r5, r3
 800d8ca:	2600      	movs	r6, #0
 800d8cc:	341a      	adds	r4, #26
 800d8ce:	42b5      	cmp	r5, r6
 800d8d0:	d11a      	bne.n	800d908 <_printf_common+0xc8>
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	e008      	b.n	800d8e8 <_printf_common+0xa8>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	4652      	mov	r2, sl
 800d8da:	4649      	mov	r1, r9
 800d8dc:	4638      	mov	r0, r7
 800d8de:	47c0      	blx	r8
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	d103      	bne.n	800d8ec <_printf_common+0xac>
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ec:	3501      	adds	r5, #1
 800d8ee:	e7c6      	b.n	800d87e <_printf_common+0x3e>
 800d8f0:	18e1      	adds	r1, r4, r3
 800d8f2:	1c5a      	adds	r2, r3, #1
 800d8f4:	2030      	movs	r0, #48	; 0x30
 800d8f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8fa:	4422      	add	r2, r4
 800d8fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d904:	3302      	adds	r3, #2
 800d906:	e7c7      	b.n	800d898 <_printf_common+0x58>
 800d908:	2301      	movs	r3, #1
 800d90a:	4622      	mov	r2, r4
 800d90c:	4649      	mov	r1, r9
 800d90e:	4638      	mov	r0, r7
 800d910:	47c0      	blx	r8
 800d912:	3001      	adds	r0, #1
 800d914:	d0e6      	beq.n	800d8e4 <_printf_common+0xa4>
 800d916:	3601      	adds	r6, #1
 800d918:	e7d9      	b.n	800d8ce <_printf_common+0x8e>
	...

0800d91c <_printf_i>:
 800d91c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d920:	460c      	mov	r4, r1
 800d922:	4691      	mov	r9, r2
 800d924:	7e27      	ldrb	r7, [r4, #24]
 800d926:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d928:	2f78      	cmp	r7, #120	; 0x78
 800d92a:	4680      	mov	r8, r0
 800d92c:	469a      	mov	sl, r3
 800d92e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d932:	d807      	bhi.n	800d944 <_printf_i+0x28>
 800d934:	2f62      	cmp	r7, #98	; 0x62
 800d936:	d80a      	bhi.n	800d94e <_printf_i+0x32>
 800d938:	2f00      	cmp	r7, #0
 800d93a:	f000 80d8 	beq.w	800daee <_printf_i+0x1d2>
 800d93e:	2f58      	cmp	r7, #88	; 0x58
 800d940:	f000 80a3 	beq.w	800da8a <_printf_i+0x16e>
 800d944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d94c:	e03a      	b.n	800d9c4 <_printf_i+0xa8>
 800d94e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d952:	2b15      	cmp	r3, #21
 800d954:	d8f6      	bhi.n	800d944 <_printf_i+0x28>
 800d956:	a001      	add	r0, pc, #4	; (adr r0, 800d95c <_printf_i+0x40>)
 800d958:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d95c:	0800d9b5 	.word	0x0800d9b5
 800d960:	0800d9c9 	.word	0x0800d9c9
 800d964:	0800d945 	.word	0x0800d945
 800d968:	0800d945 	.word	0x0800d945
 800d96c:	0800d945 	.word	0x0800d945
 800d970:	0800d945 	.word	0x0800d945
 800d974:	0800d9c9 	.word	0x0800d9c9
 800d978:	0800d945 	.word	0x0800d945
 800d97c:	0800d945 	.word	0x0800d945
 800d980:	0800d945 	.word	0x0800d945
 800d984:	0800d945 	.word	0x0800d945
 800d988:	0800dad5 	.word	0x0800dad5
 800d98c:	0800d9f9 	.word	0x0800d9f9
 800d990:	0800dab7 	.word	0x0800dab7
 800d994:	0800d945 	.word	0x0800d945
 800d998:	0800d945 	.word	0x0800d945
 800d99c:	0800daf7 	.word	0x0800daf7
 800d9a0:	0800d945 	.word	0x0800d945
 800d9a4:	0800d9f9 	.word	0x0800d9f9
 800d9a8:	0800d945 	.word	0x0800d945
 800d9ac:	0800d945 	.word	0x0800d945
 800d9b0:	0800dabf 	.word	0x0800dabf
 800d9b4:	680b      	ldr	r3, [r1, #0]
 800d9b6:	1d1a      	adds	r2, r3, #4
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	600a      	str	r2, [r1, #0]
 800d9bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e0a3      	b.n	800db10 <_printf_i+0x1f4>
 800d9c8:	6825      	ldr	r5, [r4, #0]
 800d9ca:	6808      	ldr	r0, [r1, #0]
 800d9cc:	062e      	lsls	r6, r5, #24
 800d9ce:	f100 0304 	add.w	r3, r0, #4
 800d9d2:	d50a      	bpl.n	800d9ea <_printf_i+0xce>
 800d9d4:	6805      	ldr	r5, [r0, #0]
 800d9d6:	600b      	str	r3, [r1, #0]
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	da03      	bge.n	800d9e4 <_printf_i+0xc8>
 800d9dc:	232d      	movs	r3, #45	; 0x2d
 800d9de:	426d      	negs	r5, r5
 800d9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9e4:	485e      	ldr	r0, [pc, #376]	; (800db60 <_printf_i+0x244>)
 800d9e6:	230a      	movs	r3, #10
 800d9e8:	e019      	b.n	800da1e <_printf_i+0x102>
 800d9ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d9ee:	6805      	ldr	r5, [r0, #0]
 800d9f0:	600b      	str	r3, [r1, #0]
 800d9f2:	bf18      	it	ne
 800d9f4:	b22d      	sxthne	r5, r5
 800d9f6:	e7ef      	b.n	800d9d8 <_printf_i+0xbc>
 800d9f8:	680b      	ldr	r3, [r1, #0]
 800d9fa:	6825      	ldr	r5, [r4, #0]
 800d9fc:	1d18      	adds	r0, r3, #4
 800d9fe:	6008      	str	r0, [r1, #0]
 800da00:	0628      	lsls	r0, r5, #24
 800da02:	d501      	bpl.n	800da08 <_printf_i+0xec>
 800da04:	681d      	ldr	r5, [r3, #0]
 800da06:	e002      	b.n	800da0e <_printf_i+0xf2>
 800da08:	0669      	lsls	r1, r5, #25
 800da0a:	d5fb      	bpl.n	800da04 <_printf_i+0xe8>
 800da0c:	881d      	ldrh	r5, [r3, #0]
 800da0e:	4854      	ldr	r0, [pc, #336]	; (800db60 <_printf_i+0x244>)
 800da10:	2f6f      	cmp	r7, #111	; 0x6f
 800da12:	bf0c      	ite	eq
 800da14:	2308      	moveq	r3, #8
 800da16:	230a      	movne	r3, #10
 800da18:	2100      	movs	r1, #0
 800da1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da1e:	6866      	ldr	r6, [r4, #4]
 800da20:	60a6      	str	r6, [r4, #8]
 800da22:	2e00      	cmp	r6, #0
 800da24:	bfa2      	ittt	ge
 800da26:	6821      	ldrge	r1, [r4, #0]
 800da28:	f021 0104 	bicge.w	r1, r1, #4
 800da2c:	6021      	strge	r1, [r4, #0]
 800da2e:	b90d      	cbnz	r5, 800da34 <_printf_i+0x118>
 800da30:	2e00      	cmp	r6, #0
 800da32:	d04d      	beq.n	800dad0 <_printf_i+0x1b4>
 800da34:	4616      	mov	r6, r2
 800da36:	fbb5 f1f3 	udiv	r1, r5, r3
 800da3a:	fb03 5711 	mls	r7, r3, r1, r5
 800da3e:	5dc7      	ldrb	r7, [r0, r7]
 800da40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da44:	462f      	mov	r7, r5
 800da46:	42bb      	cmp	r3, r7
 800da48:	460d      	mov	r5, r1
 800da4a:	d9f4      	bls.n	800da36 <_printf_i+0x11a>
 800da4c:	2b08      	cmp	r3, #8
 800da4e:	d10b      	bne.n	800da68 <_printf_i+0x14c>
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	07df      	lsls	r7, r3, #31
 800da54:	d508      	bpl.n	800da68 <_printf_i+0x14c>
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	6861      	ldr	r1, [r4, #4]
 800da5a:	4299      	cmp	r1, r3
 800da5c:	bfde      	ittt	le
 800da5e:	2330      	movle	r3, #48	; 0x30
 800da60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da64:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800da68:	1b92      	subs	r2, r2, r6
 800da6a:	6122      	str	r2, [r4, #16]
 800da6c:	f8cd a000 	str.w	sl, [sp]
 800da70:	464b      	mov	r3, r9
 800da72:	aa03      	add	r2, sp, #12
 800da74:	4621      	mov	r1, r4
 800da76:	4640      	mov	r0, r8
 800da78:	f7ff fee2 	bl	800d840 <_printf_common>
 800da7c:	3001      	adds	r0, #1
 800da7e:	d14c      	bne.n	800db1a <_printf_i+0x1fe>
 800da80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da84:	b004      	add	sp, #16
 800da86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da8a:	4835      	ldr	r0, [pc, #212]	; (800db60 <_printf_i+0x244>)
 800da8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	680e      	ldr	r6, [r1, #0]
 800da94:	061f      	lsls	r7, r3, #24
 800da96:	f856 5b04 	ldr.w	r5, [r6], #4
 800da9a:	600e      	str	r6, [r1, #0]
 800da9c:	d514      	bpl.n	800dac8 <_printf_i+0x1ac>
 800da9e:	07d9      	lsls	r1, r3, #31
 800daa0:	bf44      	itt	mi
 800daa2:	f043 0320 	orrmi.w	r3, r3, #32
 800daa6:	6023      	strmi	r3, [r4, #0]
 800daa8:	b91d      	cbnz	r5, 800dab2 <_printf_i+0x196>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	f023 0320 	bic.w	r3, r3, #32
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	2310      	movs	r3, #16
 800dab4:	e7b0      	b.n	800da18 <_printf_i+0xfc>
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	f043 0320 	orr.w	r3, r3, #32
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	2378      	movs	r3, #120	; 0x78
 800dac0:	4828      	ldr	r0, [pc, #160]	; (800db64 <_printf_i+0x248>)
 800dac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dac6:	e7e3      	b.n	800da90 <_printf_i+0x174>
 800dac8:	065e      	lsls	r6, r3, #25
 800daca:	bf48      	it	mi
 800dacc:	b2ad      	uxthmi	r5, r5
 800dace:	e7e6      	b.n	800da9e <_printf_i+0x182>
 800dad0:	4616      	mov	r6, r2
 800dad2:	e7bb      	b.n	800da4c <_printf_i+0x130>
 800dad4:	680b      	ldr	r3, [r1, #0]
 800dad6:	6826      	ldr	r6, [r4, #0]
 800dad8:	6960      	ldr	r0, [r4, #20]
 800dada:	1d1d      	adds	r5, r3, #4
 800dadc:	600d      	str	r5, [r1, #0]
 800dade:	0635      	lsls	r5, r6, #24
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	d501      	bpl.n	800dae8 <_printf_i+0x1cc>
 800dae4:	6018      	str	r0, [r3, #0]
 800dae6:	e002      	b.n	800daee <_printf_i+0x1d2>
 800dae8:	0671      	lsls	r1, r6, #25
 800daea:	d5fb      	bpl.n	800dae4 <_printf_i+0x1c8>
 800daec:	8018      	strh	r0, [r3, #0]
 800daee:	2300      	movs	r3, #0
 800daf0:	6123      	str	r3, [r4, #16]
 800daf2:	4616      	mov	r6, r2
 800daf4:	e7ba      	b.n	800da6c <_printf_i+0x150>
 800daf6:	680b      	ldr	r3, [r1, #0]
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	600a      	str	r2, [r1, #0]
 800dafc:	681e      	ldr	r6, [r3, #0]
 800dafe:	6862      	ldr	r2, [r4, #4]
 800db00:	2100      	movs	r1, #0
 800db02:	4630      	mov	r0, r6
 800db04:	f7f2 fb8c 	bl	8000220 <memchr>
 800db08:	b108      	cbz	r0, 800db0e <_printf_i+0x1f2>
 800db0a:	1b80      	subs	r0, r0, r6
 800db0c:	6060      	str	r0, [r4, #4]
 800db0e:	6863      	ldr	r3, [r4, #4]
 800db10:	6123      	str	r3, [r4, #16]
 800db12:	2300      	movs	r3, #0
 800db14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db18:	e7a8      	b.n	800da6c <_printf_i+0x150>
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	4632      	mov	r2, r6
 800db1e:	4649      	mov	r1, r9
 800db20:	4640      	mov	r0, r8
 800db22:	47d0      	blx	sl
 800db24:	3001      	adds	r0, #1
 800db26:	d0ab      	beq.n	800da80 <_printf_i+0x164>
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	079b      	lsls	r3, r3, #30
 800db2c:	d413      	bmi.n	800db56 <_printf_i+0x23a>
 800db2e:	68e0      	ldr	r0, [r4, #12]
 800db30:	9b03      	ldr	r3, [sp, #12]
 800db32:	4298      	cmp	r0, r3
 800db34:	bfb8      	it	lt
 800db36:	4618      	movlt	r0, r3
 800db38:	e7a4      	b.n	800da84 <_printf_i+0x168>
 800db3a:	2301      	movs	r3, #1
 800db3c:	4632      	mov	r2, r6
 800db3e:	4649      	mov	r1, r9
 800db40:	4640      	mov	r0, r8
 800db42:	47d0      	blx	sl
 800db44:	3001      	adds	r0, #1
 800db46:	d09b      	beq.n	800da80 <_printf_i+0x164>
 800db48:	3501      	adds	r5, #1
 800db4a:	68e3      	ldr	r3, [r4, #12]
 800db4c:	9903      	ldr	r1, [sp, #12]
 800db4e:	1a5b      	subs	r3, r3, r1
 800db50:	42ab      	cmp	r3, r5
 800db52:	dcf2      	bgt.n	800db3a <_printf_i+0x21e>
 800db54:	e7eb      	b.n	800db2e <_printf_i+0x212>
 800db56:	2500      	movs	r5, #0
 800db58:	f104 0619 	add.w	r6, r4, #25
 800db5c:	e7f5      	b.n	800db4a <_printf_i+0x22e>
 800db5e:	bf00      	nop
 800db60:	0801393e 	.word	0x0801393e
 800db64:	0801394f 	.word	0x0801394f

0800db68 <_scanf_float>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	b087      	sub	sp, #28
 800db6e:	4617      	mov	r7, r2
 800db70:	9303      	str	r3, [sp, #12]
 800db72:	688b      	ldr	r3, [r1, #8]
 800db74:	1e5a      	subs	r2, r3, #1
 800db76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800db7a:	bf83      	ittte	hi
 800db7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800db80:	195b      	addhi	r3, r3, r5
 800db82:	9302      	strhi	r3, [sp, #8]
 800db84:	2300      	movls	r3, #0
 800db86:	bf86      	itte	hi
 800db88:	f240 135d 	movwhi	r3, #349	; 0x15d
 800db8c:	608b      	strhi	r3, [r1, #8]
 800db8e:	9302      	strls	r3, [sp, #8]
 800db90:	680b      	ldr	r3, [r1, #0]
 800db92:	468b      	mov	fp, r1
 800db94:	2500      	movs	r5, #0
 800db96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800db9a:	f84b 3b1c 	str.w	r3, [fp], #28
 800db9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dba2:	4680      	mov	r8, r0
 800dba4:	460c      	mov	r4, r1
 800dba6:	465e      	mov	r6, fp
 800dba8:	46aa      	mov	sl, r5
 800dbaa:	46a9      	mov	r9, r5
 800dbac:	9501      	str	r5, [sp, #4]
 800dbae:	68a2      	ldr	r2, [r4, #8]
 800dbb0:	b152      	cbz	r2, 800dbc8 <_scanf_float+0x60>
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	2b4e      	cmp	r3, #78	; 0x4e
 800dbb8:	d864      	bhi.n	800dc84 <_scanf_float+0x11c>
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d83c      	bhi.n	800dc38 <_scanf_float+0xd0>
 800dbbe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dbc2:	b2c8      	uxtb	r0, r1
 800dbc4:	280e      	cmp	r0, #14
 800dbc6:	d93a      	bls.n	800dc3e <_scanf_float+0xd6>
 800dbc8:	f1b9 0f00 	cmp.w	r9, #0
 800dbcc:	d003      	beq.n	800dbd6 <_scanf_float+0x6e>
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dbda:	f1ba 0f01 	cmp.w	sl, #1
 800dbde:	f200 8113 	bhi.w	800de08 <_scanf_float+0x2a0>
 800dbe2:	455e      	cmp	r6, fp
 800dbe4:	f200 8105 	bhi.w	800ddf2 <_scanf_float+0x28a>
 800dbe8:	2501      	movs	r5, #1
 800dbea:	4628      	mov	r0, r5
 800dbec:	b007      	add	sp, #28
 800dbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dbf6:	2a0d      	cmp	r2, #13
 800dbf8:	d8e6      	bhi.n	800dbc8 <_scanf_float+0x60>
 800dbfa:	a101      	add	r1, pc, #4	; (adr r1, 800dc00 <_scanf_float+0x98>)
 800dbfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc00:	0800dd3f 	.word	0x0800dd3f
 800dc04:	0800dbc9 	.word	0x0800dbc9
 800dc08:	0800dbc9 	.word	0x0800dbc9
 800dc0c:	0800dbc9 	.word	0x0800dbc9
 800dc10:	0800dd9f 	.word	0x0800dd9f
 800dc14:	0800dd77 	.word	0x0800dd77
 800dc18:	0800dbc9 	.word	0x0800dbc9
 800dc1c:	0800dbc9 	.word	0x0800dbc9
 800dc20:	0800dd4d 	.word	0x0800dd4d
 800dc24:	0800dbc9 	.word	0x0800dbc9
 800dc28:	0800dbc9 	.word	0x0800dbc9
 800dc2c:	0800dbc9 	.word	0x0800dbc9
 800dc30:	0800dbc9 	.word	0x0800dbc9
 800dc34:	0800dd05 	.word	0x0800dd05
 800dc38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dc3c:	e7db      	b.n	800dbf6 <_scanf_float+0x8e>
 800dc3e:	290e      	cmp	r1, #14
 800dc40:	d8c2      	bhi.n	800dbc8 <_scanf_float+0x60>
 800dc42:	a001      	add	r0, pc, #4	; (adr r0, 800dc48 <_scanf_float+0xe0>)
 800dc44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dc48:	0800dcf7 	.word	0x0800dcf7
 800dc4c:	0800dbc9 	.word	0x0800dbc9
 800dc50:	0800dcf7 	.word	0x0800dcf7
 800dc54:	0800dd8b 	.word	0x0800dd8b
 800dc58:	0800dbc9 	.word	0x0800dbc9
 800dc5c:	0800dca5 	.word	0x0800dca5
 800dc60:	0800dce1 	.word	0x0800dce1
 800dc64:	0800dce1 	.word	0x0800dce1
 800dc68:	0800dce1 	.word	0x0800dce1
 800dc6c:	0800dce1 	.word	0x0800dce1
 800dc70:	0800dce1 	.word	0x0800dce1
 800dc74:	0800dce1 	.word	0x0800dce1
 800dc78:	0800dce1 	.word	0x0800dce1
 800dc7c:	0800dce1 	.word	0x0800dce1
 800dc80:	0800dce1 	.word	0x0800dce1
 800dc84:	2b6e      	cmp	r3, #110	; 0x6e
 800dc86:	d809      	bhi.n	800dc9c <_scanf_float+0x134>
 800dc88:	2b60      	cmp	r3, #96	; 0x60
 800dc8a:	d8b2      	bhi.n	800dbf2 <_scanf_float+0x8a>
 800dc8c:	2b54      	cmp	r3, #84	; 0x54
 800dc8e:	d077      	beq.n	800dd80 <_scanf_float+0x218>
 800dc90:	2b59      	cmp	r3, #89	; 0x59
 800dc92:	d199      	bne.n	800dbc8 <_scanf_float+0x60>
 800dc94:	2d07      	cmp	r5, #7
 800dc96:	d197      	bne.n	800dbc8 <_scanf_float+0x60>
 800dc98:	2508      	movs	r5, #8
 800dc9a:	e029      	b.n	800dcf0 <_scanf_float+0x188>
 800dc9c:	2b74      	cmp	r3, #116	; 0x74
 800dc9e:	d06f      	beq.n	800dd80 <_scanf_float+0x218>
 800dca0:	2b79      	cmp	r3, #121	; 0x79
 800dca2:	e7f6      	b.n	800dc92 <_scanf_float+0x12a>
 800dca4:	6821      	ldr	r1, [r4, #0]
 800dca6:	05c8      	lsls	r0, r1, #23
 800dca8:	d51a      	bpl.n	800dce0 <_scanf_float+0x178>
 800dcaa:	9b02      	ldr	r3, [sp, #8]
 800dcac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dcb0:	6021      	str	r1, [r4, #0]
 800dcb2:	f109 0901 	add.w	r9, r9, #1
 800dcb6:	b11b      	cbz	r3, 800dcc0 <_scanf_float+0x158>
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	3201      	adds	r2, #1
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	60a2      	str	r2, [r4, #8]
 800dcc0:	68a3      	ldr	r3, [r4, #8]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	60a3      	str	r3, [r4, #8]
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	6123      	str	r3, [r4, #16]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	607b      	str	r3, [r7, #4]
 800dcd4:	f340 8084 	ble.w	800dde0 <_scanf_float+0x278>
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	603b      	str	r3, [r7, #0]
 800dcde:	e766      	b.n	800dbae <_scanf_float+0x46>
 800dce0:	eb1a 0f05 	cmn.w	sl, r5
 800dce4:	f47f af70 	bne.w	800dbc8 <_scanf_float+0x60>
 800dce8:	6822      	ldr	r2, [r4, #0]
 800dcea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	f806 3b01 	strb.w	r3, [r6], #1
 800dcf4:	e7e4      	b.n	800dcc0 <_scanf_float+0x158>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	0610      	lsls	r0, r2, #24
 800dcfa:	f57f af65 	bpl.w	800dbc8 <_scanf_float+0x60>
 800dcfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd02:	e7f4      	b.n	800dcee <_scanf_float+0x186>
 800dd04:	f1ba 0f00 	cmp.w	sl, #0
 800dd08:	d10e      	bne.n	800dd28 <_scanf_float+0x1c0>
 800dd0a:	f1b9 0f00 	cmp.w	r9, #0
 800dd0e:	d10e      	bne.n	800dd2e <_scanf_float+0x1c6>
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dd16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dd1a:	d108      	bne.n	800dd2e <_scanf_float+0x1c6>
 800dd1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd20:	6022      	str	r2, [r4, #0]
 800dd22:	f04f 0a01 	mov.w	sl, #1
 800dd26:	e7e3      	b.n	800dcf0 <_scanf_float+0x188>
 800dd28:	f1ba 0f02 	cmp.w	sl, #2
 800dd2c:	d055      	beq.n	800ddda <_scanf_float+0x272>
 800dd2e:	2d01      	cmp	r5, #1
 800dd30:	d002      	beq.n	800dd38 <_scanf_float+0x1d0>
 800dd32:	2d04      	cmp	r5, #4
 800dd34:	f47f af48 	bne.w	800dbc8 <_scanf_float+0x60>
 800dd38:	3501      	adds	r5, #1
 800dd3a:	b2ed      	uxtb	r5, r5
 800dd3c:	e7d8      	b.n	800dcf0 <_scanf_float+0x188>
 800dd3e:	f1ba 0f01 	cmp.w	sl, #1
 800dd42:	f47f af41 	bne.w	800dbc8 <_scanf_float+0x60>
 800dd46:	f04f 0a02 	mov.w	sl, #2
 800dd4a:	e7d1      	b.n	800dcf0 <_scanf_float+0x188>
 800dd4c:	b97d      	cbnz	r5, 800dd6e <_scanf_float+0x206>
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	f47f af3c 	bne.w	800dbce <_scanf_float+0x66>
 800dd56:	6822      	ldr	r2, [r4, #0]
 800dd58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dd5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dd60:	f47f af39 	bne.w	800dbd6 <_scanf_float+0x6e>
 800dd64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd68:	6022      	str	r2, [r4, #0]
 800dd6a:	2501      	movs	r5, #1
 800dd6c:	e7c0      	b.n	800dcf0 <_scanf_float+0x188>
 800dd6e:	2d03      	cmp	r5, #3
 800dd70:	d0e2      	beq.n	800dd38 <_scanf_float+0x1d0>
 800dd72:	2d05      	cmp	r5, #5
 800dd74:	e7de      	b.n	800dd34 <_scanf_float+0x1cc>
 800dd76:	2d02      	cmp	r5, #2
 800dd78:	f47f af26 	bne.w	800dbc8 <_scanf_float+0x60>
 800dd7c:	2503      	movs	r5, #3
 800dd7e:	e7b7      	b.n	800dcf0 <_scanf_float+0x188>
 800dd80:	2d06      	cmp	r5, #6
 800dd82:	f47f af21 	bne.w	800dbc8 <_scanf_float+0x60>
 800dd86:	2507      	movs	r5, #7
 800dd88:	e7b2      	b.n	800dcf0 <_scanf_float+0x188>
 800dd8a:	6822      	ldr	r2, [r4, #0]
 800dd8c:	0591      	lsls	r1, r2, #22
 800dd8e:	f57f af1b 	bpl.w	800dbc8 <_scanf_float+0x60>
 800dd92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dd96:	6022      	str	r2, [r4, #0]
 800dd98:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd9c:	e7a8      	b.n	800dcf0 <_scanf_float+0x188>
 800dd9e:	6822      	ldr	r2, [r4, #0]
 800dda0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dda4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dda8:	d006      	beq.n	800ddb8 <_scanf_float+0x250>
 800ddaa:	0550      	lsls	r0, r2, #21
 800ddac:	f57f af0c 	bpl.w	800dbc8 <_scanf_float+0x60>
 800ddb0:	f1b9 0f00 	cmp.w	r9, #0
 800ddb4:	f43f af0f 	beq.w	800dbd6 <_scanf_float+0x6e>
 800ddb8:	0591      	lsls	r1, r2, #22
 800ddba:	bf58      	it	pl
 800ddbc:	9901      	ldrpl	r1, [sp, #4]
 800ddbe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ddc2:	bf58      	it	pl
 800ddc4:	eba9 0101 	subpl.w	r1, r9, r1
 800ddc8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ddcc:	bf58      	it	pl
 800ddce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ddd2:	6022      	str	r2, [r4, #0]
 800ddd4:	f04f 0900 	mov.w	r9, #0
 800ddd8:	e78a      	b.n	800dcf0 <_scanf_float+0x188>
 800ddda:	f04f 0a03 	mov.w	sl, #3
 800ddde:	e787      	b.n	800dcf0 <_scanf_float+0x188>
 800dde0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dde4:	4639      	mov	r1, r7
 800dde6:	4640      	mov	r0, r8
 800dde8:	4798      	blx	r3
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f43f aedf 	beq.w	800dbae <_scanf_float+0x46>
 800ddf0:	e6ea      	b.n	800dbc8 <_scanf_float+0x60>
 800ddf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ddf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ddfa:	463a      	mov	r2, r7
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4798      	blx	r3
 800de00:	6923      	ldr	r3, [r4, #16]
 800de02:	3b01      	subs	r3, #1
 800de04:	6123      	str	r3, [r4, #16]
 800de06:	e6ec      	b.n	800dbe2 <_scanf_float+0x7a>
 800de08:	1e6b      	subs	r3, r5, #1
 800de0a:	2b06      	cmp	r3, #6
 800de0c:	d825      	bhi.n	800de5a <_scanf_float+0x2f2>
 800de0e:	2d02      	cmp	r5, #2
 800de10:	d836      	bhi.n	800de80 <_scanf_float+0x318>
 800de12:	455e      	cmp	r6, fp
 800de14:	f67f aee8 	bls.w	800dbe8 <_scanf_float+0x80>
 800de18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de20:	463a      	mov	r2, r7
 800de22:	4640      	mov	r0, r8
 800de24:	4798      	blx	r3
 800de26:	6923      	ldr	r3, [r4, #16]
 800de28:	3b01      	subs	r3, #1
 800de2a:	6123      	str	r3, [r4, #16]
 800de2c:	e7f1      	b.n	800de12 <_scanf_float+0x2aa>
 800de2e:	9802      	ldr	r0, [sp, #8]
 800de30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800de38:	9002      	str	r0, [sp, #8]
 800de3a:	463a      	mov	r2, r7
 800de3c:	4640      	mov	r0, r8
 800de3e:	4798      	blx	r3
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	3b01      	subs	r3, #1
 800de44:	6123      	str	r3, [r4, #16]
 800de46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800de4a:	fa5f fa8a 	uxtb.w	sl, sl
 800de4e:	f1ba 0f02 	cmp.w	sl, #2
 800de52:	d1ec      	bne.n	800de2e <_scanf_float+0x2c6>
 800de54:	3d03      	subs	r5, #3
 800de56:	b2ed      	uxtb	r5, r5
 800de58:	1b76      	subs	r6, r6, r5
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	05da      	lsls	r2, r3, #23
 800de5e:	d52f      	bpl.n	800dec0 <_scanf_float+0x358>
 800de60:	055b      	lsls	r3, r3, #21
 800de62:	d510      	bpl.n	800de86 <_scanf_float+0x31e>
 800de64:	455e      	cmp	r6, fp
 800de66:	f67f aebf 	bls.w	800dbe8 <_scanf_float+0x80>
 800de6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de72:	463a      	mov	r2, r7
 800de74:	4640      	mov	r0, r8
 800de76:	4798      	blx	r3
 800de78:	6923      	ldr	r3, [r4, #16]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	6123      	str	r3, [r4, #16]
 800de7e:	e7f1      	b.n	800de64 <_scanf_float+0x2fc>
 800de80:	46aa      	mov	sl, r5
 800de82:	9602      	str	r6, [sp, #8]
 800de84:	e7df      	b.n	800de46 <_scanf_float+0x2de>
 800de86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	2965      	cmp	r1, #101	; 0x65
 800de8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800de92:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	d00c      	beq.n	800deb4 <_scanf_float+0x34c>
 800de9a:	2945      	cmp	r1, #69	; 0x45
 800de9c:	d00a      	beq.n	800deb4 <_scanf_float+0x34c>
 800de9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dea2:	463a      	mov	r2, r7
 800dea4:	4640      	mov	r0, r8
 800dea6:	4798      	blx	r3
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800deae:	3b01      	subs	r3, #1
 800deb0:	1eb5      	subs	r5, r6, #2
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800deb8:	463a      	mov	r2, r7
 800deba:	4640      	mov	r0, r8
 800debc:	4798      	blx	r3
 800debe:	462e      	mov	r6, r5
 800dec0:	6825      	ldr	r5, [r4, #0]
 800dec2:	f015 0510 	ands.w	r5, r5, #16
 800dec6:	d158      	bne.n	800df7a <_scanf_float+0x412>
 800dec8:	7035      	strb	r5, [r6, #0]
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ded0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ded4:	d11c      	bne.n	800df10 <_scanf_float+0x3a8>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	454b      	cmp	r3, r9
 800deda:	eba3 0209 	sub.w	r2, r3, r9
 800dede:	d124      	bne.n	800df2a <_scanf_float+0x3c2>
 800dee0:	2200      	movs	r2, #0
 800dee2:	4659      	mov	r1, fp
 800dee4:	4640      	mov	r0, r8
 800dee6:	f000 ff61 	bl	800edac <_strtod_r>
 800deea:	9b03      	ldr	r3, [sp, #12]
 800deec:	6821      	ldr	r1, [r4, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f011 0f02 	tst.w	r1, #2
 800def4:	ec57 6b10 	vmov	r6, r7, d0
 800def8:	f103 0204 	add.w	r2, r3, #4
 800defc:	d020      	beq.n	800df40 <_scanf_float+0x3d8>
 800defe:	9903      	ldr	r1, [sp, #12]
 800df00:	600a      	str	r2, [r1, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	e9c3 6700 	strd	r6, r7, [r3]
 800df08:	68e3      	ldr	r3, [r4, #12]
 800df0a:	3301      	adds	r3, #1
 800df0c:	60e3      	str	r3, [r4, #12]
 800df0e:	e66c      	b.n	800dbea <_scanf_float+0x82>
 800df10:	9b04      	ldr	r3, [sp, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0e4      	beq.n	800dee0 <_scanf_float+0x378>
 800df16:	9905      	ldr	r1, [sp, #20]
 800df18:	230a      	movs	r3, #10
 800df1a:	462a      	mov	r2, r5
 800df1c:	3101      	adds	r1, #1
 800df1e:	4640      	mov	r0, r8
 800df20:	f000 ffce 	bl	800eec0 <_strtol_r>
 800df24:	9b04      	ldr	r3, [sp, #16]
 800df26:	9e05      	ldr	r6, [sp, #20]
 800df28:	1ac2      	subs	r2, r0, r3
 800df2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800df2e:	429e      	cmp	r6, r3
 800df30:	bf28      	it	cs
 800df32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800df36:	4912      	ldr	r1, [pc, #72]	; (800df80 <_scanf_float+0x418>)
 800df38:	4630      	mov	r0, r6
 800df3a:	f000 f8ad 	bl	800e098 <siprintf>
 800df3e:	e7cf      	b.n	800dee0 <_scanf_float+0x378>
 800df40:	f011 0f04 	tst.w	r1, #4
 800df44:	9903      	ldr	r1, [sp, #12]
 800df46:	600a      	str	r2, [r1, #0]
 800df48:	d1db      	bne.n	800df02 <_scanf_float+0x39a>
 800df4a:	f8d3 8000 	ldr.w	r8, [r3]
 800df4e:	ee10 2a10 	vmov	r2, s0
 800df52:	ee10 0a10 	vmov	r0, s0
 800df56:	463b      	mov	r3, r7
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 fe07 	bl	8000b6c <__aeabi_dcmpun>
 800df5e:	b128      	cbz	r0, 800df6c <_scanf_float+0x404>
 800df60:	4808      	ldr	r0, [pc, #32]	; (800df84 <_scanf_float+0x41c>)
 800df62:	f000 f893 	bl	800e08c <nanf>
 800df66:	ed88 0a00 	vstr	s0, [r8]
 800df6a:	e7cd      	b.n	800df08 <_scanf_float+0x3a0>
 800df6c:	4630      	mov	r0, r6
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 fe5a 	bl	8000c28 <__aeabi_d2f>
 800df74:	f8c8 0000 	str.w	r0, [r8]
 800df78:	e7c6      	b.n	800df08 <_scanf_float+0x3a0>
 800df7a:	2500      	movs	r5, #0
 800df7c:	e635      	b.n	800dbea <_scanf_float+0x82>
 800df7e:	bf00      	nop
 800df80:	08013960 	.word	0x08013960
 800df84:	08013d78 	.word	0x08013d78

0800df88 <realloc>:
 800df88:	4b02      	ldr	r3, [pc, #8]	; (800df94 <realloc+0xc>)
 800df8a:	460a      	mov	r2, r1
 800df8c:	4601      	mov	r1, r0
 800df8e:	6818      	ldr	r0, [r3, #0]
 800df90:	f002 bf53 	b.w	8010e3a <_realloc_r>
 800df94:	20000014 	.word	0x20000014

0800df98 <cleanup_glue>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	460c      	mov	r4, r1
 800df9c:	6809      	ldr	r1, [r1, #0]
 800df9e:	4605      	mov	r5, r0
 800dfa0:	b109      	cbz	r1, 800dfa6 <cleanup_glue+0xe>
 800dfa2:	f7ff fff9 	bl	800df98 <cleanup_glue>
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfae:	f7ff b8c7 	b.w	800d140 <_free_r>
	...

0800dfb4 <_reclaim_reent>:
 800dfb4:	4b2c      	ldr	r3, [pc, #176]	; (800e068 <_reclaim_reent+0xb4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4283      	cmp	r3, r0
 800dfba:	b570      	push	{r4, r5, r6, lr}
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	d051      	beq.n	800e064 <_reclaim_reent+0xb0>
 800dfc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dfc2:	b143      	cbz	r3, 800dfd6 <_reclaim_reent+0x22>
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d14a      	bne.n	800e060 <_reclaim_reent+0xac>
 800dfca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfcc:	6819      	ldr	r1, [r3, #0]
 800dfce:	b111      	cbz	r1, 800dfd6 <_reclaim_reent+0x22>
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff f8b5 	bl	800d140 <_free_r>
 800dfd6:	6961      	ldr	r1, [r4, #20]
 800dfd8:	b111      	cbz	r1, 800dfe0 <_reclaim_reent+0x2c>
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff f8b0 	bl	800d140 <_free_r>
 800dfe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dfe2:	b111      	cbz	r1, 800dfea <_reclaim_reent+0x36>
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7ff f8ab 	bl	800d140 <_free_r>
 800dfea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dfec:	b111      	cbz	r1, 800dff4 <_reclaim_reent+0x40>
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff f8a6 	bl	800d140 <_free_r>
 800dff4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dff6:	b111      	cbz	r1, 800dffe <_reclaim_reent+0x4a>
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff f8a1 	bl	800d140 <_free_r>
 800dffe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e000:	b111      	cbz	r1, 800e008 <_reclaim_reent+0x54>
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff f89c 	bl	800d140 <_free_r>
 800e008:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e00a:	b111      	cbz	r1, 800e012 <_reclaim_reent+0x5e>
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7ff f897 	bl	800d140 <_free_r>
 800e012:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e014:	b111      	cbz	r1, 800e01c <_reclaim_reent+0x68>
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff f892 	bl	800d140 <_free_r>
 800e01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e01e:	b111      	cbz	r1, 800e026 <_reclaim_reent+0x72>
 800e020:	4620      	mov	r0, r4
 800e022:	f7ff f88d 	bl	800d140 <_free_r>
 800e026:	69a3      	ldr	r3, [r4, #24]
 800e028:	b1e3      	cbz	r3, 800e064 <_reclaim_reent+0xb0>
 800e02a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e02c:	4620      	mov	r0, r4
 800e02e:	4798      	blx	r3
 800e030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e032:	b1b9      	cbz	r1, 800e064 <_reclaim_reent+0xb0>
 800e034:	4620      	mov	r0, r4
 800e036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e03a:	f7ff bfad 	b.w	800df98 <cleanup_glue>
 800e03e:	5949      	ldr	r1, [r1, r5]
 800e040:	b941      	cbnz	r1, 800e054 <_reclaim_reent+0xa0>
 800e042:	3504      	adds	r5, #4
 800e044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e046:	2d80      	cmp	r5, #128	; 0x80
 800e048:	68d9      	ldr	r1, [r3, #12]
 800e04a:	d1f8      	bne.n	800e03e <_reclaim_reent+0x8a>
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7ff f877 	bl	800d140 <_free_r>
 800e052:	e7ba      	b.n	800dfca <_reclaim_reent+0x16>
 800e054:	680e      	ldr	r6, [r1, #0]
 800e056:	4620      	mov	r0, r4
 800e058:	f7ff f872 	bl	800d140 <_free_r>
 800e05c:	4631      	mov	r1, r6
 800e05e:	e7ef      	b.n	800e040 <_reclaim_reent+0x8c>
 800e060:	2500      	movs	r5, #0
 800e062:	e7ef      	b.n	800e044 <_reclaim_reent+0x90>
 800e064:	bd70      	pop	{r4, r5, r6, pc}
 800e066:	bf00      	nop
 800e068:	20000014 	.word	0x20000014

0800e06c <_sbrk_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	4d06      	ldr	r5, [pc, #24]	; (800e088 <_sbrk_r+0x1c>)
 800e070:	2300      	movs	r3, #0
 800e072:	4604      	mov	r4, r0
 800e074:	4608      	mov	r0, r1
 800e076:	602b      	str	r3, [r5, #0]
 800e078:	f7f4 fe56 	bl	8002d28 <_sbrk>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_sbrk_r+0x1a>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	b103      	cbz	r3, 800e086 <_sbrk_r+0x1a>
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	200056a0 	.word	0x200056a0

0800e08c <nanf>:
 800e08c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e094 <nanf+0x8>
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	7fc00000 	.word	0x7fc00000

0800e098 <siprintf>:
 800e098:	b40e      	push	{r1, r2, r3}
 800e09a:	b500      	push	{lr}
 800e09c:	b09c      	sub	sp, #112	; 0x70
 800e09e:	ab1d      	add	r3, sp, #116	; 0x74
 800e0a0:	9002      	str	r0, [sp, #8]
 800e0a2:	9006      	str	r0, [sp, #24]
 800e0a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0a8:	4809      	ldr	r0, [pc, #36]	; (800e0d0 <siprintf+0x38>)
 800e0aa:	9107      	str	r1, [sp, #28]
 800e0ac:	9104      	str	r1, [sp, #16]
 800e0ae:	4909      	ldr	r1, [pc, #36]	; (800e0d4 <siprintf+0x3c>)
 800e0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b4:	9105      	str	r1, [sp, #20]
 800e0b6:	6800      	ldr	r0, [r0, #0]
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	a902      	add	r1, sp, #8
 800e0bc:	f002 ff3e 	bl	8010f3c <_svfiprintf_r>
 800e0c0:	9b02      	ldr	r3, [sp, #8]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	b01c      	add	sp, #112	; 0x70
 800e0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0cc:	b003      	add	sp, #12
 800e0ce:	4770      	bx	lr
 800e0d0:	20000014 	.word	0x20000014
 800e0d4:	ffff0208 	.word	0xffff0208

0800e0d8 <__sread>:
 800e0d8:	b510      	push	{r4, lr}
 800e0da:	460c      	mov	r4, r1
 800e0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e0:	f003 f82c 	bl	801113c <_read_r>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	bfab      	itete	ge
 800e0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0ea:	89a3      	ldrhlt	r3, [r4, #12]
 800e0ec:	181b      	addge	r3, r3, r0
 800e0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0f2:	bfac      	ite	ge
 800e0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0f6:	81a3      	strhlt	r3, [r4, #12]
 800e0f8:	bd10      	pop	{r4, pc}

0800e0fa <__swrite>:
 800e0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fe:	461f      	mov	r7, r3
 800e100:	898b      	ldrh	r3, [r1, #12]
 800e102:	05db      	lsls	r3, r3, #23
 800e104:	4605      	mov	r5, r0
 800e106:	460c      	mov	r4, r1
 800e108:	4616      	mov	r6, r2
 800e10a:	d505      	bpl.n	800e118 <__swrite+0x1e>
 800e10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e110:	2302      	movs	r3, #2
 800e112:	2200      	movs	r2, #0
 800e114:	f002 f9a6 	bl	8010464 <_lseek_r>
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	4632      	mov	r2, r6
 800e126:	463b      	mov	r3, r7
 800e128:	4628      	mov	r0, r5
 800e12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e12e:	f000 bec9 	b.w	800eec4 <_write_r>

0800e132 <__sseek>:
 800e132:	b510      	push	{r4, lr}
 800e134:	460c      	mov	r4, r1
 800e136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e13a:	f002 f993 	bl	8010464 <_lseek_r>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	bf15      	itete	ne
 800e144:	6560      	strne	r0, [r4, #84]	; 0x54
 800e146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e14e:	81a3      	strheq	r3, [r4, #12]
 800e150:	bf18      	it	ne
 800e152:	81a3      	strhne	r3, [r4, #12]
 800e154:	bd10      	pop	{r4, pc}

0800e156 <__sclose>:
 800e156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15a:	f000 bec5 	b.w	800eee8 <_close_r>

0800e15e <sulp>:
 800e15e:	b570      	push	{r4, r5, r6, lr}
 800e160:	4604      	mov	r4, r0
 800e162:	460d      	mov	r5, r1
 800e164:	ec45 4b10 	vmov	d0, r4, r5
 800e168:	4616      	mov	r6, r2
 800e16a:	f002 fd17 	bl	8010b9c <__ulp>
 800e16e:	ec51 0b10 	vmov	r0, r1, d0
 800e172:	b17e      	cbz	r6, 800e194 <sulp+0x36>
 800e174:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e178:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	dd09      	ble.n	800e194 <sulp+0x36>
 800e180:	051b      	lsls	r3, r3, #20
 800e182:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e186:	2400      	movs	r4, #0
 800e188:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e18c:	4622      	mov	r2, r4
 800e18e:	462b      	mov	r3, r5
 800e190:	f7f2 fa52 	bl	8000638 <__aeabi_dmul>
 800e194:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e198 <_strtod_l>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	b0a3      	sub	sp, #140	; 0x8c
 800e19e:	461f      	mov	r7, r3
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	931e      	str	r3, [sp, #120]	; 0x78
 800e1a4:	4ba4      	ldr	r3, [pc, #656]	; (800e438 <_strtod_l+0x2a0>)
 800e1a6:	9219      	str	r2, [sp, #100]	; 0x64
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	9307      	str	r3, [sp, #28]
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	4688      	mov	r8, r1
 800e1b2:	f7f2 f82d 	bl	8000210 <strlen>
 800e1b6:	f04f 0a00 	mov.w	sl, #0
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	f04f 0b00 	mov.w	fp, #0
 800e1c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e1c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	2a2b      	cmp	r2, #43	; 0x2b
 800e1ca:	d04c      	beq.n	800e266 <_strtod_l+0xce>
 800e1cc:	d839      	bhi.n	800e242 <_strtod_l+0xaa>
 800e1ce:	2a0d      	cmp	r2, #13
 800e1d0:	d832      	bhi.n	800e238 <_strtod_l+0xa0>
 800e1d2:	2a08      	cmp	r2, #8
 800e1d4:	d832      	bhi.n	800e23c <_strtod_l+0xa4>
 800e1d6:	2a00      	cmp	r2, #0
 800e1d8:	d03c      	beq.n	800e254 <_strtod_l+0xbc>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	930e      	str	r3, [sp, #56]	; 0x38
 800e1de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e1e0:	7833      	ldrb	r3, [r6, #0]
 800e1e2:	2b30      	cmp	r3, #48	; 0x30
 800e1e4:	f040 80b4 	bne.w	800e350 <_strtod_l+0x1b8>
 800e1e8:	7873      	ldrb	r3, [r6, #1]
 800e1ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1ee:	2b58      	cmp	r3, #88	; 0x58
 800e1f0:	d16c      	bne.n	800e2cc <_strtod_l+0x134>
 800e1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	ab1e      	add	r3, sp, #120	; 0x78
 800e1f8:	9702      	str	r7, [sp, #8]
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	4a8f      	ldr	r2, [pc, #572]	; (800e43c <_strtod_l+0x2a4>)
 800e1fe:	ab1f      	add	r3, sp, #124	; 0x7c
 800e200:	a91d      	add	r1, sp, #116	; 0x74
 800e202:	4620      	mov	r0, r4
 800e204:	f001 fe22 	bl	800fe4c <__gethex>
 800e208:	f010 0707 	ands.w	r7, r0, #7
 800e20c:	4605      	mov	r5, r0
 800e20e:	d005      	beq.n	800e21c <_strtod_l+0x84>
 800e210:	2f06      	cmp	r7, #6
 800e212:	d12a      	bne.n	800e26a <_strtod_l+0xd2>
 800e214:	3601      	adds	r6, #1
 800e216:	2300      	movs	r3, #0
 800e218:	961d      	str	r6, [sp, #116]	; 0x74
 800e21a:	930e      	str	r3, [sp, #56]	; 0x38
 800e21c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f040 8596 	bne.w	800ed50 <_strtod_l+0xbb8>
 800e224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e226:	b1db      	cbz	r3, 800e260 <_strtod_l+0xc8>
 800e228:	4652      	mov	r2, sl
 800e22a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e22e:	ec43 2b10 	vmov	d0, r2, r3
 800e232:	b023      	add	sp, #140	; 0x8c
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	2a20      	cmp	r2, #32
 800e23a:	d1ce      	bne.n	800e1da <_strtod_l+0x42>
 800e23c:	3301      	adds	r3, #1
 800e23e:	931d      	str	r3, [sp, #116]	; 0x74
 800e240:	e7c0      	b.n	800e1c4 <_strtod_l+0x2c>
 800e242:	2a2d      	cmp	r2, #45	; 0x2d
 800e244:	d1c9      	bne.n	800e1da <_strtod_l+0x42>
 800e246:	2201      	movs	r2, #1
 800e248:	920e      	str	r2, [sp, #56]	; 0x38
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	921d      	str	r2, [sp, #116]	; 0x74
 800e24e:	785b      	ldrb	r3, [r3, #1]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d1c4      	bne.n	800e1de <_strtod_l+0x46>
 800e254:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e256:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f040 8576 	bne.w	800ed4c <_strtod_l+0xbb4>
 800e260:	4652      	mov	r2, sl
 800e262:	465b      	mov	r3, fp
 800e264:	e7e3      	b.n	800e22e <_strtod_l+0x96>
 800e266:	2200      	movs	r2, #0
 800e268:	e7ee      	b.n	800e248 <_strtod_l+0xb0>
 800e26a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e26c:	b13a      	cbz	r2, 800e27e <_strtod_l+0xe6>
 800e26e:	2135      	movs	r1, #53	; 0x35
 800e270:	a820      	add	r0, sp, #128	; 0x80
 800e272:	f002 fd9e 	bl	8010db2 <__copybits>
 800e276:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e278:	4620      	mov	r0, r4
 800e27a:	f002 f963 	bl	8010544 <_Bfree>
 800e27e:	3f01      	subs	r7, #1
 800e280:	2f05      	cmp	r7, #5
 800e282:	d807      	bhi.n	800e294 <_strtod_l+0xfc>
 800e284:	e8df f007 	tbb	[pc, r7]
 800e288:	1d180b0e 	.word	0x1d180b0e
 800e28c:	030e      	.short	0x030e
 800e28e:	f04f 0b00 	mov.w	fp, #0
 800e292:	46da      	mov	sl, fp
 800e294:	0728      	lsls	r0, r5, #28
 800e296:	d5c1      	bpl.n	800e21c <_strtod_l+0x84>
 800e298:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e29c:	e7be      	b.n	800e21c <_strtod_l+0x84>
 800e29e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e2a2:	e7f7      	b.n	800e294 <_strtod_l+0xfc>
 800e2a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e2a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e2ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e2b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2b6:	e7ed      	b.n	800e294 <_strtod_l+0xfc>
 800e2b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e440 <_strtod_l+0x2a8>
 800e2bc:	f04f 0a00 	mov.w	sl, #0
 800e2c0:	e7e8      	b.n	800e294 <_strtod_l+0xfc>
 800e2c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e2c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e2ca:	e7e3      	b.n	800e294 <_strtod_l+0xfc>
 800e2cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	921d      	str	r2, [sp, #116]	; 0x74
 800e2d2:	785b      	ldrb	r3, [r3, #1]
 800e2d4:	2b30      	cmp	r3, #48	; 0x30
 800e2d6:	d0f9      	beq.n	800e2cc <_strtod_l+0x134>
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d09f      	beq.n	800e21c <_strtod_l+0x84>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	f04f 0900 	mov.w	r9, #0
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e2ec:	464f      	mov	r7, r9
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e2f2:	7806      	ldrb	r6, [r0, #0]
 800e2f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e2f8:	b2d9      	uxtb	r1, r3
 800e2fa:	2909      	cmp	r1, #9
 800e2fc:	d92a      	bls.n	800e354 <_strtod_l+0x1bc>
 800e2fe:	9907      	ldr	r1, [sp, #28]
 800e300:	462a      	mov	r2, r5
 800e302:	f002 ff35 	bl	8011170 <strncmp>
 800e306:	b398      	cbz	r0, 800e370 <_strtod_l+0x1d8>
 800e308:	2000      	movs	r0, #0
 800e30a:	4633      	mov	r3, r6
 800e30c:	463d      	mov	r5, r7
 800e30e:	9007      	str	r0, [sp, #28]
 800e310:	4602      	mov	r2, r0
 800e312:	2b65      	cmp	r3, #101	; 0x65
 800e314:	d001      	beq.n	800e31a <_strtod_l+0x182>
 800e316:	2b45      	cmp	r3, #69	; 0x45
 800e318:	d118      	bne.n	800e34c <_strtod_l+0x1b4>
 800e31a:	b91d      	cbnz	r5, 800e324 <_strtod_l+0x18c>
 800e31c:	9b04      	ldr	r3, [sp, #16]
 800e31e:	4303      	orrs	r3, r0
 800e320:	d098      	beq.n	800e254 <_strtod_l+0xbc>
 800e322:	2500      	movs	r5, #0
 800e324:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e328:	f108 0301 	add.w	r3, r8, #1
 800e32c:	931d      	str	r3, [sp, #116]	; 0x74
 800e32e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e332:	2b2b      	cmp	r3, #43	; 0x2b
 800e334:	d075      	beq.n	800e422 <_strtod_l+0x28a>
 800e336:	2b2d      	cmp	r3, #45	; 0x2d
 800e338:	d07b      	beq.n	800e432 <_strtod_l+0x29a>
 800e33a:	f04f 0c00 	mov.w	ip, #0
 800e33e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e342:	2909      	cmp	r1, #9
 800e344:	f240 8082 	bls.w	800e44c <_strtod_l+0x2b4>
 800e348:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e34c:	2600      	movs	r6, #0
 800e34e:	e09d      	b.n	800e48c <_strtod_l+0x2f4>
 800e350:	2300      	movs	r3, #0
 800e352:	e7c4      	b.n	800e2de <_strtod_l+0x146>
 800e354:	2f08      	cmp	r7, #8
 800e356:	bfd8      	it	le
 800e358:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e35a:	f100 0001 	add.w	r0, r0, #1
 800e35e:	bfda      	itte	le
 800e360:	fb02 3301 	mlale	r3, r2, r1, r3
 800e364:	9309      	strle	r3, [sp, #36]	; 0x24
 800e366:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e36a:	3701      	adds	r7, #1
 800e36c:	901d      	str	r0, [sp, #116]	; 0x74
 800e36e:	e7bf      	b.n	800e2f0 <_strtod_l+0x158>
 800e370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e372:	195a      	adds	r2, r3, r5
 800e374:	921d      	str	r2, [sp, #116]	; 0x74
 800e376:	5d5b      	ldrb	r3, [r3, r5]
 800e378:	2f00      	cmp	r7, #0
 800e37a:	d037      	beq.n	800e3ec <_strtod_l+0x254>
 800e37c:	9007      	str	r0, [sp, #28]
 800e37e:	463d      	mov	r5, r7
 800e380:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e384:	2a09      	cmp	r2, #9
 800e386:	d912      	bls.n	800e3ae <_strtod_l+0x216>
 800e388:	2201      	movs	r2, #1
 800e38a:	e7c2      	b.n	800e312 <_strtod_l+0x17a>
 800e38c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	921d      	str	r2, [sp, #116]	; 0x74
 800e392:	785b      	ldrb	r3, [r3, #1]
 800e394:	3001      	adds	r0, #1
 800e396:	2b30      	cmp	r3, #48	; 0x30
 800e398:	d0f8      	beq.n	800e38c <_strtod_l+0x1f4>
 800e39a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e39e:	2a08      	cmp	r2, #8
 800e3a0:	f200 84db 	bhi.w	800ed5a <_strtod_l+0xbc2>
 800e3a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e3a6:	9007      	str	r0, [sp, #28]
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	920a      	str	r2, [sp, #40]	; 0x28
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	3b30      	subs	r3, #48	; 0x30
 800e3b0:	f100 0201 	add.w	r2, r0, #1
 800e3b4:	d014      	beq.n	800e3e0 <_strtod_l+0x248>
 800e3b6:	9907      	ldr	r1, [sp, #28]
 800e3b8:	4411      	add	r1, r2
 800e3ba:	9107      	str	r1, [sp, #28]
 800e3bc:	462a      	mov	r2, r5
 800e3be:	eb00 0e05 	add.w	lr, r0, r5
 800e3c2:	210a      	movs	r1, #10
 800e3c4:	4572      	cmp	r2, lr
 800e3c6:	d113      	bne.n	800e3f0 <_strtod_l+0x258>
 800e3c8:	182a      	adds	r2, r5, r0
 800e3ca:	2a08      	cmp	r2, #8
 800e3cc:	f105 0501 	add.w	r5, r5, #1
 800e3d0:	4405      	add	r5, r0
 800e3d2:	dc1c      	bgt.n	800e40e <_strtod_l+0x276>
 800e3d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3d6:	220a      	movs	r2, #10
 800e3d8:	fb02 3301 	mla	r3, r2, r1, r3
 800e3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e3de:	2200      	movs	r2, #0
 800e3e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3e2:	1c59      	adds	r1, r3, #1
 800e3e4:	911d      	str	r1, [sp, #116]	; 0x74
 800e3e6:	785b      	ldrb	r3, [r3, #1]
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	e7c9      	b.n	800e380 <_strtod_l+0x1e8>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	e7d2      	b.n	800e396 <_strtod_l+0x1fe>
 800e3f0:	2a08      	cmp	r2, #8
 800e3f2:	dc04      	bgt.n	800e3fe <_strtod_l+0x266>
 800e3f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3f6:	434e      	muls	r6, r1
 800e3f8:	9609      	str	r6, [sp, #36]	; 0x24
 800e3fa:	3201      	adds	r2, #1
 800e3fc:	e7e2      	b.n	800e3c4 <_strtod_l+0x22c>
 800e3fe:	f102 0c01 	add.w	ip, r2, #1
 800e402:	f1bc 0f10 	cmp.w	ip, #16
 800e406:	bfd8      	it	le
 800e408:	fb01 f909 	mulle.w	r9, r1, r9
 800e40c:	e7f5      	b.n	800e3fa <_strtod_l+0x262>
 800e40e:	2d10      	cmp	r5, #16
 800e410:	bfdc      	itt	le
 800e412:	220a      	movle	r2, #10
 800e414:	fb02 3909 	mlale	r9, r2, r9, r3
 800e418:	e7e1      	b.n	800e3de <_strtod_l+0x246>
 800e41a:	2300      	movs	r3, #0
 800e41c:	9307      	str	r3, [sp, #28]
 800e41e:	2201      	movs	r2, #1
 800e420:	e77c      	b.n	800e31c <_strtod_l+0x184>
 800e422:	f04f 0c00 	mov.w	ip, #0
 800e426:	f108 0302 	add.w	r3, r8, #2
 800e42a:	931d      	str	r3, [sp, #116]	; 0x74
 800e42c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e430:	e785      	b.n	800e33e <_strtod_l+0x1a6>
 800e432:	f04f 0c01 	mov.w	ip, #1
 800e436:	e7f6      	b.n	800e426 <_strtod_l+0x28e>
 800e438:	08013bb8 	.word	0x08013bb8
 800e43c:	08013968 	.word	0x08013968
 800e440:	7ff00000 	.word	0x7ff00000
 800e444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e446:	1c59      	adds	r1, r3, #1
 800e448:	911d      	str	r1, [sp, #116]	; 0x74
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b30      	cmp	r3, #48	; 0x30
 800e44e:	d0f9      	beq.n	800e444 <_strtod_l+0x2ac>
 800e450:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e454:	2908      	cmp	r1, #8
 800e456:	f63f af79 	bhi.w	800e34c <_strtod_l+0x1b4>
 800e45a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e45e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e460:	9308      	str	r3, [sp, #32]
 800e462:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e464:	1c59      	adds	r1, r3, #1
 800e466:	911d      	str	r1, [sp, #116]	; 0x74
 800e468:	785b      	ldrb	r3, [r3, #1]
 800e46a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e46e:	2e09      	cmp	r6, #9
 800e470:	d937      	bls.n	800e4e2 <_strtod_l+0x34a>
 800e472:	9e08      	ldr	r6, [sp, #32]
 800e474:	1b89      	subs	r1, r1, r6
 800e476:	2908      	cmp	r1, #8
 800e478:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e47c:	dc02      	bgt.n	800e484 <_strtod_l+0x2ec>
 800e47e:	4576      	cmp	r6, lr
 800e480:	bfa8      	it	ge
 800e482:	4676      	movge	r6, lr
 800e484:	f1bc 0f00 	cmp.w	ip, #0
 800e488:	d000      	beq.n	800e48c <_strtod_l+0x2f4>
 800e48a:	4276      	negs	r6, r6
 800e48c:	2d00      	cmp	r5, #0
 800e48e:	d14f      	bne.n	800e530 <_strtod_l+0x398>
 800e490:	9904      	ldr	r1, [sp, #16]
 800e492:	4301      	orrs	r1, r0
 800e494:	f47f aec2 	bne.w	800e21c <_strtod_l+0x84>
 800e498:	2a00      	cmp	r2, #0
 800e49a:	f47f aedb 	bne.w	800e254 <_strtod_l+0xbc>
 800e49e:	2b69      	cmp	r3, #105	; 0x69
 800e4a0:	d027      	beq.n	800e4f2 <_strtod_l+0x35a>
 800e4a2:	dc24      	bgt.n	800e4ee <_strtod_l+0x356>
 800e4a4:	2b49      	cmp	r3, #73	; 0x49
 800e4a6:	d024      	beq.n	800e4f2 <_strtod_l+0x35a>
 800e4a8:	2b4e      	cmp	r3, #78	; 0x4e
 800e4aa:	f47f aed3 	bne.w	800e254 <_strtod_l+0xbc>
 800e4ae:	499e      	ldr	r1, [pc, #632]	; (800e728 <_strtod_l+0x590>)
 800e4b0:	a81d      	add	r0, sp, #116	; 0x74
 800e4b2:	f001 ff23 	bl	80102fc <__match>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	f43f aecc 	beq.w	800e254 <_strtod_l+0xbc>
 800e4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2b28      	cmp	r3, #40	; 0x28
 800e4c2:	d12d      	bne.n	800e520 <_strtod_l+0x388>
 800e4c4:	4999      	ldr	r1, [pc, #612]	; (800e72c <_strtod_l+0x594>)
 800e4c6:	aa20      	add	r2, sp, #128	; 0x80
 800e4c8:	a81d      	add	r0, sp, #116	; 0x74
 800e4ca:	f001 ff2b 	bl	8010324 <__hexnan>
 800e4ce:	2805      	cmp	r0, #5
 800e4d0:	d126      	bne.n	800e520 <_strtod_l+0x388>
 800e4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e4d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e4dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e4e0:	e69c      	b.n	800e21c <_strtod_l+0x84>
 800e4e2:	210a      	movs	r1, #10
 800e4e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e4e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e4ec:	e7b9      	b.n	800e462 <_strtod_l+0x2ca>
 800e4ee:	2b6e      	cmp	r3, #110	; 0x6e
 800e4f0:	e7db      	b.n	800e4aa <_strtod_l+0x312>
 800e4f2:	498f      	ldr	r1, [pc, #572]	; (800e730 <_strtod_l+0x598>)
 800e4f4:	a81d      	add	r0, sp, #116	; 0x74
 800e4f6:	f001 ff01 	bl	80102fc <__match>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	f43f aeaa 	beq.w	800e254 <_strtod_l+0xbc>
 800e500:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e502:	498c      	ldr	r1, [pc, #560]	; (800e734 <_strtod_l+0x59c>)
 800e504:	3b01      	subs	r3, #1
 800e506:	a81d      	add	r0, sp, #116	; 0x74
 800e508:	931d      	str	r3, [sp, #116]	; 0x74
 800e50a:	f001 fef7 	bl	80102fc <__match>
 800e50e:	b910      	cbnz	r0, 800e516 <_strtod_l+0x37e>
 800e510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e512:	3301      	adds	r3, #1
 800e514:	931d      	str	r3, [sp, #116]	; 0x74
 800e516:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e744 <_strtod_l+0x5ac>
 800e51a:	f04f 0a00 	mov.w	sl, #0
 800e51e:	e67d      	b.n	800e21c <_strtod_l+0x84>
 800e520:	4885      	ldr	r0, [pc, #532]	; (800e738 <_strtod_l+0x5a0>)
 800e522:	f002 fe1d 	bl	8011160 <nan>
 800e526:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e52a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e52e:	e675      	b.n	800e21c <_strtod_l+0x84>
 800e530:	9b07      	ldr	r3, [sp, #28]
 800e532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e534:	1af3      	subs	r3, r6, r3
 800e536:	2f00      	cmp	r7, #0
 800e538:	bf08      	it	eq
 800e53a:	462f      	moveq	r7, r5
 800e53c:	2d10      	cmp	r5, #16
 800e53e:	9308      	str	r3, [sp, #32]
 800e540:	46a8      	mov	r8, r5
 800e542:	bfa8      	it	ge
 800e544:	f04f 0810 	movge.w	r8, #16
 800e548:	f7f1 fffc 	bl	8000544 <__aeabi_ui2d>
 800e54c:	2d09      	cmp	r5, #9
 800e54e:	4682      	mov	sl, r0
 800e550:	468b      	mov	fp, r1
 800e552:	dd13      	ble.n	800e57c <_strtod_l+0x3e4>
 800e554:	4b79      	ldr	r3, [pc, #484]	; (800e73c <_strtod_l+0x5a4>)
 800e556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e55a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e55e:	f7f2 f86b 	bl	8000638 <__aeabi_dmul>
 800e562:	4682      	mov	sl, r0
 800e564:	4648      	mov	r0, r9
 800e566:	468b      	mov	fp, r1
 800e568:	f7f1 ffec 	bl	8000544 <__aeabi_ui2d>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	4650      	mov	r0, sl
 800e572:	4659      	mov	r1, fp
 800e574:	f7f1 feaa 	bl	80002cc <__adddf3>
 800e578:	4682      	mov	sl, r0
 800e57a:	468b      	mov	fp, r1
 800e57c:	2d0f      	cmp	r5, #15
 800e57e:	dc38      	bgt.n	800e5f2 <_strtod_l+0x45a>
 800e580:	9b08      	ldr	r3, [sp, #32]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f43f ae4a 	beq.w	800e21c <_strtod_l+0x84>
 800e588:	dd24      	ble.n	800e5d4 <_strtod_l+0x43c>
 800e58a:	2b16      	cmp	r3, #22
 800e58c:	dc0b      	bgt.n	800e5a6 <_strtod_l+0x40e>
 800e58e:	4d6b      	ldr	r5, [pc, #428]	; (800e73c <_strtod_l+0x5a4>)
 800e590:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e594:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e598:	4652      	mov	r2, sl
 800e59a:	465b      	mov	r3, fp
 800e59c:	f7f2 f84c 	bl	8000638 <__aeabi_dmul>
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	e63a      	b.n	800e21c <_strtod_l+0x84>
 800e5a6:	9a08      	ldr	r2, [sp, #32]
 800e5a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	db20      	blt.n	800e5f2 <_strtod_l+0x45a>
 800e5b0:	4c62      	ldr	r4, [pc, #392]	; (800e73c <_strtod_l+0x5a4>)
 800e5b2:	f1c5 050f 	rsb	r5, r5, #15
 800e5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	465b      	mov	r3, fp
 800e5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c2:	f7f2 f839 	bl	8000638 <__aeabi_dmul>
 800e5c6:	9b08      	ldr	r3, [sp, #32]
 800e5c8:	1b5d      	subs	r5, r3, r5
 800e5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e5d2:	e7e3      	b.n	800e59c <_strtod_l+0x404>
 800e5d4:	9b08      	ldr	r3, [sp, #32]
 800e5d6:	3316      	adds	r3, #22
 800e5d8:	db0b      	blt.n	800e5f2 <_strtod_l+0x45a>
 800e5da:	9b07      	ldr	r3, [sp, #28]
 800e5dc:	4a57      	ldr	r2, [pc, #348]	; (800e73c <_strtod_l+0x5a4>)
 800e5de:	1b9e      	subs	r6, r3, r6
 800e5e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e5e8:	4650      	mov	r0, sl
 800e5ea:	4659      	mov	r1, fp
 800e5ec:	f7f2 f94e 	bl	800088c <__aeabi_ddiv>
 800e5f0:	e7d6      	b.n	800e5a0 <_strtod_l+0x408>
 800e5f2:	9b08      	ldr	r3, [sp, #32]
 800e5f4:	eba5 0808 	sub.w	r8, r5, r8
 800e5f8:	4498      	add	r8, r3
 800e5fa:	f1b8 0f00 	cmp.w	r8, #0
 800e5fe:	dd71      	ble.n	800e6e4 <_strtod_l+0x54c>
 800e600:	f018 030f 	ands.w	r3, r8, #15
 800e604:	d00a      	beq.n	800e61c <_strtod_l+0x484>
 800e606:	494d      	ldr	r1, [pc, #308]	; (800e73c <_strtod_l+0x5a4>)
 800e608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e60c:	4652      	mov	r2, sl
 800e60e:	465b      	mov	r3, fp
 800e610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e614:	f7f2 f810 	bl	8000638 <__aeabi_dmul>
 800e618:	4682      	mov	sl, r0
 800e61a:	468b      	mov	fp, r1
 800e61c:	f038 080f 	bics.w	r8, r8, #15
 800e620:	d04d      	beq.n	800e6be <_strtod_l+0x526>
 800e622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e626:	dd22      	ble.n	800e66e <_strtod_l+0x4d6>
 800e628:	2500      	movs	r5, #0
 800e62a:	462e      	mov	r6, r5
 800e62c:	9509      	str	r5, [sp, #36]	; 0x24
 800e62e:	9507      	str	r5, [sp, #28]
 800e630:	2322      	movs	r3, #34	; 0x22
 800e632:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e744 <_strtod_l+0x5ac>
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	f04f 0a00 	mov.w	sl, #0
 800e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f43f adec 	beq.w	800e21c <_strtod_l+0x84>
 800e644:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e646:	4620      	mov	r0, r4
 800e648:	f001 ff7c 	bl	8010544 <_Bfree>
 800e64c:	9907      	ldr	r1, [sp, #28]
 800e64e:	4620      	mov	r0, r4
 800e650:	f001 ff78 	bl	8010544 <_Bfree>
 800e654:	4631      	mov	r1, r6
 800e656:	4620      	mov	r0, r4
 800e658:	f001 ff74 	bl	8010544 <_Bfree>
 800e65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e65e:	4620      	mov	r0, r4
 800e660:	f001 ff70 	bl	8010544 <_Bfree>
 800e664:	4629      	mov	r1, r5
 800e666:	4620      	mov	r0, r4
 800e668:	f001 ff6c 	bl	8010544 <_Bfree>
 800e66c:	e5d6      	b.n	800e21c <_strtod_l+0x84>
 800e66e:	2300      	movs	r3, #0
 800e670:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e674:	4650      	mov	r0, sl
 800e676:	4659      	mov	r1, fp
 800e678:	4699      	mov	r9, r3
 800e67a:	f1b8 0f01 	cmp.w	r8, #1
 800e67e:	dc21      	bgt.n	800e6c4 <_strtod_l+0x52c>
 800e680:	b10b      	cbz	r3, 800e686 <_strtod_l+0x4ee>
 800e682:	4682      	mov	sl, r0
 800e684:	468b      	mov	fp, r1
 800e686:	4b2e      	ldr	r3, [pc, #184]	; (800e740 <_strtod_l+0x5a8>)
 800e688:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e68c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e690:	4652      	mov	r2, sl
 800e692:	465b      	mov	r3, fp
 800e694:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e698:	f7f1 ffce 	bl	8000638 <__aeabi_dmul>
 800e69c:	4b29      	ldr	r3, [pc, #164]	; (800e744 <_strtod_l+0x5ac>)
 800e69e:	460a      	mov	r2, r1
 800e6a0:	400b      	ands	r3, r1
 800e6a2:	4929      	ldr	r1, [pc, #164]	; (800e748 <_strtod_l+0x5b0>)
 800e6a4:	428b      	cmp	r3, r1
 800e6a6:	4682      	mov	sl, r0
 800e6a8:	d8be      	bhi.n	800e628 <_strtod_l+0x490>
 800e6aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e6ae:	428b      	cmp	r3, r1
 800e6b0:	bf86      	itte	hi
 800e6b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e74c <_strtod_l+0x5b4>
 800e6b6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e6ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e6be:	2300      	movs	r3, #0
 800e6c0:	9304      	str	r3, [sp, #16]
 800e6c2:	e081      	b.n	800e7c8 <_strtod_l+0x630>
 800e6c4:	f018 0f01 	tst.w	r8, #1
 800e6c8:	d007      	beq.n	800e6da <_strtod_l+0x542>
 800e6ca:	4b1d      	ldr	r3, [pc, #116]	; (800e740 <_strtod_l+0x5a8>)
 800e6cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 ffb0 	bl	8000638 <__aeabi_dmul>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	f109 0901 	add.w	r9, r9, #1
 800e6de:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e6e2:	e7ca      	b.n	800e67a <_strtod_l+0x4e2>
 800e6e4:	d0eb      	beq.n	800e6be <_strtod_l+0x526>
 800e6e6:	f1c8 0800 	rsb	r8, r8, #0
 800e6ea:	f018 020f 	ands.w	r2, r8, #15
 800e6ee:	d00a      	beq.n	800e706 <_strtod_l+0x56e>
 800e6f0:	4b12      	ldr	r3, [pc, #72]	; (800e73c <_strtod_l+0x5a4>)
 800e6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6f6:	4650      	mov	r0, sl
 800e6f8:	4659      	mov	r1, fp
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	f7f2 f8c5 	bl	800088c <__aeabi_ddiv>
 800e702:	4682      	mov	sl, r0
 800e704:	468b      	mov	fp, r1
 800e706:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e70a:	d0d8      	beq.n	800e6be <_strtod_l+0x526>
 800e70c:	f1b8 0f1f 	cmp.w	r8, #31
 800e710:	dd1e      	ble.n	800e750 <_strtod_l+0x5b8>
 800e712:	2500      	movs	r5, #0
 800e714:	462e      	mov	r6, r5
 800e716:	9509      	str	r5, [sp, #36]	; 0x24
 800e718:	9507      	str	r5, [sp, #28]
 800e71a:	2322      	movs	r3, #34	; 0x22
 800e71c:	f04f 0a00 	mov.w	sl, #0
 800e720:	f04f 0b00 	mov.w	fp, #0
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	e789      	b.n	800e63c <_strtod_l+0x4a4>
 800e728:	08013939 	.word	0x08013939
 800e72c:	0801397c 	.word	0x0801397c
 800e730:	08013931 	.word	0x08013931
 800e734:	08013abc 	.word	0x08013abc
 800e738:	08013d78 	.word	0x08013d78
 800e73c:	08013c58 	.word	0x08013c58
 800e740:	08013c30 	.word	0x08013c30
 800e744:	7ff00000 	.word	0x7ff00000
 800e748:	7ca00000 	.word	0x7ca00000
 800e74c:	7fefffff 	.word	0x7fefffff
 800e750:	f018 0310 	ands.w	r3, r8, #16
 800e754:	bf18      	it	ne
 800e756:	236a      	movne	r3, #106	; 0x6a
 800e758:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eb10 <_strtod_l+0x978>
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	4650      	mov	r0, sl
 800e760:	4659      	mov	r1, fp
 800e762:	2300      	movs	r3, #0
 800e764:	f018 0f01 	tst.w	r8, #1
 800e768:	d004      	beq.n	800e774 <_strtod_l+0x5dc>
 800e76a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e76e:	f7f1 ff63 	bl	8000638 <__aeabi_dmul>
 800e772:	2301      	movs	r3, #1
 800e774:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e778:	f109 0908 	add.w	r9, r9, #8
 800e77c:	d1f2      	bne.n	800e764 <_strtod_l+0x5cc>
 800e77e:	b10b      	cbz	r3, 800e784 <_strtod_l+0x5ec>
 800e780:	4682      	mov	sl, r0
 800e782:	468b      	mov	fp, r1
 800e784:	9b04      	ldr	r3, [sp, #16]
 800e786:	b1bb      	cbz	r3, 800e7b8 <_strtod_l+0x620>
 800e788:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e78c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e790:	2b00      	cmp	r3, #0
 800e792:	4659      	mov	r1, fp
 800e794:	dd10      	ble.n	800e7b8 <_strtod_l+0x620>
 800e796:	2b1f      	cmp	r3, #31
 800e798:	f340 8128 	ble.w	800e9ec <_strtod_l+0x854>
 800e79c:	2b34      	cmp	r3, #52	; 0x34
 800e79e:	bfde      	ittt	le
 800e7a0:	3b20      	suble	r3, #32
 800e7a2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800e7a6:	fa02 f303 	lslle.w	r3, r2, r3
 800e7aa:	f04f 0a00 	mov.w	sl, #0
 800e7ae:	bfcc      	ite	gt
 800e7b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e7b4:	ea03 0b01 	andle.w	fp, r3, r1
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4650      	mov	r0, sl
 800e7be:	4659      	mov	r1, fp
 800e7c0:	f7f2 f9a2 	bl	8000b08 <__aeabi_dcmpeq>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d1a4      	bne.n	800e712 <_strtod_l+0x57a>
 800e7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	463a      	mov	r2, r7
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f001 ff22 	bl	801061c <__s2b>
 800e7d8:	9009      	str	r0, [sp, #36]	; 0x24
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	f43f af24 	beq.w	800e628 <_strtod_l+0x490>
 800e7e0:	9b07      	ldr	r3, [sp, #28]
 800e7e2:	1b9e      	subs	r6, r3, r6
 800e7e4:	9b08      	ldr	r3, [sp, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfb4      	ite	lt
 800e7ea:	4633      	movlt	r3, r6
 800e7ec:	2300      	movge	r3, #0
 800e7ee:	9310      	str	r3, [sp, #64]	; 0x40
 800e7f0:	9b08      	ldr	r3, [sp, #32]
 800e7f2:	2500      	movs	r5, #0
 800e7f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e7f8:	9318      	str	r3, [sp, #96]	; 0x60
 800e7fa:	462e      	mov	r6, r5
 800e7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7fe:	4620      	mov	r0, r4
 800e800:	6859      	ldr	r1, [r3, #4]
 800e802:	f001 fe5f 	bl	80104c4 <_Balloc>
 800e806:	9007      	str	r0, [sp, #28]
 800e808:	2800      	cmp	r0, #0
 800e80a:	f43f af11 	beq.w	800e630 <_strtod_l+0x498>
 800e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e810:	691a      	ldr	r2, [r3, #16]
 800e812:	3202      	adds	r2, #2
 800e814:	f103 010c 	add.w	r1, r3, #12
 800e818:	0092      	lsls	r2, r2, #2
 800e81a:	300c      	adds	r0, #12
 800e81c:	f7fe fc6a 	bl	800d0f4 <memcpy>
 800e820:	ec4b ab10 	vmov	d0, sl, fp
 800e824:	aa20      	add	r2, sp, #128	; 0x80
 800e826:	a91f      	add	r1, sp, #124	; 0x7c
 800e828:	4620      	mov	r0, r4
 800e82a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e82e:	f002 fa31 	bl	8010c94 <__d2b>
 800e832:	901e      	str	r0, [sp, #120]	; 0x78
 800e834:	2800      	cmp	r0, #0
 800e836:	f43f aefb 	beq.w	800e630 <_strtod_l+0x498>
 800e83a:	2101      	movs	r1, #1
 800e83c:	4620      	mov	r0, r4
 800e83e:	f001 ff87 	bl	8010750 <__i2b>
 800e842:	4606      	mov	r6, r0
 800e844:	2800      	cmp	r0, #0
 800e846:	f43f aef3 	beq.w	800e630 <_strtod_l+0x498>
 800e84a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e84c:	9904      	ldr	r1, [sp, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfab      	itete	ge
 800e852:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e854:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e856:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e858:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e85c:	bfac      	ite	ge
 800e85e:	eb03 0902 	addge.w	r9, r3, r2
 800e862:	1ad7      	sublt	r7, r2, r3
 800e864:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e866:	eba3 0801 	sub.w	r8, r3, r1
 800e86a:	4490      	add	r8, r2
 800e86c:	4ba3      	ldr	r3, [pc, #652]	; (800eafc <_strtod_l+0x964>)
 800e86e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e872:	4598      	cmp	r8, r3
 800e874:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e878:	f280 80cc 	bge.w	800ea14 <_strtod_l+0x87c>
 800e87c:	eba3 0308 	sub.w	r3, r3, r8
 800e880:	2b1f      	cmp	r3, #31
 800e882:	eba2 0203 	sub.w	r2, r2, r3
 800e886:	f04f 0101 	mov.w	r1, #1
 800e88a:	f300 80b6 	bgt.w	800e9fa <_strtod_l+0x862>
 800e88e:	fa01 f303 	lsl.w	r3, r1, r3
 800e892:	9311      	str	r3, [sp, #68]	; 0x44
 800e894:	2300      	movs	r3, #0
 800e896:	930c      	str	r3, [sp, #48]	; 0x30
 800e898:	eb09 0802 	add.w	r8, r9, r2
 800e89c:	9b04      	ldr	r3, [sp, #16]
 800e89e:	45c1      	cmp	r9, r8
 800e8a0:	4417      	add	r7, r2
 800e8a2:	441f      	add	r7, r3
 800e8a4:	464b      	mov	r3, r9
 800e8a6:	bfa8      	it	ge
 800e8a8:	4643      	movge	r3, r8
 800e8aa:	42bb      	cmp	r3, r7
 800e8ac:	bfa8      	it	ge
 800e8ae:	463b      	movge	r3, r7
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bfc2      	ittt	gt
 800e8b4:	eba8 0803 	subgt.w	r8, r8, r3
 800e8b8:	1aff      	subgt	r7, r7, r3
 800e8ba:	eba9 0903 	subgt.w	r9, r9, r3
 800e8be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dd17      	ble.n	800e8f4 <_strtod_l+0x75c>
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f001 fffd 	bl	80108c8 <__pow5mult>
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	f43f aead 	beq.w	800e630 <_strtod_l+0x498>
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f001 ff4e 	bl	801077c <__multiply>
 800e8e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	f43f aea4 	beq.w	800e630 <_strtod_l+0x498>
 800e8e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f001 fe2a 	bl	8010544 <_Bfree>
 800e8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8f2:	931e      	str	r3, [sp, #120]	; 0x78
 800e8f4:	f1b8 0f00 	cmp.w	r8, #0
 800e8f8:	f300 8091 	bgt.w	800ea1e <_strtod_l+0x886>
 800e8fc:	9b08      	ldr	r3, [sp, #32]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	dd08      	ble.n	800e914 <_strtod_l+0x77c>
 800e902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e904:	9907      	ldr	r1, [sp, #28]
 800e906:	4620      	mov	r0, r4
 800e908:	f001 ffde 	bl	80108c8 <__pow5mult>
 800e90c:	9007      	str	r0, [sp, #28]
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f ae8e 	beq.w	800e630 <_strtod_l+0x498>
 800e914:	2f00      	cmp	r7, #0
 800e916:	dd08      	ble.n	800e92a <_strtod_l+0x792>
 800e918:	9907      	ldr	r1, [sp, #28]
 800e91a:	463a      	mov	r2, r7
 800e91c:	4620      	mov	r0, r4
 800e91e:	f002 f82d 	bl	801097c <__lshift>
 800e922:	9007      	str	r0, [sp, #28]
 800e924:	2800      	cmp	r0, #0
 800e926:	f43f ae83 	beq.w	800e630 <_strtod_l+0x498>
 800e92a:	f1b9 0f00 	cmp.w	r9, #0
 800e92e:	dd08      	ble.n	800e942 <_strtod_l+0x7aa>
 800e930:	4631      	mov	r1, r6
 800e932:	464a      	mov	r2, r9
 800e934:	4620      	mov	r0, r4
 800e936:	f002 f821 	bl	801097c <__lshift>
 800e93a:	4606      	mov	r6, r0
 800e93c:	2800      	cmp	r0, #0
 800e93e:	f43f ae77 	beq.w	800e630 <_strtod_l+0x498>
 800e942:	9a07      	ldr	r2, [sp, #28]
 800e944:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e946:	4620      	mov	r0, r4
 800e948:	f002 f8a0 	bl	8010a8c <__mdiff>
 800e94c:	4605      	mov	r5, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	f43f ae6e 	beq.w	800e630 <_strtod_l+0x498>
 800e954:	68c3      	ldr	r3, [r0, #12]
 800e956:	930f      	str	r3, [sp, #60]	; 0x3c
 800e958:	2300      	movs	r3, #0
 800e95a:	60c3      	str	r3, [r0, #12]
 800e95c:	4631      	mov	r1, r6
 800e95e:	f002 f879 	bl	8010a54 <__mcmp>
 800e962:	2800      	cmp	r0, #0
 800e964:	da65      	bge.n	800ea32 <_strtod_l+0x89a>
 800e966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e968:	ea53 030a 	orrs.w	r3, r3, sl
 800e96c:	f040 8087 	bne.w	800ea7e <_strtod_l+0x8e6>
 800e970:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 8082 	bne.w	800ea7e <_strtod_l+0x8e6>
 800e97a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e97e:	0d1b      	lsrs	r3, r3, #20
 800e980:	051b      	lsls	r3, r3, #20
 800e982:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e986:	d97a      	bls.n	800ea7e <_strtod_l+0x8e6>
 800e988:	696b      	ldr	r3, [r5, #20]
 800e98a:	b913      	cbnz	r3, 800e992 <_strtod_l+0x7fa>
 800e98c:	692b      	ldr	r3, [r5, #16]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	dd75      	ble.n	800ea7e <_strtod_l+0x8e6>
 800e992:	4629      	mov	r1, r5
 800e994:	2201      	movs	r2, #1
 800e996:	4620      	mov	r0, r4
 800e998:	f001 fff0 	bl	801097c <__lshift>
 800e99c:	4631      	mov	r1, r6
 800e99e:	4605      	mov	r5, r0
 800e9a0:	f002 f858 	bl	8010a54 <__mcmp>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	dd6a      	ble.n	800ea7e <_strtod_l+0x8e6>
 800e9a8:	9904      	ldr	r1, [sp, #16]
 800e9aa:	4a55      	ldr	r2, [pc, #340]	; (800eb00 <_strtod_l+0x968>)
 800e9ac:	465b      	mov	r3, fp
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	f000 8085 	beq.w	800eabe <_strtod_l+0x926>
 800e9b4:	ea02 010b 	and.w	r1, r2, fp
 800e9b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e9bc:	dc7f      	bgt.n	800eabe <_strtod_l+0x926>
 800e9be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e9c2:	f77f aeaa 	ble.w	800e71a <_strtod_l+0x582>
 800e9c6:	4a4f      	ldr	r2, [pc, #316]	; (800eb04 <_strtod_l+0x96c>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e9ce:	4650      	mov	r0, sl
 800e9d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e9d4:	4659      	mov	r1, fp
 800e9d6:	f7f1 fe2f 	bl	8000638 <__aeabi_dmul>
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4303      	orrs	r3, r0
 800e9de:	bf08      	it	eq
 800e9e0:	2322      	moveq	r3, #34	; 0x22
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	468b      	mov	fp, r1
 800e9e6:	bf08      	it	eq
 800e9e8:	6023      	streq	r3, [r4, #0]
 800e9ea:	e62b      	b.n	800e644 <_strtod_l+0x4ac>
 800e9ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f4:	ea03 0a0a 	and.w	sl, r3, sl
 800e9f8:	e6de      	b.n	800e7b8 <_strtod_l+0x620>
 800e9fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e9fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ea02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ea06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ea0a:	fa01 f308 	lsl.w	r3, r1, r8
 800ea0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ea10:	9111      	str	r1, [sp, #68]	; 0x44
 800ea12:	e741      	b.n	800e898 <_strtod_l+0x700>
 800ea14:	2300      	movs	r3, #0
 800ea16:	930c      	str	r3, [sp, #48]	; 0x30
 800ea18:	2301      	movs	r3, #1
 800ea1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ea1c:	e73c      	b.n	800e898 <_strtod_l+0x700>
 800ea1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea20:	4642      	mov	r2, r8
 800ea22:	4620      	mov	r0, r4
 800ea24:	f001 ffaa 	bl	801097c <__lshift>
 800ea28:	901e      	str	r0, [sp, #120]	; 0x78
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f47f af66 	bne.w	800e8fc <_strtod_l+0x764>
 800ea30:	e5fe      	b.n	800e630 <_strtod_l+0x498>
 800ea32:	465f      	mov	r7, fp
 800ea34:	d16e      	bne.n	800eb14 <_strtod_l+0x97c>
 800ea36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea3c:	b342      	cbz	r2, 800ea90 <_strtod_l+0x8f8>
 800ea3e:	4a32      	ldr	r2, [pc, #200]	; (800eb08 <_strtod_l+0x970>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d128      	bne.n	800ea96 <_strtod_l+0x8fe>
 800ea44:	9b04      	ldr	r3, [sp, #16]
 800ea46:	4650      	mov	r0, sl
 800ea48:	b1eb      	cbz	r3, 800ea86 <_strtod_l+0x8ee>
 800ea4a:	4a2d      	ldr	r2, [pc, #180]	; (800eb00 <_strtod_l+0x968>)
 800ea4c:	403a      	ands	r2, r7
 800ea4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ea52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ea56:	d819      	bhi.n	800ea8c <_strtod_l+0x8f4>
 800ea58:	0d12      	lsrs	r2, r2, #20
 800ea5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ea5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea62:	4298      	cmp	r0, r3
 800ea64:	d117      	bne.n	800ea96 <_strtod_l+0x8fe>
 800ea66:	4b29      	ldr	r3, [pc, #164]	; (800eb0c <_strtod_l+0x974>)
 800ea68:	429f      	cmp	r7, r3
 800ea6a:	d102      	bne.n	800ea72 <_strtod_l+0x8da>
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	f43f addf 	beq.w	800e630 <_strtod_l+0x498>
 800ea72:	4b23      	ldr	r3, [pc, #140]	; (800eb00 <_strtod_l+0x968>)
 800ea74:	403b      	ands	r3, r7
 800ea76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ea7a:	f04f 0a00 	mov.w	sl, #0
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1a0      	bne.n	800e9c6 <_strtod_l+0x82e>
 800ea84:	e5de      	b.n	800e644 <_strtod_l+0x4ac>
 800ea86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea8a:	e7ea      	b.n	800ea62 <_strtod_l+0x8ca>
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	e7e8      	b.n	800ea62 <_strtod_l+0x8ca>
 800ea90:	ea53 030a 	orrs.w	r3, r3, sl
 800ea94:	d088      	beq.n	800e9a8 <_strtod_l+0x810>
 800ea96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea98:	b1db      	cbz	r3, 800ead2 <_strtod_l+0x93a>
 800ea9a:	423b      	tst	r3, r7
 800ea9c:	d0ef      	beq.n	800ea7e <_strtod_l+0x8e6>
 800ea9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaa0:	9a04      	ldr	r2, [sp, #16]
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	b1c3      	cbz	r3, 800eada <_strtod_l+0x942>
 800eaa8:	f7ff fb59 	bl	800e15e <sulp>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eab4:	f7f1 fc0a 	bl	80002cc <__adddf3>
 800eab8:	4682      	mov	sl, r0
 800eaba:	468b      	mov	fp, r1
 800eabc:	e7df      	b.n	800ea7e <_strtod_l+0x8e6>
 800eabe:	4013      	ands	r3, r2
 800eac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eacc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ead0:	e7d5      	b.n	800ea7e <_strtod_l+0x8e6>
 800ead2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ead4:	ea13 0f0a 	tst.w	r3, sl
 800ead8:	e7e0      	b.n	800ea9c <_strtod_l+0x904>
 800eada:	f7ff fb40 	bl	800e15e <sulp>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eae6:	f7f1 fbef 	bl	80002c8 <__aeabi_dsub>
 800eaea:	2200      	movs	r2, #0
 800eaec:	2300      	movs	r3, #0
 800eaee:	4682      	mov	sl, r0
 800eaf0:	468b      	mov	fp, r1
 800eaf2:	f7f2 f809 	bl	8000b08 <__aeabi_dcmpeq>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d0c1      	beq.n	800ea7e <_strtod_l+0x8e6>
 800eafa:	e60e      	b.n	800e71a <_strtod_l+0x582>
 800eafc:	fffffc02 	.word	0xfffffc02
 800eb00:	7ff00000 	.word	0x7ff00000
 800eb04:	39500000 	.word	0x39500000
 800eb08:	000fffff 	.word	0x000fffff
 800eb0c:	7fefffff 	.word	0x7fefffff
 800eb10:	08013990 	.word	0x08013990
 800eb14:	4631      	mov	r1, r6
 800eb16:	4628      	mov	r0, r5
 800eb18:	f002 f918 	bl	8010d4c <__ratio>
 800eb1c:	ec59 8b10 	vmov	r8, r9, d0
 800eb20:	ee10 0a10 	vmov	r0, s0
 800eb24:	2200      	movs	r2, #0
 800eb26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb2a:	4649      	mov	r1, r9
 800eb2c:	f7f2 f800 	bl	8000b30 <__aeabi_dcmple>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d07c      	beq.n	800ec2e <_strtod_l+0xa96>
 800eb34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d04c      	beq.n	800ebd4 <_strtod_l+0xa3c>
 800eb3a:	4b95      	ldr	r3, [pc, #596]	; (800ed90 <_strtod_l+0xbf8>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eb42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ed90 <_strtod_l+0xbf8>
 800eb46:	f04f 0800 	mov.w	r8, #0
 800eb4a:	4b92      	ldr	r3, [pc, #584]	; (800ed94 <_strtod_l+0xbfc>)
 800eb4c:	403b      	ands	r3, r7
 800eb4e:	9311      	str	r3, [sp, #68]	; 0x44
 800eb50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb52:	4b91      	ldr	r3, [pc, #580]	; (800ed98 <_strtod_l+0xc00>)
 800eb54:	429a      	cmp	r2, r3
 800eb56:	f040 80b2 	bne.w	800ecbe <_strtod_l+0xb26>
 800eb5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eb66:	ec4b ab10 	vmov	d0, sl, fp
 800eb6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800eb6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb72:	f002 f813 	bl	8010b9c <__ulp>
 800eb76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb7a:	ec53 2b10 	vmov	r2, r3, d0
 800eb7e:	f7f1 fd5b 	bl	8000638 <__aeabi_dmul>
 800eb82:	4652      	mov	r2, sl
 800eb84:	465b      	mov	r3, fp
 800eb86:	f7f1 fba1 	bl	80002cc <__adddf3>
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4981      	ldr	r1, [pc, #516]	; (800ed94 <_strtod_l+0xbfc>)
 800eb8e:	4a83      	ldr	r2, [pc, #524]	; (800ed9c <_strtod_l+0xc04>)
 800eb90:	4019      	ands	r1, r3
 800eb92:	4291      	cmp	r1, r2
 800eb94:	4682      	mov	sl, r0
 800eb96:	d95e      	bls.n	800ec56 <_strtod_l+0xabe>
 800eb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d103      	bne.n	800ebaa <_strtod_l+0xa12>
 800eba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba4:	3301      	adds	r3, #1
 800eba6:	f43f ad43 	beq.w	800e630 <_strtod_l+0x498>
 800ebaa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800eda8 <_strtod_l+0xc10>
 800ebae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ebb2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f001 fcc5 	bl	8010544 <_Bfree>
 800ebba:	9907      	ldr	r1, [sp, #28]
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f001 fcc1 	bl	8010544 <_Bfree>
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f001 fcbd 	bl	8010544 <_Bfree>
 800ebca:	4629      	mov	r1, r5
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f001 fcb9 	bl	8010544 <_Bfree>
 800ebd2:	e613      	b.n	800e7fc <_strtod_l+0x664>
 800ebd4:	f1ba 0f00 	cmp.w	sl, #0
 800ebd8:	d11b      	bne.n	800ec12 <_strtod_l+0xa7a>
 800ebda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebde:	b9f3      	cbnz	r3, 800ec1e <_strtod_l+0xa86>
 800ebe0:	4b6b      	ldr	r3, [pc, #428]	; (800ed90 <_strtod_l+0xbf8>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 ff98 	bl	8000b1c <__aeabi_dcmplt>
 800ebec:	b9d0      	cbnz	r0, 800ec24 <_strtod_l+0xa8c>
 800ebee:	4640      	mov	r0, r8
 800ebf0:	4649      	mov	r1, r9
 800ebf2:	4b6b      	ldr	r3, [pc, #428]	; (800eda0 <_strtod_l+0xc08>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f7f1 fd1f 	bl	8000638 <__aeabi_dmul>
 800ebfa:	4680      	mov	r8, r0
 800ebfc:	4689      	mov	r9, r1
 800ebfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ec06:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ec0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ec10:	e79b      	b.n	800eb4a <_strtod_l+0x9b2>
 800ec12:	f1ba 0f01 	cmp.w	sl, #1
 800ec16:	d102      	bne.n	800ec1e <_strtod_l+0xa86>
 800ec18:	2f00      	cmp	r7, #0
 800ec1a:	f43f ad7e 	beq.w	800e71a <_strtod_l+0x582>
 800ec1e:	4b61      	ldr	r3, [pc, #388]	; (800eda4 <_strtod_l+0xc0c>)
 800ec20:	2200      	movs	r2, #0
 800ec22:	e78c      	b.n	800eb3e <_strtod_l+0x9a6>
 800ec24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eda0 <_strtod_l+0xc08>
 800ec28:	f04f 0800 	mov.w	r8, #0
 800ec2c:	e7e7      	b.n	800ebfe <_strtod_l+0xa66>
 800ec2e:	4b5c      	ldr	r3, [pc, #368]	; (800eda0 <_strtod_l+0xc08>)
 800ec30:	4640      	mov	r0, r8
 800ec32:	4649      	mov	r1, r9
 800ec34:	2200      	movs	r2, #0
 800ec36:	f7f1 fcff 	bl	8000638 <__aeabi_dmul>
 800ec3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	4689      	mov	r9, r1
 800ec40:	b933      	cbnz	r3, 800ec50 <_strtod_l+0xab8>
 800ec42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec46:	9012      	str	r0, [sp, #72]	; 0x48
 800ec48:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ec4e:	e7dd      	b.n	800ec0c <_strtod_l+0xa74>
 800ec50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ec54:	e7f9      	b.n	800ec4a <_strtod_l+0xab2>
 800ec56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ec5a:	9b04      	ldr	r3, [sp, #16]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1a8      	bne.n	800ebb2 <_strtod_l+0xa1a>
 800ec60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec66:	0d1b      	lsrs	r3, r3, #20
 800ec68:	051b      	lsls	r3, r3, #20
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d1a1      	bne.n	800ebb2 <_strtod_l+0xa1a>
 800ec6e:	4640      	mov	r0, r8
 800ec70:	4649      	mov	r1, r9
 800ec72:	f7f2 f841 	bl	8000cf8 <__aeabi_d2lz>
 800ec76:	f7f1 fcb1 	bl	80005dc <__aeabi_l2d>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	4640      	mov	r0, r8
 800ec80:	4649      	mov	r1, r9
 800ec82:	f7f1 fb21 	bl	80002c8 <__aeabi_dsub>
 800ec86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec8c:	ea43 030a 	orr.w	r3, r3, sl
 800ec90:	4313      	orrs	r3, r2
 800ec92:	4680      	mov	r8, r0
 800ec94:	4689      	mov	r9, r1
 800ec96:	d053      	beq.n	800ed40 <_strtod_l+0xba8>
 800ec98:	a335      	add	r3, pc, #212	; (adr r3, 800ed70 <_strtod_l+0xbd8>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	f7f1 ff3d 	bl	8000b1c <__aeabi_dcmplt>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	f47f acce 	bne.w	800e644 <_strtod_l+0x4ac>
 800eca8:	a333      	add	r3, pc, #204	; (adr r3, 800ed78 <_strtod_l+0xbe0>)
 800ecaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecae:	4640      	mov	r0, r8
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	f7f1 ff51 	bl	8000b58 <__aeabi_dcmpgt>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f43f af7b 	beq.w	800ebb2 <_strtod_l+0xa1a>
 800ecbc:	e4c2      	b.n	800e644 <_strtod_l+0x4ac>
 800ecbe:	9b04      	ldr	r3, [sp, #16]
 800ecc0:	b333      	cbz	r3, 800ed10 <_strtod_l+0xb78>
 800ecc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ecc8:	d822      	bhi.n	800ed10 <_strtod_l+0xb78>
 800ecca:	a32d      	add	r3, pc, #180	; (adr r3, 800ed80 <_strtod_l+0xbe8>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	4649      	mov	r1, r9
 800ecd4:	f7f1 ff2c 	bl	8000b30 <__aeabi_dcmple>
 800ecd8:	b1a0      	cbz	r0, 800ed04 <_strtod_l+0xb6c>
 800ecda:	4649      	mov	r1, r9
 800ecdc:	4640      	mov	r0, r8
 800ecde:	f7f1 ff83 	bl	8000be8 <__aeabi_d2uiz>
 800ece2:	2801      	cmp	r0, #1
 800ece4:	bf38      	it	cc
 800ece6:	2001      	movcc	r0, #1
 800ece8:	f7f1 fc2c 	bl	8000544 <__aeabi_ui2d>
 800ecec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecee:	4680      	mov	r8, r0
 800ecf0:	4689      	mov	r9, r1
 800ecf2:	bb13      	cbnz	r3, 800ed3a <_strtod_l+0xba2>
 800ecf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf8:	9014      	str	r0, [sp, #80]	; 0x50
 800ecfa:	9315      	str	r3, [sp, #84]	; 0x54
 800ecfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ed04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ed0c:	1a9b      	subs	r3, r3, r2
 800ed0e:	930d      	str	r3, [sp, #52]	; 0x34
 800ed10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ed18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed1c:	f001 ff3e 	bl	8010b9c <__ulp>
 800ed20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed24:	ec53 2b10 	vmov	r2, r3, d0
 800ed28:	f7f1 fc86 	bl	8000638 <__aeabi_dmul>
 800ed2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ed30:	f7f1 facc 	bl	80002cc <__adddf3>
 800ed34:	4682      	mov	sl, r0
 800ed36:	468b      	mov	fp, r1
 800ed38:	e78f      	b.n	800ec5a <_strtod_l+0xac2>
 800ed3a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ed3e:	e7dd      	b.n	800ecfc <_strtod_l+0xb64>
 800ed40:	a311      	add	r3, pc, #68	; (adr r3, 800ed88 <_strtod_l+0xbf0>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f7f1 fee9 	bl	8000b1c <__aeabi_dcmplt>
 800ed4a:	e7b4      	b.n	800ecb6 <_strtod_l+0xb1e>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	930e      	str	r3, [sp, #56]	; 0x38
 800ed50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed54:	6013      	str	r3, [r2, #0]
 800ed56:	f7ff ba65 	b.w	800e224 <_strtod_l+0x8c>
 800ed5a:	2b65      	cmp	r3, #101	; 0x65
 800ed5c:	f43f ab5d 	beq.w	800e41a <_strtod_l+0x282>
 800ed60:	2b45      	cmp	r3, #69	; 0x45
 800ed62:	f43f ab5a 	beq.w	800e41a <_strtod_l+0x282>
 800ed66:	2201      	movs	r2, #1
 800ed68:	f7ff bb92 	b.w	800e490 <_strtod_l+0x2f8>
 800ed6c:	f3af 8000 	nop.w
 800ed70:	94a03595 	.word	0x94a03595
 800ed74:	3fdfffff 	.word	0x3fdfffff
 800ed78:	35afe535 	.word	0x35afe535
 800ed7c:	3fe00000 	.word	0x3fe00000
 800ed80:	ffc00000 	.word	0xffc00000
 800ed84:	41dfffff 	.word	0x41dfffff
 800ed88:	94a03595 	.word	0x94a03595
 800ed8c:	3fcfffff 	.word	0x3fcfffff
 800ed90:	3ff00000 	.word	0x3ff00000
 800ed94:	7ff00000 	.word	0x7ff00000
 800ed98:	7fe00000 	.word	0x7fe00000
 800ed9c:	7c9fffff 	.word	0x7c9fffff
 800eda0:	3fe00000 	.word	0x3fe00000
 800eda4:	bff00000 	.word	0xbff00000
 800eda8:	7fefffff 	.word	0x7fefffff

0800edac <_strtod_r>:
 800edac:	4b01      	ldr	r3, [pc, #4]	; (800edb4 <_strtod_r+0x8>)
 800edae:	f7ff b9f3 	b.w	800e198 <_strtod_l>
 800edb2:	bf00      	nop
 800edb4:	2000007c 	.word	0x2000007c

0800edb8 <_strtol_l.isra.0>:
 800edb8:	2b01      	cmp	r3, #1
 800edba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edbe:	d001      	beq.n	800edc4 <_strtol_l.isra.0+0xc>
 800edc0:	2b24      	cmp	r3, #36	; 0x24
 800edc2:	d906      	bls.n	800edd2 <_strtol_l.isra.0+0x1a>
 800edc4:	f7fe f86a 	bl	800ce9c <__errno>
 800edc8:	2316      	movs	r3, #22
 800edca:	6003      	str	r3, [r0, #0]
 800edcc:	2000      	movs	r0, #0
 800edce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd2:	4f3a      	ldr	r7, [pc, #232]	; (800eebc <_strtol_l.isra.0+0x104>)
 800edd4:	468e      	mov	lr, r1
 800edd6:	4676      	mov	r6, lr
 800edd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eddc:	5de5      	ldrb	r5, [r4, r7]
 800edde:	f015 0508 	ands.w	r5, r5, #8
 800ede2:	d1f8      	bne.n	800edd6 <_strtol_l.isra.0+0x1e>
 800ede4:	2c2d      	cmp	r4, #45	; 0x2d
 800ede6:	d134      	bne.n	800ee52 <_strtol_l.isra.0+0x9a>
 800ede8:	f89e 4000 	ldrb.w	r4, [lr]
 800edec:	f04f 0801 	mov.w	r8, #1
 800edf0:	f106 0e02 	add.w	lr, r6, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d05c      	beq.n	800eeb2 <_strtol_l.isra.0+0xfa>
 800edf8:	2b10      	cmp	r3, #16
 800edfa:	d10c      	bne.n	800ee16 <_strtol_l.isra.0+0x5e>
 800edfc:	2c30      	cmp	r4, #48	; 0x30
 800edfe:	d10a      	bne.n	800ee16 <_strtol_l.isra.0+0x5e>
 800ee00:	f89e 4000 	ldrb.w	r4, [lr]
 800ee04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ee08:	2c58      	cmp	r4, #88	; 0x58
 800ee0a:	d14d      	bne.n	800eea8 <_strtol_l.isra.0+0xf0>
 800ee0c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ee10:	2310      	movs	r3, #16
 800ee12:	f10e 0e02 	add.w	lr, lr, #2
 800ee16:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ee1a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ee1e:	2600      	movs	r6, #0
 800ee20:	fbbc f9f3 	udiv	r9, ip, r3
 800ee24:	4635      	mov	r5, r6
 800ee26:	fb03 ca19 	mls	sl, r3, r9, ip
 800ee2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ee2e:	2f09      	cmp	r7, #9
 800ee30:	d818      	bhi.n	800ee64 <_strtol_l.isra.0+0xac>
 800ee32:	463c      	mov	r4, r7
 800ee34:	42a3      	cmp	r3, r4
 800ee36:	dd24      	ble.n	800ee82 <_strtol_l.isra.0+0xca>
 800ee38:	2e00      	cmp	r6, #0
 800ee3a:	db1f      	blt.n	800ee7c <_strtol_l.isra.0+0xc4>
 800ee3c:	45a9      	cmp	r9, r5
 800ee3e:	d31d      	bcc.n	800ee7c <_strtol_l.isra.0+0xc4>
 800ee40:	d101      	bne.n	800ee46 <_strtol_l.isra.0+0x8e>
 800ee42:	45a2      	cmp	sl, r4
 800ee44:	db1a      	blt.n	800ee7c <_strtol_l.isra.0+0xc4>
 800ee46:	fb05 4503 	mla	r5, r5, r3, r4
 800ee4a:	2601      	movs	r6, #1
 800ee4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ee50:	e7eb      	b.n	800ee2a <_strtol_l.isra.0+0x72>
 800ee52:	2c2b      	cmp	r4, #43	; 0x2b
 800ee54:	bf08      	it	eq
 800ee56:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ee5a:	46a8      	mov	r8, r5
 800ee5c:	bf08      	it	eq
 800ee5e:	f106 0e02 	addeq.w	lr, r6, #2
 800ee62:	e7c7      	b.n	800edf4 <_strtol_l.isra.0+0x3c>
 800ee64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ee68:	2f19      	cmp	r7, #25
 800ee6a:	d801      	bhi.n	800ee70 <_strtol_l.isra.0+0xb8>
 800ee6c:	3c37      	subs	r4, #55	; 0x37
 800ee6e:	e7e1      	b.n	800ee34 <_strtol_l.isra.0+0x7c>
 800ee70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ee74:	2f19      	cmp	r7, #25
 800ee76:	d804      	bhi.n	800ee82 <_strtol_l.isra.0+0xca>
 800ee78:	3c57      	subs	r4, #87	; 0x57
 800ee7a:	e7db      	b.n	800ee34 <_strtol_l.isra.0+0x7c>
 800ee7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ee80:	e7e4      	b.n	800ee4c <_strtol_l.isra.0+0x94>
 800ee82:	2e00      	cmp	r6, #0
 800ee84:	da05      	bge.n	800ee92 <_strtol_l.isra.0+0xda>
 800ee86:	2322      	movs	r3, #34	; 0x22
 800ee88:	6003      	str	r3, [r0, #0]
 800ee8a:	4665      	mov	r5, ip
 800ee8c:	b942      	cbnz	r2, 800eea0 <_strtol_l.isra.0+0xe8>
 800ee8e:	4628      	mov	r0, r5
 800ee90:	e79d      	b.n	800edce <_strtol_l.isra.0+0x16>
 800ee92:	f1b8 0f00 	cmp.w	r8, #0
 800ee96:	d000      	beq.n	800ee9a <_strtol_l.isra.0+0xe2>
 800ee98:	426d      	negs	r5, r5
 800ee9a:	2a00      	cmp	r2, #0
 800ee9c:	d0f7      	beq.n	800ee8e <_strtol_l.isra.0+0xd6>
 800ee9e:	b10e      	cbz	r6, 800eea4 <_strtol_l.isra.0+0xec>
 800eea0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800eea4:	6011      	str	r1, [r2, #0]
 800eea6:	e7f2      	b.n	800ee8e <_strtol_l.isra.0+0xd6>
 800eea8:	2430      	movs	r4, #48	; 0x30
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1b3      	bne.n	800ee16 <_strtol_l.isra.0+0x5e>
 800eeae:	2308      	movs	r3, #8
 800eeb0:	e7b1      	b.n	800ee16 <_strtol_l.isra.0+0x5e>
 800eeb2:	2c30      	cmp	r4, #48	; 0x30
 800eeb4:	d0a4      	beq.n	800ee00 <_strtol_l.isra.0+0x48>
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	e7ad      	b.n	800ee16 <_strtol_l.isra.0+0x5e>
 800eeba:	bf00      	nop
 800eebc:	080139b9 	.word	0x080139b9

0800eec0 <_strtol_r>:
 800eec0:	f7ff bf7a 	b.w	800edb8 <_strtol_l.isra.0>

0800eec4 <_write_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	4d07      	ldr	r5, [pc, #28]	; (800eee4 <_write_r+0x20>)
 800eec8:	4604      	mov	r4, r0
 800eeca:	4608      	mov	r0, r1
 800eecc:	4611      	mov	r1, r2
 800eece:	2200      	movs	r2, #0
 800eed0:	602a      	str	r2, [r5, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	f7f3 fed7 	bl	8002c86 <_write>
 800eed8:	1c43      	adds	r3, r0, #1
 800eeda:	d102      	bne.n	800eee2 <_write_r+0x1e>
 800eedc:	682b      	ldr	r3, [r5, #0]
 800eede:	b103      	cbz	r3, 800eee2 <_write_r+0x1e>
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	bd38      	pop	{r3, r4, r5, pc}
 800eee4:	200056a0 	.word	0x200056a0

0800eee8 <_close_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4d06      	ldr	r5, [pc, #24]	; (800ef04 <_close_r+0x1c>)
 800eeec:	2300      	movs	r3, #0
 800eeee:	4604      	mov	r4, r0
 800eef0:	4608      	mov	r0, r1
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	f7f3 fee3 	bl	8002cbe <_close>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_close_r+0x1a>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_close_r+0x1a>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	200056a0 	.word	0x200056a0

0800ef08 <quorem>:
 800ef08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	6903      	ldr	r3, [r0, #16]
 800ef0e:	690c      	ldr	r4, [r1, #16]
 800ef10:	42a3      	cmp	r3, r4
 800ef12:	4607      	mov	r7, r0
 800ef14:	f2c0 8081 	blt.w	800f01a <quorem+0x112>
 800ef18:	3c01      	subs	r4, #1
 800ef1a:	f101 0814 	add.w	r8, r1, #20
 800ef1e:	f100 0514 	add.w	r5, r0, #20
 800ef22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef30:	3301      	adds	r3, #1
 800ef32:	429a      	cmp	r2, r3
 800ef34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef40:	d331      	bcc.n	800efa6 <quorem+0x9e>
 800ef42:	f04f 0e00 	mov.w	lr, #0
 800ef46:	4640      	mov	r0, r8
 800ef48:	46ac      	mov	ip, r5
 800ef4a:	46f2      	mov	sl, lr
 800ef4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef50:	b293      	uxth	r3, r2
 800ef52:	fb06 e303 	mla	r3, r6, r3, lr
 800ef56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ef60:	0c12      	lsrs	r2, r2, #16
 800ef62:	f8dc a000 	ldr.w	sl, [ip]
 800ef66:	fb06 e202 	mla	r2, r6, r2, lr
 800ef6a:	fa13 f38a 	uxtah	r3, r3, sl
 800ef6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef72:	fa1f fa82 	uxth.w	sl, r2
 800ef76:	f8dc 2000 	ldr.w	r2, [ip]
 800ef7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ef7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef88:	4581      	cmp	r9, r0
 800ef8a:	f84c 3b04 	str.w	r3, [ip], #4
 800ef8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef92:	d2db      	bcs.n	800ef4c <quorem+0x44>
 800ef94:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef98:	b92b      	cbnz	r3, 800efa6 <quorem+0x9e>
 800ef9a:	9b01      	ldr	r3, [sp, #4]
 800ef9c:	3b04      	subs	r3, #4
 800ef9e:	429d      	cmp	r5, r3
 800efa0:	461a      	mov	r2, r3
 800efa2:	d32e      	bcc.n	800f002 <quorem+0xfa>
 800efa4:	613c      	str	r4, [r7, #16]
 800efa6:	4638      	mov	r0, r7
 800efa8:	f001 fd54 	bl	8010a54 <__mcmp>
 800efac:	2800      	cmp	r0, #0
 800efae:	db24      	blt.n	800effa <quorem+0xf2>
 800efb0:	3601      	adds	r6, #1
 800efb2:	4628      	mov	r0, r5
 800efb4:	f04f 0c00 	mov.w	ip, #0
 800efb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800efbc:	f8d0 e000 	ldr.w	lr, [r0]
 800efc0:	b293      	uxth	r3, r2
 800efc2:	ebac 0303 	sub.w	r3, ip, r3
 800efc6:	0c12      	lsrs	r2, r2, #16
 800efc8:	fa13 f38e 	uxtah	r3, r3, lr
 800efcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efda:	45c1      	cmp	r9, r8
 800efdc:	f840 3b04 	str.w	r3, [r0], #4
 800efe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efe4:	d2e8      	bcs.n	800efb8 <quorem+0xb0>
 800efe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efee:	b922      	cbnz	r2, 800effa <quorem+0xf2>
 800eff0:	3b04      	subs	r3, #4
 800eff2:	429d      	cmp	r5, r3
 800eff4:	461a      	mov	r2, r3
 800eff6:	d30a      	bcc.n	800f00e <quorem+0x106>
 800eff8:	613c      	str	r4, [r7, #16]
 800effa:	4630      	mov	r0, r6
 800effc:	b003      	add	sp, #12
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	6812      	ldr	r2, [r2, #0]
 800f004:	3b04      	subs	r3, #4
 800f006:	2a00      	cmp	r2, #0
 800f008:	d1cc      	bne.n	800efa4 <quorem+0x9c>
 800f00a:	3c01      	subs	r4, #1
 800f00c:	e7c7      	b.n	800ef9e <quorem+0x96>
 800f00e:	6812      	ldr	r2, [r2, #0]
 800f010:	3b04      	subs	r3, #4
 800f012:	2a00      	cmp	r2, #0
 800f014:	d1f0      	bne.n	800eff8 <quorem+0xf0>
 800f016:	3c01      	subs	r4, #1
 800f018:	e7eb      	b.n	800eff2 <quorem+0xea>
 800f01a:	2000      	movs	r0, #0
 800f01c:	e7ee      	b.n	800effc <quorem+0xf4>
	...

0800f020 <_dtoa_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	ed2d 8b02 	vpush	{d8}
 800f028:	ec57 6b10 	vmov	r6, r7, d0
 800f02c:	b095      	sub	sp, #84	; 0x54
 800f02e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f034:	9105      	str	r1, [sp, #20]
 800f036:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f03a:	4604      	mov	r4, r0
 800f03c:	9209      	str	r2, [sp, #36]	; 0x24
 800f03e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f040:	b975      	cbnz	r5, 800f060 <_dtoa_r+0x40>
 800f042:	2010      	movs	r0, #16
 800f044:	f7fe f84e 	bl	800d0e4 <malloc>
 800f048:	4602      	mov	r2, r0
 800f04a:	6260      	str	r0, [r4, #36]	; 0x24
 800f04c:	b920      	cbnz	r0, 800f058 <_dtoa_r+0x38>
 800f04e:	4bb2      	ldr	r3, [pc, #712]	; (800f318 <_dtoa_r+0x2f8>)
 800f050:	21ea      	movs	r1, #234	; 0xea
 800f052:	48b2      	ldr	r0, [pc, #712]	; (800f31c <_dtoa_r+0x2fc>)
 800f054:	f002 f8ac 	bl	80111b0 <__assert_func>
 800f058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f05c:	6005      	str	r5, [r0, #0]
 800f05e:	60c5      	str	r5, [r0, #12]
 800f060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f062:	6819      	ldr	r1, [r3, #0]
 800f064:	b151      	cbz	r1, 800f07c <_dtoa_r+0x5c>
 800f066:	685a      	ldr	r2, [r3, #4]
 800f068:	604a      	str	r2, [r1, #4]
 800f06a:	2301      	movs	r3, #1
 800f06c:	4093      	lsls	r3, r2
 800f06e:	608b      	str	r3, [r1, #8]
 800f070:	4620      	mov	r0, r4
 800f072:	f001 fa67 	bl	8010544 <_Bfree>
 800f076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	1e3b      	subs	r3, r7, #0
 800f07e:	bfb9      	ittee	lt
 800f080:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f084:	9303      	strlt	r3, [sp, #12]
 800f086:	2300      	movge	r3, #0
 800f088:	f8c8 3000 	strge.w	r3, [r8]
 800f08c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f090:	4ba3      	ldr	r3, [pc, #652]	; (800f320 <_dtoa_r+0x300>)
 800f092:	bfbc      	itt	lt
 800f094:	2201      	movlt	r2, #1
 800f096:	f8c8 2000 	strlt.w	r2, [r8]
 800f09a:	ea33 0309 	bics.w	r3, r3, r9
 800f09e:	d11b      	bne.n	800f0d8 <_dtoa_r+0xb8>
 800f0a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0ac:	4333      	orrs	r3, r6
 800f0ae:	f000 857a 	beq.w	800fba6 <_dtoa_r+0xb86>
 800f0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b4:	b963      	cbnz	r3, 800f0d0 <_dtoa_r+0xb0>
 800f0b6:	4b9b      	ldr	r3, [pc, #620]	; (800f324 <_dtoa_r+0x304>)
 800f0b8:	e024      	b.n	800f104 <_dtoa_r+0xe4>
 800f0ba:	4b9b      	ldr	r3, [pc, #620]	; (800f328 <_dtoa_r+0x308>)
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	3308      	adds	r3, #8
 800f0c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f0c2:	6013      	str	r3, [r2, #0]
 800f0c4:	9800      	ldr	r0, [sp, #0]
 800f0c6:	b015      	add	sp, #84	; 0x54
 800f0c8:	ecbd 8b02 	vpop	{d8}
 800f0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d0:	4b94      	ldr	r3, [pc, #592]	; (800f324 <_dtoa_r+0x304>)
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	3303      	adds	r3, #3
 800f0d6:	e7f3      	b.n	800f0c0 <_dtoa_r+0xa0>
 800f0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	ec51 0b17 	vmov	r0, r1, d7
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f0e8:	f7f1 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 800f0ec:	4680      	mov	r8, r0
 800f0ee:	b158      	cbz	r0, 800f108 <_dtoa_r+0xe8>
 800f0f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 8551 	beq.w	800fba0 <_dtoa_r+0xb80>
 800f0fe:	488b      	ldr	r0, [pc, #556]	; (800f32c <_dtoa_r+0x30c>)
 800f100:	6018      	str	r0, [r3, #0]
 800f102:	1e43      	subs	r3, r0, #1
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	e7dd      	b.n	800f0c4 <_dtoa_r+0xa4>
 800f108:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f10c:	aa12      	add	r2, sp, #72	; 0x48
 800f10e:	a913      	add	r1, sp, #76	; 0x4c
 800f110:	4620      	mov	r0, r4
 800f112:	f001 fdbf 	bl	8010c94 <__d2b>
 800f116:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f11a:	4683      	mov	fp, r0
 800f11c:	2d00      	cmp	r5, #0
 800f11e:	d07c      	beq.n	800f21a <_dtoa_r+0x1fa>
 800f120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f122:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f12a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f12e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f13a:	4b7d      	ldr	r3, [pc, #500]	; (800f330 <_dtoa_r+0x310>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	4630      	mov	r0, r6
 800f140:	4639      	mov	r1, r7
 800f142:	f7f1 f8c1 	bl	80002c8 <__aeabi_dsub>
 800f146:	a36e      	add	r3, pc, #440	; (adr r3, 800f300 <_dtoa_r+0x2e0>)
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	f7f1 fa74 	bl	8000638 <__aeabi_dmul>
 800f150:	a36d      	add	r3, pc, #436	; (adr r3, 800f308 <_dtoa_r+0x2e8>)
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	f7f1 f8b9 	bl	80002cc <__adddf3>
 800f15a:	4606      	mov	r6, r0
 800f15c:	4628      	mov	r0, r5
 800f15e:	460f      	mov	r7, r1
 800f160:	f7f1 fa00 	bl	8000564 <__aeabi_i2d>
 800f164:	a36a      	add	r3, pc, #424	; (adr r3, 800f310 <_dtoa_r+0x2f0>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	f7f1 fa65 	bl	8000638 <__aeabi_dmul>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4630      	mov	r0, r6
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 f8a9 	bl	80002cc <__adddf3>
 800f17a:	4606      	mov	r6, r0
 800f17c:	460f      	mov	r7, r1
 800f17e:	f7f1 fd0b 	bl	8000b98 <__aeabi_d2iz>
 800f182:	2200      	movs	r2, #0
 800f184:	4682      	mov	sl, r0
 800f186:	2300      	movs	r3, #0
 800f188:	4630      	mov	r0, r6
 800f18a:	4639      	mov	r1, r7
 800f18c:	f7f1 fcc6 	bl	8000b1c <__aeabi_dcmplt>
 800f190:	b148      	cbz	r0, 800f1a6 <_dtoa_r+0x186>
 800f192:	4650      	mov	r0, sl
 800f194:	f7f1 f9e6 	bl	8000564 <__aeabi_i2d>
 800f198:	4632      	mov	r2, r6
 800f19a:	463b      	mov	r3, r7
 800f19c:	f7f1 fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 800f1a0:	b908      	cbnz	r0, 800f1a6 <_dtoa_r+0x186>
 800f1a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f1a6:	f1ba 0f16 	cmp.w	sl, #22
 800f1aa:	d854      	bhi.n	800f256 <_dtoa_r+0x236>
 800f1ac:	4b61      	ldr	r3, [pc, #388]	; (800f334 <_dtoa_r+0x314>)
 800f1ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1ba:	f7f1 fcaf 	bl	8000b1c <__aeabi_dcmplt>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d04b      	beq.n	800f25a <_dtoa_r+0x23a>
 800f1c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	930e      	str	r3, [sp, #56]	; 0x38
 800f1ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1cc:	1b5d      	subs	r5, r3, r5
 800f1ce:	1e6b      	subs	r3, r5, #1
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	bf43      	ittte	mi
 800f1d4:	2300      	movmi	r3, #0
 800f1d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f1da:	9304      	strmi	r3, [sp, #16]
 800f1dc:	f04f 0800 	movpl.w	r8, #0
 800f1e0:	f1ba 0f00 	cmp.w	sl, #0
 800f1e4:	db3b      	blt.n	800f25e <_dtoa_r+0x23e>
 800f1e6:	9b04      	ldr	r3, [sp, #16]
 800f1e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f1ec:	4453      	add	r3, sl
 800f1ee:	9304      	str	r3, [sp, #16]
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	9306      	str	r3, [sp, #24]
 800f1f4:	9b05      	ldr	r3, [sp, #20]
 800f1f6:	2b09      	cmp	r3, #9
 800f1f8:	d869      	bhi.n	800f2ce <_dtoa_r+0x2ae>
 800f1fa:	2b05      	cmp	r3, #5
 800f1fc:	bfc4      	itt	gt
 800f1fe:	3b04      	subgt	r3, #4
 800f200:	9305      	strgt	r3, [sp, #20]
 800f202:	9b05      	ldr	r3, [sp, #20]
 800f204:	f1a3 0302 	sub.w	r3, r3, #2
 800f208:	bfcc      	ite	gt
 800f20a:	2500      	movgt	r5, #0
 800f20c:	2501      	movle	r5, #1
 800f20e:	2b03      	cmp	r3, #3
 800f210:	d869      	bhi.n	800f2e6 <_dtoa_r+0x2c6>
 800f212:	e8df f003 	tbb	[pc, r3]
 800f216:	4e2c      	.short	0x4e2c
 800f218:	5a4c      	.short	0x5a4c
 800f21a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f21e:	441d      	add	r5, r3
 800f220:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f224:	2b20      	cmp	r3, #32
 800f226:	bfc1      	itttt	gt
 800f228:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f22c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f230:	fa09 f303 	lslgt.w	r3, r9, r3
 800f234:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f238:	bfda      	itte	le
 800f23a:	f1c3 0320 	rsble	r3, r3, #32
 800f23e:	fa06 f003 	lslle.w	r0, r6, r3
 800f242:	4318      	orrgt	r0, r3
 800f244:	f7f1 f97e 	bl	8000544 <__aeabi_ui2d>
 800f248:	2301      	movs	r3, #1
 800f24a:	4606      	mov	r6, r0
 800f24c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f250:	3d01      	subs	r5, #1
 800f252:	9310      	str	r3, [sp, #64]	; 0x40
 800f254:	e771      	b.n	800f13a <_dtoa_r+0x11a>
 800f256:	2301      	movs	r3, #1
 800f258:	e7b6      	b.n	800f1c8 <_dtoa_r+0x1a8>
 800f25a:	900e      	str	r0, [sp, #56]	; 0x38
 800f25c:	e7b5      	b.n	800f1ca <_dtoa_r+0x1aa>
 800f25e:	f1ca 0300 	rsb	r3, sl, #0
 800f262:	9306      	str	r3, [sp, #24]
 800f264:	2300      	movs	r3, #0
 800f266:	eba8 080a 	sub.w	r8, r8, sl
 800f26a:	930d      	str	r3, [sp, #52]	; 0x34
 800f26c:	e7c2      	b.n	800f1f4 <_dtoa_r+0x1d4>
 800f26e:	2300      	movs	r3, #0
 800f270:	9308      	str	r3, [sp, #32]
 800f272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f274:	2b00      	cmp	r3, #0
 800f276:	dc39      	bgt.n	800f2ec <_dtoa_r+0x2cc>
 800f278:	f04f 0901 	mov.w	r9, #1
 800f27c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f280:	464b      	mov	r3, r9
 800f282:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f286:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f288:	2200      	movs	r2, #0
 800f28a:	6042      	str	r2, [r0, #4]
 800f28c:	2204      	movs	r2, #4
 800f28e:	f102 0614 	add.w	r6, r2, #20
 800f292:	429e      	cmp	r6, r3
 800f294:	6841      	ldr	r1, [r0, #4]
 800f296:	d92f      	bls.n	800f2f8 <_dtoa_r+0x2d8>
 800f298:	4620      	mov	r0, r4
 800f29a:	f001 f913 	bl	80104c4 <_Balloc>
 800f29e:	9000      	str	r0, [sp, #0]
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	d14b      	bne.n	800f33c <_dtoa_r+0x31c>
 800f2a4:	4b24      	ldr	r3, [pc, #144]	; (800f338 <_dtoa_r+0x318>)
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f2ac:	e6d1      	b.n	800f052 <_dtoa_r+0x32>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e7de      	b.n	800f270 <_dtoa_r+0x250>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	9308      	str	r3, [sp, #32]
 800f2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b8:	eb0a 0903 	add.w	r9, sl, r3
 800f2bc:	f109 0301 	add.w	r3, r9, #1
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	9301      	str	r3, [sp, #4]
 800f2c4:	bfb8      	it	lt
 800f2c6:	2301      	movlt	r3, #1
 800f2c8:	e7dd      	b.n	800f286 <_dtoa_r+0x266>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e7f2      	b.n	800f2b4 <_dtoa_r+0x294>
 800f2ce:	2501      	movs	r5, #1
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	9305      	str	r3, [sp, #20]
 800f2d4:	9508      	str	r5, [sp, #32]
 800f2d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2e0:	2312      	movs	r3, #18
 800f2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f2e4:	e7cf      	b.n	800f286 <_dtoa_r+0x266>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	9308      	str	r3, [sp, #32]
 800f2ea:	e7f4      	b.n	800f2d6 <_dtoa_r+0x2b6>
 800f2ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f2f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2f4:	464b      	mov	r3, r9
 800f2f6:	e7c6      	b.n	800f286 <_dtoa_r+0x266>
 800f2f8:	3101      	adds	r1, #1
 800f2fa:	6041      	str	r1, [r0, #4]
 800f2fc:	0052      	lsls	r2, r2, #1
 800f2fe:	e7c6      	b.n	800f28e <_dtoa_r+0x26e>
 800f300:	636f4361 	.word	0x636f4361
 800f304:	3fd287a7 	.word	0x3fd287a7
 800f308:	8b60c8b3 	.word	0x8b60c8b3
 800f30c:	3fc68a28 	.word	0x3fc68a28
 800f310:	509f79fb 	.word	0x509f79fb
 800f314:	3fd34413 	.word	0x3fd34413
 800f318:	08013ac6 	.word	0x08013ac6
 800f31c:	08013add 	.word	0x08013add
 800f320:	7ff00000 	.word	0x7ff00000
 800f324:	08013ac2 	.word	0x08013ac2
 800f328:	08013ab9 	.word	0x08013ab9
 800f32c:	0801393d 	.word	0x0801393d
 800f330:	3ff80000 	.word	0x3ff80000
 800f334:	08013c58 	.word	0x08013c58
 800f338:	08013b3c 	.word	0x08013b3c
 800f33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f33e:	9a00      	ldr	r2, [sp, #0]
 800f340:	601a      	str	r2, [r3, #0]
 800f342:	9b01      	ldr	r3, [sp, #4]
 800f344:	2b0e      	cmp	r3, #14
 800f346:	f200 80ad 	bhi.w	800f4a4 <_dtoa_r+0x484>
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	f000 80aa 	beq.w	800f4a4 <_dtoa_r+0x484>
 800f350:	f1ba 0f00 	cmp.w	sl, #0
 800f354:	dd36      	ble.n	800f3c4 <_dtoa_r+0x3a4>
 800f356:	4ac3      	ldr	r2, [pc, #780]	; (800f664 <_dtoa_r+0x644>)
 800f358:	f00a 030f 	and.w	r3, sl, #15
 800f35c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f360:	ed93 7b00 	vldr	d7, [r3]
 800f364:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f368:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f36c:	eeb0 8a47 	vmov.f32	s16, s14
 800f370:	eef0 8a67 	vmov.f32	s17, s15
 800f374:	d016      	beq.n	800f3a4 <_dtoa_r+0x384>
 800f376:	4bbc      	ldr	r3, [pc, #752]	; (800f668 <_dtoa_r+0x648>)
 800f378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f380:	f7f1 fa84 	bl	800088c <__aeabi_ddiv>
 800f384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f388:	f007 070f 	and.w	r7, r7, #15
 800f38c:	2503      	movs	r5, #3
 800f38e:	4eb6      	ldr	r6, [pc, #728]	; (800f668 <_dtoa_r+0x648>)
 800f390:	b957      	cbnz	r7, 800f3a8 <_dtoa_r+0x388>
 800f392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f396:	ec53 2b18 	vmov	r2, r3, d8
 800f39a:	f7f1 fa77 	bl	800088c <__aeabi_ddiv>
 800f39e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a2:	e029      	b.n	800f3f8 <_dtoa_r+0x3d8>
 800f3a4:	2502      	movs	r5, #2
 800f3a6:	e7f2      	b.n	800f38e <_dtoa_r+0x36e>
 800f3a8:	07f9      	lsls	r1, r7, #31
 800f3aa:	d508      	bpl.n	800f3be <_dtoa_r+0x39e>
 800f3ac:	ec51 0b18 	vmov	r0, r1, d8
 800f3b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3b4:	f7f1 f940 	bl	8000638 <__aeabi_dmul>
 800f3b8:	ec41 0b18 	vmov	d8, r0, r1
 800f3bc:	3501      	adds	r5, #1
 800f3be:	107f      	asrs	r7, r7, #1
 800f3c0:	3608      	adds	r6, #8
 800f3c2:	e7e5      	b.n	800f390 <_dtoa_r+0x370>
 800f3c4:	f000 80a6 	beq.w	800f514 <_dtoa_r+0x4f4>
 800f3c8:	f1ca 0600 	rsb	r6, sl, #0
 800f3cc:	4ba5      	ldr	r3, [pc, #660]	; (800f664 <_dtoa_r+0x644>)
 800f3ce:	4fa6      	ldr	r7, [pc, #664]	; (800f668 <_dtoa_r+0x648>)
 800f3d0:	f006 020f 	and.w	r2, r6, #15
 800f3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f3e0:	f7f1 f92a 	bl	8000638 <__aeabi_dmul>
 800f3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e8:	1136      	asrs	r6, r6, #4
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	2502      	movs	r5, #2
 800f3ee:	2e00      	cmp	r6, #0
 800f3f0:	f040 8085 	bne.w	800f4fe <_dtoa_r+0x4de>
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1d2      	bne.n	800f39e <_dtoa_r+0x37e>
 800f3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f000 808c 	beq.w	800f518 <_dtoa_r+0x4f8>
 800f400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f404:	4b99      	ldr	r3, [pc, #612]	; (800f66c <_dtoa_r+0x64c>)
 800f406:	2200      	movs	r2, #0
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	f7f1 fb86 	bl	8000b1c <__aeabi_dcmplt>
 800f410:	2800      	cmp	r0, #0
 800f412:	f000 8081 	beq.w	800f518 <_dtoa_r+0x4f8>
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d07d      	beq.n	800f518 <_dtoa_r+0x4f8>
 800f41c:	f1b9 0f00 	cmp.w	r9, #0
 800f420:	dd3c      	ble.n	800f49c <_dtoa_r+0x47c>
 800f422:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f426:	9307      	str	r3, [sp, #28]
 800f428:	2200      	movs	r2, #0
 800f42a:	4b91      	ldr	r3, [pc, #580]	; (800f670 <_dtoa_r+0x650>)
 800f42c:	4630      	mov	r0, r6
 800f42e:	4639      	mov	r1, r7
 800f430:	f7f1 f902 	bl	8000638 <__aeabi_dmul>
 800f434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f438:	3501      	adds	r5, #1
 800f43a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f43e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f442:	4628      	mov	r0, r5
 800f444:	f7f1 f88e 	bl	8000564 <__aeabi_i2d>
 800f448:	4632      	mov	r2, r6
 800f44a:	463b      	mov	r3, r7
 800f44c:	f7f1 f8f4 	bl	8000638 <__aeabi_dmul>
 800f450:	4b88      	ldr	r3, [pc, #544]	; (800f674 <_dtoa_r+0x654>)
 800f452:	2200      	movs	r2, #0
 800f454:	f7f0 ff3a 	bl	80002cc <__adddf3>
 800f458:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f460:	9303      	str	r3, [sp, #12]
 800f462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f464:	2b00      	cmp	r3, #0
 800f466:	d15c      	bne.n	800f522 <_dtoa_r+0x502>
 800f468:	4b83      	ldr	r3, [pc, #524]	; (800f678 <_dtoa_r+0x658>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	4630      	mov	r0, r6
 800f46e:	4639      	mov	r1, r7
 800f470:	f7f0 ff2a 	bl	80002c8 <__aeabi_dsub>
 800f474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f478:	4606      	mov	r6, r0
 800f47a:	460f      	mov	r7, r1
 800f47c:	f7f1 fb6c 	bl	8000b58 <__aeabi_dcmpgt>
 800f480:	2800      	cmp	r0, #0
 800f482:	f040 8296 	bne.w	800f9b2 <_dtoa_r+0x992>
 800f486:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f48a:	4630      	mov	r0, r6
 800f48c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f490:	4639      	mov	r1, r7
 800f492:	f7f1 fb43 	bl	8000b1c <__aeabi_dcmplt>
 800f496:	2800      	cmp	r0, #0
 800f498:	f040 8288 	bne.w	800f9ac <_dtoa_r+0x98c>
 800f49c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f4a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f2c0 8158 	blt.w	800f75c <_dtoa_r+0x73c>
 800f4ac:	f1ba 0f0e 	cmp.w	sl, #14
 800f4b0:	f300 8154 	bgt.w	800f75c <_dtoa_r+0x73c>
 800f4b4:	4b6b      	ldr	r3, [pc, #428]	; (800f664 <_dtoa_r+0x644>)
 800f4b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f4ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f280 80e3 	bge.w	800f68c <_dtoa_r+0x66c>
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f300 80df 	bgt.w	800f68c <_dtoa_r+0x66c>
 800f4ce:	f040 826d 	bne.w	800f9ac <_dtoa_r+0x98c>
 800f4d2:	4b69      	ldr	r3, [pc, #420]	; (800f678 <_dtoa_r+0x658>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	4640      	mov	r0, r8
 800f4d8:	4649      	mov	r1, r9
 800f4da:	f7f1 f8ad 	bl	8000638 <__aeabi_dmul>
 800f4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e2:	f7f1 fb2f 	bl	8000b44 <__aeabi_dcmpge>
 800f4e6:	9e01      	ldr	r6, [sp, #4]
 800f4e8:	4637      	mov	r7, r6
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	f040 8243 	bne.w	800f976 <_dtoa_r+0x956>
 800f4f0:	9d00      	ldr	r5, [sp, #0]
 800f4f2:	2331      	movs	r3, #49	; 0x31
 800f4f4:	f805 3b01 	strb.w	r3, [r5], #1
 800f4f8:	f10a 0a01 	add.w	sl, sl, #1
 800f4fc:	e23f      	b.n	800f97e <_dtoa_r+0x95e>
 800f4fe:	07f2      	lsls	r2, r6, #31
 800f500:	d505      	bpl.n	800f50e <_dtoa_r+0x4ee>
 800f502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f506:	f7f1 f897 	bl	8000638 <__aeabi_dmul>
 800f50a:	3501      	adds	r5, #1
 800f50c:	2301      	movs	r3, #1
 800f50e:	1076      	asrs	r6, r6, #1
 800f510:	3708      	adds	r7, #8
 800f512:	e76c      	b.n	800f3ee <_dtoa_r+0x3ce>
 800f514:	2502      	movs	r5, #2
 800f516:	e76f      	b.n	800f3f8 <_dtoa_r+0x3d8>
 800f518:	9b01      	ldr	r3, [sp, #4]
 800f51a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f51e:	930c      	str	r3, [sp, #48]	; 0x30
 800f520:	e78d      	b.n	800f43e <_dtoa_r+0x41e>
 800f522:	9900      	ldr	r1, [sp, #0]
 800f524:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f528:	4b4e      	ldr	r3, [pc, #312]	; (800f664 <_dtoa_r+0x644>)
 800f52a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f52e:	4401      	add	r1, r0
 800f530:	9102      	str	r1, [sp, #8]
 800f532:	9908      	ldr	r1, [sp, #32]
 800f534:	eeb0 8a47 	vmov.f32	s16, s14
 800f538:	eef0 8a67 	vmov.f32	s17, s15
 800f53c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f544:	2900      	cmp	r1, #0
 800f546:	d045      	beq.n	800f5d4 <_dtoa_r+0x5b4>
 800f548:	494c      	ldr	r1, [pc, #304]	; (800f67c <_dtoa_r+0x65c>)
 800f54a:	2000      	movs	r0, #0
 800f54c:	f7f1 f99e 	bl	800088c <__aeabi_ddiv>
 800f550:	ec53 2b18 	vmov	r2, r3, d8
 800f554:	f7f0 feb8 	bl	80002c8 <__aeabi_dsub>
 800f558:	9d00      	ldr	r5, [sp, #0]
 800f55a:	ec41 0b18 	vmov	d8, r0, r1
 800f55e:	4639      	mov	r1, r7
 800f560:	4630      	mov	r0, r6
 800f562:	f7f1 fb19 	bl	8000b98 <__aeabi_d2iz>
 800f566:	900c      	str	r0, [sp, #48]	; 0x30
 800f568:	f7f0 fffc 	bl	8000564 <__aeabi_i2d>
 800f56c:	4602      	mov	r2, r0
 800f56e:	460b      	mov	r3, r1
 800f570:	4630      	mov	r0, r6
 800f572:	4639      	mov	r1, r7
 800f574:	f7f0 fea8 	bl	80002c8 <__aeabi_dsub>
 800f578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f57a:	3330      	adds	r3, #48	; 0x30
 800f57c:	f805 3b01 	strb.w	r3, [r5], #1
 800f580:	ec53 2b18 	vmov	r2, r3, d8
 800f584:	4606      	mov	r6, r0
 800f586:	460f      	mov	r7, r1
 800f588:	f7f1 fac8 	bl	8000b1c <__aeabi_dcmplt>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d165      	bne.n	800f65c <_dtoa_r+0x63c>
 800f590:	4632      	mov	r2, r6
 800f592:	463b      	mov	r3, r7
 800f594:	4935      	ldr	r1, [pc, #212]	; (800f66c <_dtoa_r+0x64c>)
 800f596:	2000      	movs	r0, #0
 800f598:	f7f0 fe96 	bl	80002c8 <__aeabi_dsub>
 800f59c:	ec53 2b18 	vmov	r2, r3, d8
 800f5a0:	f7f1 fabc 	bl	8000b1c <__aeabi_dcmplt>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	f040 80b9 	bne.w	800f71c <_dtoa_r+0x6fc>
 800f5aa:	9b02      	ldr	r3, [sp, #8]
 800f5ac:	429d      	cmp	r5, r3
 800f5ae:	f43f af75 	beq.w	800f49c <_dtoa_r+0x47c>
 800f5b2:	4b2f      	ldr	r3, [pc, #188]	; (800f670 <_dtoa_r+0x650>)
 800f5b4:	ec51 0b18 	vmov	r0, r1, d8
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f7f1 f83d 	bl	8000638 <__aeabi_dmul>
 800f5be:	4b2c      	ldr	r3, [pc, #176]	; (800f670 <_dtoa_r+0x650>)
 800f5c0:	ec41 0b18 	vmov	d8, r0, r1
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f1 f835 	bl	8000638 <__aeabi_dmul>
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460f      	mov	r7, r1
 800f5d2:	e7c4      	b.n	800f55e <_dtoa_r+0x53e>
 800f5d4:	ec51 0b17 	vmov	r0, r1, d7
 800f5d8:	f7f1 f82e 	bl	8000638 <__aeabi_dmul>
 800f5dc:	9b02      	ldr	r3, [sp, #8]
 800f5de:	9d00      	ldr	r5, [sp, #0]
 800f5e0:	930c      	str	r3, [sp, #48]	; 0x30
 800f5e2:	ec41 0b18 	vmov	d8, r0, r1
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f7f1 fad5 	bl	8000b98 <__aeabi_d2iz>
 800f5ee:	9011      	str	r0, [sp, #68]	; 0x44
 800f5f0:	f7f0 ffb8 	bl	8000564 <__aeabi_i2d>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f0 fe64 	bl	80002c8 <__aeabi_dsub>
 800f600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f602:	3330      	adds	r3, #48	; 0x30
 800f604:	f805 3b01 	strb.w	r3, [r5], #1
 800f608:	9b02      	ldr	r3, [sp, #8]
 800f60a:	429d      	cmp	r5, r3
 800f60c:	4606      	mov	r6, r0
 800f60e:	460f      	mov	r7, r1
 800f610:	f04f 0200 	mov.w	r2, #0
 800f614:	d134      	bne.n	800f680 <_dtoa_r+0x660>
 800f616:	4b19      	ldr	r3, [pc, #100]	; (800f67c <_dtoa_r+0x65c>)
 800f618:	ec51 0b18 	vmov	r0, r1, d8
 800f61c:	f7f0 fe56 	bl	80002cc <__adddf3>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	4630      	mov	r0, r6
 800f626:	4639      	mov	r1, r7
 800f628:	f7f1 fa96 	bl	8000b58 <__aeabi_dcmpgt>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d175      	bne.n	800f71c <_dtoa_r+0x6fc>
 800f630:	ec53 2b18 	vmov	r2, r3, d8
 800f634:	4911      	ldr	r1, [pc, #68]	; (800f67c <_dtoa_r+0x65c>)
 800f636:	2000      	movs	r0, #0
 800f638:	f7f0 fe46 	bl	80002c8 <__aeabi_dsub>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4630      	mov	r0, r6
 800f642:	4639      	mov	r1, r7
 800f644:	f7f1 fa6a 	bl	8000b1c <__aeabi_dcmplt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	f43f af27 	beq.w	800f49c <_dtoa_r+0x47c>
 800f64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f650:	1e6b      	subs	r3, r5, #1
 800f652:	930c      	str	r3, [sp, #48]	; 0x30
 800f654:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f658:	2b30      	cmp	r3, #48	; 0x30
 800f65a:	d0f8      	beq.n	800f64e <_dtoa_r+0x62e>
 800f65c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f660:	e04a      	b.n	800f6f8 <_dtoa_r+0x6d8>
 800f662:	bf00      	nop
 800f664:	08013c58 	.word	0x08013c58
 800f668:	08013c30 	.word	0x08013c30
 800f66c:	3ff00000 	.word	0x3ff00000
 800f670:	40240000 	.word	0x40240000
 800f674:	401c0000 	.word	0x401c0000
 800f678:	40140000 	.word	0x40140000
 800f67c:	3fe00000 	.word	0x3fe00000
 800f680:	4baf      	ldr	r3, [pc, #700]	; (800f940 <_dtoa_r+0x920>)
 800f682:	f7f0 ffd9 	bl	8000638 <__aeabi_dmul>
 800f686:	4606      	mov	r6, r0
 800f688:	460f      	mov	r7, r1
 800f68a:	e7ac      	b.n	800f5e6 <_dtoa_r+0x5c6>
 800f68c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f690:	9d00      	ldr	r5, [sp, #0]
 800f692:	4642      	mov	r2, r8
 800f694:	464b      	mov	r3, r9
 800f696:	4630      	mov	r0, r6
 800f698:	4639      	mov	r1, r7
 800f69a:	f7f1 f8f7 	bl	800088c <__aeabi_ddiv>
 800f69e:	f7f1 fa7b 	bl	8000b98 <__aeabi_d2iz>
 800f6a2:	9002      	str	r0, [sp, #8]
 800f6a4:	f7f0 ff5e 	bl	8000564 <__aeabi_i2d>
 800f6a8:	4642      	mov	r2, r8
 800f6aa:	464b      	mov	r3, r9
 800f6ac:	f7f0 ffc4 	bl	8000638 <__aeabi_dmul>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f0 fe06 	bl	80002c8 <__aeabi_dsub>
 800f6bc:	9e02      	ldr	r6, [sp, #8]
 800f6be:	9f01      	ldr	r7, [sp, #4]
 800f6c0:	3630      	adds	r6, #48	; 0x30
 800f6c2:	f805 6b01 	strb.w	r6, [r5], #1
 800f6c6:	9e00      	ldr	r6, [sp, #0]
 800f6c8:	1bae      	subs	r6, r5, r6
 800f6ca:	42b7      	cmp	r7, r6
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	d137      	bne.n	800f742 <_dtoa_r+0x722>
 800f6d2:	f7f0 fdfb 	bl	80002cc <__adddf3>
 800f6d6:	4642      	mov	r2, r8
 800f6d8:	464b      	mov	r3, r9
 800f6da:	4606      	mov	r6, r0
 800f6dc:	460f      	mov	r7, r1
 800f6de:	f7f1 fa3b 	bl	8000b58 <__aeabi_dcmpgt>
 800f6e2:	b9c8      	cbnz	r0, 800f718 <_dtoa_r+0x6f8>
 800f6e4:	4642      	mov	r2, r8
 800f6e6:	464b      	mov	r3, r9
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	f7f1 fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 800f6f0:	b110      	cbz	r0, 800f6f8 <_dtoa_r+0x6d8>
 800f6f2:	9b02      	ldr	r3, [sp, #8]
 800f6f4:	07d9      	lsls	r1, r3, #31
 800f6f6:	d40f      	bmi.n	800f718 <_dtoa_r+0x6f8>
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	4659      	mov	r1, fp
 800f6fc:	f000 ff22 	bl	8010544 <_Bfree>
 800f700:	2300      	movs	r3, #0
 800f702:	702b      	strb	r3, [r5, #0]
 800f704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f706:	f10a 0001 	add.w	r0, sl, #1
 800f70a:	6018      	str	r0, [r3, #0]
 800f70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f43f acd8 	beq.w	800f0c4 <_dtoa_r+0xa4>
 800f714:	601d      	str	r5, [r3, #0]
 800f716:	e4d5      	b.n	800f0c4 <_dtoa_r+0xa4>
 800f718:	f8cd a01c 	str.w	sl, [sp, #28]
 800f71c:	462b      	mov	r3, r5
 800f71e:	461d      	mov	r5, r3
 800f720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f724:	2a39      	cmp	r2, #57	; 0x39
 800f726:	d108      	bne.n	800f73a <_dtoa_r+0x71a>
 800f728:	9a00      	ldr	r2, [sp, #0]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d1f7      	bne.n	800f71e <_dtoa_r+0x6fe>
 800f72e:	9a07      	ldr	r2, [sp, #28]
 800f730:	9900      	ldr	r1, [sp, #0]
 800f732:	3201      	adds	r2, #1
 800f734:	9207      	str	r2, [sp, #28]
 800f736:	2230      	movs	r2, #48	; 0x30
 800f738:	700a      	strb	r2, [r1, #0]
 800f73a:	781a      	ldrb	r2, [r3, #0]
 800f73c:	3201      	adds	r2, #1
 800f73e:	701a      	strb	r2, [r3, #0]
 800f740:	e78c      	b.n	800f65c <_dtoa_r+0x63c>
 800f742:	4b7f      	ldr	r3, [pc, #508]	; (800f940 <_dtoa_r+0x920>)
 800f744:	2200      	movs	r2, #0
 800f746:	f7f0 ff77 	bl	8000638 <__aeabi_dmul>
 800f74a:	2200      	movs	r2, #0
 800f74c:	2300      	movs	r3, #0
 800f74e:	4606      	mov	r6, r0
 800f750:	460f      	mov	r7, r1
 800f752:	f7f1 f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 800f756:	2800      	cmp	r0, #0
 800f758:	d09b      	beq.n	800f692 <_dtoa_r+0x672>
 800f75a:	e7cd      	b.n	800f6f8 <_dtoa_r+0x6d8>
 800f75c:	9a08      	ldr	r2, [sp, #32]
 800f75e:	2a00      	cmp	r2, #0
 800f760:	f000 80c4 	beq.w	800f8ec <_dtoa_r+0x8cc>
 800f764:	9a05      	ldr	r2, [sp, #20]
 800f766:	2a01      	cmp	r2, #1
 800f768:	f300 80a8 	bgt.w	800f8bc <_dtoa_r+0x89c>
 800f76c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f76e:	2a00      	cmp	r2, #0
 800f770:	f000 80a0 	beq.w	800f8b4 <_dtoa_r+0x894>
 800f774:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f778:	9e06      	ldr	r6, [sp, #24]
 800f77a:	4645      	mov	r5, r8
 800f77c:	9a04      	ldr	r2, [sp, #16]
 800f77e:	2101      	movs	r1, #1
 800f780:	441a      	add	r2, r3
 800f782:	4620      	mov	r0, r4
 800f784:	4498      	add	r8, r3
 800f786:	9204      	str	r2, [sp, #16]
 800f788:	f000 ffe2 	bl	8010750 <__i2b>
 800f78c:	4607      	mov	r7, r0
 800f78e:	2d00      	cmp	r5, #0
 800f790:	dd0b      	ble.n	800f7aa <_dtoa_r+0x78a>
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	dd08      	ble.n	800f7aa <_dtoa_r+0x78a>
 800f798:	42ab      	cmp	r3, r5
 800f79a:	9a04      	ldr	r2, [sp, #16]
 800f79c:	bfa8      	it	ge
 800f79e:	462b      	movge	r3, r5
 800f7a0:	eba8 0803 	sub.w	r8, r8, r3
 800f7a4:	1aed      	subs	r5, r5, r3
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	9b06      	ldr	r3, [sp, #24]
 800f7ac:	b1fb      	cbz	r3, 800f7ee <_dtoa_r+0x7ce>
 800f7ae:	9b08      	ldr	r3, [sp, #32]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 809f 	beq.w	800f8f4 <_dtoa_r+0x8d4>
 800f7b6:	2e00      	cmp	r6, #0
 800f7b8:	dd11      	ble.n	800f7de <_dtoa_r+0x7be>
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	4632      	mov	r2, r6
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f001 f882 	bl	80108c8 <__pow5mult>
 800f7c4:	465a      	mov	r2, fp
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	4607      	mov	r7, r0
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 ffd6 	bl	801077c <__multiply>
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	9007      	str	r0, [sp, #28]
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f000 feb5 	bl	8010544 <_Bfree>
 800f7da:	9b07      	ldr	r3, [sp, #28]
 800f7dc:	469b      	mov	fp, r3
 800f7de:	9b06      	ldr	r3, [sp, #24]
 800f7e0:	1b9a      	subs	r2, r3, r6
 800f7e2:	d004      	beq.n	800f7ee <_dtoa_r+0x7ce>
 800f7e4:	4659      	mov	r1, fp
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f001 f86e 	bl	80108c8 <__pow5mult>
 800f7ec:	4683      	mov	fp, r0
 800f7ee:	2101      	movs	r1, #1
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f000 ffad 	bl	8010750 <__i2b>
 800f7f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	dd7c      	ble.n	800f8f8 <_dtoa_r+0x8d8>
 800f7fe:	461a      	mov	r2, r3
 800f800:	4601      	mov	r1, r0
 800f802:	4620      	mov	r0, r4
 800f804:	f001 f860 	bl	80108c8 <__pow5mult>
 800f808:	9b05      	ldr	r3, [sp, #20]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	4606      	mov	r6, r0
 800f80e:	dd76      	ble.n	800f8fe <_dtoa_r+0x8de>
 800f810:	2300      	movs	r3, #0
 800f812:	9306      	str	r3, [sp, #24]
 800f814:	6933      	ldr	r3, [r6, #16]
 800f816:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f81a:	6918      	ldr	r0, [r3, #16]
 800f81c:	f000 ff48 	bl	80106b0 <__hi0bits>
 800f820:	f1c0 0020 	rsb	r0, r0, #32
 800f824:	9b04      	ldr	r3, [sp, #16]
 800f826:	4418      	add	r0, r3
 800f828:	f010 001f 	ands.w	r0, r0, #31
 800f82c:	f000 8086 	beq.w	800f93c <_dtoa_r+0x91c>
 800f830:	f1c0 0320 	rsb	r3, r0, #32
 800f834:	2b04      	cmp	r3, #4
 800f836:	dd7f      	ble.n	800f938 <_dtoa_r+0x918>
 800f838:	f1c0 001c 	rsb	r0, r0, #28
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	4403      	add	r3, r0
 800f840:	4480      	add	r8, r0
 800f842:	4405      	add	r5, r0
 800f844:	9304      	str	r3, [sp, #16]
 800f846:	f1b8 0f00 	cmp.w	r8, #0
 800f84a:	dd05      	ble.n	800f858 <_dtoa_r+0x838>
 800f84c:	4659      	mov	r1, fp
 800f84e:	4642      	mov	r2, r8
 800f850:	4620      	mov	r0, r4
 800f852:	f001 f893 	bl	801097c <__lshift>
 800f856:	4683      	mov	fp, r0
 800f858:	9b04      	ldr	r3, [sp, #16]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	dd05      	ble.n	800f86a <_dtoa_r+0x84a>
 800f85e:	4631      	mov	r1, r6
 800f860:	461a      	mov	r2, r3
 800f862:	4620      	mov	r0, r4
 800f864:	f001 f88a 	bl	801097c <__lshift>
 800f868:	4606      	mov	r6, r0
 800f86a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d069      	beq.n	800f944 <_dtoa_r+0x924>
 800f870:	4631      	mov	r1, r6
 800f872:	4658      	mov	r0, fp
 800f874:	f001 f8ee 	bl	8010a54 <__mcmp>
 800f878:	2800      	cmp	r0, #0
 800f87a:	da63      	bge.n	800f944 <_dtoa_r+0x924>
 800f87c:	2300      	movs	r3, #0
 800f87e:	4659      	mov	r1, fp
 800f880:	220a      	movs	r2, #10
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fe80 	bl	8010588 <__multadd>
 800f888:	9b08      	ldr	r3, [sp, #32]
 800f88a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f88e:	4683      	mov	fp, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	f000 818f 	beq.w	800fbb4 <_dtoa_r+0xb94>
 800f896:	4639      	mov	r1, r7
 800f898:	2300      	movs	r3, #0
 800f89a:	220a      	movs	r2, #10
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fe73 	bl	8010588 <__multadd>
 800f8a2:	f1b9 0f00 	cmp.w	r9, #0
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	f300 808e 	bgt.w	800f9c8 <_dtoa_r+0x9a8>
 800f8ac:	9b05      	ldr	r3, [sp, #20]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	dc50      	bgt.n	800f954 <_dtoa_r+0x934>
 800f8b2:	e089      	b.n	800f9c8 <_dtoa_r+0x9a8>
 800f8b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f8ba:	e75d      	b.n	800f778 <_dtoa_r+0x758>
 800f8bc:	9b01      	ldr	r3, [sp, #4]
 800f8be:	1e5e      	subs	r6, r3, #1
 800f8c0:	9b06      	ldr	r3, [sp, #24]
 800f8c2:	42b3      	cmp	r3, r6
 800f8c4:	bfbf      	itttt	lt
 800f8c6:	9b06      	ldrlt	r3, [sp, #24]
 800f8c8:	9606      	strlt	r6, [sp, #24]
 800f8ca:	1af2      	sublt	r2, r6, r3
 800f8cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f8ce:	bfb6      	itet	lt
 800f8d0:	189b      	addlt	r3, r3, r2
 800f8d2:	1b9e      	subge	r6, r3, r6
 800f8d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f8d6:	9b01      	ldr	r3, [sp, #4]
 800f8d8:	bfb8      	it	lt
 800f8da:	2600      	movlt	r6, #0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bfb5      	itete	lt
 800f8e0:	eba8 0503 	sublt.w	r5, r8, r3
 800f8e4:	9b01      	ldrge	r3, [sp, #4]
 800f8e6:	2300      	movlt	r3, #0
 800f8e8:	4645      	movge	r5, r8
 800f8ea:	e747      	b.n	800f77c <_dtoa_r+0x75c>
 800f8ec:	9e06      	ldr	r6, [sp, #24]
 800f8ee:	9f08      	ldr	r7, [sp, #32]
 800f8f0:	4645      	mov	r5, r8
 800f8f2:	e74c      	b.n	800f78e <_dtoa_r+0x76e>
 800f8f4:	9a06      	ldr	r2, [sp, #24]
 800f8f6:	e775      	b.n	800f7e4 <_dtoa_r+0x7c4>
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	dc18      	bgt.n	800f930 <_dtoa_r+0x910>
 800f8fe:	9b02      	ldr	r3, [sp, #8]
 800f900:	b9b3      	cbnz	r3, 800f930 <_dtoa_r+0x910>
 800f902:	9b03      	ldr	r3, [sp, #12]
 800f904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f908:	b9a3      	cbnz	r3, 800f934 <_dtoa_r+0x914>
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f910:	0d1b      	lsrs	r3, r3, #20
 800f912:	051b      	lsls	r3, r3, #20
 800f914:	b12b      	cbz	r3, 800f922 <_dtoa_r+0x902>
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	3301      	adds	r3, #1
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	f108 0801 	add.w	r8, r8, #1
 800f920:	2301      	movs	r3, #1
 800f922:	9306      	str	r3, [sp, #24]
 800f924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f926:	2b00      	cmp	r3, #0
 800f928:	f47f af74 	bne.w	800f814 <_dtoa_r+0x7f4>
 800f92c:	2001      	movs	r0, #1
 800f92e:	e779      	b.n	800f824 <_dtoa_r+0x804>
 800f930:	2300      	movs	r3, #0
 800f932:	e7f6      	b.n	800f922 <_dtoa_r+0x902>
 800f934:	9b02      	ldr	r3, [sp, #8]
 800f936:	e7f4      	b.n	800f922 <_dtoa_r+0x902>
 800f938:	d085      	beq.n	800f846 <_dtoa_r+0x826>
 800f93a:	4618      	mov	r0, r3
 800f93c:	301c      	adds	r0, #28
 800f93e:	e77d      	b.n	800f83c <_dtoa_r+0x81c>
 800f940:	40240000 	.word	0x40240000
 800f944:	9b01      	ldr	r3, [sp, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	dc38      	bgt.n	800f9bc <_dtoa_r+0x99c>
 800f94a:	9b05      	ldr	r3, [sp, #20]
 800f94c:	2b02      	cmp	r3, #2
 800f94e:	dd35      	ble.n	800f9bc <_dtoa_r+0x99c>
 800f950:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f954:	f1b9 0f00 	cmp.w	r9, #0
 800f958:	d10d      	bne.n	800f976 <_dtoa_r+0x956>
 800f95a:	4631      	mov	r1, r6
 800f95c:	464b      	mov	r3, r9
 800f95e:	2205      	movs	r2, #5
 800f960:	4620      	mov	r0, r4
 800f962:	f000 fe11 	bl	8010588 <__multadd>
 800f966:	4601      	mov	r1, r0
 800f968:	4606      	mov	r6, r0
 800f96a:	4658      	mov	r0, fp
 800f96c:	f001 f872 	bl	8010a54 <__mcmp>
 800f970:	2800      	cmp	r0, #0
 800f972:	f73f adbd 	bgt.w	800f4f0 <_dtoa_r+0x4d0>
 800f976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f978:	9d00      	ldr	r5, [sp, #0]
 800f97a:	ea6f 0a03 	mvn.w	sl, r3
 800f97e:	f04f 0800 	mov.w	r8, #0
 800f982:	4631      	mov	r1, r6
 800f984:	4620      	mov	r0, r4
 800f986:	f000 fddd 	bl	8010544 <_Bfree>
 800f98a:	2f00      	cmp	r7, #0
 800f98c:	f43f aeb4 	beq.w	800f6f8 <_dtoa_r+0x6d8>
 800f990:	f1b8 0f00 	cmp.w	r8, #0
 800f994:	d005      	beq.n	800f9a2 <_dtoa_r+0x982>
 800f996:	45b8      	cmp	r8, r7
 800f998:	d003      	beq.n	800f9a2 <_dtoa_r+0x982>
 800f99a:	4641      	mov	r1, r8
 800f99c:	4620      	mov	r0, r4
 800f99e:	f000 fdd1 	bl	8010544 <_Bfree>
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f000 fdcd 	bl	8010544 <_Bfree>
 800f9aa:	e6a5      	b.n	800f6f8 <_dtoa_r+0x6d8>
 800f9ac:	2600      	movs	r6, #0
 800f9ae:	4637      	mov	r7, r6
 800f9b0:	e7e1      	b.n	800f976 <_dtoa_r+0x956>
 800f9b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f9b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f9b8:	4637      	mov	r7, r6
 800f9ba:	e599      	b.n	800f4f0 <_dtoa_r+0x4d0>
 800f9bc:	9b08      	ldr	r3, [sp, #32]
 800f9be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f000 80fd 	beq.w	800fbc2 <_dtoa_r+0xba2>
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	dd05      	ble.n	800f9d8 <_dtoa_r+0x9b8>
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f000 ffd3 	bl	801097c <__lshift>
 800f9d6:	4607      	mov	r7, r0
 800f9d8:	9b06      	ldr	r3, [sp, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d05c      	beq.n	800fa98 <_dtoa_r+0xa78>
 800f9de:	6879      	ldr	r1, [r7, #4]
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 fd6f 	bl	80104c4 <_Balloc>
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	b928      	cbnz	r0, 800f9f6 <_dtoa_r+0x9d6>
 800f9ea:	4b80      	ldr	r3, [pc, #512]	; (800fbec <_dtoa_r+0xbcc>)
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f9f2:	f7ff bb2e 	b.w	800f052 <_dtoa_r+0x32>
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	3202      	adds	r2, #2
 800f9fa:	0092      	lsls	r2, r2, #2
 800f9fc:	f107 010c 	add.w	r1, r7, #12
 800fa00:	300c      	adds	r0, #12
 800fa02:	f7fd fb77 	bl	800d0f4 <memcpy>
 800fa06:	2201      	movs	r2, #1
 800fa08:	4629      	mov	r1, r5
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 ffb6 	bl	801097c <__lshift>
 800fa10:	9b00      	ldr	r3, [sp, #0]
 800fa12:	3301      	adds	r3, #1
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	9b00      	ldr	r3, [sp, #0]
 800fa18:	444b      	add	r3, r9
 800fa1a:	9307      	str	r3, [sp, #28]
 800fa1c:	9b02      	ldr	r3, [sp, #8]
 800fa1e:	f003 0301 	and.w	r3, r3, #1
 800fa22:	46b8      	mov	r8, r7
 800fa24:	9306      	str	r3, [sp, #24]
 800fa26:	4607      	mov	r7, r0
 800fa28:	9b01      	ldr	r3, [sp, #4]
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	4658      	mov	r0, fp
 800fa30:	9302      	str	r3, [sp, #8]
 800fa32:	f7ff fa69 	bl	800ef08 <quorem>
 800fa36:	4603      	mov	r3, r0
 800fa38:	3330      	adds	r3, #48	; 0x30
 800fa3a:	9004      	str	r0, [sp, #16]
 800fa3c:	4641      	mov	r1, r8
 800fa3e:	4658      	mov	r0, fp
 800fa40:	9308      	str	r3, [sp, #32]
 800fa42:	f001 f807 	bl	8010a54 <__mcmp>
 800fa46:	463a      	mov	r2, r7
 800fa48:	4681      	mov	r9, r0
 800fa4a:	4631      	mov	r1, r6
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f001 f81d 	bl	8010a8c <__mdiff>
 800fa52:	68c2      	ldr	r2, [r0, #12]
 800fa54:	9b08      	ldr	r3, [sp, #32]
 800fa56:	4605      	mov	r5, r0
 800fa58:	bb02      	cbnz	r2, 800fa9c <_dtoa_r+0xa7c>
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	4658      	mov	r0, fp
 800fa5e:	f000 fff9 	bl	8010a54 <__mcmp>
 800fa62:	9b08      	ldr	r3, [sp, #32]
 800fa64:	4602      	mov	r2, r0
 800fa66:	4629      	mov	r1, r5
 800fa68:	4620      	mov	r0, r4
 800fa6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fa6e:	f000 fd69 	bl	8010544 <_Bfree>
 800fa72:	9b05      	ldr	r3, [sp, #20]
 800fa74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa76:	9d01      	ldr	r5, [sp, #4]
 800fa78:	ea43 0102 	orr.w	r1, r3, r2
 800fa7c:	9b06      	ldr	r3, [sp, #24]
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	9b08      	ldr	r3, [sp, #32]
 800fa82:	d10d      	bne.n	800faa0 <_dtoa_r+0xa80>
 800fa84:	2b39      	cmp	r3, #57	; 0x39
 800fa86:	d029      	beq.n	800fadc <_dtoa_r+0xabc>
 800fa88:	f1b9 0f00 	cmp.w	r9, #0
 800fa8c:	dd01      	ble.n	800fa92 <_dtoa_r+0xa72>
 800fa8e:	9b04      	ldr	r3, [sp, #16]
 800fa90:	3331      	adds	r3, #49	; 0x31
 800fa92:	9a02      	ldr	r2, [sp, #8]
 800fa94:	7013      	strb	r3, [r2, #0]
 800fa96:	e774      	b.n	800f982 <_dtoa_r+0x962>
 800fa98:	4638      	mov	r0, r7
 800fa9a:	e7b9      	b.n	800fa10 <_dtoa_r+0x9f0>
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	e7e2      	b.n	800fa66 <_dtoa_r+0xa46>
 800faa0:	f1b9 0f00 	cmp.w	r9, #0
 800faa4:	db06      	blt.n	800fab4 <_dtoa_r+0xa94>
 800faa6:	9905      	ldr	r1, [sp, #20]
 800faa8:	ea41 0909 	orr.w	r9, r1, r9
 800faac:	9906      	ldr	r1, [sp, #24]
 800faae:	ea59 0101 	orrs.w	r1, r9, r1
 800fab2:	d120      	bne.n	800faf6 <_dtoa_r+0xad6>
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	ddec      	ble.n	800fa92 <_dtoa_r+0xa72>
 800fab8:	4659      	mov	r1, fp
 800faba:	2201      	movs	r2, #1
 800fabc:	4620      	mov	r0, r4
 800fabe:	9301      	str	r3, [sp, #4]
 800fac0:	f000 ff5c 	bl	801097c <__lshift>
 800fac4:	4631      	mov	r1, r6
 800fac6:	4683      	mov	fp, r0
 800fac8:	f000 ffc4 	bl	8010a54 <__mcmp>
 800facc:	2800      	cmp	r0, #0
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	dc02      	bgt.n	800fad8 <_dtoa_r+0xab8>
 800fad2:	d1de      	bne.n	800fa92 <_dtoa_r+0xa72>
 800fad4:	07da      	lsls	r2, r3, #31
 800fad6:	d5dc      	bpl.n	800fa92 <_dtoa_r+0xa72>
 800fad8:	2b39      	cmp	r3, #57	; 0x39
 800fada:	d1d8      	bne.n	800fa8e <_dtoa_r+0xa6e>
 800fadc:	9a02      	ldr	r2, [sp, #8]
 800fade:	2339      	movs	r3, #57	; 0x39
 800fae0:	7013      	strb	r3, [r2, #0]
 800fae2:	462b      	mov	r3, r5
 800fae4:	461d      	mov	r5, r3
 800fae6:	3b01      	subs	r3, #1
 800fae8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800faec:	2a39      	cmp	r2, #57	; 0x39
 800faee:	d050      	beq.n	800fb92 <_dtoa_r+0xb72>
 800faf0:	3201      	adds	r2, #1
 800faf2:	701a      	strb	r2, [r3, #0]
 800faf4:	e745      	b.n	800f982 <_dtoa_r+0x962>
 800faf6:	2a00      	cmp	r2, #0
 800faf8:	dd03      	ble.n	800fb02 <_dtoa_r+0xae2>
 800fafa:	2b39      	cmp	r3, #57	; 0x39
 800fafc:	d0ee      	beq.n	800fadc <_dtoa_r+0xabc>
 800fafe:	3301      	adds	r3, #1
 800fb00:	e7c7      	b.n	800fa92 <_dtoa_r+0xa72>
 800fb02:	9a01      	ldr	r2, [sp, #4]
 800fb04:	9907      	ldr	r1, [sp, #28]
 800fb06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb0a:	428a      	cmp	r2, r1
 800fb0c:	d02a      	beq.n	800fb64 <_dtoa_r+0xb44>
 800fb0e:	4659      	mov	r1, fp
 800fb10:	2300      	movs	r3, #0
 800fb12:	220a      	movs	r2, #10
 800fb14:	4620      	mov	r0, r4
 800fb16:	f000 fd37 	bl	8010588 <__multadd>
 800fb1a:	45b8      	cmp	r8, r7
 800fb1c:	4683      	mov	fp, r0
 800fb1e:	f04f 0300 	mov.w	r3, #0
 800fb22:	f04f 020a 	mov.w	r2, #10
 800fb26:	4641      	mov	r1, r8
 800fb28:	4620      	mov	r0, r4
 800fb2a:	d107      	bne.n	800fb3c <_dtoa_r+0xb1c>
 800fb2c:	f000 fd2c 	bl	8010588 <__multadd>
 800fb30:	4680      	mov	r8, r0
 800fb32:	4607      	mov	r7, r0
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	3301      	adds	r3, #1
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	e775      	b.n	800fa28 <_dtoa_r+0xa08>
 800fb3c:	f000 fd24 	bl	8010588 <__multadd>
 800fb40:	4639      	mov	r1, r7
 800fb42:	4680      	mov	r8, r0
 800fb44:	2300      	movs	r3, #0
 800fb46:	220a      	movs	r2, #10
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f000 fd1d 	bl	8010588 <__multadd>
 800fb4e:	4607      	mov	r7, r0
 800fb50:	e7f0      	b.n	800fb34 <_dtoa_r+0xb14>
 800fb52:	f1b9 0f00 	cmp.w	r9, #0
 800fb56:	9a00      	ldr	r2, [sp, #0]
 800fb58:	bfcc      	ite	gt
 800fb5a:	464d      	movgt	r5, r9
 800fb5c:	2501      	movle	r5, #1
 800fb5e:	4415      	add	r5, r2
 800fb60:	f04f 0800 	mov.w	r8, #0
 800fb64:	4659      	mov	r1, fp
 800fb66:	2201      	movs	r2, #1
 800fb68:	4620      	mov	r0, r4
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	f000 ff06 	bl	801097c <__lshift>
 800fb70:	4631      	mov	r1, r6
 800fb72:	4683      	mov	fp, r0
 800fb74:	f000 ff6e 	bl	8010a54 <__mcmp>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	dcb2      	bgt.n	800fae2 <_dtoa_r+0xac2>
 800fb7c:	d102      	bne.n	800fb84 <_dtoa_r+0xb64>
 800fb7e:	9b01      	ldr	r3, [sp, #4]
 800fb80:	07db      	lsls	r3, r3, #31
 800fb82:	d4ae      	bmi.n	800fae2 <_dtoa_r+0xac2>
 800fb84:	462b      	mov	r3, r5
 800fb86:	461d      	mov	r5, r3
 800fb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb8c:	2a30      	cmp	r2, #48	; 0x30
 800fb8e:	d0fa      	beq.n	800fb86 <_dtoa_r+0xb66>
 800fb90:	e6f7      	b.n	800f982 <_dtoa_r+0x962>
 800fb92:	9a00      	ldr	r2, [sp, #0]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d1a5      	bne.n	800fae4 <_dtoa_r+0xac4>
 800fb98:	f10a 0a01 	add.w	sl, sl, #1
 800fb9c:	2331      	movs	r3, #49	; 0x31
 800fb9e:	e779      	b.n	800fa94 <_dtoa_r+0xa74>
 800fba0:	4b13      	ldr	r3, [pc, #76]	; (800fbf0 <_dtoa_r+0xbd0>)
 800fba2:	f7ff baaf 	b.w	800f104 <_dtoa_r+0xe4>
 800fba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f47f aa86 	bne.w	800f0ba <_dtoa_r+0x9a>
 800fbae:	4b11      	ldr	r3, [pc, #68]	; (800fbf4 <_dtoa_r+0xbd4>)
 800fbb0:	f7ff baa8 	b.w	800f104 <_dtoa_r+0xe4>
 800fbb4:	f1b9 0f00 	cmp.w	r9, #0
 800fbb8:	dc03      	bgt.n	800fbc2 <_dtoa_r+0xba2>
 800fbba:	9b05      	ldr	r3, [sp, #20]
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	f73f aec9 	bgt.w	800f954 <_dtoa_r+0x934>
 800fbc2:	9d00      	ldr	r5, [sp, #0]
 800fbc4:	4631      	mov	r1, r6
 800fbc6:	4658      	mov	r0, fp
 800fbc8:	f7ff f99e 	bl	800ef08 <quorem>
 800fbcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fbd0:	f805 3b01 	strb.w	r3, [r5], #1
 800fbd4:	9a00      	ldr	r2, [sp, #0]
 800fbd6:	1aaa      	subs	r2, r5, r2
 800fbd8:	4591      	cmp	r9, r2
 800fbda:	ddba      	ble.n	800fb52 <_dtoa_r+0xb32>
 800fbdc:	4659      	mov	r1, fp
 800fbde:	2300      	movs	r3, #0
 800fbe0:	220a      	movs	r2, #10
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f000 fcd0 	bl	8010588 <__multadd>
 800fbe8:	4683      	mov	fp, r0
 800fbea:	e7eb      	b.n	800fbc4 <_dtoa_r+0xba4>
 800fbec:	08013b3c 	.word	0x08013b3c
 800fbf0:	0801393c 	.word	0x0801393c
 800fbf4:	08013ab9 	.word	0x08013ab9

0800fbf8 <__sflush_r>:
 800fbf8:	898a      	ldrh	r2, [r1, #12]
 800fbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfe:	4605      	mov	r5, r0
 800fc00:	0710      	lsls	r0, r2, #28
 800fc02:	460c      	mov	r4, r1
 800fc04:	d458      	bmi.n	800fcb8 <__sflush_r+0xc0>
 800fc06:	684b      	ldr	r3, [r1, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	dc05      	bgt.n	800fc18 <__sflush_r+0x20>
 800fc0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	dc02      	bgt.n	800fc18 <__sflush_r+0x20>
 800fc12:	2000      	movs	r0, #0
 800fc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc1a:	2e00      	cmp	r6, #0
 800fc1c:	d0f9      	beq.n	800fc12 <__sflush_r+0x1a>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc24:	682f      	ldr	r7, [r5, #0]
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	d032      	beq.n	800fc90 <__sflush_r+0x98>
 800fc2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	075a      	lsls	r2, r3, #29
 800fc30:	d505      	bpl.n	800fc3e <__sflush_r+0x46>
 800fc32:	6863      	ldr	r3, [r4, #4]
 800fc34:	1ac0      	subs	r0, r0, r3
 800fc36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc38:	b10b      	cbz	r3, 800fc3e <__sflush_r+0x46>
 800fc3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc3c:	1ac0      	subs	r0, r0, r3
 800fc3e:	2300      	movs	r3, #0
 800fc40:	4602      	mov	r2, r0
 800fc42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc44:	6a21      	ldr	r1, [r4, #32]
 800fc46:	4628      	mov	r0, r5
 800fc48:	47b0      	blx	r6
 800fc4a:	1c43      	adds	r3, r0, #1
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	d106      	bne.n	800fc5e <__sflush_r+0x66>
 800fc50:	6829      	ldr	r1, [r5, #0]
 800fc52:	291d      	cmp	r1, #29
 800fc54:	d82c      	bhi.n	800fcb0 <__sflush_r+0xb8>
 800fc56:	4a2a      	ldr	r2, [pc, #168]	; (800fd00 <__sflush_r+0x108>)
 800fc58:	40ca      	lsrs	r2, r1
 800fc5a:	07d6      	lsls	r6, r2, #31
 800fc5c:	d528      	bpl.n	800fcb0 <__sflush_r+0xb8>
 800fc5e:	2200      	movs	r2, #0
 800fc60:	6062      	str	r2, [r4, #4]
 800fc62:	04d9      	lsls	r1, r3, #19
 800fc64:	6922      	ldr	r2, [r4, #16]
 800fc66:	6022      	str	r2, [r4, #0]
 800fc68:	d504      	bpl.n	800fc74 <__sflush_r+0x7c>
 800fc6a:	1c42      	adds	r2, r0, #1
 800fc6c:	d101      	bne.n	800fc72 <__sflush_r+0x7a>
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	b903      	cbnz	r3, 800fc74 <__sflush_r+0x7c>
 800fc72:	6560      	str	r0, [r4, #84]	; 0x54
 800fc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc76:	602f      	str	r7, [r5, #0]
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	d0ca      	beq.n	800fc12 <__sflush_r+0x1a>
 800fc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc80:	4299      	cmp	r1, r3
 800fc82:	d002      	beq.n	800fc8a <__sflush_r+0x92>
 800fc84:	4628      	mov	r0, r5
 800fc86:	f7fd fa5b 	bl	800d140 <_free_r>
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	6360      	str	r0, [r4, #52]	; 0x34
 800fc8e:	e7c1      	b.n	800fc14 <__sflush_r+0x1c>
 800fc90:	6a21      	ldr	r1, [r4, #32]
 800fc92:	2301      	movs	r3, #1
 800fc94:	4628      	mov	r0, r5
 800fc96:	47b0      	blx	r6
 800fc98:	1c41      	adds	r1, r0, #1
 800fc9a:	d1c7      	bne.n	800fc2c <__sflush_r+0x34>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0c4      	beq.n	800fc2c <__sflush_r+0x34>
 800fca2:	2b1d      	cmp	r3, #29
 800fca4:	d001      	beq.n	800fcaa <__sflush_r+0xb2>
 800fca6:	2b16      	cmp	r3, #22
 800fca8:	d101      	bne.n	800fcae <__sflush_r+0xb6>
 800fcaa:	602f      	str	r7, [r5, #0]
 800fcac:	e7b1      	b.n	800fc12 <__sflush_r+0x1a>
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	e7ad      	b.n	800fc14 <__sflush_r+0x1c>
 800fcb8:	690f      	ldr	r7, [r1, #16]
 800fcba:	2f00      	cmp	r7, #0
 800fcbc:	d0a9      	beq.n	800fc12 <__sflush_r+0x1a>
 800fcbe:	0793      	lsls	r3, r2, #30
 800fcc0:	680e      	ldr	r6, [r1, #0]
 800fcc2:	bf08      	it	eq
 800fcc4:	694b      	ldreq	r3, [r1, #20]
 800fcc6:	600f      	str	r7, [r1, #0]
 800fcc8:	bf18      	it	ne
 800fcca:	2300      	movne	r3, #0
 800fccc:	eba6 0807 	sub.w	r8, r6, r7
 800fcd0:	608b      	str	r3, [r1, #8]
 800fcd2:	f1b8 0f00 	cmp.w	r8, #0
 800fcd6:	dd9c      	ble.n	800fc12 <__sflush_r+0x1a>
 800fcd8:	6a21      	ldr	r1, [r4, #32]
 800fcda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcdc:	4643      	mov	r3, r8
 800fcde:	463a      	mov	r2, r7
 800fce0:	4628      	mov	r0, r5
 800fce2:	47b0      	blx	r6
 800fce4:	2800      	cmp	r0, #0
 800fce6:	dc06      	bgt.n	800fcf6 <__sflush_r+0xfe>
 800fce8:	89a3      	ldrh	r3, [r4, #12]
 800fcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcee:	81a3      	strh	r3, [r4, #12]
 800fcf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcf4:	e78e      	b.n	800fc14 <__sflush_r+0x1c>
 800fcf6:	4407      	add	r7, r0
 800fcf8:	eba8 0800 	sub.w	r8, r8, r0
 800fcfc:	e7e9      	b.n	800fcd2 <__sflush_r+0xda>
 800fcfe:	bf00      	nop
 800fd00:	20400001 	.word	0x20400001

0800fd04 <_fflush_r>:
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	690b      	ldr	r3, [r1, #16]
 800fd08:	4605      	mov	r5, r0
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	b913      	cbnz	r3, 800fd14 <_fflush_r+0x10>
 800fd0e:	2500      	movs	r5, #0
 800fd10:	4628      	mov	r0, r5
 800fd12:	bd38      	pop	{r3, r4, r5, pc}
 800fd14:	b118      	cbz	r0, 800fd1e <_fflush_r+0x1a>
 800fd16:	6983      	ldr	r3, [r0, #24]
 800fd18:	b90b      	cbnz	r3, 800fd1e <_fflush_r+0x1a>
 800fd1a:	f7fd f91d 	bl	800cf58 <__sinit>
 800fd1e:	4b14      	ldr	r3, [pc, #80]	; (800fd70 <_fflush_r+0x6c>)
 800fd20:	429c      	cmp	r4, r3
 800fd22:	d11b      	bne.n	800fd5c <_fflush_r+0x58>
 800fd24:	686c      	ldr	r4, [r5, #4]
 800fd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0ef      	beq.n	800fd0e <_fflush_r+0xa>
 800fd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd30:	07d0      	lsls	r0, r2, #31
 800fd32:	d404      	bmi.n	800fd3e <_fflush_r+0x3a>
 800fd34:	0599      	lsls	r1, r3, #22
 800fd36:	d402      	bmi.n	800fd3e <_fflush_r+0x3a>
 800fd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd3a:	f7fd f9d0 	bl	800d0de <__retarget_lock_acquire_recursive>
 800fd3e:	4628      	mov	r0, r5
 800fd40:	4621      	mov	r1, r4
 800fd42:	f7ff ff59 	bl	800fbf8 <__sflush_r>
 800fd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd48:	07da      	lsls	r2, r3, #31
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	d4e0      	bmi.n	800fd10 <_fflush_r+0xc>
 800fd4e:	89a3      	ldrh	r3, [r4, #12]
 800fd50:	059b      	lsls	r3, r3, #22
 800fd52:	d4dd      	bmi.n	800fd10 <_fflush_r+0xc>
 800fd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd56:	f7fd f9c3 	bl	800d0e0 <__retarget_lock_release_recursive>
 800fd5a:	e7d9      	b.n	800fd10 <_fflush_r+0xc>
 800fd5c:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <_fflush_r+0x70>)
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	d101      	bne.n	800fd66 <_fflush_r+0x62>
 800fd62:	68ac      	ldr	r4, [r5, #8]
 800fd64:	e7df      	b.n	800fd26 <_fflush_r+0x22>
 800fd66:	4b04      	ldr	r3, [pc, #16]	; (800fd78 <_fflush_r+0x74>)
 800fd68:	429c      	cmp	r4, r3
 800fd6a:	bf08      	it	eq
 800fd6c:	68ec      	ldreq	r4, [r5, #12]
 800fd6e:	e7da      	b.n	800fd26 <_fflush_r+0x22>
 800fd70:	080138e8 	.word	0x080138e8
 800fd74:	08013908 	.word	0x08013908
 800fd78:	080138c8 	.word	0x080138c8

0800fd7c <rshift>:
 800fd7c:	6903      	ldr	r3, [r0, #16]
 800fd7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd8a:	f100 0414 	add.w	r4, r0, #20
 800fd8e:	dd45      	ble.n	800fe1c <rshift+0xa0>
 800fd90:	f011 011f 	ands.w	r1, r1, #31
 800fd94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd9c:	d10c      	bne.n	800fdb8 <rshift+0x3c>
 800fd9e:	f100 0710 	add.w	r7, r0, #16
 800fda2:	4629      	mov	r1, r5
 800fda4:	42b1      	cmp	r1, r6
 800fda6:	d334      	bcc.n	800fe12 <rshift+0x96>
 800fda8:	1a9b      	subs	r3, r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	1eea      	subs	r2, r5, #3
 800fdae:	4296      	cmp	r6, r2
 800fdb0:	bf38      	it	cc
 800fdb2:	2300      	movcc	r3, #0
 800fdb4:	4423      	add	r3, r4
 800fdb6:	e015      	b.n	800fde4 <rshift+0x68>
 800fdb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdbc:	f1c1 0820 	rsb	r8, r1, #32
 800fdc0:	40cf      	lsrs	r7, r1
 800fdc2:	f105 0e04 	add.w	lr, r5, #4
 800fdc6:	46a1      	mov	r9, r4
 800fdc8:	4576      	cmp	r6, lr
 800fdca:	46f4      	mov	ip, lr
 800fdcc:	d815      	bhi.n	800fdfa <rshift+0x7e>
 800fdce:	1a9b      	subs	r3, r3, r2
 800fdd0:	009a      	lsls	r2, r3, #2
 800fdd2:	3a04      	subs	r2, #4
 800fdd4:	3501      	adds	r5, #1
 800fdd6:	42ae      	cmp	r6, r5
 800fdd8:	bf38      	it	cc
 800fdda:	2200      	movcc	r2, #0
 800fddc:	18a3      	adds	r3, r4, r2
 800fdde:	50a7      	str	r7, [r4, r2]
 800fde0:	b107      	cbz	r7, 800fde4 <rshift+0x68>
 800fde2:	3304      	adds	r3, #4
 800fde4:	1b1a      	subs	r2, r3, r4
 800fde6:	42a3      	cmp	r3, r4
 800fde8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fdec:	bf08      	it	eq
 800fdee:	2300      	moveq	r3, #0
 800fdf0:	6102      	str	r2, [r0, #16]
 800fdf2:	bf08      	it	eq
 800fdf4:	6143      	streq	r3, [r0, #20]
 800fdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdfa:	f8dc c000 	ldr.w	ip, [ip]
 800fdfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe02:	ea4c 0707 	orr.w	r7, ip, r7
 800fe06:	f849 7b04 	str.w	r7, [r9], #4
 800fe0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe0e:	40cf      	lsrs	r7, r1
 800fe10:	e7da      	b.n	800fdc8 <rshift+0x4c>
 800fe12:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe16:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe1a:	e7c3      	b.n	800fda4 <rshift+0x28>
 800fe1c:	4623      	mov	r3, r4
 800fe1e:	e7e1      	b.n	800fde4 <rshift+0x68>

0800fe20 <__hexdig_fun>:
 800fe20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe24:	2b09      	cmp	r3, #9
 800fe26:	d802      	bhi.n	800fe2e <__hexdig_fun+0xe>
 800fe28:	3820      	subs	r0, #32
 800fe2a:	b2c0      	uxtb	r0, r0
 800fe2c:	4770      	bx	lr
 800fe2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe32:	2b05      	cmp	r3, #5
 800fe34:	d801      	bhi.n	800fe3a <__hexdig_fun+0x1a>
 800fe36:	3847      	subs	r0, #71	; 0x47
 800fe38:	e7f7      	b.n	800fe2a <__hexdig_fun+0xa>
 800fe3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe3e:	2b05      	cmp	r3, #5
 800fe40:	d801      	bhi.n	800fe46 <__hexdig_fun+0x26>
 800fe42:	3827      	subs	r0, #39	; 0x27
 800fe44:	e7f1      	b.n	800fe2a <__hexdig_fun+0xa>
 800fe46:	2000      	movs	r0, #0
 800fe48:	4770      	bx	lr
	...

0800fe4c <__gethex>:
 800fe4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe50:	ed2d 8b02 	vpush	{d8}
 800fe54:	b089      	sub	sp, #36	; 0x24
 800fe56:	ee08 0a10 	vmov	s16, r0
 800fe5a:	9304      	str	r3, [sp, #16]
 800fe5c:	4bbc      	ldr	r3, [pc, #752]	; (8010150 <__gethex+0x304>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	9301      	str	r3, [sp, #4]
 800fe62:	4618      	mov	r0, r3
 800fe64:	468b      	mov	fp, r1
 800fe66:	4690      	mov	r8, r2
 800fe68:	f7f0 f9d2 	bl	8000210 <strlen>
 800fe6c:	9b01      	ldr	r3, [sp, #4]
 800fe6e:	f8db 2000 	ldr.w	r2, [fp]
 800fe72:	4403      	add	r3, r0
 800fe74:	4682      	mov	sl, r0
 800fe76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fe7a:	9305      	str	r3, [sp, #20]
 800fe7c:	1c93      	adds	r3, r2, #2
 800fe7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe86:	32fe      	adds	r2, #254	; 0xfe
 800fe88:	18d1      	adds	r1, r2, r3
 800fe8a:	461f      	mov	r7, r3
 800fe8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fe90:	9100      	str	r1, [sp, #0]
 800fe92:	2830      	cmp	r0, #48	; 0x30
 800fe94:	d0f8      	beq.n	800fe88 <__gethex+0x3c>
 800fe96:	f7ff ffc3 	bl	800fe20 <__hexdig_fun>
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d13a      	bne.n	800ff16 <__gethex+0xca>
 800fea0:	9901      	ldr	r1, [sp, #4]
 800fea2:	4652      	mov	r2, sl
 800fea4:	4638      	mov	r0, r7
 800fea6:	f001 f963 	bl	8011170 <strncmp>
 800feaa:	4605      	mov	r5, r0
 800feac:	2800      	cmp	r0, #0
 800feae:	d168      	bne.n	800ff82 <__gethex+0x136>
 800feb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800feb4:	eb07 060a 	add.w	r6, r7, sl
 800feb8:	f7ff ffb2 	bl	800fe20 <__hexdig_fun>
 800febc:	2800      	cmp	r0, #0
 800febe:	d062      	beq.n	800ff86 <__gethex+0x13a>
 800fec0:	4633      	mov	r3, r6
 800fec2:	7818      	ldrb	r0, [r3, #0]
 800fec4:	2830      	cmp	r0, #48	; 0x30
 800fec6:	461f      	mov	r7, r3
 800fec8:	f103 0301 	add.w	r3, r3, #1
 800fecc:	d0f9      	beq.n	800fec2 <__gethex+0x76>
 800fece:	f7ff ffa7 	bl	800fe20 <__hexdig_fun>
 800fed2:	2301      	movs	r3, #1
 800fed4:	fab0 f480 	clz	r4, r0
 800fed8:	0964      	lsrs	r4, r4, #5
 800feda:	4635      	mov	r5, r6
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	463a      	mov	r2, r7
 800fee0:	4616      	mov	r6, r2
 800fee2:	3201      	adds	r2, #1
 800fee4:	7830      	ldrb	r0, [r6, #0]
 800fee6:	f7ff ff9b 	bl	800fe20 <__hexdig_fun>
 800feea:	2800      	cmp	r0, #0
 800feec:	d1f8      	bne.n	800fee0 <__gethex+0x94>
 800feee:	9901      	ldr	r1, [sp, #4]
 800fef0:	4652      	mov	r2, sl
 800fef2:	4630      	mov	r0, r6
 800fef4:	f001 f93c 	bl	8011170 <strncmp>
 800fef8:	b980      	cbnz	r0, 800ff1c <__gethex+0xd0>
 800fefa:	b94d      	cbnz	r5, 800ff10 <__gethex+0xc4>
 800fefc:	eb06 050a 	add.w	r5, r6, sl
 800ff00:	462a      	mov	r2, r5
 800ff02:	4616      	mov	r6, r2
 800ff04:	3201      	adds	r2, #1
 800ff06:	7830      	ldrb	r0, [r6, #0]
 800ff08:	f7ff ff8a 	bl	800fe20 <__hexdig_fun>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d1f8      	bne.n	800ff02 <__gethex+0xb6>
 800ff10:	1bad      	subs	r5, r5, r6
 800ff12:	00ad      	lsls	r5, r5, #2
 800ff14:	e004      	b.n	800ff20 <__gethex+0xd4>
 800ff16:	2400      	movs	r4, #0
 800ff18:	4625      	mov	r5, r4
 800ff1a:	e7e0      	b.n	800fede <__gethex+0x92>
 800ff1c:	2d00      	cmp	r5, #0
 800ff1e:	d1f7      	bne.n	800ff10 <__gethex+0xc4>
 800ff20:	7833      	ldrb	r3, [r6, #0]
 800ff22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff26:	2b50      	cmp	r3, #80	; 0x50
 800ff28:	d13b      	bne.n	800ffa2 <__gethex+0x156>
 800ff2a:	7873      	ldrb	r3, [r6, #1]
 800ff2c:	2b2b      	cmp	r3, #43	; 0x2b
 800ff2e:	d02c      	beq.n	800ff8a <__gethex+0x13e>
 800ff30:	2b2d      	cmp	r3, #45	; 0x2d
 800ff32:	d02e      	beq.n	800ff92 <__gethex+0x146>
 800ff34:	1c71      	adds	r1, r6, #1
 800ff36:	f04f 0900 	mov.w	r9, #0
 800ff3a:	7808      	ldrb	r0, [r1, #0]
 800ff3c:	f7ff ff70 	bl	800fe20 <__hexdig_fun>
 800ff40:	1e43      	subs	r3, r0, #1
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b18      	cmp	r3, #24
 800ff46:	d82c      	bhi.n	800ffa2 <__gethex+0x156>
 800ff48:	f1a0 0210 	sub.w	r2, r0, #16
 800ff4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff50:	f7ff ff66 	bl	800fe20 <__hexdig_fun>
 800ff54:	1e43      	subs	r3, r0, #1
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	2b18      	cmp	r3, #24
 800ff5a:	d91d      	bls.n	800ff98 <__gethex+0x14c>
 800ff5c:	f1b9 0f00 	cmp.w	r9, #0
 800ff60:	d000      	beq.n	800ff64 <__gethex+0x118>
 800ff62:	4252      	negs	r2, r2
 800ff64:	4415      	add	r5, r2
 800ff66:	f8cb 1000 	str.w	r1, [fp]
 800ff6a:	b1e4      	cbz	r4, 800ffa6 <__gethex+0x15a>
 800ff6c:	9b00      	ldr	r3, [sp, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bf14      	ite	ne
 800ff72:	2700      	movne	r7, #0
 800ff74:	2706      	moveq	r7, #6
 800ff76:	4638      	mov	r0, r7
 800ff78:	b009      	add	sp, #36	; 0x24
 800ff7a:	ecbd 8b02 	vpop	{d8}
 800ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff82:	463e      	mov	r6, r7
 800ff84:	4625      	mov	r5, r4
 800ff86:	2401      	movs	r4, #1
 800ff88:	e7ca      	b.n	800ff20 <__gethex+0xd4>
 800ff8a:	f04f 0900 	mov.w	r9, #0
 800ff8e:	1cb1      	adds	r1, r6, #2
 800ff90:	e7d3      	b.n	800ff3a <__gethex+0xee>
 800ff92:	f04f 0901 	mov.w	r9, #1
 800ff96:	e7fa      	b.n	800ff8e <__gethex+0x142>
 800ff98:	230a      	movs	r3, #10
 800ff9a:	fb03 0202 	mla	r2, r3, r2, r0
 800ff9e:	3a10      	subs	r2, #16
 800ffa0:	e7d4      	b.n	800ff4c <__gethex+0x100>
 800ffa2:	4631      	mov	r1, r6
 800ffa4:	e7df      	b.n	800ff66 <__gethex+0x11a>
 800ffa6:	1bf3      	subs	r3, r6, r7
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	4621      	mov	r1, r4
 800ffac:	2b07      	cmp	r3, #7
 800ffae:	dc0b      	bgt.n	800ffc8 <__gethex+0x17c>
 800ffb0:	ee18 0a10 	vmov	r0, s16
 800ffb4:	f000 fa86 	bl	80104c4 <_Balloc>
 800ffb8:	4604      	mov	r4, r0
 800ffba:	b940      	cbnz	r0, 800ffce <__gethex+0x182>
 800ffbc:	4b65      	ldr	r3, [pc, #404]	; (8010154 <__gethex+0x308>)
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	21de      	movs	r1, #222	; 0xde
 800ffc2:	4865      	ldr	r0, [pc, #404]	; (8010158 <__gethex+0x30c>)
 800ffc4:	f001 f8f4 	bl	80111b0 <__assert_func>
 800ffc8:	3101      	adds	r1, #1
 800ffca:	105b      	asrs	r3, r3, #1
 800ffcc:	e7ee      	b.n	800ffac <__gethex+0x160>
 800ffce:	f100 0914 	add.w	r9, r0, #20
 800ffd2:	f04f 0b00 	mov.w	fp, #0
 800ffd6:	f1ca 0301 	rsb	r3, sl, #1
 800ffda:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffde:	f8cd b000 	str.w	fp, [sp]
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	42b7      	cmp	r7, r6
 800ffe6:	d340      	bcc.n	801006a <__gethex+0x21e>
 800ffe8:	9802      	ldr	r0, [sp, #8]
 800ffea:	9b00      	ldr	r3, [sp, #0]
 800ffec:	f840 3b04 	str.w	r3, [r0], #4
 800fff0:	eba0 0009 	sub.w	r0, r0, r9
 800fff4:	1080      	asrs	r0, r0, #2
 800fff6:	0146      	lsls	r6, r0, #5
 800fff8:	6120      	str	r0, [r4, #16]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f000 fb58 	bl	80106b0 <__hi0bits>
 8010000:	1a30      	subs	r0, r6, r0
 8010002:	f8d8 6000 	ldr.w	r6, [r8]
 8010006:	42b0      	cmp	r0, r6
 8010008:	dd63      	ble.n	80100d2 <__gethex+0x286>
 801000a:	1b87      	subs	r7, r0, r6
 801000c:	4639      	mov	r1, r7
 801000e:	4620      	mov	r0, r4
 8010010:	f000 fef2 	bl	8010df8 <__any_on>
 8010014:	4682      	mov	sl, r0
 8010016:	b1a8      	cbz	r0, 8010044 <__gethex+0x1f8>
 8010018:	1e7b      	subs	r3, r7, #1
 801001a:	1159      	asrs	r1, r3, #5
 801001c:	f003 021f 	and.w	r2, r3, #31
 8010020:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010024:	f04f 0a01 	mov.w	sl, #1
 8010028:	fa0a f202 	lsl.w	r2, sl, r2
 801002c:	420a      	tst	r2, r1
 801002e:	d009      	beq.n	8010044 <__gethex+0x1f8>
 8010030:	4553      	cmp	r3, sl
 8010032:	dd05      	ble.n	8010040 <__gethex+0x1f4>
 8010034:	1eb9      	subs	r1, r7, #2
 8010036:	4620      	mov	r0, r4
 8010038:	f000 fede 	bl	8010df8 <__any_on>
 801003c:	2800      	cmp	r0, #0
 801003e:	d145      	bne.n	80100cc <__gethex+0x280>
 8010040:	f04f 0a02 	mov.w	sl, #2
 8010044:	4639      	mov	r1, r7
 8010046:	4620      	mov	r0, r4
 8010048:	f7ff fe98 	bl	800fd7c <rshift>
 801004c:	443d      	add	r5, r7
 801004e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010052:	42ab      	cmp	r3, r5
 8010054:	da4c      	bge.n	80100f0 <__gethex+0x2a4>
 8010056:	ee18 0a10 	vmov	r0, s16
 801005a:	4621      	mov	r1, r4
 801005c:	f000 fa72 	bl	8010544 <_Bfree>
 8010060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010062:	2300      	movs	r3, #0
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	27a3      	movs	r7, #163	; 0xa3
 8010068:	e785      	b.n	800ff76 <__gethex+0x12a>
 801006a:	1e73      	subs	r3, r6, #1
 801006c:	9a05      	ldr	r2, [sp, #20]
 801006e:	9303      	str	r3, [sp, #12]
 8010070:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010074:	4293      	cmp	r3, r2
 8010076:	d019      	beq.n	80100ac <__gethex+0x260>
 8010078:	f1bb 0f20 	cmp.w	fp, #32
 801007c:	d107      	bne.n	801008e <__gethex+0x242>
 801007e:	9b02      	ldr	r3, [sp, #8]
 8010080:	9a00      	ldr	r2, [sp, #0]
 8010082:	f843 2b04 	str.w	r2, [r3], #4
 8010086:	9302      	str	r3, [sp, #8]
 8010088:	2300      	movs	r3, #0
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	469b      	mov	fp, r3
 801008e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010092:	f7ff fec5 	bl	800fe20 <__hexdig_fun>
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	f000 000f 	and.w	r0, r0, #15
 801009c:	fa00 f00b 	lsl.w	r0, r0, fp
 80100a0:	4303      	orrs	r3, r0
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	f10b 0b04 	add.w	fp, fp, #4
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	e00d      	b.n	80100c8 <__gethex+0x27c>
 80100ac:	9b03      	ldr	r3, [sp, #12]
 80100ae:	9a06      	ldr	r2, [sp, #24]
 80100b0:	4413      	add	r3, r2
 80100b2:	42bb      	cmp	r3, r7
 80100b4:	d3e0      	bcc.n	8010078 <__gethex+0x22c>
 80100b6:	4618      	mov	r0, r3
 80100b8:	9901      	ldr	r1, [sp, #4]
 80100ba:	9307      	str	r3, [sp, #28]
 80100bc:	4652      	mov	r2, sl
 80100be:	f001 f857 	bl	8011170 <strncmp>
 80100c2:	9b07      	ldr	r3, [sp, #28]
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d1d7      	bne.n	8010078 <__gethex+0x22c>
 80100c8:	461e      	mov	r6, r3
 80100ca:	e78b      	b.n	800ffe4 <__gethex+0x198>
 80100cc:	f04f 0a03 	mov.w	sl, #3
 80100d0:	e7b8      	b.n	8010044 <__gethex+0x1f8>
 80100d2:	da0a      	bge.n	80100ea <__gethex+0x29e>
 80100d4:	1a37      	subs	r7, r6, r0
 80100d6:	4621      	mov	r1, r4
 80100d8:	ee18 0a10 	vmov	r0, s16
 80100dc:	463a      	mov	r2, r7
 80100de:	f000 fc4d 	bl	801097c <__lshift>
 80100e2:	1bed      	subs	r5, r5, r7
 80100e4:	4604      	mov	r4, r0
 80100e6:	f100 0914 	add.w	r9, r0, #20
 80100ea:	f04f 0a00 	mov.w	sl, #0
 80100ee:	e7ae      	b.n	801004e <__gethex+0x202>
 80100f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80100f4:	42a8      	cmp	r0, r5
 80100f6:	dd72      	ble.n	80101de <__gethex+0x392>
 80100f8:	1b45      	subs	r5, r0, r5
 80100fa:	42ae      	cmp	r6, r5
 80100fc:	dc36      	bgt.n	801016c <__gethex+0x320>
 80100fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010102:	2b02      	cmp	r3, #2
 8010104:	d02a      	beq.n	801015c <__gethex+0x310>
 8010106:	2b03      	cmp	r3, #3
 8010108:	d02c      	beq.n	8010164 <__gethex+0x318>
 801010a:	2b01      	cmp	r3, #1
 801010c:	d115      	bne.n	801013a <__gethex+0x2ee>
 801010e:	42ae      	cmp	r6, r5
 8010110:	d113      	bne.n	801013a <__gethex+0x2ee>
 8010112:	2e01      	cmp	r6, #1
 8010114:	d10b      	bne.n	801012e <__gethex+0x2e2>
 8010116:	9a04      	ldr	r2, [sp, #16]
 8010118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801011c:	6013      	str	r3, [r2, #0]
 801011e:	2301      	movs	r3, #1
 8010120:	6123      	str	r3, [r4, #16]
 8010122:	f8c9 3000 	str.w	r3, [r9]
 8010126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010128:	2762      	movs	r7, #98	; 0x62
 801012a:	601c      	str	r4, [r3, #0]
 801012c:	e723      	b.n	800ff76 <__gethex+0x12a>
 801012e:	1e71      	subs	r1, r6, #1
 8010130:	4620      	mov	r0, r4
 8010132:	f000 fe61 	bl	8010df8 <__any_on>
 8010136:	2800      	cmp	r0, #0
 8010138:	d1ed      	bne.n	8010116 <__gethex+0x2ca>
 801013a:	ee18 0a10 	vmov	r0, s16
 801013e:	4621      	mov	r1, r4
 8010140:	f000 fa00 	bl	8010544 <_Bfree>
 8010144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010146:	2300      	movs	r3, #0
 8010148:	6013      	str	r3, [r2, #0]
 801014a:	2750      	movs	r7, #80	; 0x50
 801014c:	e713      	b.n	800ff76 <__gethex+0x12a>
 801014e:	bf00      	nop
 8010150:	08013bb8 	.word	0x08013bb8
 8010154:	08013b3c 	.word	0x08013b3c
 8010158:	08013b4d 	.word	0x08013b4d
 801015c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801015e:	2b00      	cmp	r3, #0
 8010160:	d1eb      	bne.n	801013a <__gethex+0x2ee>
 8010162:	e7d8      	b.n	8010116 <__gethex+0x2ca>
 8010164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010166:	2b00      	cmp	r3, #0
 8010168:	d1d5      	bne.n	8010116 <__gethex+0x2ca>
 801016a:	e7e6      	b.n	801013a <__gethex+0x2ee>
 801016c:	1e6f      	subs	r7, r5, #1
 801016e:	f1ba 0f00 	cmp.w	sl, #0
 8010172:	d131      	bne.n	80101d8 <__gethex+0x38c>
 8010174:	b127      	cbz	r7, 8010180 <__gethex+0x334>
 8010176:	4639      	mov	r1, r7
 8010178:	4620      	mov	r0, r4
 801017a:	f000 fe3d 	bl	8010df8 <__any_on>
 801017e:	4682      	mov	sl, r0
 8010180:	117b      	asrs	r3, r7, #5
 8010182:	2101      	movs	r1, #1
 8010184:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010188:	f007 071f 	and.w	r7, r7, #31
 801018c:	fa01 f707 	lsl.w	r7, r1, r7
 8010190:	421f      	tst	r7, r3
 8010192:	4629      	mov	r1, r5
 8010194:	4620      	mov	r0, r4
 8010196:	bf18      	it	ne
 8010198:	f04a 0a02 	orrne.w	sl, sl, #2
 801019c:	1b76      	subs	r6, r6, r5
 801019e:	f7ff fded 	bl	800fd7c <rshift>
 80101a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101a6:	2702      	movs	r7, #2
 80101a8:	f1ba 0f00 	cmp.w	sl, #0
 80101ac:	d048      	beq.n	8010240 <__gethex+0x3f4>
 80101ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d015      	beq.n	80101e2 <__gethex+0x396>
 80101b6:	2b03      	cmp	r3, #3
 80101b8:	d017      	beq.n	80101ea <__gethex+0x39e>
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d109      	bne.n	80101d2 <__gethex+0x386>
 80101be:	f01a 0f02 	tst.w	sl, #2
 80101c2:	d006      	beq.n	80101d2 <__gethex+0x386>
 80101c4:	f8d9 0000 	ldr.w	r0, [r9]
 80101c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80101cc:	f01a 0f01 	tst.w	sl, #1
 80101d0:	d10e      	bne.n	80101f0 <__gethex+0x3a4>
 80101d2:	f047 0710 	orr.w	r7, r7, #16
 80101d6:	e033      	b.n	8010240 <__gethex+0x3f4>
 80101d8:	f04f 0a01 	mov.w	sl, #1
 80101dc:	e7d0      	b.n	8010180 <__gethex+0x334>
 80101de:	2701      	movs	r7, #1
 80101e0:	e7e2      	b.n	80101a8 <__gethex+0x35c>
 80101e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101e4:	f1c3 0301 	rsb	r3, r3, #1
 80101e8:	9315      	str	r3, [sp, #84]	; 0x54
 80101ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0f0      	beq.n	80101d2 <__gethex+0x386>
 80101f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101f4:	f104 0314 	add.w	r3, r4, #20
 80101f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80101fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010200:	f04f 0c00 	mov.w	ip, #0
 8010204:	4618      	mov	r0, r3
 8010206:	f853 2b04 	ldr.w	r2, [r3], #4
 801020a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801020e:	d01c      	beq.n	801024a <__gethex+0x3fe>
 8010210:	3201      	adds	r2, #1
 8010212:	6002      	str	r2, [r0, #0]
 8010214:	2f02      	cmp	r7, #2
 8010216:	f104 0314 	add.w	r3, r4, #20
 801021a:	d13f      	bne.n	801029c <__gethex+0x450>
 801021c:	f8d8 2000 	ldr.w	r2, [r8]
 8010220:	3a01      	subs	r2, #1
 8010222:	42b2      	cmp	r2, r6
 8010224:	d10a      	bne.n	801023c <__gethex+0x3f0>
 8010226:	1171      	asrs	r1, r6, #5
 8010228:	2201      	movs	r2, #1
 801022a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801022e:	f006 061f 	and.w	r6, r6, #31
 8010232:	fa02 f606 	lsl.w	r6, r2, r6
 8010236:	421e      	tst	r6, r3
 8010238:	bf18      	it	ne
 801023a:	4617      	movne	r7, r2
 801023c:	f047 0720 	orr.w	r7, r7, #32
 8010240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010242:	601c      	str	r4, [r3, #0]
 8010244:	9b04      	ldr	r3, [sp, #16]
 8010246:	601d      	str	r5, [r3, #0]
 8010248:	e695      	b.n	800ff76 <__gethex+0x12a>
 801024a:	4299      	cmp	r1, r3
 801024c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010250:	d8d8      	bhi.n	8010204 <__gethex+0x3b8>
 8010252:	68a3      	ldr	r3, [r4, #8]
 8010254:	459b      	cmp	fp, r3
 8010256:	db19      	blt.n	801028c <__gethex+0x440>
 8010258:	6861      	ldr	r1, [r4, #4]
 801025a:	ee18 0a10 	vmov	r0, s16
 801025e:	3101      	adds	r1, #1
 8010260:	f000 f930 	bl	80104c4 <_Balloc>
 8010264:	4681      	mov	r9, r0
 8010266:	b918      	cbnz	r0, 8010270 <__gethex+0x424>
 8010268:	4b1a      	ldr	r3, [pc, #104]	; (80102d4 <__gethex+0x488>)
 801026a:	4602      	mov	r2, r0
 801026c:	2184      	movs	r1, #132	; 0x84
 801026e:	e6a8      	b.n	800ffc2 <__gethex+0x176>
 8010270:	6922      	ldr	r2, [r4, #16]
 8010272:	3202      	adds	r2, #2
 8010274:	f104 010c 	add.w	r1, r4, #12
 8010278:	0092      	lsls	r2, r2, #2
 801027a:	300c      	adds	r0, #12
 801027c:	f7fc ff3a 	bl	800d0f4 <memcpy>
 8010280:	4621      	mov	r1, r4
 8010282:	ee18 0a10 	vmov	r0, s16
 8010286:	f000 f95d 	bl	8010544 <_Bfree>
 801028a:	464c      	mov	r4, r9
 801028c:	6923      	ldr	r3, [r4, #16]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010294:	6122      	str	r2, [r4, #16]
 8010296:	2201      	movs	r2, #1
 8010298:	615a      	str	r2, [r3, #20]
 801029a:	e7bb      	b.n	8010214 <__gethex+0x3c8>
 801029c:	6922      	ldr	r2, [r4, #16]
 801029e:	455a      	cmp	r2, fp
 80102a0:	dd0b      	ble.n	80102ba <__gethex+0x46e>
 80102a2:	2101      	movs	r1, #1
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7ff fd69 	bl	800fd7c <rshift>
 80102aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102ae:	3501      	adds	r5, #1
 80102b0:	42ab      	cmp	r3, r5
 80102b2:	f6ff aed0 	blt.w	8010056 <__gethex+0x20a>
 80102b6:	2701      	movs	r7, #1
 80102b8:	e7c0      	b.n	801023c <__gethex+0x3f0>
 80102ba:	f016 061f 	ands.w	r6, r6, #31
 80102be:	d0fa      	beq.n	80102b6 <__gethex+0x46a>
 80102c0:	449a      	add	sl, r3
 80102c2:	f1c6 0620 	rsb	r6, r6, #32
 80102c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80102ca:	f000 f9f1 	bl	80106b0 <__hi0bits>
 80102ce:	42b0      	cmp	r0, r6
 80102d0:	dbe7      	blt.n	80102a2 <__gethex+0x456>
 80102d2:	e7f0      	b.n	80102b6 <__gethex+0x46a>
 80102d4:	08013b3c 	.word	0x08013b3c

080102d8 <L_shift>:
 80102d8:	f1c2 0208 	rsb	r2, r2, #8
 80102dc:	0092      	lsls	r2, r2, #2
 80102de:	b570      	push	{r4, r5, r6, lr}
 80102e0:	f1c2 0620 	rsb	r6, r2, #32
 80102e4:	6843      	ldr	r3, [r0, #4]
 80102e6:	6804      	ldr	r4, [r0, #0]
 80102e8:	fa03 f506 	lsl.w	r5, r3, r6
 80102ec:	432c      	orrs	r4, r5
 80102ee:	40d3      	lsrs	r3, r2
 80102f0:	6004      	str	r4, [r0, #0]
 80102f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80102f6:	4288      	cmp	r0, r1
 80102f8:	d3f4      	bcc.n	80102e4 <L_shift+0xc>
 80102fa:	bd70      	pop	{r4, r5, r6, pc}

080102fc <__match>:
 80102fc:	b530      	push	{r4, r5, lr}
 80102fe:	6803      	ldr	r3, [r0, #0]
 8010300:	3301      	adds	r3, #1
 8010302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010306:	b914      	cbnz	r4, 801030e <__match+0x12>
 8010308:	6003      	str	r3, [r0, #0]
 801030a:	2001      	movs	r0, #1
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010312:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010316:	2d19      	cmp	r5, #25
 8010318:	bf98      	it	ls
 801031a:	3220      	addls	r2, #32
 801031c:	42a2      	cmp	r2, r4
 801031e:	d0f0      	beq.n	8010302 <__match+0x6>
 8010320:	2000      	movs	r0, #0
 8010322:	e7f3      	b.n	801030c <__match+0x10>

08010324 <__hexnan>:
 8010324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010328:	680b      	ldr	r3, [r1, #0]
 801032a:	6801      	ldr	r1, [r0, #0]
 801032c:	115e      	asrs	r6, r3, #5
 801032e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010332:	f013 031f 	ands.w	r3, r3, #31
 8010336:	b087      	sub	sp, #28
 8010338:	bf18      	it	ne
 801033a:	3604      	addne	r6, #4
 801033c:	2500      	movs	r5, #0
 801033e:	1f37      	subs	r7, r6, #4
 8010340:	4682      	mov	sl, r0
 8010342:	4690      	mov	r8, r2
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	f846 5c04 	str.w	r5, [r6, #-4]
 801034a:	46b9      	mov	r9, r7
 801034c:	463c      	mov	r4, r7
 801034e:	9502      	str	r5, [sp, #8]
 8010350:	46ab      	mov	fp, r5
 8010352:	784a      	ldrb	r2, [r1, #1]
 8010354:	1c4b      	adds	r3, r1, #1
 8010356:	9303      	str	r3, [sp, #12]
 8010358:	b342      	cbz	r2, 80103ac <__hexnan+0x88>
 801035a:	4610      	mov	r0, r2
 801035c:	9105      	str	r1, [sp, #20]
 801035e:	9204      	str	r2, [sp, #16]
 8010360:	f7ff fd5e 	bl	800fe20 <__hexdig_fun>
 8010364:	2800      	cmp	r0, #0
 8010366:	d14f      	bne.n	8010408 <__hexnan+0xe4>
 8010368:	9a04      	ldr	r2, [sp, #16]
 801036a:	9905      	ldr	r1, [sp, #20]
 801036c:	2a20      	cmp	r2, #32
 801036e:	d818      	bhi.n	80103a2 <__hexnan+0x7e>
 8010370:	9b02      	ldr	r3, [sp, #8]
 8010372:	459b      	cmp	fp, r3
 8010374:	dd13      	ble.n	801039e <__hexnan+0x7a>
 8010376:	454c      	cmp	r4, r9
 8010378:	d206      	bcs.n	8010388 <__hexnan+0x64>
 801037a:	2d07      	cmp	r5, #7
 801037c:	dc04      	bgt.n	8010388 <__hexnan+0x64>
 801037e:	462a      	mov	r2, r5
 8010380:	4649      	mov	r1, r9
 8010382:	4620      	mov	r0, r4
 8010384:	f7ff ffa8 	bl	80102d8 <L_shift>
 8010388:	4544      	cmp	r4, r8
 801038a:	d950      	bls.n	801042e <__hexnan+0x10a>
 801038c:	2300      	movs	r3, #0
 801038e:	f1a4 0904 	sub.w	r9, r4, #4
 8010392:	f844 3c04 	str.w	r3, [r4, #-4]
 8010396:	f8cd b008 	str.w	fp, [sp, #8]
 801039a:	464c      	mov	r4, r9
 801039c:	461d      	mov	r5, r3
 801039e:	9903      	ldr	r1, [sp, #12]
 80103a0:	e7d7      	b.n	8010352 <__hexnan+0x2e>
 80103a2:	2a29      	cmp	r2, #41	; 0x29
 80103a4:	d156      	bne.n	8010454 <__hexnan+0x130>
 80103a6:	3102      	adds	r1, #2
 80103a8:	f8ca 1000 	str.w	r1, [sl]
 80103ac:	f1bb 0f00 	cmp.w	fp, #0
 80103b0:	d050      	beq.n	8010454 <__hexnan+0x130>
 80103b2:	454c      	cmp	r4, r9
 80103b4:	d206      	bcs.n	80103c4 <__hexnan+0xa0>
 80103b6:	2d07      	cmp	r5, #7
 80103b8:	dc04      	bgt.n	80103c4 <__hexnan+0xa0>
 80103ba:	462a      	mov	r2, r5
 80103bc:	4649      	mov	r1, r9
 80103be:	4620      	mov	r0, r4
 80103c0:	f7ff ff8a 	bl	80102d8 <L_shift>
 80103c4:	4544      	cmp	r4, r8
 80103c6:	d934      	bls.n	8010432 <__hexnan+0x10e>
 80103c8:	f1a8 0204 	sub.w	r2, r8, #4
 80103cc:	4623      	mov	r3, r4
 80103ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80103d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80103d6:	429f      	cmp	r7, r3
 80103d8:	d2f9      	bcs.n	80103ce <__hexnan+0xaa>
 80103da:	1b3b      	subs	r3, r7, r4
 80103dc:	f023 0303 	bic.w	r3, r3, #3
 80103e0:	3304      	adds	r3, #4
 80103e2:	3401      	adds	r4, #1
 80103e4:	3e03      	subs	r6, #3
 80103e6:	42b4      	cmp	r4, r6
 80103e8:	bf88      	it	hi
 80103ea:	2304      	movhi	r3, #4
 80103ec:	4443      	add	r3, r8
 80103ee:	2200      	movs	r2, #0
 80103f0:	f843 2b04 	str.w	r2, [r3], #4
 80103f4:	429f      	cmp	r7, r3
 80103f6:	d2fb      	bcs.n	80103f0 <__hexnan+0xcc>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	b91b      	cbnz	r3, 8010404 <__hexnan+0xe0>
 80103fc:	4547      	cmp	r7, r8
 80103fe:	d127      	bne.n	8010450 <__hexnan+0x12c>
 8010400:	2301      	movs	r3, #1
 8010402:	603b      	str	r3, [r7, #0]
 8010404:	2005      	movs	r0, #5
 8010406:	e026      	b.n	8010456 <__hexnan+0x132>
 8010408:	3501      	adds	r5, #1
 801040a:	2d08      	cmp	r5, #8
 801040c:	f10b 0b01 	add.w	fp, fp, #1
 8010410:	dd06      	ble.n	8010420 <__hexnan+0xfc>
 8010412:	4544      	cmp	r4, r8
 8010414:	d9c3      	bls.n	801039e <__hexnan+0x7a>
 8010416:	2300      	movs	r3, #0
 8010418:	f844 3c04 	str.w	r3, [r4, #-4]
 801041c:	2501      	movs	r5, #1
 801041e:	3c04      	subs	r4, #4
 8010420:	6822      	ldr	r2, [r4, #0]
 8010422:	f000 000f 	and.w	r0, r0, #15
 8010426:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801042a:	6022      	str	r2, [r4, #0]
 801042c:	e7b7      	b.n	801039e <__hexnan+0x7a>
 801042e:	2508      	movs	r5, #8
 8010430:	e7b5      	b.n	801039e <__hexnan+0x7a>
 8010432:	9b01      	ldr	r3, [sp, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d0df      	beq.n	80103f8 <__hexnan+0xd4>
 8010438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801043c:	f1c3 0320 	rsb	r3, r3, #32
 8010440:	fa22 f303 	lsr.w	r3, r2, r3
 8010444:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010448:	401a      	ands	r2, r3
 801044a:	f846 2c04 	str.w	r2, [r6, #-4]
 801044e:	e7d3      	b.n	80103f8 <__hexnan+0xd4>
 8010450:	3f04      	subs	r7, #4
 8010452:	e7d1      	b.n	80103f8 <__hexnan+0xd4>
 8010454:	2004      	movs	r0, #4
 8010456:	b007      	add	sp, #28
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801045c <_localeconv_r>:
 801045c:	4800      	ldr	r0, [pc, #0]	; (8010460 <_localeconv_r+0x4>)
 801045e:	4770      	bx	lr
 8010460:	2000016c 	.word	0x2000016c

08010464 <_lseek_r>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	4d07      	ldr	r5, [pc, #28]	; (8010484 <_lseek_r+0x20>)
 8010468:	4604      	mov	r4, r0
 801046a:	4608      	mov	r0, r1
 801046c:	4611      	mov	r1, r2
 801046e:	2200      	movs	r2, #0
 8010470:	602a      	str	r2, [r5, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	f7f2 fc4a 	bl	8002d0c <_lseek>
 8010478:	1c43      	adds	r3, r0, #1
 801047a:	d102      	bne.n	8010482 <_lseek_r+0x1e>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	b103      	cbz	r3, 8010482 <_lseek_r+0x1e>
 8010480:	6023      	str	r3, [r4, #0]
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	200056a0 	.word	0x200056a0

08010488 <__ascii_mbtowc>:
 8010488:	b082      	sub	sp, #8
 801048a:	b901      	cbnz	r1, 801048e <__ascii_mbtowc+0x6>
 801048c:	a901      	add	r1, sp, #4
 801048e:	b142      	cbz	r2, 80104a2 <__ascii_mbtowc+0x1a>
 8010490:	b14b      	cbz	r3, 80104a6 <__ascii_mbtowc+0x1e>
 8010492:	7813      	ldrb	r3, [r2, #0]
 8010494:	600b      	str	r3, [r1, #0]
 8010496:	7812      	ldrb	r2, [r2, #0]
 8010498:	1e10      	subs	r0, r2, #0
 801049a:	bf18      	it	ne
 801049c:	2001      	movne	r0, #1
 801049e:	b002      	add	sp, #8
 80104a0:	4770      	bx	lr
 80104a2:	4610      	mov	r0, r2
 80104a4:	e7fb      	b.n	801049e <__ascii_mbtowc+0x16>
 80104a6:	f06f 0001 	mvn.w	r0, #1
 80104aa:	e7f8      	b.n	801049e <__ascii_mbtowc+0x16>

080104ac <__malloc_lock>:
 80104ac:	4801      	ldr	r0, [pc, #4]	; (80104b4 <__malloc_lock+0x8>)
 80104ae:	f7fc be16 	b.w	800d0de <__retarget_lock_acquire_recursive>
 80104b2:	bf00      	nop
 80104b4:	20005698 	.word	0x20005698

080104b8 <__malloc_unlock>:
 80104b8:	4801      	ldr	r0, [pc, #4]	; (80104c0 <__malloc_unlock+0x8>)
 80104ba:	f7fc be11 	b.w	800d0e0 <__retarget_lock_release_recursive>
 80104be:	bf00      	nop
 80104c0:	20005698 	.word	0x20005698

080104c4 <_Balloc>:
 80104c4:	b570      	push	{r4, r5, r6, lr}
 80104c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104c8:	4604      	mov	r4, r0
 80104ca:	460d      	mov	r5, r1
 80104cc:	b976      	cbnz	r6, 80104ec <_Balloc+0x28>
 80104ce:	2010      	movs	r0, #16
 80104d0:	f7fc fe08 	bl	800d0e4 <malloc>
 80104d4:	4602      	mov	r2, r0
 80104d6:	6260      	str	r0, [r4, #36]	; 0x24
 80104d8:	b920      	cbnz	r0, 80104e4 <_Balloc+0x20>
 80104da:	4b18      	ldr	r3, [pc, #96]	; (801053c <_Balloc+0x78>)
 80104dc:	4818      	ldr	r0, [pc, #96]	; (8010540 <_Balloc+0x7c>)
 80104de:	2166      	movs	r1, #102	; 0x66
 80104e0:	f000 fe66 	bl	80111b0 <__assert_func>
 80104e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104e8:	6006      	str	r6, [r0, #0]
 80104ea:	60c6      	str	r6, [r0, #12]
 80104ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104ee:	68f3      	ldr	r3, [r6, #12]
 80104f0:	b183      	cbz	r3, 8010514 <_Balloc+0x50>
 80104f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104fa:	b9b8      	cbnz	r0, 801052c <_Balloc+0x68>
 80104fc:	2101      	movs	r1, #1
 80104fe:	fa01 f605 	lsl.w	r6, r1, r5
 8010502:	1d72      	adds	r2, r6, #5
 8010504:	0092      	lsls	r2, r2, #2
 8010506:	4620      	mov	r0, r4
 8010508:	f7fc fe0a 	bl	800d120 <_calloc_r>
 801050c:	b160      	cbz	r0, 8010528 <_Balloc+0x64>
 801050e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010512:	e00e      	b.n	8010532 <_Balloc+0x6e>
 8010514:	2221      	movs	r2, #33	; 0x21
 8010516:	2104      	movs	r1, #4
 8010518:	4620      	mov	r0, r4
 801051a:	f7fc fe01 	bl	800d120 <_calloc_r>
 801051e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010520:	60f0      	str	r0, [r6, #12]
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e4      	bne.n	80104f2 <_Balloc+0x2e>
 8010528:	2000      	movs	r0, #0
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	6802      	ldr	r2, [r0, #0]
 801052e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010532:	2300      	movs	r3, #0
 8010534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010538:	e7f7      	b.n	801052a <_Balloc+0x66>
 801053a:	bf00      	nop
 801053c:	08013ac6 	.word	0x08013ac6
 8010540:	08013bcc 	.word	0x08013bcc

08010544 <_Bfree>:
 8010544:	b570      	push	{r4, r5, r6, lr}
 8010546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010548:	4605      	mov	r5, r0
 801054a:	460c      	mov	r4, r1
 801054c:	b976      	cbnz	r6, 801056c <_Bfree+0x28>
 801054e:	2010      	movs	r0, #16
 8010550:	f7fc fdc8 	bl	800d0e4 <malloc>
 8010554:	4602      	mov	r2, r0
 8010556:	6268      	str	r0, [r5, #36]	; 0x24
 8010558:	b920      	cbnz	r0, 8010564 <_Bfree+0x20>
 801055a:	4b09      	ldr	r3, [pc, #36]	; (8010580 <_Bfree+0x3c>)
 801055c:	4809      	ldr	r0, [pc, #36]	; (8010584 <_Bfree+0x40>)
 801055e:	218a      	movs	r1, #138	; 0x8a
 8010560:	f000 fe26 	bl	80111b0 <__assert_func>
 8010564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010568:	6006      	str	r6, [r0, #0]
 801056a:	60c6      	str	r6, [r0, #12]
 801056c:	b13c      	cbz	r4, 801057e <_Bfree+0x3a>
 801056e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010570:	6862      	ldr	r2, [r4, #4]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010578:	6021      	str	r1, [r4, #0]
 801057a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	08013ac6 	.word	0x08013ac6
 8010584:	08013bcc 	.word	0x08013bcc

08010588 <__multadd>:
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	690e      	ldr	r6, [r1, #16]
 801058e:	4607      	mov	r7, r0
 8010590:	4698      	mov	r8, r3
 8010592:	460c      	mov	r4, r1
 8010594:	f101 0014 	add.w	r0, r1, #20
 8010598:	2300      	movs	r3, #0
 801059a:	6805      	ldr	r5, [r0, #0]
 801059c:	b2a9      	uxth	r1, r5
 801059e:	fb02 8101 	mla	r1, r2, r1, r8
 80105a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80105a6:	0c2d      	lsrs	r5, r5, #16
 80105a8:	fb02 c505 	mla	r5, r2, r5, ip
 80105ac:	b289      	uxth	r1, r1
 80105ae:	3301      	adds	r3, #1
 80105b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80105b4:	429e      	cmp	r6, r3
 80105b6:	f840 1b04 	str.w	r1, [r0], #4
 80105ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80105be:	dcec      	bgt.n	801059a <__multadd+0x12>
 80105c0:	f1b8 0f00 	cmp.w	r8, #0
 80105c4:	d022      	beq.n	801060c <__multadd+0x84>
 80105c6:	68a3      	ldr	r3, [r4, #8]
 80105c8:	42b3      	cmp	r3, r6
 80105ca:	dc19      	bgt.n	8010600 <__multadd+0x78>
 80105cc:	6861      	ldr	r1, [r4, #4]
 80105ce:	4638      	mov	r0, r7
 80105d0:	3101      	adds	r1, #1
 80105d2:	f7ff ff77 	bl	80104c4 <_Balloc>
 80105d6:	4605      	mov	r5, r0
 80105d8:	b928      	cbnz	r0, 80105e6 <__multadd+0x5e>
 80105da:	4602      	mov	r2, r0
 80105dc:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <__multadd+0x8c>)
 80105de:	480e      	ldr	r0, [pc, #56]	; (8010618 <__multadd+0x90>)
 80105e0:	21b5      	movs	r1, #181	; 0xb5
 80105e2:	f000 fde5 	bl	80111b0 <__assert_func>
 80105e6:	6922      	ldr	r2, [r4, #16]
 80105e8:	3202      	adds	r2, #2
 80105ea:	f104 010c 	add.w	r1, r4, #12
 80105ee:	0092      	lsls	r2, r2, #2
 80105f0:	300c      	adds	r0, #12
 80105f2:	f7fc fd7f 	bl	800d0f4 <memcpy>
 80105f6:	4621      	mov	r1, r4
 80105f8:	4638      	mov	r0, r7
 80105fa:	f7ff ffa3 	bl	8010544 <_Bfree>
 80105fe:	462c      	mov	r4, r5
 8010600:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010604:	3601      	adds	r6, #1
 8010606:	f8c3 8014 	str.w	r8, [r3, #20]
 801060a:	6126      	str	r6, [r4, #16]
 801060c:	4620      	mov	r0, r4
 801060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010612:	bf00      	nop
 8010614:	08013b3c 	.word	0x08013b3c
 8010618:	08013bcc 	.word	0x08013bcc

0801061c <__s2b>:
 801061c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010620:	460c      	mov	r4, r1
 8010622:	4615      	mov	r5, r2
 8010624:	461f      	mov	r7, r3
 8010626:	2209      	movs	r2, #9
 8010628:	3308      	adds	r3, #8
 801062a:	4606      	mov	r6, r0
 801062c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010630:	2100      	movs	r1, #0
 8010632:	2201      	movs	r2, #1
 8010634:	429a      	cmp	r2, r3
 8010636:	db09      	blt.n	801064c <__s2b+0x30>
 8010638:	4630      	mov	r0, r6
 801063a:	f7ff ff43 	bl	80104c4 <_Balloc>
 801063e:	b940      	cbnz	r0, 8010652 <__s2b+0x36>
 8010640:	4602      	mov	r2, r0
 8010642:	4b19      	ldr	r3, [pc, #100]	; (80106a8 <__s2b+0x8c>)
 8010644:	4819      	ldr	r0, [pc, #100]	; (80106ac <__s2b+0x90>)
 8010646:	21ce      	movs	r1, #206	; 0xce
 8010648:	f000 fdb2 	bl	80111b0 <__assert_func>
 801064c:	0052      	lsls	r2, r2, #1
 801064e:	3101      	adds	r1, #1
 8010650:	e7f0      	b.n	8010634 <__s2b+0x18>
 8010652:	9b08      	ldr	r3, [sp, #32]
 8010654:	6143      	str	r3, [r0, #20]
 8010656:	2d09      	cmp	r5, #9
 8010658:	f04f 0301 	mov.w	r3, #1
 801065c:	6103      	str	r3, [r0, #16]
 801065e:	dd16      	ble.n	801068e <__s2b+0x72>
 8010660:	f104 0909 	add.w	r9, r4, #9
 8010664:	46c8      	mov	r8, r9
 8010666:	442c      	add	r4, r5
 8010668:	f818 3b01 	ldrb.w	r3, [r8], #1
 801066c:	4601      	mov	r1, r0
 801066e:	3b30      	subs	r3, #48	; 0x30
 8010670:	220a      	movs	r2, #10
 8010672:	4630      	mov	r0, r6
 8010674:	f7ff ff88 	bl	8010588 <__multadd>
 8010678:	45a0      	cmp	r8, r4
 801067a:	d1f5      	bne.n	8010668 <__s2b+0x4c>
 801067c:	f1a5 0408 	sub.w	r4, r5, #8
 8010680:	444c      	add	r4, r9
 8010682:	1b2d      	subs	r5, r5, r4
 8010684:	1963      	adds	r3, r4, r5
 8010686:	42bb      	cmp	r3, r7
 8010688:	db04      	blt.n	8010694 <__s2b+0x78>
 801068a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801068e:	340a      	adds	r4, #10
 8010690:	2509      	movs	r5, #9
 8010692:	e7f6      	b.n	8010682 <__s2b+0x66>
 8010694:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010698:	4601      	mov	r1, r0
 801069a:	3b30      	subs	r3, #48	; 0x30
 801069c:	220a      	movs	r2, #10
 801069e:	4630      	mov	r0, r6
 80106a0:	f7ff ff72 	bl	8010588 <__multadd>
 80106a4:	e7ee      	b.n	8010684 <__s2b+0x68>
 80106a6:	bf00      	nop
 80106a8:	08013b3c 	.word	0x08013b3c
 80106ac:	08013bcc 	.word	0x08013bcc

080106b0 <__hi0bits>:
 80106b0:	0c03      	lsrs	r3, r0, #16
 80106b2:	041b      	lsls	r3, r3, #16
 80106b4:	b9d3      	cbnz	r3, 80106ec <__hi0bits+0x3c>
 80106b6:	0400      	lsls	r0, r0, #16
 80106b8:	2310      	movs	r3, #16
 80106ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106be:	bf04      	itt	eq
 80106c0:	0200      	lsleq	r0, r0, #8
 80106c2:	3308      	addeq	r3, #8
 80106c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106c8:	bf04      	itt	eq
 80106ca:	0100      	lsleq	r0, r0, #4
 80106cc:	3304      	addeq	r3, #4
 80106ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106d2:	bf04      	itt	eq
 80106d4:	0080      	lsleq	r0, r0, #2
 80106d6:	3302      	addeq	r3, #2
 80106d8:	2800      	cmp	r0, #0
 80106da:	db05      	blt.n	80106e8 <__hi0bits+0x38>
 80106dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106e0:	f103 0301 	add.w	r3, r3, #1
 80106e4:	bf08      	it	eq
 80106e6:	2320      	moveq	r3, #32
 80106e8:	4618      	mov	r0, r3
 80106ea:	4770      	bx	lr
 80106ec:	2300      	movs	r3, #0
 80106ee:	e7e4      	b.n	80106ba <__hi0bits+0xa>

080106f0 <__lo0bits>:
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	f013 0207 	ands.w	r2, r3, #7
 80106f6:	4601      	mov	r1, r0
 80106f8:	d00b      	beq.n	8010712 <__lo0bits+0x22>
 80106fa:	07da      	lsls	r2, r3, #31
 80106fc:	d424      	bmi.n	8010748 <__lo0bits+0x58>
 80106fe:	0798      	lsls	r0, r3, #30
 8010700:	bf49      	itett	mi
 8010702:	085b      	lsrmi	r3, r3, #1
 8010704:	089b      	lsrpl	r3, r3, #2
 8010706:	2001      	movmi	r0, #1
 8010708:	600b      	strmi	r3, [r1, #0]
 801070a:	bf5c      	itt	pl
 801070c:	600b      	strpl	r3, [r1, #0]
 801070e:	2002      	movpl	r0, #2
 8010710:	4770      	bx	lr
 8010712:	b298      	uxth	r0, r3
 8010714:	b9b0      	cbnz	r0, 8010744 <__lo0bits+0x54>
 8010716:	0c1b      	lsrs	r3, r3, #16
 8010718:	2010      	movs	r0, #16
 801071a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801071e:	bf04      	itt	eq
 8010720:	0a1b      	lsreq	r3, r3, #8
 8010722:	3008      	addeq	r0, #8
 8010724:	071a      	lsls	r2, r3, #28
 8010726:	bf04      	itt	eq
 8010728:	091b      	lsreq	r3, r3, #4
 801072a:	3004      	addeq	r0, #4
 801072c:	079a      	lsls	r2, r3, #30
 801072e:	bf04      	itt	eq
 8010730:	089b      	lsreq	r3, r3, #2
 8010732:	3002      	addeq	r0, #2
 8010734:	07da      	lsls	r2, r3, #31
 8010736:	d403      	bmi.n	8010740 <__lo0bits+0x50>
 8010738:	085b      	lsrs	r3, r3, #1
 801073a:	f100 0001 	add.w	r0, r0, #1
 801073e:	d005      	beq.n	801074c <__lo0bits+0x5c>
 8010740:	600b      	str	r3, [r1, #0]
 8010742:	4770      	bx	lr
 8010744:	4610      	mov	r0, r2
 8010746:	e7e8      	b.n	801071a <__lo0bits+0x2a>
 8010748:	2000      	movs	r0, #0
 801074a:	4770      	bx	lr
 801074c:	2020      	movs	r0, #32
 801074e:	4770      	bx	lr

08010750 <__i2b>:
 8010750:	b510      	push	{r4, lr}
 8010752:	460c      	mov	r4, r1
 8010754:	2101      	movs	r1, #1
 8010756:	f7ff feb5 	bl	80104c4 <_Balloc>
 801075a:	4602      	mov	r2, r0
 801075c:	b928      	cbnz	r0, 801076a <__i2b+0x1a>
 801075e:	4b05      	ldr	r3, [pc, #20]	; (8010774 <__i2b+0x24>)
 8010760:	4805      	ldr	r0, [pc, #20]	; (8010778 <__i2b+0x28>)
 8010762:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010766:	f000 fd23 	bl	80111b0 <__assert_func>
 801076a:	2301      	movs	r3, #1
 801076c:	6144      	str	r4, [r0, #20]
 801076e:	6103      	str	r3, [r0, #16]
 8010770:	bd10      	pop	{r4, pc}
 8010772:	bf00      	nop
 8010774:	08013b3c 	.word	0x08013b3c
 8010778:	08013bcc 	.word	0x08013bcc

0801077c <__multiply>:
 801077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010780:	4614      	mov	r4, r2
 8010782:	690a      	ldr	r2, [r1, #16]
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	429a      	cmp	r2, r3
 8010788:	bfb8      	it	lt
 801078a:	460b      	movlt	r3, r1
 801078c:	460d      	mov	r5, r1
 801078e:	bfbc      	itt	lt
 8010790:	4625      	movlt	r5, r4
 8010792:	461c      	movlt	r4, r3
 8010794:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010798:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801079c:	68ab      	ldr	r3, [r5, #8]
 801079e:	6869      	ldr	r1, [r5, #4]
 80107a0:	eb0a 0709 	add.w	r7, sl, r9
 80107a4:	42bb      	cmp	r3, r7
 80107a6:	b085      	sub	sp, #20
 80107a8:	bfb8      	it	lt
 80107aa:	3101      	addlt	r1, #1
 80107ac:	f7ff fe8a 	bl	80104c4 <_Balloc>
 80107b0:	b930      	cbnz	r0, 80107c0 <__multiply+0x44>
 80107b2:	4602      	mov	r2, r0
 80107b4:	4b42      	ldr	r3, [pc, #264]	; (80108c0 <__multiply+0x144>)
 80107b6:	4843      	ldr	r0, [pc, #268]	; (80108c4 <__multiply+0x148>)
 80107b8:	f240 115d 	movw	r1, #349	; 0x15d
 80107bc:	f000 fcf8 	bl	80111b0 <__assert_func>
 80107c0:	f100 0614 	add.w	r6, r0, #20
 80107c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80107c8:	4633      	mov	r3, r6
 80107ca:	2200      	movs	r2, #0
 80107cc:	4543      	cmp	r3, r8
 80107ce:	d31e      	bcc.n	801080e <__multiply+0x92>
 80107d0:	f105 0c14 	add.w	ip, r5, #20
 80107d4:	f104 0314 	add.w	r3, r4, #20
 80107d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80107dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80107e0:	9202      	str	r2, [sp, #8]
 80107e2:	ebac 0205 	sub.w	r2, ip, r5
 80107e6:	3a15      	subs	r2, #21
 80107e8:	f022 0203 	bic.w	r2, r2, #3
 80107ec:	3204      	adds	r2, #4
 80107ee:	f105 0115 	add.w	r1, r5, #21
 80107f2:	458c      	cmp	ip, r1
 80107f4:	bf38      	it	cc
 80107f6:	2204      	movcc	r2, #4
 80107f8:	9201      	str	r2, [sp, #4]
 80107fa:	9a02      	ldr	r2, [sp, #8]
 80107fc:	9303      	str	r3, [sp, #12]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d808      	bhi.n	8010814 <__multiply+0x98>
 8010802:	2f00      	cmp	r7, #0
 8010804:	dc55      	bgt.n	80108b2 <__multiply+0x136>
 8010806:	6107      	str	r7, [r0, #16]
 8010808:	b005      	add	sp, #20
 801080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080e:	f843 2b04 	str.w	r2, [r3], #4
 8010812:	e7db      	b.n	80107cc <__multiply+0x50>
 8010814:	f8b3 a000 	ldrh.w	sl, [r3]
 8010818:	f1ba 0f00 	cmp.w	sl, #0
 801081c:	d020      	beq.n	8010860 <__multiply+0xe4>
 801081e:	f105 0e14 	add.w	lr, r5, #20
 8010822:	46b1      	mov	r9, r6
 8010824:	2200      	movs	r2, #0
 8010826:	f85e 4b04 	ldr.w	r4, [lr], #4
 801082a:	f8d9 b000 	ldr.w	fp, [r9]
 801082e:	b2a1      	uxth	r1, r4
 8010830:	fa1f fb8b 	uxth.w	fp, fp
 8010834:	fb0a b101 	mla	r1, sl, r1, fp
 8010838:	4411      	add	r1, r2
 801083a:	f8d9 2000 	ldr.w	r2, [r9]
 801083e:	0c24      	lsrs	r4, r4, #16
 8010840:	0c12      	lsrs	r2, r2, #16
 8010842:	fb0a 2404 	mla	r4, sl, r4, r2
 8010846:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801084a:	b289      	uxth	r1, r1
 801084c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010850:	45f4      	cmp	ip, lr
 8010852:	f849 1b04 	str.w	r1, [r9], #4
 8010856:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801085a:	d8e4      	bhi.n	8010826 <__multiply+0xaa>
 801085c:	9901      	ldr	r1, [sp, #4]
 801085e:	5072      	str	r2, [r6, r1]
 8010860:	9a03      	ldr	r2, [sp, #12]
 8010862:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010866:	3304      	adds	r3, #4
 8010868:	f1b9 0f00 	cmp.w	r9, #0
 801086c:	d01f      	beq.n	80108ae <__multiply+0x132>
 801086e:	6834      	ldr	r4, [r6, #0]
 8010870:	f105 0114 	add.w	r1, r5, #20
 8010874:	46b6      	mov	lr, r6
 8010876:	f04f 0a00 	mov.w	sl, #0
 801087a:	880a      	ldrh	r2, [r1, #0]
 801087c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010880:	fb09 b202 	mla	r2, r9, r2, fp
 8010884:	4492      	add	sl, r2
 8010886:	b2a4      	uxth	r4, r4
 8010888:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801088c:	f84e 4b04 	str.w	r4, [lr], #4
 8010890:	f851 4b04 	ldr.w	r4, [r1], #4
 8010894:	f8be 2000 	ldrh.w	r2, [lr]
 8010898:	0c24      	lsrs	r4, r4, #16
 801089a:	fb09 2404 	mla	r4, r9, r4, r2
 801089e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80108a2:	458c      	cmp	ip, r1
 80108a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80108a8:	d8e7      	bhi.n	801087a <__multiply+0xfe>
 80108aa:	9a01      	ldr	r2, [sp, #4]
 80108ac:	50b4      	str	r4, [r6, r2]
 80108ae:	3604      	adds	r6, #4
 80108b0:	e7a3      	b.n	80107fa <__multiply+0x7e>
 80108b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1a5      	bne.n	8010806 <__multiply+0x8a>
 80108ba:	3f01      	subs	r7, #1
 80108bc:	e7a1      	b.n	8010802 <__multiply+0x86>
 80108be:	bf00      	nop
 80108c0:	08013b3c 	.word	0x08013b3c
 80108c4:	08013bcc 	.word	0x08013bcc

080108c8 <__pow5mult>:
 80108c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108cc:	4615      	mov	r5, r2
 80108ce:	f012 0203 	ands.w	r2, r2, #3
 80108d2:	4606      	mov	r6, r0
 80108d4:	460f      	mov	r7, r1
 80108d6:	d007      	beq.n	80108e8 <__pow5mult+0x20>
 80108d8:	4c25      	ldr	r4, [pc, #148]	; (8010970 <__pow5mult+0xa8>)
 80108da:	3a01      	subs	r2, #1
 80108dc:	2300      	movs	r3, #0
 80108de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108e2:	f7ff fe51 	bl	8010588 <__multadd>
 80108e6:	4607      	mov	r7, r0
 80108e8:	10ad      	asrs	r5, r5, #2
 80108ea:	d03d      	beq.n	8010968 <__pow5mult+0xa0>
 80108ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108ee:	b97c      	cbnz	r4, 8010910 <__pow5mult+0x48>
 80108f0:	2010      	movs	r0, #16
 80108f2:	f7fc fbf7 	bl	800d0e4 <malloc>
 80108f6:	4602      	mov	r2, r0
 80108f8:	6270      	str	r0, [r6, #36]	; 0x24
 80108fa:	b928      	cbnz	r0, 8010908 <__pow5mult+0x40>
 80108fc:	4b1d      	ldr	r3, [pc, #116]	; (8010974 <__pow5mult+0xac>)
 80108fe:	481e      	ldr	r0, [pc, #120]	; (8010978 <__pow5mult+0xb0>)
 8010900:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010904:	f000 fc54 	bl	80111b0 <__assert_func>
 8010908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801090c:	6004      	str	r4, [r0, #0]
 801090e:	60c4      	str	r4, [r0, #12]
 8010910:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010918:	b94c      	cbnz	r4, 801092e <__pow5mult+0x66>
 801091a:	f240 2171 	movw	r1, #625	; 0x271
 801091e:	4630      	mov	r0, r6
 8010920:	f7ff ff16 	bl	8010750 <__i2b>
 8010924:	2300      	movs	r3, #0
 8010926:	f8c8 0008 	str.w	r0, [r8, #8]
 801092a:	4604      	mov	r4, r0
 801092c:	6003      	str	r3, [r0, #0]
 801092e:	f04f 0900 	mov.w	r9, #0
 8010932:	07eb      	lsls	r3, r5, #31
 8010934:	d50a      	bpl.n	801094c <__pow5mult+0x84>
 8010936:	4639      	mov	r1, r7
 8010938:	4622      	mov	r2, r4
 801093a:	4630      	mov	r0, r6
 801093c:	f7ff ff1e 	bl	801077c <__multiply>
 8010940:	4639      	mov	r1, r7
 8010942:	4680      	mov	r8, r0
 8010944:	4630      	mov	r0, r6
 8010946:	f7ff fdfd 	bl	8010544 <_Bfree>
 801094a:	4647      	mov	r7, r8
 801094c:	106d      	asrs	r5, r5, #1
 801094e:	d00b      	beq.n	8010968 <__pow5mult+0xa0>
 8010950:	6820      	ldr	r0, [r4, #0]
 8010952:	b938      	cbnz	r0, 8010964 <__pow5mult+0x9c>
 8010954:	4622      	mov	r2, r4
 8010956:	4621      	mov	r1, r4
 8010958:	4630      	mov	r0, r6
 801095a:	f7ff ff0f 	bl	801077c <__multiply>
 801095e:	6020      	str	r0, [r4, #0]
 8010960:	f8c0 9000 	str.w	r9, [r0]
 8010964:	4604      	mov	r4, r0
 8010966:	e7e4      	b.n	8010932 <__pow5mult+0x6a>
 8010968:	4638      	mov	r0, r7
 801096a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801096e:	bf00      	nop
 8010970:	08013d20 	.word	0x08013d20
 8010974:	08013ac6 	.word	0x08013ac6
 8010978:	08013bcc 	.word	0x08013bcc

0801097c <__lshift>:
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	460c      	mov	r4, r1
 8010982:	6849      	ldr	r1, [r1, #4]
 8010984:	6923      	ldr	r3, [r4, #16]
 8010986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801098a:	68a3      	ldr	r3, [r4, #8]
 801098c:	4607      	mov	r7, r0
 801098e:	4691      	mov	r9, r2
 8010990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010994:	f108 0601 	add.w	r6, r8, #1
 8010998:	42b3      	cmp	r3, r6
 801099a:	db0b      	blt.n	80109b4 <__lshift+0x38>
 801099c:	4638      	mov	r0, r7
 801099e:	f7ff fd91 	bl	80104c4 <_Balloc>
 80109a2:	4605      	mov	r5, r0
 80109a4:	b948      	cbnz	r0, 80109ba <__lshift+0x3e>
 80109a6:	4602      	mov	r2, r0
 80109a8:	4b28      	ldr	r3, [pc, #160]	; (8010a4c <__lshift+0xd0>)
 80109aa:	4829      	ldr	r0, [pc, #164]	; (8010a50 <__lshift+0xd4>)
 80109ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80109b0:	f000 fbfe 	bl	80111b0 <__assert_func>
 80109b4:	3101      	adds	r1, #1
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	e7ee      	b.n	8010998 <__lshift+0x1c>
 80109ba:	2300      	movs	r3, #0
 80109bc:	f100 0114 	add.w	r1, r0, #20
 80109c0:	f100 0210 	add.w	r2, r0, #16
 80109c4:	4618      	mov	r0, r3
 80109c6:	4553      	cmp	r3, sl
 80109c8:	db33      	blt.n	8010a32 <__lshift+0xb6>
 80109ca:	6920      	ldr	r0, [r4, #16]
 80109cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109d0:	f104 0314 	add.w	r3, r4, #20
 80109d4:	f019 091f 	ands.w	r9, r9, #31
 80109d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109e0:	d02b      	beq.n	8010a3a <__lshift+0xbe>
 80109e2:	f1c9 0e20 	rsb	lr, r9, #32
 80109e6:	468a      	mov	sl, r1
 80109e8:	2200      	movs	r2, #0
 80109ea:	6818      	ldr	r0, [r3, #0]
 80109ec:	fa00 f009 	lsl.w	r0, r0, r9
 80109f0:	4302      	orrs	r2, r0
 80109f2:	f84a 2b04 	str.w	r2, [sl], #4
 80109f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fa:	459c      	cmp	ip, r3
 80109fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a00:	d8f3      	bhi.n	80109ea <__lshift+0x6e>
 8010a02:	ebac 0304 	sub.w	r3, ip, r4
 8010a06:	3b15      	subs	r3, #21
 8010a08:	f023 0303 	bic.w	r3, r3, #3
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	f104 0015 	add.w	r0, r4, #21
 8010a12:	4584      	cmp	ip, r0
 8010a14:	bf38      	it	cc
 8010a16:	2304      	movcc	r3, #4
 8010a18:	50ca      	str	r2, [r1, r3]
 8010a1a:	b10a      	cbz	r2, 8010a20 <__lshift+0xa4>
 8010a1c:	f108 0602 	add.w	r6, r8, #2
 8010a20:	3e01      	subs	r6, #1
 8010a22:	4638      	mov	r0, r7
 8010a24:	612e      	str	r6, [r5, #16]
 8010a26:	4621      	mov	r1, r4
 8010a28:	f7ff fd8c 	bl	8010544 <_Bfree>
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a32:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a36:	3301      	adds	r3, #1
 8010a38:	e7c5      	b.n	80109c6 <__lshift+0x4a>
 8010a3a:	3904      	subs	r1, #4
 8010a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a40:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a44:	459c      	cmp	ip, r3
 8010a46:	d8f9      	bhi.n	8010a3c <__lshift+0xc0>
 8010a48:	e7ea      	b.n	8010a20 <__lshift+0xa4>
 8010a4a:	bf00      	nop
 8010a4c:	08013b3c 	.word	0x08013b3c
 8010a50:	08013bcc 	.word	0x08013bcc

08010a54 <__mcmp>:
 8010a54:	b530      	push	{r4, r5, lr}
 8010a56:	6902      	ldr	r2, [r0, #16]
 8010a58:	690c      	ldr	r4, [r1, #16]
 8010a5a:	1b12      	subs	r2, r2, r4
 8010a5c:	d10e      	bne.n	8010a7c <__mcmp+0x28>
 8010a5e:	f100 0314 	add.w	r3, r0, #20
 8010a62:	3114      	adds	r1, #20
 8010a64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a74:	42a5      	cmp	r5, r4
 8010a76:	d003      	beq.n	8010a80 <__mcmp+0x2c>
 8010a78:	d305      	bcc.n	8010a86 <__mcmp+0x32>
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	bd30      	pop	{r4, r5, pc}
 8010a80:	4283      	cmp	r3, r0
 8010a82:	d3f3      	bcc.n	8010a6c <__mcmp+0x18>
 8010a84:	e7fa      	b.n	8010a7c <__mcmp+0x28>
 8010a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a8a:	e7f7      	b.n	8010a7c <__mcmp+0x28>

08010a8c <__mdiff>:
 8010a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	460c      	mov	r4, r1
 8010a92:	4606      	mov	r6, r0
 8010a94:	4611      	mov	r1, r2
 8010a96:	4620      	mov	r0, r4
 8010a98:	4617      	mov	r7, r2
 8010a9a:	f7ff ffdb 	bl	8010a54 <__mcmp>
 8010a9e:	1e05      	subs	r5, r0, #0
 8010aa0:	d110      	bne.n	8010ac4 <__mdiff+0x38>
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7ff fd0d 	bl	80104c4 <_Balloc>
 8010aaa:	b930      	cbnz	r0, 8010aba <__mdiff+0x2e>
 8010aac:	4b39      	ldr	r3, [pc, #228]	; (8010b94 <__mdiff+0x108>)
 8010aae:	4602      	mov	r2, r0
 8010ab0:	f240 2132 	movw	r1, #562	; 0x232
 8010ab4:	4838      	ldr	r0, [pc, #224]	; (8010b98 <__mdiff+0x10c>)
 8010ab6:	f000 fb7b 	bl	80111b0 <__assert_func>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac4:	bfa4      	itt	ge
 8010ac6:	463b      	movge	r3, r7
 8010ac8:	4627      	movge	r7, r4
 8010aca:	4630      	mov	r0, r6
 8010acc:	6879      	ldr	r1, [r7, #4]
 8010ace:	bfa6      	itte	ge
 8010ad0:	461c      	movge	r4, r3
 8010ad2:	2500      	movge	r5, #0
 8010ad4:	2501      	movlt	r5, #1
 8010ad6:	f7ff fcf5 	bl	80104c4 <_Balloc>
 8010ada:	b920      	cbnz	r0, 8010ae6 <__mdiff+0x5a>
 8010adc:	4b2d      	ldr	r3, [pc, #180]	; (8010b94 <__mdiff+0x108>)
 8010ade:	4602      	mov	r2, r0
 8010ae0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ae4:	e7e6      	b.n	8010ab4 <__mdiff+0x28>
 8010ae6:	693e      	ldr	r6, [r7, #16]
 8010ae8:	60c5      	str	r5, [r0, #12]
 8010aea:	6925      	ldr	r5, [r4, #16]
 8010aec:	f107 0114 	add.w	r1, r7, #20
 8010af0:	f104 0914 	add.w	r9, r4, #20
 8010af4:	f100 0e14 	add.w	lr, r0, #20
 8010af8:	f107 0210 	add.w	r2, r7, #16
 8010afc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010b00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010b04:	46f2      	mov	sl, lr
 8010b06:	2700      	movs	r7, #0
 8010b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b10:	fa1f f883 	uxth.w	r8, r3
 8010b14:	fa17 f78b 	uxtah	r7, r7, fp
 8010b18:	0c1b      	lsrs	r3, r3, #16
 8010b1a:	eba7 0808 	sub.w	r8, r7, r8
 8010b1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b26:	fa1f f888 	uxth.w	r8, r8
 8010b2a:	141f      	asrs	r7, r3, #16
 8010b2c:	454d      	cmp	r5, r9
 8010b2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b32:	f84a 3b04 	str.w	r3, [sl], #4
 8010b36:	d8e7      	bhi.n	8010b08 <__mdiff+0x7c>
 8010b38:	1b2b      	subs	r3, r5, r4
 8010b3a:	3b15      	subs	r3, #21
 8010b3c:	f023 0303 	bic.w	r3, r3, #3
 8010b40:	3304      	adds	r3, #4
 8010b42:	3415      	adds	r4, #21
 8010b44:	42a5      	cmp	r5, r4
 8010b46:	bf38      	it	cc
 8010b48:	2304      	movcc	r3, #4
 8010b4a:	4419      	add	r1, r3
 8010b4c:	4473      	add	r3, lr
 8010b4e:	469e      	mov	lr, r3
 8010b50:	460d      	mov	r5, r1
 8010b52:	4565      	cmp	r5, ip
 8010b54:	d30e      	bcc.n	8010b74 <__mdiff+0xe8>
 8010b56:	f10c 0203 	add.w	r2, ip, #3
 8010b5a:	1a52      	subs	r2, r2, r1
 8010b5c:	f022 0203 	bic.w	r2, r2, #3
 8010b60:	3903      	subs	r1, #3
 8010b62:	458c      	cmp	ip, r1
 8010b64:	bf38      	it	cc
 8010b66:	2200      	movcc	r2, #0
 8010b68:	441a      	add	r2, r3
 8010b6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b6e:	b17b      	cbz	r3, 8010b90 <__mdiff+0x104>
 8010b70:	6106      	str	r6, [r0, #16]
 8010b72:	e7a5      	b.n	8010ac0 <__mdiff+0x34>
 8010b74:	f855 8b04 	ldr.w	r8, [r5], #4
 8010b78:	fa17 f488 	uxtah	r4, r7, r8
 8010b7c:	1422      	asrs	r2, r4, #16
 8010b7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010b82:	b2a4      	uxth	r4, r4
 8010b84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010b88:	f84e 4b04 	str.w	r4, [lr], #4
 8010b8c:	1417      	asrs	r7, r2, #16
 8010b8e:	e7e0      	b.n	8010b52 <__mdiff+0xc6>
 8010b90:	3e01      	subs	r6, #1
 8010b92:	e7ea      	b.n	8010b6a <__mdiff+0xde>
 8010b94:	08013b3c 	.word	0x08013b3c
 8010b98:	08013bcc 	.word	0x08013bcc

08010b9c <__ulp>:
 8010b9c:	b082      	sub	sp, #8
 8010b9e:	ed8d 0b00 	vstr	d0, [sp]
 8010ba2:	9b01      	ldr	r3, [sp, #4]
 8010ba4:	4912      	ldr	r1, [pc, #72]	; (8010bf0 <__ulp+0x54>)
 8010ba6:	4019      	ands	r1, r3
 8010ba8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010bac:	2900      	cmp	r1, #0
 8010bae:	dd05      	ble.n	8010bbc <__ulp+0x20>
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	ec43 2b10 	vmov	d0, r2, r3
 8010bb8:	b002      	add	sp, #8
 8010bba:	4770      	bx	lr
 8010bbc:	4249      	negs	r1, r1
 8010bbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010bc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010bc6:	f04f 0200 	mov.w	r2, #0
 8010bca:	f04f 0300 	mov.w	r3, #0
 8010bce:	da04      	bge.n	8010bda <__ulp+0x3e>
 8010bd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010bd4:	fa41 f300 	asr.w	r3, r1, r0
 8010bd8:	e7ec      	b.n	8010bb4 <__ulp+0x18>
 8010bda:	f1a0 0114 	sub.w	r1, r0, #20
 8010bde:	291e      	cmp	r1, #30
 8010be0:	bfda      	itte	le
 8010be2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010be6:	fa20 f101 	lsrle.w	r1, r0, r1
 8010bea:	2101      	movgt	r1, #1
 8010bec:	460a      	mov	r2, r1
 8010bee:	e7e1      	b.n	8010bb4 <__ulp+0x18>
 8010bf0:	7ff00000 	.word	0x7ff00000

08010bf4 <__b2d>:
 8010bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf6:	6905      	ldr	r5, [r0, #16]
 8010bf8:	f100 0714 	add.w	r7, r0, #20
 8010bfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010c00:	1f2e      	subs	r6, r5, #4
 8010c02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010c06:	4620      	mov	r0, r4
 8010c08:	f7ff fd52 	bl	80106b0 <__hi0bits>
 8010c0c:	f1c0 0320 	rsb	r3, r0, #32
 8010c10:	280a      	cmp	r0, #10
 8010c12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010c90 <__b2d+0x9c>
 8010c16:	600b      	str	r3, [r1, #0]
 8010c18:	dc14      	bgt.n	8010c44 <__b2d+0x50>
 8010c1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c22:	42b7      	cmp	r7, r6
 8010c24:	ea41 030c 	orr.w	r3, r1, ip
 8010c28:	bf34      	ite	cc
 8010c2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c2e:	2100      	movcs	r1, #0
 8010c30:	3015      	adds	r0, #21
 8010c32:	fa04 f000 	lsl.w	r0, r4, r0
 8010c36:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c3a:	ea40 0201 	orr.w	r2, r0, r1
 8010c3e:	ec43 2b10 	vmov	d0, r2, r3
 8010c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c44:	42b7      	cmp	r7, r6
 8010c46:	bf3a      	itte	cc
 8010c48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c50:	2100      	movcs	r1, #0
 8010c52:	380b      	subs	r0, #11
 8010c54:	d017      	beq.n	8010c86 <__b2d+0x92>
 8010c56:	f1c0 0c20 	rsb	ip, r0, #32
 8010c5a:	fa04 f500 	lsl.w	r5, r4, r0
 8010c5e:	42be      	cmp	r6, r7
 8010c60:	fa21 f40c 	lsr.w	r4, r1, ip
 8010c64:	ea45 0504 	orr.w	r5, r5, r4
 8010c68:	bf8c      	ite	hi
 8010c6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c6e:	2400      	movls	r4, #0
 8010c70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010c74:	fa01 f000 	lsl.w	r0, r1, r0
 8010c78:	fa24 f40c 	lsr.w	r4, r4, ip
 8010c7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010c80:	ea40 0204 	orr.w	r2, r0, r4
 8010c84:	e7db      	b.n	8010c3e <__b2d+0x4a>
 8010c86:	ea44 030c 	orr.w	r3, r4, ip
 8010c8a:	460a      	mov	r2, r1
 8010c8c:	e7d7      	b.n	8010c3e <__b2d+0x4a>
 8010c8e:	bf00      	nop
 8010c90:	3ff00000 	.word	0x3ff00000

08010c94 <__d2b>:
 8010c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c98:	4689      	mov	r9, r1
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	ec57 6b10 	vmov	r6, r7, d0
 8010ca0:	4690      	mov	r8, r2
 8010ca2:	f7ff fc0f 	bl	80104c4 <_Balloc>
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	b930      	cbnz	r0, 8010cb8 <__d2b+0x24>
 8010caa:	4602      	mov	r2, r0
 8010cac:	4b25      	ldr	r3, [pc, #148]	; (8010d44 <__d2b+0xb0>)
 8010cae:	4826      	ldr	r0, [pc, #152]	; (8010d48 <__d2b+0xb4>)
 8010cb0:	f240 310a 	movw	r1, #778	; 0x30a
 8010cb4:	f000 fa7c 	bl	80111b0 <__assert_func>
 8010cb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cc0:	bb35      	cbnz	r5, 8010d10 <__d2b+0x7c>
 8010cc2:	2e00      	cmp	r6, #0
 8010cc4:	9301      	str	r3, [sp, #4]
 8010cc6:	d028      	beq.n	8010d1a <__d2b+0x86>
 8010cc8:	4668      	mov	r0, sp
 8010cca:	9600      	str	r6, [sp, #0]
 8010ccc:	f7ff fd10 	bl	80106f0 <__lo0bits>
 8010cd0:	9900      	ldr	r1, [sp, #0]
 8010cd2:	b300      	cbz	r0, 8010d16 <__d2b+0x82>
 8010cd4:	9a01      	ldr	r2, [sp, #4]
 8010cd6:	f1c0 0320 	rsb	r3, r0, #32
 8010cda:	fa02 f303 	lsl.w	r3, r2, r3
 8010cde:	430b      	orrs	r3, r1
 8010ce0:	40c2      	lsrs	r2, r0
 8010ce2:	6163      	str	r3, [r4, #20]
 8010ce4:	9201      	str	r2, [sp, #4]
 8010ce6:	9b01      	ldr	r3, [sp, #4]
 8010ce8:	61a3      	str	r3, [r4, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	bf14      	ite	ne
 8010cee:	2202      	movne	r2, #2
 8010cf0:	2201      	moveq	r2, #1
 8010cf2:	6122      	str	r2, [r4, #16]
 8010cf4:	b1d5      	cbz	r5, 8010d2c <__d2b+0x98>
 8010cf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010cfa:	4405      	add	r5, r0
 8010cfc:	f8c9 5000 	str.w	r5, [r9]
 8010d00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d04:	f8c8 0000 	str.w	r0, [r8]
 8010d08:	4620      	mov	r0, r4
 8010d0a:	b003      	add	sp, #12
 8010d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d14:	e7d5      	b.n	8010cc2 <__d2b+0x2e>
 8010d16:	6161      	str	r1, [r4, #20]
 8010d18:	e7e5      	b.n	8010ce6 <__d2b+0x52>
 8010d1a:	a801      	add	r0, sp, #4
 8010d1c:	f7ff fce8 	bl	80106f0 <__lo0bits>
 8010d20:	9b01      	ldr	r3, [sp, #4]
 8010d22:	6163      	str	r3, [r4, #20]
 8010d24:	2201      	movs	r2, #1
 8010d26:	6122      	str	r2, [r4, #16]
 8010d28:	3020      	adds	r0, #32
 8010d2a:	e7e3      	b.n	8010cf4 <__d2b+0x60>
 8010d2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d34:	f8c9 0000 	str.w	r0, [r9]
 8010d38:	6918      	ldr	r0, [r3, #16]
 8010d3a:	f7ff fcb9 	bl	80106b0 <__hi0bits>
 8010d3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d42:	e7df      	b.n	8010d04 <__d2b+0x70>
 8010d44:	08013b3c 	.word	0x08013b3c
 8010d48:	08013bcc 	.word	0x08013bcc

08010d4c <__ratio>:
 8010d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	4688      	mov	r8, r1
 8010d52:	4669      	mov	r1, sp
 8010d54:	4681      	mov	r9, r0
 8010d56:	f7ff ff4d 	bl	8010bf4 <__b2d>
 8010d5a:	a901      	add	r1, sp, #4
 8010d5c:	4640      	mov	r0, r8
 8010d5e:	ec55 4b10 	vmov	r4, r5, d0
 8010d62:	f7ff ff47 	bl	8010bf4 <__b2d>
 8010d66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d6e:	eba3 0c02 	sub.w	ip, r3, r2
 8010d72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d76:	1a9b      	subs	r3, r3, r2
 8010d78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d7c:	ec51 0b10 	vmov	r0, r1, d0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	bfd6      	itet	le
 8010d84:	460a      	movle	r2, r1
 8010d86:	462a      	movgt	r2, r5
 8010d88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d8c:	468b      	mov	fp, r1
 8010d8e:	462f      	mov	r7, r5
 8010d90:	bfd4      	ite	le
 8010d92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	ee10 2a10 	vmov	r2, s0
 8010da0:	465b      	mov	r3, fp
 8010da2:	4639      	mov	r1, r7
 8010da4:	f7ef fd72 	bl	800088c <__aeabi_ddiv>
 8010da8:	ec41 0b10 	vmov	d0, r0, r1
 8010dac:	b003      	add	sp, #12
 8010dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010db2 <__copybits>:
 8010db2:	3901      	subs	r1, #1
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	1149      	asrs	r1, r1, #5
 8010db8:	6914      	ldr	r4, [r2, #16]
 8010dba:	3101      	adds	r1, #1
 8010dbc:	f102 0314 	add.w	r3, r2, #20
 8010dc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010dc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010dc8:	1f05      	subs	r5, r0, #4
 8010dca:	42a3      	cmp	r3, r4
 8010dcc:	d30c      	bcc.n	8010de8 <__copybits+0x36>
 8010dce:	1aa3      	subs	r3, r4, r2
 8010dd0:	3b11      	subs	r3, #17
 8010dd2:	f023 0303 	bic.w	r3, r3, #3
 8010dd6:	3211      	adds	r2, #17
 8010dd8:	42a2      	cmp	r2, r4
 8010dda:	bf88      	it	hi
 8010ddc:	2300      	movhi	r3, #0
 8010dde:	4418      	add	r0, r3
 8010de0:	2300      	movs	r3, #0
 8010de2:	4288      	cmp	r0, r1
 8010de4:	d305      	bcc.n	8010df2 <__copybits+0x40>
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	f853 6b04 	ldr.w	r6, [r3], #4
 8010dec:	f845 6f04 	str.w	r6, [r5, #4]!
 8010df0:	e7eb      	b.n	8010dca <__copybits+0x18>
 8010df2:	f840 3b04 	str.w	r3, [r0], #4
 8010df6:	e7f4      	b.n	8010de2 <__copybits+0x30>

08010df8 <__any_on>:
 8010df8:	f100 0214 	add.w	r2, r0, #20
 8010dfc:	6900      	ldr	r0, [r0, #16]
 8010dfe:	114b      	asrs	r3, r1, #5
 8010e00:	4298      	cmp	r0, r3
 8010e02:	b510      	push	{r4, lr}
 8010e04:	db11      	blt.n	8010e2a <__any_on+0x32>
 8010e06:	dd0a      	ble.n	8010e1e <__any_on+0x26>
 8010e08:	f011 011f 	ands.w	r1, r1, #31
 8010e0c:	d007      	beq.n	8010e1e <__any_on+0x26>
 8010e0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e12:	fa24 f001 	lsr.w	r0, r4, r1
 8010e16:	fa00 f101 	lsl.w	r1, r0, r1
 8010e1a:	428c      	cmp	r4, r1
 8010e1c:	d10b      	bne.n	8010e36 <__any_on+0x3e>
 8010e1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d803      	bhi.n	8010e2e <__any_on+0x36>
 8010e26:	2000      	movs	r0, #0
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	e7f7      	b.n	8010e1e <__any_on+0x26>
 8010e2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e32:	2900      	cmp	r1, #0
 8010e34:	d0f5      	beq.n	8010e22 <__any_on+0x2a>
 8010e36:	2001      	movs	r0, #1
 8010e38:	e7f6      	b.n	8010e28 <__any_on+0x30>

08010e3a <_realloc_r>:
 8010e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3c:	4607      	mov	r7, r0
 8010e3e:	4614      	mov	r4, r2
 8010e40:	460e      	mov	r6, r1
 8010e42:	b921      	cbnz	r1, 8010e4e <_realloc_r+0x14>
 8010e44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010e48:	4611      	mov	r1, r2
 8010e4a:	f7fc b9c9 	b.w	800d1e0 <_malloc_r>
 8010e4e:	b922      	cbnz	r2, 8010e5a <_realloc_r+0x20>
 8010e50:	f7fc f976 	bl	800d140 <_free_r>
 8010e54:	4625      	mov	r5, r4
 8010e56:	4628      	mov	r0, r5
 8010e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e5a:	f000 f9f3 	bl	8011244 <_malloc_usable_size_r>
 8010e5e:	42a0      	cmp	r0, r4
 8010e60:	d20f      	bcs.n	8010e82 <_realloc_r+0x48>
 8010e62:	4621      	mov	r1, r4
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7fc f9bb 	bl	800d1e0 <_malloc_r>
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d0f2      	beq.n	8010e56 <_realloc_r+0x1c>
 8010e70:	4631      	mov	r1, r6
 8010e72:	4622      	mov	r2, r4
 8010e74:	f7fc f93e 	bl	800d0f4 <memcpy>
 8010e78:	4631      	mov	r1, r6
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	f7fc f960 	bl	800d140 <_free_r>
 8010e80:	e7e9      	b.n	8010e56 <_realloc_r+0x1c>
 8010e82:	4635      	mov	r5, r6
 8010e84:	e7e7      	b.n	8010e56 <_realloc_r+0x1c>

08010e86 <__ssputs_r>:
 8010e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e8a:	688e      	ldr	r6, [r1, #8]
 8010e8c:	429e      	cmp	r6, r3
 8010e8e:	4682      	mov	sl, r0
 8010e90:	460c      	mov	r4, r1
 8010e92:	4690      	mov	r8, r2
 8010e94:	461f      	mov	r7, r3
 8010e96:	d838      	bhi.n	8010f0a <__ssputs_r+0x84>
 8010e98:	898a      	ldrh	r2, [r1, #12]
 8010e9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e9e:	d032      	beq.n	8010f06 <__ssputs_r+0x80>
 8010ea0:	6825      	ldr	r5, [r4, #0]
 8010ea2:	6909      	ldr	r1, [r1, #16]
 8010ea4:	eba5 0901 	sub.w	r9, r5, r1
 8010ea8:	6965      	ldr	r5, [r4, #20]
 8010eaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010eae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	444b      	add	r3, r9
 8010eb6:	106d      	asrs	r5, r5, #1
 8010eb8:	429d      	cmp	r5, r3
 8010eba:	bf38      	it	cc
 8010ebc:	461d      	movcc	r5, r3
 8010ebe:	0553      	lsls	r3, r2, #21
 8010ec0:	d531      	bpl.n	8010f26 <__ssputs_r+0xa0>
 8010ec2:	4629      	mov	r1, r5
 8010ec4:	f7fc f98c 	bl	800d1e0 <_malloc_r>
 8010ec8:	4606      	mov	r6, r0
 8010eca:	b950      	cbnz	r0, 8010ee2 <__ssputs_r+0x5c>
 8010ecc:	230c      	movs	r3, #12
 8010ece:	f8ca 3000 	str.w	r3, [sl]
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ed8:	81a3      	strh	r3, [r4, #12]
 8010eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee2:	6921      	ldr	r1, [r4, #16]
 8010ee4:	464a      	mov	r2, r9
 8010ee6:	f7fc f905 	bl	800d0f4 <memcpy>
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef4:	81a3      	strh	r3, [r4, #12]
 8010ef6:	6126      	str	r6, [r4, #16]
 8010ef8:	6165      	str	r5, [r4, #20]
 8010efa:	444e      	add	r6, r9
 8010efc:	eba5 0509 	sub.w	r5, r5, r9
 8010f00:	6026      	str	r6, [r4, #0]
 8010f02:	60a5      	str	r5, [r4, #8]
 8010f04:	463e      	mov	r6, r7
 8010f06:	42be      	cmp	r6, r7
 8010f08:	d900      	bls.n	8010f0c <__ssputs_r+0x86>
 8010f0a:	463e      	mov	r6, r7
 8010f0c:	4632      	mov	r2, r6
 8010f0e:	6820      	ldr	r0, [r4, #0]
 8010f10:	4641      	mov	r1, r8
 8010f12:	f000 f97d 	bl	8011210 <memmove>
 8010f16:	68a3      	ldr	r3, [r4, #8]
 8010f18:	6822      	ldr	r2, [r4, #0]
 8010f1a:	1b9b      	subs	r3, r3, r6
 8010f1c:	4432      	add	r2, r6
 8010f1e:	60a3      	str	r3, [r4, #8]
 8010f20:	6022      	str	r2, [r4, #0]
 8010f22:	2000      	movs	r0, #0
 8010f24:	e7db      	b.n	8010ede <__ssputs_r+0x58>
 8010f26:	462a      	mov	r2, r5
 8010f28:	f7ff ff87 	bl	8010e3a <_realloc_r>
 8010f2c:	4606      	mov	r6, r0
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d1e1      	bne.n	8010ef6 <__ssputs_r+0x70>
 8010f32:	6921      	ldr	r1, [r4, #16]
 8010f34:	4650      	mov	r0, sl
 8010f36:	f7fc f903 	bl	800d140 <_free_r>
 8010f3a:	e7c7      	b.n	8010ecc <__ssputs_r+0x46>

08010f3c <_svfiprintf_r>:
 8010f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f40:	4698      	mov	r8, r3
 8010f42:	898b      	ldrh	r3, [r1, #12]
 8010f44:	061b      	lsls	r3, r3, #24
 8010f46:	b09d      	sub	sp, #116	; 0x74
 8010f48:	4607      	mov	r7, r0
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	4614      	mov	r4, r2
 8010f4e:	d50e      	bpl.n	8010f6e <_svfiprintf_r+0x32>
 8010f50:	690b      	ldr	r3, [r1, #16]
 8010f52:	b963      	cbnz	r3, 8010f6e <_svfiprintf_r+0x32>
 8010f54:	2140      	movs	r1, #64	; 0x40
 8010f56:	f7fc f943 	bl	800d1e0 <_malloc_r>
 8010f5a:	6028      	str	r0, [r5, #0]
 8010f5c:	6128      	str	r0, [r5, #16]
 8010f5e:	b920      	cbnz	r0, 8010f6a <_svfiprintf_r+0x2e>
 8010f60:	230c      	movs	r3, #12
 8010f62:	603b      	str	r3, [r7, #0]
 8010f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f68:	e0d1      	b.n	801110e <_svfiprintf_r+0x1d2>
 8010f6a:	2340      	movs	r3, #64	; 0x40
 8010f6c:	616b      	str	r3, [r5, #20]
 8010f6e:	2300      	movs	r3, #0
 8010f70:	9309      	str	r3, [sp, #36]	; 0x24
 8010f72:	2320      	movs	r3, #32
 8010f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f7c:	2330      	movs	r3, #48	; 0x30
 8010f7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011128 <_svfiprintf_r+0x1ec>
 8010f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f86:	f04f 0901 	mov.w	r9, #1
 8010f8a:	4623      	mov	r3, r4
 8010f8c:	469a      	mov	sl, r3
 8010f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f92:	b10a      	cbz	r2, 8010f98 <_svfiprintf_r+0x5c>
 8010f94:	2a25      	cmp	r2, #37	; 0x25
 8010f96:	d1f9      	bne.n	8010f8c <_svfiprintf_r+0x50>
 8010f98:	ebba 0b04 	subs.w	fp, sl, r4
 8010f9c:	d00b      	beq.n	8010fb6 <_svfiprintf_r+0x7a>
 8010f9e:	465b      	mov	r3, fp
 8010fa0:	4622      	mov	r2, r4
 8010fa2:	4629      	mov	r1, r5
 8010fa4:	4638      	mov	r0, r7
 8010fa6:	f7ff ff6e 	bl	8010e86 <__ssputs_r>
 8010faa:	3001      	adds	r0, #1
 8010fac:	f000 80aa 	beq.w	8011104 <_svfiprintf_r+0x1c8>
 8010fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fb2:	445a      	add	r2, fp
 8010fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8010fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f000 80a2 	beq.w	8011104 <_svfiprintf_r+0x1c8>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fca:	f10a 0a01 	add.w	sl, sl, #1
 8010fce:	9304      	str	r3, [sp, #16]
 8010fd0:	9307      	str	r3, [sp, #28]
 8010fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8010fd8:	4654      	mov	r4, sl
 8010fda:	2205      	movs	r2, #5
 8010fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fe0:	4851      	ldr	r0, [pc, #324]	; (8011128 <_svfiprintf_r+0x1ec>)
 8010fe2:	f7ef f91d 	bl	8000220 <memchr>
 8010fe6:	9a04      	ldr	r2, [sp, #16]
 8010fe8:	b9d8      	cbnz	r0, 8011022 <_svfiprintf_r+0xe6>
 8010fea:	06d0      	lsls	r0, r2, #27
 8010fec:	bf44      	itt	mi
 8010fee:	2320      	movmi	r3, #32
 8010ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ff4:	0711      	lsls	r1, r2, #28
 8010ff6:	bf44      	itt	mi
 8010ff8:	232b      	movmi	r3, #43	; 0x2b
 8010ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8011002:	2b2a      	cmp	r3, #42	; 0x2a
 8011004:	d015      	beq.n	8011032 <_svfiprintf_r+0xf6>
 8011006:	9a07      	ldr	r2, [sp, #28]
 8011008:	4654      	mov	r4, sl
 801100a:	2000      	movs	r0, #0
 801100c:	f04f 0c0a 	mov.w	ip, #10
 8011010:	4621      	mov	r1, r4
 8011012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011016:	3b30      	subs	r3, #48	; 0x30
 8011018:	2b09      	cmp	r3, #9
 801101a:	d94e      	bls.n	80110ba <_svfiprintf_r+0x17e>
 801101c:	b1b0      	cbz	r0, 801104c <_svfiprintf_r+0x110>
 801101e:	9207      	str	r2, [sp, #28]
 8011020:	e014      	b.n	801104c <_svfiprintf_r+0x110>
 8011022:	eba0 0308 	sub.w	r3, r0, r8
 8011026:	fa09 f303 	lsl.w	r3, r9, r3
 801102a:	4313      	orrs	r3, r2
 801102c:	9304      	str	r3, [sp, #16]
 801102e:	46a2      	mov	sl, r4
 8011030:	e7d2      	b.n	8010fd8 <_svfiprintf_r+0x9c>
 8011032:	9b03      	ldr	r3, [sp, #12]
 8011034:	1d19      	adds	r1, r3, #4
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	9103      	str	r1, [sp, #12]
 801103a:	2b00      	cmp	r3, #0
 801103c:	bfbb      	ittet	lt
 801103e:	425b      	neglt	r3, r3
 8011040:	f042 0202 	orrlt.w	r2, r2, #2
 8011044:	9307      	strge	r3, [sp, #28]
 8011046:	9307      	strlt	r3, [sp, #28]
 8011048:	bfb8      	it	lt
 801104a:	9204      	strlt	r2, [sp, #16]
 801104c:	7823      	ldrb	r3, [r4, #0]
 801104e:	2b2e      	cmp	r3, #46	; 0x2e
 8011050:	d10c      	bne.n	801106c <_svfiprintf_r+0x130>
 8011052:	7863      	ldrb	r3, [r4, #1]
 8011054:	2b2a      	cmp	r3, #42	; 0x2a
 8011056:	d135      	bne.n	80110c4 <_svfiprintf_r+0x188>
 8011058:	9b03      	ldr	r3, [sp, #12]
 801105a:	1d1a      	adds	r2, r3, #4
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	9203      	str	r2, [sp, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	bfb8      	it	lt
 8011064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011068:	3402      	adds	r4, #2
 801106a:	9305      	str	r3, [sp, #20]
 801106c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011138 <_svfiprintf_r+0x1fc>
 8011070:	7821      	ldrb	r1, [r4, #0]
 8011072:	2203      	movs	r2, #3
 8011074:	4650      	mov	r0, sl
 8011076:	f7ef f8d3 	bl	8000220 <memchr>
 801107a:	b140      	cbz	r0, 801108e <_svfiprintf_r+0x152>
 801107c:	2340      	movs	r3, #64	; 0x40
 801107e:	eba0 000a 	sub.w	r0, r0, sl
 8011082:	fa03 f000 	lsl.w	r0, r3, r0
 8011086:	9b04      	ldr	r3, [sp, #16]
 8011088:	4303      	orrs	r3, r0
 801108a:	3401      	adds	r4, #1
 801108c:	9304      	str	r3, [sp, #16]
 801108e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011092:	4826      	ldr	r0, [pc, #152]	; (801112c <_svfiprintf_r+0x1f0>)
 8011094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011098:	2206      	movs	r2, #6
 801109a:	f7ef f8c1 	bl	8000220 <memchr>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d038      	beq.n	8011114 <_svfiprintf_r+0x1d8>
 80110a2:	4b23      	ldr	r3, [pc, #140]	; (8011130 <_svfiprintf_r+0x1f4>)
 80110a4:	bb1b      	cbnz	r3, 80110ee <_svfiprintf_r+0x1b2>
 80110a6:	9b03      	ldr	r3, [sp, #12]
 80110a8:	3307      	adds	r3, #7
 80110aa:	f023 0307 	bic.w	r3, r3, #7
 80110ae:	3308      	adds	r3, #8
 80110b0:	9303      	str	r3, [sp, #12]
 80110b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b4:	4433      	add	r3, r6
 80110b6:	9309      	str	r3, [sp, #36]	; 0x24
 80110b8:	e767      	b.n	8010f8a <_svfiprintf_r+0x4e>
 80110ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80110be:	460c      	mov	r4, r1
 80110c0:	2001      	movs	r0, #1
 80110c2:	e7a5      	b.n	8011010 <_svfiprintf_r+0xd4>
 80110c4:	2300      	movs	r3, #0
 80110c6:	3401      	adds	r4, #1
 80110c8:	9305      	str	r3, [sp, #20]
 80110ca:	4619      	mov	r1, r3
 80110cc:	f04f 0c0a 	mov.w	ip, #10
 80110d0:	4620      	mov	r0, r4
 80110d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110d6:	3a30      	subs	r2, #48	; 0x30
 80110d8:	2a09      	cmp	r2, #9
 80110da:	d903      	bls.n	80110e4 <_svfiprintf_r+0x1a8>
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d0c5      	beq.n	801106c <_svfiprintf_r+0x130>
 80110e0:	9105      	str	r1, [sp, #20]
 80110e2:	e7c3      	b.n	801106c <_svfiprintf_r+0x130>
 80110e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80110e8:	4604      	mov	r4, r0
 80110ea:	2301      	movs	r3, #1
 80110ec:	e7f0      	b.n	80110d0 <_svfiprintf_r+0x194>
 80110ee:	ab03      	add	r3, sp, #12
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	462a      	mov	r2, r5
 80110f4:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <_svfiprintf_r+0x1f8>)
 80110f6:	a904      	add	r1, sp, #16
 80110f8:	4638      	mov	r0, r7
 80110fa:	f7fc f96b 	bl	800d3d4 <_printf_float>
 80110fe:	1c42      	adds	r2, r0, #1
 8011100:	4606      	mov	r6, r0
 8011102:	d1d6      	bne.n	80110b2 <_svfiprintf_r+0x176>
 8011104:	89ab      	ldrh	r3, [r5, #12]
 8011106:	065b      	lsls	r3, r3, #25
 8011108:	f53f af2c 	bmi.w	8010f64 <_svfiprintf_r+0x28>
 801110c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801110e:	b01d      	add	sp, #116	; 0x74
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	ab03      	add	r3, sp, #12
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	462a      	mov	r2, r5
 801111a:	4b06      	ldr	r3, [pc, #24]	; (8011134 <_svfiprintf_r+0x1f8>)
 801111c:	a904      	add	r1, sp, #16
 801111e:	4638      	mov	r0, r7
 8011120:	f7fc fbfc 	bl	800d91c <_printf_i>
 8011124:	e7eb      	b.n	80110fe <_svfiprintf_r+0x1c2>
 8011126:	bf00      	nop
 8011128:	08013d2c 	.word	0x08013d2c
 801112c:	08013d36 	.word	0x08013d36
 8011130:	0800d3d5 	.word	0x0800d3d5
 8011134:	08010e87 	.word	0x08010e87
 8011138:	08013d32 	.word	0x08013d32

0801113c <_read_r>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4d07      	ldr	r5, [pc, #28]	; (801115c <_read_r+0x20>)
 8011140:	4604      	mov	r4, r0
 8011142:	4608      	mov	r0, r1
 8011144:	4611      	mov	r1, r2
 8011146:	2200      	movs	r2, #0
 8011148:	602a      	str	r2, [r5, #0]
 801114a:	461a      	mov	r2, r3
 801114c:	f7f1 fd7e 	bl	8002c4c <_read>
 8011150:	1c43      	adds	r3, r0, #1
 8011152:	d102      	bne.n	801115a <_read_r+0x1e>
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	b103      	cbz	r3, 801115a <_read_r+0x1e>
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	200056a0 	.word	0x200056a0

08011160 <nan>:
 8011160:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011168 <nan+0x8>
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	00000000 	.word	0x00000000
 801116c:	7ff80000 	.word	0x7ff80000

08011170 <strncmp>:
 8011170:	b510      	push	{r4, lr}
 8011172:	b16a      	cbz	r2, 8011190 <strncmp+0x20>
 8011174:	3901      	subs	r1, #1
 8011176:	1884      	adds	r4, r0, r2
 8011178:	f810 3b01 	ldrb.w	r3, [r0], #1
 801117c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011180:	4293      	cmp	r3, r2
 8011182:	d103      	bne.n	801118c <strncmp+0x1c>
 8011184:	42a0      	cmp	r0, r4
 8011186:	d001      	beq.n	801118c <strncmp+0x1c>
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1f5      	bne.n	8011178 <strncmp+0x8>
 801118c:	1a98      	subs	r0, r3, r2
 801118e:	bd10      	pop	{r4, pc}
 8011190:	4610      	mov	r0, r2
 8011192:	e7fc      	b.n	801118e <strncmp+0x1e>

08011194 <__ascii_wctomb>:
 8011194:	b149      	cbz	r1, 80111aa <__ascii_wctomb+0x16>
 8011196:	2aff      	cmp	r2, #255	; 0xff
 8011198:	bf85      	ittet	hi
 801119a:	238a      	movhi	r3, #138	; 0x8a
 801119c:	6003      	strhi	r3, [r0, #0]
 801119e:	700a      	strbls	r2, [r1, #0]
 80111a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80111a4:	bf98      	it	ls
 80111a6:	2001      	movls	r0, #1
 80111a8:	4770      	bx	lr
 80111aa:	4608      	mov	r0, r1
 80111ac:	4770      	bx	lr
	...

080111b0 <__assert_func>:
 80111b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111b2:	4614      	mov	r4, r2
 80111b4:	461a      	mov	r2, r3
 80111b6:	4b09      	ldr	r3, [pc, #36]	; (80111dc <__assert_func+0x2c>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4605      	mov	r5, r0
 80111bc:	68d8      	ldr	r0, [r3, #12]
 80111be:	b14c      	cbz	r4, 80111d4 <__assert_func+0x24>
 80111c0:	4b07      	ldr	r3, [pc, #28]	; (80111e0 <__assert_func+0x30>)
 80111c2:	9100      	str	r1, [sp, #0]
 80111c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111c8:	4906      	ldr	r1, [pc, #24]	; (80111e4 <__assert_func+0x34>)
 80111ca:	462b      	mov	r3, r5
 80111cc:	f000 f80e 	bl	80111ec <fiprintf>
 80111d0:	f000 fa5a 	bl	8011688 <abort>
 80111d4:	4b04      	ldr	r3, [pc, #16]	; (80111e8 <__assert_func+0x38>)
 80111d6:	461c      	mov	r4, r3
 80111d8:	e7f3      	b.n	80111c2 <__assert_func+0x12>
 80111da:	bf00      	nop
 80111dc:	20000014 	.word	0x20000014
 80111e0:	08013d3d 	.word	0x08013d3d
 80111e4:	08013d4a 	.word	0x08013d4a
 80111e8:	08013d78 	.word	0x08013d78

080111ec <fiprintf>:
 80111ec:	b40e      	push	{r1, r2, r3}
 80111ee:	b503      	push	{r0, r1, lr}
 80111f0:	4601      	mov	r1, r0
 80111f2:	ab03      	add	r3, sp, #12
 80111f4:	4805      	ldr	r0, [pc, #20]	; (801120c <fiprintf+0x20>)
 80111f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fa:	6800      	ldr	r0, [r0, #0]
 80111fc:	9301      	str	r3, [sp, #4]
 80111fe:	f000 f853 	bl	80112a8 <_vfiprintf_r>
 8011202:	b002      	add	sp, #8
 8011204:	f85d eb04 	ldr.w	lr, [sp], #4
 8011208:	b003      	add	sp, #12
 801120a:	4770      	bx	lr
 801120c:	20000014 	.word	0x20000014

08011210 <memmove>:
 8011210:	4288      	cmp	r0, r1
 8011212:	b510      	push	{r4, lr}
 8011214:	eb01 0402 	add.w	r4, r1, r2
 8011218:	d902      	bls.n	8011220 <memmove+0x10>
 801121a:	4284      	cmp	r4, r0
 801121c:	4623      	mov	r3, r4
 801121e:	d807      	bhi.n	8011230 <memmove+0x20>
 8011220:	1e43      	subs	r3, r0, #1
 8011222:	42a1      	cmp	r1, r4
 8011224:	d008      	beq.n	8011238 <memmove+0x28>
 8011226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801122a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801122e:	e7f8      	b.n	8011222 <memmove+0x12>
 8011230:	4402      	add	r2, r0
 8011232:	4601      	mov	r1, r0
 8011234:	428a      	cmp	r2, r1
 8011236:	d100      	bne.n	801123a <memmove+0x2a>
 8011238:	bd10      	pop	{r4, pc}
 801123a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801123e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011242:	e7f7      	b.n	8011234 <memmove+0x24>

08011244 <_malloc_usable_size_r>:
 8011244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011248:	1f18      	subs	r0, r3, #4
 801124a:	2b00      	cmp	r3, #0
 801124c:	bfbc      	itt	lt
 801124e:	580b      	ldrlt	r3, [r1, r0]
 8011250:	18c0      	addlt	r0, r0, r3
 8011252:	4770      	bx	lr

08011254 <__sfputc_r>:
 8011254:	6893      	ldr	r3, [r2, #8]
 8011256:	3b01      	subs	r3, #1
 8011258:	2b00      	cmp	r3, #0
 801125a:	b410      	push	{r4}
 801125c:	6093      	str	r3, [r2, #8]
 801125e:	da08      	bge.n	8011272 <__sfputc_r+0x1e>
 8011260:	6994      	ldr	r4, [r2, #24]
 8011262:	42a3      	cmp	r3, r4
 8011264:	db01      	blt.n	801126a <__sfputc_r+0x16>
 8011266:	290a      	cmp	r1, #10
 8011268:	d103      	bne.n	8011272 <__sfputc_r+0x1e>
 801126a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801126e:	f000 b94b 	b.w	8011508 <__swbuf_r>
 8011272:	6813      	ldr	r3, [r2, #0]
 8011274:	1c58      	adds	r0, r3, #1
 8011276:	6010      	str	r0, [r2, #0]
 8011278:	7019      	strb	r1, [r3, #0]
 801127a:	4608      	mov	r0, r1
 801127c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011280:	4770      	bx	lr

08011282 <__sfputs_r>:
 8011282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011284:	4606      	mov	r6, r0
 8011286:	460f      	mov	r7, r1
 8011288:	4614      	mov	r4, r2
 801128a:	18d5      	adds	r5, r2, r3
 801128c:	42ac      	cmp	r4, r5
 801128e:	d101      	bne.n	8011294 <__sfputs_r+0x12>
 8011290:	2000      	movs	r0, #0
 8011292:	e007      	b.n	80112a4 <__sfputs_r+0x22>
 8011294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011298:	463a      	mov	r2, r7
 801129a:	4630      	mov	r0, r6
 801129c:	f7ff ffda 	bl	8011254 <__sfputc_r>
 80112a0:	1c43      	adds	r3, r0, #1
 80112a2:	d1f3      	bne.n	801128c <__sfputs_r+0xa>
 80112a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112a8 <_vfiprintf_r>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	460d      	mov	r5, r1
 80112ae:	b09d      	sub	sp, #116	; 0x74
 80112b0:	4614      	mov	r4, r2
 80112b2:	4698      	mov	r8, r3
 80112b4:	4606      	mov	r6, r0
 80112b6:	b118      	cbz	r0, 80112c0 <_vfiprintf_r+0x18>
 80112b8:	6983      	ldr	r3, [r0, #24]
 80112ba:	b90b      	cbnz	r3, 80112c0 <_vfiprintf_r+0x18>
 80112bc:	f7fb fe4c 	bl	800cf58 <__sinit>
 80112c0:	4b89      	ldr	r3, [pc, #548]	; (80114e8 <_vfiprintf_r+0x240>)
 80112c2:	429d      	cmp	r5, r3
 80112c4:	d11b      	bne.n	80112fe <_vfiprintf_r+0x56>
 80112c6:	6875      	ldr	r5, [r6, #4]
 80112c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ca:	07d9      	lsls	r1, r3, #31
 80112cc:	d405      	bmi.n	80112da <_vfiprintf_r+0x32>
 80112ce:	89ab      	ldrh	r3, [r5, #12]
 80112d0:	059a      	lsls	r2, r3, #22
 80112d2:	d402      	bmi.n	80112da <_vfiprintf_r+0x32>
 80112d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112d6:	f7fb ff02 	bl	800d0de <__retarget_lock_acquire_recursive>
 80112da:	89ab      	ldrh	r3, [r5, #12]
 80112dc:	071b      	lsls	r3, r3, #28
 80112de:	d501      	bpl.n	80112e4 <_vfiprintf_r+0x3c>
 80112e0:	692b      	ldr	r3, [r5, #16]
 80112e2:	b9eb      	cbnz	r3, 8011320 <_vfiprintf_r+0x78>
 80112e4:	4629      	mov	r1, r5
 80112e6:	4630      	mov	r0, r6
 80112e8:	f000 f960 	bl	80115ac <__swsetup_r>
 80112ec:	b1c0      	cbz	r0, 8011320 <_vfiprintf_r+0x78>
 80112ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112f0:	07dc      	lsls	r4, r3, #31
 80112f2:	d50e      	bpl.n	8011312 <_vfiprintf_r+0x6a>
 80112f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112f8:	b01d      	add	sp, #116	; 0x74
 80112fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112fe:	4b7b      	ldr	r3, [pc, #492]	; (80114ec <_vfiprintf_r+0x244>)
 8011300:	429d      	cmp	r5, r3
 8011302:	d101      	bne.n	8011308 <_vfiprintf_r+0x60>
 8011304:	68b5      	ldr	r5, [r6, #8]
 8011306:	e7df      	b.n	80112c8 <_vfiprintf_r+0x20>
 8011308:	4b79      	ldr	r3, [pc, #484]	; (80114f0 <_vfiprintf_r+0x248>)
 801130a:	429d      	cmp	r5, r3
 801130c:	bf08      	it	eq
 801130e:	68f5      	ldreq	r5, [r6, #12]
 8011310:	e7da      	b.n	80112c8 <_vfiprintf_r+0x20>
 8011312:	89ab      	ldrh	r3, [r5, #12]
 8011314:	0598      	lsls	r0, r3, #22
 8011316:	d4ed      	bmi.n	80112f4 <_vfiprintf_r+0x4c>
 8011318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801131a:	f7fb fee1 	bl	800d0e0 <__retarget_lock_release_recursive>
 801131e:	e7e9      	b.n	80112f4 <_vfiprintf_r+0x4c>
 8011320:	2300      	movs	r3, #0
 8011322:	9309      	str	r3, [sp, #36]	; 0x24
 8011324:	2320      	movs	r3, #32
 8011326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801132a:	f8cd 800c 	str.w	r8, [sp, #12]
 801132e:	2330      	movs	r3, #48	; 0x30
 8011330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80114f4 <_vfiprintf_r+0x24c>
 8011334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011338:	f04f 0901 	mov.w	r9, #1
 801133c:	4623      	mov	r3, r4
 801133e:	469a      	mov	sl, r3
 8011340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011344:	b10a      	cbz	r2, 801134a <_vfiprintf_r+0xa2>
 8011346:	2a25      	cmp	r2, #37	; 0x25
 8011348:	d1f9      	bne.n	801133e <_vfiprintf_r+0x96>
 801134a:	ebba 0b04 	subs.w	fp, sl, r4
 801134e:	d00b      	beq.n	8011368 <_vfiprintf_r+0xc0>
 8011350:	465b      	mov	r3, fp
 8011352:	4622      	mov	r2, r4
 8011354:	4629      	mov	r1, r5
 8011356:	4630      	mov	r0, r6
 8011358:	f7ff ff93 	bl	8011282 <__sfputs_r>
 801135c:	3001      	adds	r0, #1
 801135e:	f000 80aa 	beq.w	80114b6 <_vfiprintf_r+0x20e>
 8011362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011364:	445a      	add	r2, fp
 8011366:	9209      	str	r2, [sp, #36]	; 0x24
 8011368:	f89a 3000 	ldrb.w	r3, [sl]
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 80a2 	beq.w	80114b6 <_vfiprintf_r+0x20e>
 8011372:	2300      	movs	r3, #0
 8011374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801137c:	f10a 0a01 	add.w	sl, sl, #1
 8011380:	9304      	str	r3, [sp, #16]
 8011382:	9307      	str	r3, [sp, #28]
 8011384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011388:	931a      	str	r3, [sp, #104]	; 0x68
 801138a:	4654      	mov	r4, sl
 801138c:	2205      	movs	r2, #5
 801138e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011392:	4858      	ldr	r0, [pc, #352]	; (80114f4 <_vfiprintf_r+0x24c>)
 8011394:	f7ee ff44 	bl	8000220 <memchr>
 8011398:	9a04      	ldr	r2, [sp, #16]
 801139a:	b9d8      	cbnz	r0, 80113d4 <_vfiprintf_r+0x12c>
 801139c:	06d1      	lsls	r1, r2, #27
 801139e:	bf44      	itt	mi
 80113a0:	2320      	movmi	r3, #32
 80113a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113a6:	0713      	lsls	r3, r2, #28
 80113a8:	bf44      	itt	mi
 80113aa:	232b      	movmi	r3, #43	; 0x2b
 80113ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113b0:	f89a 3000 	ldrb.w	r3, [sl]
 80113b4:	2b2a      	cmp	r3, #42	; 0x2a
 80113b6:	d015      	beq.n	80113e4 <_vfiprintf_r+0x13c>
 80113b8:	9a07      	ldr	r2, [sp, #28]
 80113ba:	4654      	mov	r4, sl
 80113bc:	2000      	movs	r0, #0
 80113be:	f04f 0c0a 	mov.w	ip, #10
 80113c2:	4621      	mov	r1, r4
 80113c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113c8:	3b30      	subs	r3, #48	; 0x30
 80113ca:	2b09      	cmp	r3, #9
 80113cc:	d94e      	bls.n	801146c <_vfiprintf_r+0x1c4>
 80113ce:	b1b0      	cbz	r0, 80113fe <_vfiprintf_r+0x156>
 80113d0:	9207      	str	r2, [sp, #28]
 80113d2:	e014      	b.n	80113fe <_vfiprintf_r+0x156>
 80113d4:	eba0 0308 	sub.w	r3, r0, r8
 80113d8:	fa09 f303 	lsl.w	r3, r9, r3
 80113dc:	4313      	orrs	r3, r2
 80113de:	9304      	str	r3, [sp, #16]
 80113e0:	46a2      	mov	sl, r4
 80113e2:	e7d2      	b.n	801138a <_vfiprintf_r+0xe2>
 80113e4:	9b03      	ldr	r3, [sp, #12]
 80113e6:	1d19      	adds	r1, r3, #4
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	9103      	str	r1, [sp, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	bfbb      	ittet	lt
 80113f0:	425b      	neglt	r3, r3
 80113f2:	f042 0202 	orrlt.w	r2, r2, #2
 80113f6:	9307      	strge	r3, [sp, #28]
 80113f8:	9307      	strlt	r3, [sp, #28]
 80113fa:	bfb8      	it	lt
 80113fc:	9204      	strlt	r2, [sp, #16]
 80113fe:	7823      	ldrb	r3, [r4, #0]
 8011400:	2b2e      	cmp	r3, #46	; 0x2e
 8011402:	d10c      	bne.n	801141e <_vfiprintf_r+0x176>
 8011404:	7863      	ldrb	r3, [r4, #1]
 8011406:	2b2a      	cmp	r3, #42	; 0x2a
 8011408:	d135      	bne.n	8011476 <_vfiprintf_r+0x1ce>
 801140a:	9b03      	ldr	r3, [sp, #12]
 801140c:	1d1a      	adds	r2, r3, #4
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	9203      	str	r2, [sp, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	bfb8      	it	lt
 8011416:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801141a:	3402      	adds	r4, #2
 801141c:	9305      	str	r3, [sp, #20]
 801141e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011504 <_vfiprintf_r+0x25c>
 8011422:	7821      	ldrb	r1, [r4, #0]
 8011424:	2203      	movs	r2, #3
 8011426:	4650      	mov	r0, sl
 8011428:	f7ee fefa 	bl	8000220 <memchr>
 801142c:	b140      	cbz	r0, 8011440 <_vfiprintf_r+0x198>
 801142e:	2340      	movs	r3, #64	; 0x40
 8011430:	eba0 000a 	sub.w	r0, r0, sl
 8011434:	fa03 f000 	lsl.w	r0, r3, r0
 8011438:	9b04      	ldr	r3, [sp, #16]
 801143a:	4303      	orrs	r3, r0
 801143c:	3401      	adds	r4, #1
 801143e:	9304      	str	r3, [sp, #16]
 8011440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011444:	482c      	ldr	r0, [pc, #176]	; (80114f8 <_vfiprintf_r+0x250>)
 8011446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801144a:	2206      	movs	r2, #6
 801144c:	f7ee fee8 	bl	8000220 <memchr>
 8011450:	2800      	cmp	r0, #0
 8011452:	d03f      	beq.n	80114d4 <_vfiprintf_r+0x22c>
 8011454:	4b29      	ldr	r3, [pc, #164]	; (80114fc <_vfiprintf_r+0x254>)
 8011456:	bb1b      	cbnz	r3, 80114a0 <_vfiprintf_r+0x1f8>
 8011458:	9b03      	ldr	r3, [sp, #12]
 801145a:	3307      	adds	r3, #7
 801145c:	f023 0307 	bic.w	r3, r3, #7
 8011460:	3308      	adds	r3, #8
 8011462:	9303      	str	r3, [sp, #12]
 8011464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011466:	443b      	add	r3, r7
 8011468:	9309      	str	r3, [sp, #36]	; 0x24
 801146a:	e767      	b.n	801133c <_vfiprintf_r+0x94>
 801146c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011470:	460c      	mov	r4, r1
 8011472:	2001      	movs	r0, #1
 8011474:	e7a5      	b.n	80113c2 <_vfiprintf_r+0x11a>
 8011476:	2300      	movs	r3, #0
 8011478:	3401      	adds	r4, #1
 801147a:	9305      	str	r3, [sp, #20]
 801147c:	4619      	mov	r1, r3
 801147e:	f04f 0c0a 	mov.w	ip, #10
 8011482:	4620      	mov	r0, r4
 8011484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011488:	3a30      	subs	r2, #48	; 0x30
 801148a:	2a09      	cmp	r2, #9
 801148c:	d903      	bls.n	8011496 <_vfiprintf_r+0x1ee>
 801148e:	2b00      	cmp	r3, #0
 8011490:	d0c5      	beq.n	801141e <_vfiprintf_r+0x176>
 8011492:	9105      	str	r1, [sp, #20]
 8011494:	e7c3      	b.n	801141e <_vfiprintf_r+0x176>
 8011496:	fb0c 2101 	mla	r1, ip, r1, r2
 801149a:	4604      	mov	r4, r0
 801149c:	2301      	movs	r3, #1
 801149e:	e7f0      	b.n	8011482 <_vfiprintf_r+0x1da>
 80114a0:	ab03      	add	r3, sp, #12
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	462a      	mov	r2, r5
 80114a6:	4b16      	ldr	r3, [pc, #88]	; (8011500 <_vfiprintf_r+0x258>)
 80114a8:	a904      	add	r1, sp, #16
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7fb ff92 	bl	800d3d4 <_printf_float>
 80114b0:	4607      	mov	r7, r0
 80114b2:	1c78      	adds	r0, r7, #1
 80114b4:	d1d6      	bne.n	8011464 <_vfiprintf_r+0x1bc>
 80114b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114b8:	07d9      	lsls	r1, r3, #31
 80114ba:	d405      	bmi.n	80114c8 <_vfiprintf_r+0x220>
 80114bc:	89ab      	ldrh	r3, [r5, #12]
 80114be:	059a      	lsls	r2, r3, #22
 80114c0:	d402      	bmi.n	80114c8 <_vfiprintf_r+0x220>
 80114c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114c4:	f7fb fe0c 	bl	800d0e0 <__retarget_lock_release_recursive>
 80114c8:	89ab      	ldrh	r3, [r5, #12]
 80114ca:	065b      	lsls	r3, r3, #25
 80114cc:	f53f af12 	bmi.w	80112f4 <_vfiprintf_r+0x4c>
 80114d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114d2:	e711      	b.n	80112f8 <_vfiprintf_r+0x50>
 80114d4:	ab03      	add	r3, sp, #12
 80114d6:	9300      	str	r3, [sp, #0]
 80114d8:	462a      	mov	r2, r5
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <_vfiprintf_r+0x258>)
 80114dc:	a904      	add	r1, sp, #16
 80114de:	4630      	mov	r0, r6
 80114e0:	f7fc fa1c 	bl	800d91c <_printf_i>
 80114e4:	e7e4      	b.n	80114b0 <_vfiprintf_r+0x208>
 80114e6:	bf00      	nop
 80114e8:	080138e8 	.word	0x080138e8
 80114ec:	08013908 	.word	0x08013908
 80114f0:	080138c8 	.word	0x080138c8
 80114f4:	08013d2c 	.word	0x08013d2c
 80114f8:	08013d36 	.word	0x08013d36
 80114fc:	0800d3d5 	.word	0x0800d3d5
 8011500:	08011283 	.word	0x08011283
 8011504:	08013d32 	.word	0x08013d32

08011508 <__swbuf_r>:
 8011508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150a:	460e      	mov	r6, r1
 801150c:	4614      	mov	r4, r2
 801150e:	4605      	mov	r5, r0
 8011510:	b118      	cbz	r0, 801151a <__swbuf_r+0x12>
 8011512:	6983      	ldr	r3, [r0, #24]
 8011514:	b90b      	cbnz	r3, 801151a <__swbuf_r+0x12>
 8011516:	f7fb fd1f 	bl	800cf58 <__sinit>
 801151a:	4b21      	ldr	r3, [pc, #132]	; (80115a0 <__swbuf_r+0x98>)
 801151c:	429c      	cmp	r4, r3
 801151e:	d12b      	bne.n	8011578 <__swbuf_r+0x70>
 8011520:	686c      	ldr	r4, [r5, #4]
 8011522:	69a3      	ldr	r3, [r4, #24]
 8011524:	60a3      	str	r3, [r4, #8]
 8011526:	89a3      	ldrh	r3, [r4, #12]
 8011528:	071a      	lsls	r2, r3, #28
 801152a:	d52f      	bpl.n	801158c <__swbuf_r+0x84>
 801152c:	6923      	ldr	r3, [r4, #16]
 801152e:	b36b      	cbz	r3, 801158c <__swbuf_r+0x84>
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	6820      	ldr	r0, [r4, #0]
 8011534:	1ac0      	subs	r0, r0, r3
 8011536:	6963      	ldr	r3, [r4, #20]
 8011538:	b2f6      	uxtb	r6, r6
 801153a:	4283      	cmp	r3, r0
 801153c:	4637      	mov	r7, r6
 801153e:	dc04      	bgt.n	801154a <__swbuf_r+0x42>
 8011540:	4621      	mov	r1, r4
 8011542:	4628      	mov	r0, r5
 8011544:	f7fe fbde 	bl	800fd04 <_fflush_r>
 8011548:	bb30      	cbnz	r0, 8011598 <__swbuf_r+0x90>
 801154a:	68a3      	ldr	r3, [r4, #8]
 801154c:	3b01      	subs	r3, #1
 801154e:	60a3      	str	r3, [r4, #8]
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	1c5a      	adds	r2, r3, #1
 8011554:	6022      	str	r2, [r4, #0]
 8011556:	701e      	strb	r6, [r3, #0]
 8011558:	6963      	ldr	r3, [r4, #20]
 801155a:	3001      	adds	r0, #1
 801155c:	4283      	cmp	r3, r0
 801155e:	d004      	beq.n	801156a <__swbuf_r+0x62>
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	07db      	lsls	r3, r3, #31
 8011564:	d506      	bpl.n	8011574 <__swbuf_r+0x6c>
 8011566:	2e0a      	cmp	r6, #10
 8011568:	d104      	bne.n	8011574 <__swbuf_r+0x6c>
 801156a:	4621      	mov	r1, r4
 801156c:	4628      	mov	r0, r5
 801156e:	f7fe fbc9 	bl	800fd04 <_fflush_r>
 8011572:	b988      	cbnz	r0, 8011598 <__swbuf_r+0x90>
 8011574:	4638      	mov	r0, r7
 8011576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011578:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <__swbuf_r+0x9c>)
 801157a:	429c      	cmp	r4, r3
 801157c:	d101      	bne.n	8011582 <__swbuf_r+0x7a>
 801157e:	68ac      	ldr	r4, [r5, #8]
 8011580:	e7cf      	b.n	8011522 <__swbuf_r+0x1a>
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <__swbuf_r+0xa0>)
 8011584:	429c      	cmp	r4, r3
 8011586:	bf08      	it	eq
 8011588:	68ec      	ldreq	r4, [r5, #12]
 801158a:	e7ca      	b.n	8011522 <__swbuf_r+0x1a>
 801158c:	4621      	mov	r1, r4
 801158e:	4628      	mov	r0, r5
 8011590:	f000 f80c 	bl	80115ac <__swsetup_r>
 8011594:	2800      	cmp	r0, #0
 8011596:	d0cb      	beq.n	8011530 <__swbuf_r+0x28>
 8011598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801159c:	e7ea      	b.n	8011574 <__swbuf_r+0x6c>
 801159e:	bf00      	nop
 80115a0:	080138e8 	.word	0x080138e8
 80115a4:	08013908 	.word	0x08013908
 80115a8:	080138c8 	.word	0x080138c8

080115ac <__swsetup_r>:
 80115ac:	4b32      	ldr	r3, [pc, #200]	; (8011678 <__swsetup_r+0xcc>)
 80115ae:	b570      	push	{r4, r5, r6, lr}
 80115b0:	681d      	ldr	r5, [r3, #0]
 80115b2:	4606      	mov	r6, r0
 80115b4:	460c      	mov	r4, r1
 80115b6:	b125      	cbz	r5, 80115c2 <__swsetup_r+0x16>
 80115b8:	69ab      	ldr	r3, [r5, #24]
 80115ba:	b913      	cbnz	r3, 80115c2 <__swsetup_r+0x16>
 80115bc:	4628      	mov	r0, r5
 80115be:	f7fb fccb 	bl	800cf58 <__sinit>
 80115c2:	4b2e      	ldr	r3, [pc, #184]	; (801167c <__swsetup_r+0xd0>)
 80115c4:	429c      	cmp	r4, r3
 80115c6:	d10f      	bne.n	80115e8 <__swsetup_r+0x3c>
 80115c8:	686c      	ldr	r4, [r5, #4]
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115d0:	0719      	lsls	r1, r3, #28
 80115d2:	d42c      	bmi.n	801162e <__swsetup_r+0x82>
 80115d4:	06dd      	lsls	r5, r3, #27
 80115d6:	d411      	bmi.n	80115fc <__swsetup_r+0x50>
 80115d8:	2309      	movs	r3, #9
 80115da:	6033      	str	r3, [r6, #0]
 80115dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80115e0:	81a3      	strh	r3, [r4, #12]
 80115e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115e6:	e03e      	b.n	8011666 <__swsetup_r+0xba>
 80115e8:	4b25      	ldr	r3, [pc, #148]	; (8011680 <__swsetup_r+0xd4>)
 80115ea:	429c      	cmp	r4, r3
 80115ec:	d101      	bne.n	80115f2 <__swsetup_r+0x46>
 80115ee:	68ac      	ldr	r4, [r5, #8]
 80115f0:	e7eb      	b.n	80115ca <__swsetup_r+0x1e>
 80115f2:	4b24      	ldr	r3, [pc, #144]	; (8011684 <__swsetup_r+0xd8>)
 80115f4:	429c      	cmp	r4, r3
 80115f6:	bf08      	it	eq
 80115f8:	68ec      	ldreq	r4, [r5, #12]
 80115fa:	e7e6      	b.n	80115ca <__swsetup_r+0x1e>
 80115fc:	0758      	lsls	r0, r3, #29
 80115fe:	d512      	bpl.n	8011626 <__swsetup_r+0x7a>
 8011600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011602:	b141      	cbz	r1, 8011616 <__swsetup_r+0x6a>
 8011604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011608:	4299      	cmp	r1, r3
 801160a:	d002      	beq.n	8011612 <__swsetup_r+0x66>
 801160c:	4630      	mov	r0, r6
 801160e:	f7fb fd97 	bl	800d140 <_free_r>
 8011612:	2300      	movs	r3, #0
 8011614:	6363      	str	r3, [r4, #52]	; 0x34
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801161c:	81a3      	strh	r3, [r4, #12]
 801161e:	2300      	movs	r3, #0
 8011620:	6063      	str	r3, [r4, #4]
 8011622:	6923      	ldr	r3, [r4, #16]
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	89a3      	ldrh	r3, [r4, #12]
 8011628:	f043 0308 	orr.w	r3, r3, #8
 801162c:	81a3      	strh	r3, [r4, #12]
 801162e:	6923      	ldr	r3, [r4, #16]
 8011630:	b94b      	cbnz	r3, 8011646 <__swsetup_r+0x9a>
 8011632:	89a3      	ldrh	r3, [r4, #12]
 8011634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801163c:	d003      	beq.n	8011646 <__swsetup_r+0x9a>
 801163e:	4621      	mov	r1, r4
 8011640:	4630      	mov	r0, r6
 8011642:	f000 f84d 	bl	80116e0 <__smakebuf_r>
 8011646:	89a0      	ldrh	r0, [r4, #12]
 8011648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801164c:	f010 0301 	ands.w	r3, r0, #1
 8011650:	d00a      	beq.n	8011668 <__swsetup_r+0xbc>
 8011652:	2300      	movs	r3, #0
 8011654:	60a3      	str	r3, [r4, #8]
 8011656:	6963      	ldr	r3, [r4, #20]
 8011658:	425b      	negs	r3, r3
 801165a:	61a3      	str	r3, [r4, #24]
 801165c:	6923      	ldr	r3, [r4, #16]
 801165e:	b943      	cbnz	r3, 8011672 <__swsetup_r+0xc6>
 8011660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011664:	d1ba      	bne.n	80115dc <__swsetup_r+0x30>
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	0781      	lsls	r1, r0, #30
 801166a:	bf58      	it	pl
 801166c:	6963      	ldrpl	r3, [r4, #20]
 801166e:	60a3      	str	r3, [r4, #8]
 8011670:	e7f4      	b.n	801165c <__swsetup_r+0xb0>
 8011672:	2000      	movs	r0, #0
 8011674:	e7f7      	b.n	8011666 <__swsetup_r+0xba>
 8011676:	bf00      	nop
 8011678:	20000014 	.word	0x20000014
 801167c:	080138e8 	.word	0x080138e8
 8011680:	08013908 	.word	0x08013908
 8011684:	080138c8 	.word	0x080138c8

08011688 <abort>:
 8011688:	b508      	push	{r3, lr}
 801168a:	2006      	movs	r0, #6
 801168c:	f000 f890 	bl	80117b0 <raise>
 8011690:	2001      	movs	r0, #1
 8011692:	f7f1 fad1 	bl	8002c38 <_exit>

08011696 <__swhatbuf_r>:
 8011696:	b570      	push	{r4, r5, r6, lr}
 8011698:	460e      	mov	r6, r1
 801169a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169e:	2900      	cmp	r1, #0
 80116a0:	b096      	sub	sp, #88	; 0x58
 80116a2:	4614      	mov	r4, r2
 80116a4:	461d      	mov	r5, r3
 80116a6:	da07      	bge.n	80116b8 <__swhatbuf_r+0x22>
 80116a8:	2300      	movs	r3, #0
 80116aa:	602b      	str	r3, [r5, #0]
 80116ac:	89b3      	ldrh	r3, [r6, #12]
 80116ae:	061a      	lsls	r2, r3, #24
 80116b0:	d410      	bmi.n	80116d4 <__swhatbuf_r+0x3e>
 80116b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116b6:	e00e      	b.n	80116d6 <__swhatbuf_r+0x40>
 80116b8:	466a      	mov	r2, sp
 80116ba:	f000 f895 	bl	80117e8 <_fstat_r>
 80116be:	2800      	cmp	r0, #0
 80116c0:	dbf2      	blt.n	80116a8 <__swhatbuf_r+0x12>
 80116c2:	9a01      	ldr	r2, [sp, #4]
 80116c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116cc:	425a      	negs	r2, r3
 80116ce:	415a      	adcs	r2, r3
 80116d0:	602a      	str	r2, [r5, #0]
 80116d2:	e7ee      	b.n	80116b2 <__swhatbuf_r+0x1c>
 80116d4:	2340      	movs	r3, #64	; 0x40
 80116d6:	2000      	movs	r0, #0
 80116d8:	6023      	str	r3, [r4, #0]
 80116da:	b016      	add	sp, #88	; 0x58
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080116e0 <__smakebuf_r>:
 80116e0:	898b      	ldrh	r3, [r1, #12]
 80116e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116e4:	079d      	lsls	r5, r3, #30
 80116e6:	4606      	mov	r6, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	d507      	bpl.n	80116fc <__smakebuf_r+0x1c>
 80116ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	6123      	str	r3, [r4, #16]
 80116f4:	2301      	movs	r3, #1
 80116f6:	6163      	str	r3, [r4, #20]
 80116f8:	b002      	add	sp, #8
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
 80116fc:	ab01      	add	r3, sp, #4
 80116fe:	466a      	mov	r2, sp
 8011700:	f7ff ffc9 	bl	8011696 <__swhatbuf_r>
 8011704:	9900      	ldr	r1, [sp, #0]
 8011706:	4605      	mov	r5, r0
 8011708:	4630      	mov	r0, r6
 801170a:	f7fb fd69 	bl	800d1e0 <_malloc_r>
 801170e:	b948      	cbnz	r0, 8011724 <__smakebuf_r+0x44>
 8011710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011714:	059a      	lsls	r2, r3, #22
 8011716:	d4ef      	bmi.n	80116f8 <__smakebuf_r+0x18>
 8011718:	f023 0303 	bic.w	r3, r3, #3
 801171c:	f043 0302 	orr.w	r3, r3, #2
 8011720:	81a3      	strh	r3, [r4, #12]
 8011722:	e7e3      	b.n	80116ec <__smakebuf_r+0xc>
 8011724:	4b0d      	ldr	r3, [pc, #52]	; (801175c <__smakebuf_r+0x7c>)
 8011726:	62b3      	str	r3, [r6, #40]	; 0x28
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	6020      	str	r0, [r4, #0]
 801172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011730:	81a3      	strh	r3, [r4, #12]
 8011732:	9b00      	ldr	r3, [sp, #0]
 8011734:	6163      	str	r3, [r4, #20]
 8011736:	9b01      	ldr	r3, [sp, #4]
 8011738:	6120      	str	r0, [r4, #16]
 801173a:	b15b      	cbz	r3, 8011754 <__smakebuf_r+0x74>
 801173c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011740:	4630      	mov	r0, r6
 8011742:	f000 f863 	bl	801180c <_isatty_r>
 8011746:	b128      	cbz	r0, 8011754 <__smakebuf_r+0x74>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f023 0303 	bic.w	r3, r3, #3
 801174e:	f043 0301 	orr.w	r3, r3, #1
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	89a0      	ldrh	r0, [r4, #12]
 8011756:	4305      	orrs	r5, r0
 8011758:	81a5      	strh	r5, [r4, #12]
 801175a:	e7cd      	b.n	80116f8 <__smakebuf_r+0x18>
 801175c:	0800cef1 	.word	0x0800cef1

08011760 <_raise_r>:
 8011760:	291f      	cmp	r1, #31
 8011762:	b538      	push	{r3, r4, r5, lr}
 8011764:	4604      	mov	r4, r0
 8011766:	460d      	mov	r5, r1
 8011768:	d904      	bls.n	8011774 <_raise_r+0x14>
 801176a:	2316      	movs	r3, #22
 801176c:	6003      	str	r3, [r0, #0]
 801176e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011772:	bd38      	pop	{r3, r4, r5, pc}
 8011774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011776:	b112      	cbz	r2, 801177e <_raise_r+0x1e>
 8011778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801177c:	b94b      	cbnz	r3, 8011792 <_raise_r+0x32>
 801177e:	4620      	mov	r0, r4
 8011780:	f000 f830 	bl	80117e4 <_getpid_r>
 8011784:	462a      	mov	r2, r5
 8011786:	4601      	mov	r1, r0
 8011788:	4620      	mov	r0, r4
 801178a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801178e:	f000 b817 	b.w	80117c0 <_kill_r>
 8011792:	2b01      	cmp	r3, #1
 8011794:	d00a      	beq.n	80117ac <_raise_r+0x4c>
 8011796:	1c59      	adds	r1, r3, #1
 8011798:	d103      	bne.n	80117a2 <_raise_r+0x42>
 801179a:	2316      	movs	r3, #22
 801179c:	6003      	str	r3, [r0, #0]
 801179e:	2001      	movs	r0, #1
 80117a0:	e7e7      	b.n	8011772 <_raise_r+0x12>
 80117a2:	2400      	movs	r4, #0
 80117a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117a8:	4628      	mov	r0, r5
 80117aa:	4798      	blx	r3
 80117ac:	2000      	movs	r0, #0
 80117ae:	e7e0      	b.n	8011772 <_raise_r+0x12>

080117b0 <raise>:
 80117b0:	4b02      	ldr	r3, [pc, #8]	; (80117bc <raise+0xc>)
 80117b2:	4601      	mov	r1, r0
 80117b4:	6818      	ldr	r0, [r3, #0]
 80117b6:	f7ff bfd3 	b.w	8011760 <_raise_r>
 80117ba:	bf00      	nop
 80117bc:	20000014 	.word	0x20000014

080117c0 <_kill_r>:
 80117c0:	b538      	push	{r3, r4, r5, lr}
 80117c2:	4d07      	ldr	r5, [pc, #28]	; (80117e0 <_kill_r+0x20>)
 80117c4:	2300      	movs	r3, #0
 80117c6:	4604      	mov	r4, r0
 80117c8:	4608      	mov	r0, r1
 80117ca:	4611      	mov	r1, r2
 80117cc:	602b      	str	r3, [r5, #0]
 80117ce:	f7f1 fa23 	bl	8002c18 <_kill>
 80117d2:	1c43      	adds	r3, r0, #1
 80117d4:	d102      	bne.n	80117dc <_kill_r+0x1c>
 80117d6:	682b      	ldr	r3, [r5, #0]
 80117d8:	b103      	cbz	r3, 80117dc <_kill_r+0x1c>
 80117da:	6023      	str	r3, [r4, #0]
 80117dc:	bd38      	pop	{r3, r4, r5, pc}
 80117de:	bf00      	nop
 80117e0:	200056a0 	.word	0x200056a0

080117e4 <_getpid_r>:
 80117e4:	f7f1 ba10 	b.w	8002c08 <_getpid>

080117e8 <_fstat_r>:
 80117e8:	b538      	push	{r3, r4, r5, lr}
 80117ea:	4d07      	ldr	r5, [pc, #28]	; (8011808 <_fstat_r+0x20>)
 80117ec:	2300      	movs	r3, #0
 80117ee:	4604      	mov	r4, r0
 80117f0:	4608      	mov	r0, r1
 80117f2:	4611      	mov	r1, r2
 80117f4:	602b      	str	r3, [r5, #0]
 80117f6:	f7f1 fa6e 	bl	8002cd6 <_fstat>
 80117fa:	1c43      	adds	r3, r0, #1
 80117fc:	d102      	bne.n	8011804 <_fstat_r+0x1c>
 80117fe:	682b      	ldr	r3, [r5, #0]
 8011800:	b103      	cbz	r3, 8011804 <_fstat_r+0x1c>
 8011802:	6023      	str	r3, [r4, #0]
 8011804:	bd38      	pop	{r3, r4, r5, pc}
 8011806:	bf00      	nop
 8011808:	200056a0 	.word	0x200056a0

0801180c <_isatty_r>:
 801180c:	b538      	push	{r3, r4, r5, lr}
 801180e:	4d06      	ldr	r5, [pc, #24]	; (8011828 <_isatty_r+0x1c>)
 8011810:	2300      	movs	r3, #0
 8011812:	4604      	mov	r4, r0
 8011814:	4608      	mov	r0, r1
 8011816:	602b      	str	r3, [r5, #0]
 8011818:	f7f1 fa6d 	bl	8002cf6 <_isatty>
 801181c:	1c43      	adds	r3, r0, #1
 801181e:	d102      	bne.n	8011826 <_isatty_r+0x1a>
 8011820:	682b      	ldr	r3, [r5, #0]
 8011822:	b103      	cbz	r3, 8011826 <_isatty_r+0x1a>
 8011824:	6023      	str	r3, [r4, #0]
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	200056a0 	.word	0x200056a0
 801182c:	00000000 	.word	0x00000000

08011830 <cos>:
 8011830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011832:	ec53 2b10 	vmov	r2, r3, d0
 8011836:	4824      	ldr	r0, [pc, #144]	; (80118c8 <cos+0x98>)
 8011838:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801183c:	4281      	cmp	r1, r0
 801183e:	dc06      	bgt.n	801184e <cos+0x1e>
 8011840:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80118c0 <cos+0x90>
 8011844:	f001 f92c 	bl	8012aa0 <__kernel_cos>
 8011848:	ec51 0b10 	vmov	r0, r1, d0
 801184c:	e007      	b.n	801185e <cos+0x2e>
 801184e:	481f      	ldr	r0, [pc, #124]	; (80118cc <cos+0x9c>)
 8011850:	4281      	cmp	r1, r0
 8011852:	dd09      	ble.n	8011868 <cos+0x38>
 8011854:	ee10 0a10 	vmov	r0, s0
 8011858:	4619      	mov	r1, r3
 801185a:	f7ee fd35 	bl	80002c8 <__aeabi_dsub>
 801185e:	ec41 0b10 	vmov	d0, r0, r1
 8011862:	b005      	add	sp, #20
 8011864:	f85d fb04 	ldr.w	pc, [sp], #4
 8011868:	4668      	mov	r0, sp
 801186a:	f000 fe59 	bl	8012520 <__ieee754_rem_pio2>
 801186e:	f000 0003 	and.w	r0, r0, #3
 8011872:	2801      	cmp	r0, #1
 8011874:	d007      	beq.n	8011886 <cos+0x56>
 8011876:	2802      	cmp	r0, #2
 8011878:	d012      	beq.n	80118a0 <cos+0x70>
 801187a:	b9c0      	cbnz	r0, 80118ae <cos+0x7e>
 801187c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011880:	ed9d 0b00 	vldr	d0, [sp]
 8011884:	e7de      	b.n	8011844 <cos+0x14>
 8011886:	ed9d 1b02 	vldr	d1, [sp, #8]
 801188a:	ed9d 0b00 	vldr	d0, [sp]
 801188e:	f001 fd0f 	bl	80132b0 <__kernel_sin>
 8011892:	ec53 2b10 	vmov	r2, r3, d0
 8011896:	ee10 0a10 	vmov	r0, s0
 801189a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801189e:	e7de      	b.n	801185e <cos+0x2e>
 80118a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118a4:	ed9d 0b00 	vldr	d0, [sp]
 80118a8:	f001 f8fa 	bl	8012aa0 <__kernel_cos>
 80118ac:	e7f1      	b.n	8011892 <cos+0x62>
 80118ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118b2:	ed9d 0b00 	vldr	d0, [sp]
 80118b6:	2001      	movs	r0, #1
 80118b8:	f001 fcfa 	bl	80132b0 <__kernel_sin>
 80118bc:	e7c4      	b.n	8011848 <cos+0x18>
 80118be:	bf00      	nop
	...
 80118c8:	3fe921fb 	.word	0x3fe921fb
 80118cc:	7fefffff 	.word	0x7fefffff

080118d0 <sin>:
 80118d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118d2:	ec53 2b10 	vmov	r2, r3, d0
 80118d6:	4826      	ldr	r0, [pc, #152]	; (8011970 <sin+0xa0>)
 80118d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80118dc:	4281      	cmp	r1, r0
 80118de:	dc07      	bgt.n	80118f0 <sin+0x20>
 80118e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011968 <sin+0x98>
 80118e4:	2000      	movs	r0, #0
 80118e6:	f001 fce3 	bl	80132b0 <__kernel_sin>
 80118ea:	ec51 0b10 	vmov	r0, r1, d0
 80118ee:	e007      	b.n	8011900 <sin+0x30>
 80118f0:	4820      	ldr	r0, [pc, #128]	; (8011974 <sin+0xa4>)
 80118f2:	4281      	cmp	r1, r0
 80118f4:	dd09      	ble.n	801190a <sin+0x3a>
 80118f6:	ee10 0a10 	vmov	r0, s0
 80118fa:	4619      	mov	r1, r3
 80118fc:	f7ee fce4 	bl	80002c8 <__aeabi_dsub>
 8011900:	ec41 0b10 	vmov	d0, r0, r1
 8011904:	b005      	add	sp, #20
 8011906:	f85d fb04 	ldr.w	pc, [sp], #4
 801190a:	4668      	mov	r0, sp
 801190c:	f000 fe08 	bl	8012520 <__ieee754_rem_pio2>
 8011910:	f000 0003 	and.w	r0, r0, #3
 8011914:	2801      	cmp	r0, #1
 8011916:	d008      	beq.n	801192a <sin+0x5a>
 8011918:	2802      	cmp	r0, #2
 801191a:	d00d      	beq.n	8011938 <sin+0x68>
 801191c:	b9d0      	cbnz	r0, 8011954 <sin+0x84>
 801191e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011922:	ed9d 0b00 	vldr	d0, [sp]
 8011926:	2001      	movs	r0, #1
 8011928:	e7dd      	b.n	80118e6 <sin+0x16>
 801192a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801192e:	ed9d 0b00 	vldr	d0, [sp]
 8011932:	f001 f8b5 	bl	8012aa0 <__kernel_cos>
 8011936:	e7d8      	b.n	80118ea <sin+0x1a>
 8011938:	ed9d 1b02 	vldr	d1, [sp, #8]
 801193c:	ed9d 0b00 	vldr	d0, [sp]
 8011940:	2001      	movs	r0, #1
 8011942:	f001 fcb5 	bl	80132b0 <__kernel_sin>
 8011946:	ec53 2b10 	vmov	r2, r3, d0
 801194a:	ee10 0a10 	vmov	r0, s0
 801194e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011952:	e7d5      	b.n	8011900 <sin+0x30>
 8011954:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011958:	ed9d 0b00 	vldr	d0, [sp]
 801195c:	f001 f8a0 	bl	8012aa0 <__kernel_cos>
 8011960:	e7f1      	b.n	8011946 <sin+0x76>
 8011962:	bf00      	nop
 8011964:	f3af 8000 	nop.w
	...
 8011970:	3fe921fb 	.word	0x3fe921fb
 8011974:	7fefffff 	.word	0x7fefffff

08011978 <pow>:
 8011978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801197c:	ec59 8b10 	vmov	r8, r9, d0
 8011980:	ec57 6b11 	vmov	r6, r7, d1
 8011984:	f000 f8a8 	bl	8011ad8 <__ieee754_pow>
 8011988:	4b4e      	ldr	r3, [pc, #312]	; (8011ac4 <pow+0x14c>)
 801198a:	f993 3000 	ldrsb.w	r3, [r3]
 801198e:	3301      	adds	r3, #1
 8011990:	ec55 4b10 	vmov	r4, r5, d0
 8011994:	d015      	beq.n	80119c2 <pow+0x4a>
 8011996:	4632      	mov	r2, r6
 8011998:	463b      	mov	r3, r7
 801199a:	4630      	mov	r0, r6
 801199c:	4639      	mov	r1, r7
 801199e:	f7ef f8e5 	bl	8000b6c <__aeabi_dcmpun>
 80119a2:	b970      	cbnz	r0, 80119c2 <pow+0x4a>
 80119a4:	4642      	mov	r2, r8
 80119a6:	464b      	mov	r3, r9
 80119a8:	4640      	mov	r0, r8
 80119aa:	4649      	mov	r1, r9
 80119ac:	f7ef f8de 	bl	8000b6c <__aeabi_dcmpun>
 80119b0:	2200      	movs	r2, #0
 80119b2:	2300      	movs	r3, #0
 80119b4:	b148      	cbz	r0, 80119ca <pow+0x52>
 80119b6:	4630      	mov	r0, r6
 80119b8:	4639      	mov	r1, r7
 80119ba:	f7ef f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80119be:	2800      	cmp	r0, #0
 80119c0:	d17d      	bne.n	8011abe <pow+0x146>
 80119c2:	ec45 4b10 	vmov	d0, r4, r5
 80119c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ca:	4640      	mov	r0, r8
 80119cc:	4649      	mov	r1, r9
 80119ce:	f7ef f89b 	bl	8000b08 <__aeabi_dcmpeq>
 80119d2:	b1e0      	cbz	r0, 8011a0e <pow+0x96>
 80119d4:	2200      	movs	r2, #0
 80119d6:	2300      	movs	r3, #0
 80119d8:	4630      	mov	r0, r6
 80119da:	4639      	mov	r1, r7
 80119dc:	f7ef f894 	bl	8000b08 <__aeabi_dcmpeq>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d16c      	bne.n	8011abe <pow+0x146>
 80119e4:	ec47 6b10 	vmov	d0, r6, r7
 80119e8:	f001 fd29 	bl	801343e <finite>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0e8      	beq.n	80119c2 <pow+0x4a>
 80119f0:	2200      	movs	r2, #0
 80119f2:	2300      	movs	r3, #0
 80119f4:	4630      	mov	r0, r6
 80119f6:	4639      	mov	r1, r7
 80119f8:	f7ef f890 	bl	8000b1c <__aeabi_dcmplt>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d0e0      	beq.n	80119c2 <pow+0x4a>
 8011a00:	f7fb fa4c 	bl	800ce9c <__errno>
 8011a04:	2321      	movs	r3, #33	; 0x21
 8011a06:	6003      	str	r3, [r0, #0]
 8011a08:	2400      	movs	r4, #0
 8011a0a:	4d2f      	ldr	r5, [pc, #188]	; (8011ac8 <pow+0x150>)
 8011a0c:	e7d9      	b.n	80119c2 <pow+0x4a>
 8011a0e:	ec45 4b10 	vmov	d0, r4, r5
 8011a12:	f001 fd14 	bl	801343e <finite>
 8011a16:	bbb8      	cbnz	r0, 8011a88 <pow+0x110>
 8011a18:	ec49 8b10 	vmov	d0, r8, r9
 8011a1c:	f001 fd0f 	bl	801343e <finite>
 8011a20:	b390      	cbz	r0, 8011a88 <pow+0x110>
 8011a22:	ec47 6b10 	vmov	d0, r6, r7
 8011a26:	f001 fd0a 	bl	801343e <finite>
 8011a2a:	b368      	cbz	r0, 8011a88 <pow+0x110>
 8011a2c:	4622      	mov	r2, r4
 8011a2e:	462b      	mov	r3, r5
 8011a30:	4620      	mov	r0, r4
 8011a32:	4629      	mov	r1, r5
 8011a34:	f7ef f89a 	bl	8000b6c <__aeabi_dcmpun>
 8011a38:	b160      	cbz	r0, 8011a54 <pow+0xdc>
 8011a3a:	f7fb fa2f 	bl	800ce9c <__errno>
 8011a3e:	2321      	movs	r3, #33	; 0x21
 8011a40:	6003      	str	r3, [r0, #0]
 8011a42:	2200      	movs	r2, #0
 8011a44:	2300      	movs	r3, #0
 8011a46:	4610      	mov	r0, r2
 8011a48:	4619      	mov	r1, r3
 8011a4a:	f7ee ff1f 	bl	800088c <__aeabi_ddiv>
 8011a4e:	4604      	mov	r4, r0
 8011a50:	460d      	mov	r5, r1
 8011a52:	e7b6      	b.n	80119c2 <pow+0x4a>
 8011a54:	f7fb fa22 	bl	800ce9c <__errno>
 8011a58:	2322      	movs	r3, #34	; 0x22
 8011a5a:	6003      	str	r3, [r0, #0]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	2300      	movs	r3, #0
 8011a60:	4640      	mov	r0, r8
 8011a62:	4649      	mov	r1, r9
 8011a64:	f7ef f85a 	bl	8000b1c <__aeabi_dcmplt>
 8011a68:	2400      	movs	r4, #0
 8011a6a:	b158      	cbz	r0, 8011a84 <pow+0x10c>
 8011a6c:	ec47 6b10 	vmov	d0, r6, r7
 8011a70:	f001 fd72 	bl	8013558 <rint>
 8011a74:	4632      	mov	r2, r6
 8011a76:	ec51 0b10 	vmov	r0, r1, d0
 8011a7a:	463b      	mov	r3, r7
 8011a7c:	f7ef f844 	bl	8000b08 <__aeabi_dcmpeq>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d0c2      	beq.n	8011a0a <pow+0x92>
 8011a84:	4d11      	ldr	r5, [pc, #68]	; (8011acc <pow+0x154>)
 8011a86:	e79c      	b.n	80119c2 <pow+0x4a>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	4629      	mov	r1, r5
 8011a90:	f7ef f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d094      	beq.n	80119c2 <pow+0x4a>
 8011a98:	ec49 8b10 	vmov	d0, r8, r9
 8011a9c:	f001 fccf 	bl	801343e <finite>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d08e      	beq.n	80119c2 <pow+0x4a>
 8011aa4:	ec47 6b10 	vmov	d0, r6, r7
 8011aa8:	f001 fcc9 	bl	801343e <finite>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d088      	beq.n	80119c2 <pow+0x4a>
 8011ab0:	f7fb f9f4 	bl	800ce9c <__errno>
 8011ab4:	2322      	movs	r3, #34	; 0x22
 8011ab6:	6003      	str	r3, [r0, #0]
 8011ab8:	2400      	movs	r4, #0
 8011aba:	2500      	movs	r5, #0
 8011abc:	e781      	b.n	80119c2 <pow+0x4a>
 8011abe:	4d04      	ldr	r5, [pc, #16]	; (8011ad0 <pow+0x158>)
 8011ac0:	2400      	movs	r4, #0
 8011ac2:	e77e      	b.n	80119c2 <pow+0x4a>
 8011ac4:	200001e8 	.word	0x200001e8
 8011ac8:	fff00000 	.word	0xfff00000
 8011acc:	7ff00000 	.word	0x7ff00000
 8011ad0:	3ff00000 	.word	0x3ff00000
 8011ad4:	00000000 	.word	0x00000000

08011ad8 <__ieee754_pow>:
 8011ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011adc:	ed2d 8b06 	vpush	{d8-d10}
 8011ae0:	b08d      	sub	sp, #52	; 0x34
 8011ae2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011ae6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011aea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011aee:	ea56 0100 	orrs.w	r1, r6, r0
 8011af2:	ec53 2b10 	vmov	r2, r3, d0
 8011af6:	f000 84d1 	beq.w	801249c <__ieee754_pow+0x9c4>
 8011afa:	497f      	ldr	r1, [pc, #508]	; (8011cf8 <__ieee754_pow+0x220>)
 8011afc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011b00:	428c      	cmp	r4, r1
 8011b02:	ee10 8a10 	vmov	r8, s0
 8011b06:	4699      	mov	r9, r3
 8011b08:	dc09      	bgt.n	8011b1e <__ieee754_pow+0x46>
 8011b0a:	d103      	bne.n	8011b14 <__ieee754_pow+0x3c>
 8011b0c:	b97a      	cbnz	r2, 8011b2e <__ieee754_pow+0x56>
 8011b0e:	42a6      	cmp	r6, r4
 8011b10:	dd02      	ble.n	8011b18 <__ieee754_pow+0x40>
 8011b12:	e00c      	b.n	8011b2e <__ieee754_pow+0x56>
 8011b14:	428e      	cmp	r6, r1
 8011b16:	dc02      	bgt.n	8011b1e <__ieee754_pow+0x46>
 8011b18:	428e      	cmp	r6, r1
 8011b1a:	d110      	bne.n	8011b3e <__ieee754_pow+0x66>
 8011b1c:	b178      	cbz	r0, 8011b3e <__ieee754_pow+0x66>
 8011b1e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b22:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b26:	ea54 0308 	orrs.w	r3, r4, r8
 8011b2a:	f000 84b7 	beq.w	801249c <__ieee754_pow+0x9c4>
 8011b2e:	4873      	ldr	r0, [pc, #460]	; (8011cfc <__ieee754_pow+0x224>)
 8011b30:	b00d      	add	sp, #52	; 0x34
 8011b32:	ecbd 8b06 	vpop	{d8-d10}
 8011b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3a:	f7ff bb11 	b.w	8011160 <nan>
 8011b3e:	f1b9 0f00 	cmp.w	r9, #0
 8011b42:	da36      	bge.n	8011bb2 <__ieee754_pow+0xda>
 8011b44:	496e      	ldr	r1, [pc, #440]	; (8011d00 <__ieee754_pow+0x228>)
 8011b46:	428e      	cmp	r6, r1
 8011b48:	dc51      	bgt.n	8011bee <__ieee754_pow+0x116>
 8011b4a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011b4e:	428e      	cmp	r6, r1
 8011b50:	f340 84af 	ble.w	80124b2 <__ieee754_pow+0x9da>
 8011b54:	1531      	asrs	r1, r6, #20
 8011b56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011b5a:	2914      	cmp	r1, #20
 8011b5c:	dd0f      	ble.n	8011b7e <__ieee754_pow+0xa6>
 8011b5e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011b62:	fa20 fc01 	lsr.w	ip, r0, r1
 8011b66:	fa0c f101 	lsl.w	r1, ip, r1
 8011b6a:	4281      	cmp	r1, r0
 8011b6c:	f040 84a1 	bne.w	80124b2 <__ieee754_pow+0x9da>
 8011b70:	f00c 0c01 	and.w	ip, ip, #1
 8011b74:	f1cc 0102 	rsb	r1, ip, #2
 8011b78:	9100      	str	r1, [sp, #0]
 8011b7a:	b180      	cbz	r0, 8011b9e <__ieee754_pow+0xc6>
 8011b7c:	e059      	b.n	8011c32 <__ieee754_pow+0x15a>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d155      	bne.n	8011c2e <__ieee754_pow+0x156>
 8011b82:	f1c1 0114 	rsb	r1, r1, #20
 8011b86:	fa46 fc01 	asr.w	ip, r6, r1
 8011b8a:	fa0c f101 	lsl.w	r1, ip, r1
 8011b8e:	42b1      	cmp	r1, r6
 8011b90:	f040 848c 	bne.w	80124ac <__ieee754_pow+0x9d4>
 8011b94:	f00c 0c01 	and.w	ip, ip, #1
 8011b98:	f1cc 0102 	rsb	r1, ip, #2
 8011b9c:	9100      	str	r1, [sp, #0]
 8011b9e:	4959      	ldr	r1, [pc, #356]	; (8011d04 <__ieee754_pow+0x22c>)
 8011ba0:	428e      	cmp	r6, r1
 8011ba2:	d12d      	bne.n	8011c00 <__ieee754_pow+0x128>
 8011ba4:	2f00      	cmp	r7, #0
 8011ba6:	da79      	bge.n	8011c9c <__ieee754_pow+0x1c4>
 8011ba8:	4956      	ldr	r1, [pc, #344]	; (8011d04 <__ieee754_pow+0x22c>)
 8011baa:	2000      	movs	r0, #0
 8011bac:	f7ee fe6e 	bl	800088c <__aeabi_ddiv>
 8011bb0:	e016      	b.n	8011be0 <__ieee754_pow+0x108>
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	9100      	str	r1, [sp, #0]
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d13b      	bne.n	8011c32 <__ieee754_pow+0x15a>
 8011bba:	494f      	ldr	r1, [pc, #316]	; (8011cf8 <__ieee754_pow+0x220>)
 8011bbc:	428e      	cmp	r6, r1
 8011bbe:	d1ee      	bne.n	8011b9e <__ieee754_pow+0xc6>
 8011bc0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011bc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011bc8:	ea53 0308 	orrs.w	r3, r3, r8
 8011bcc:	f000 8466 	beq.w	801249c <__ieee754_pow+0x9c4>
 8011bd0:	4b4d      	ldr	r3, [pc, #308]	; (8011d08 <__ieee754_pow+0x230>)
 8011bd2:	429c      	cmp	r4, r3
 8011bd4:	dd0d      	ble.n	8011bf2 <__ieee754_pow+0x11a>
 8011bd6:	2f00      	cmp	r7, #0
 8011bd8:	f280 8464 	bge.w	80124a4 <__ieee754_pow+0x9cc>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	2100      	movs	r1, #0
 8011be0:	ec41 0b10 	vmov	d0, r0, r1
 8011be4:	b00d      	add	sp, #52	; 0x34
 8011be6:	ecbd 8b06 	vpop	{d8-d10}
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	2102      	movs	r1, #2
 8011bf0:	e7e0      	b.n	8011bb4 <__ieee754_pow+0xdc>
 8011bf2:	2f00      	cmp	r7, #0
 8011bf4:	daf2      	bge.n	8011bdc <__ieee754_pow+0x104>
 8011bf6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011bfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011bfe:	e7ef      	b.n	8011be0 <__ieee754_pow+0x108>
 8011c00:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011c04:	d104      	bne.n	8011c10 <__ieee754_pow+0x138>
 8011c06:	4610      	mov	r0, r2
 8011c08:	4619      	mov	r1, r3
 8011c0a:	f7ee fd15 	bl	8000638 <__aeabi_dmul>
 8011c0e:	e7e7      	b.n	8011be0 <__ieee754_pow+0x108>
 8011c10:	493e      	ldr	r1, [pc, #248]	; (8011d0c <__ieee754_pow+0x234>)
 8011c12:	428f      	cmp	r7, r1
 8011c14:	d10d      	bne.n	8011c32 <__ieee754_pow+0x15a>
 8011c16:	f1b9 0f00 	cmp.w	r9, #0
 8011c1a:	db0a      	blt.n	8011c32 <__ieee754_pow+0x15a>
 8011c1c:	ec43 2b10 	vmov	d0, r2, r3
 8011c20:	b00d      	add	sp, #52	; 0x34
 8011c22:	ecbd 8b06 	vpop	{d8-d10}
 8011c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2a:	f000 be83 	b.w	8012934 <__ieee754_sqrt>
 8011c2e:	2100      	movs	r1, #0
 8011c30:	9100      	str	r1, [sp, #0]
 8011c32:	ec43 2b10 	vmov	d0, r2, r3
 8011c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c3a:	f001 fbf7 	bl	801342c <fabs>
 8011c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c42:	ec51 0b10 	vmov	r0, r1, d0
 8011c46:	f1b8 0f00 	cmp.w	r8, #0
 8011c4a:	d12a      	bne.n	8011ca2 <__ieee754_pow+0x1ca>
 8011c4c:	b12c      	cbz	r4, 8011c5a <__ieee754_pow+0x182>
 8011c4e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011d04 <__ieee754_pow+0x22c>
 8011c52:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011c56:	45e6      	cmp	lr, ip
 8011c58:	d123      	bne.n	8011ca2 <__ieee754_pow+0x1ca>
 8011c5a:	2f00      	cmp	r7, #0
 8011c5c:	da05      	bge.n	8011c6a <__ieee754_pow+0x192>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	460b      	mov	r3, r1
 8011c62:	2000      	movs	r0, #0
 8011c64:	4927      	ldr	r1, [pc, #156]	; (8011d04 <__ieee754_pow+0x22c>)
 8011c66:	f7ee fe11 	bl	800088c <__aeabi_ddiv>
 8011c6a:	f1b9 0f00 	cmp.w	r9, #0
 8011c6e:	dab7      	bge.n	8011be0 <__ieee754_pow+0x108>
 8011c70:	9b00      	ldr	r3, [sp, #0]
 8011c72:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011c7a:	4323      	orrs	r3, r4
 8011c7c:	d108      	bne.n	8011c90 <__ieee754_pow+0x1b8>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	460b      	mov	r3, r1
 8011c82:	4610      	mov	r0, r2
 8011c84:	4619      	mov	r1, r3
 8011c86:	f7ee fb1f 	bl	80002c8 <__aeabi_dsub>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	e78d      	b.n	8011bac <__ieee754_pow+0xd4>
 8011c90:	9b00      	ldr	r3, [sp, #0]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d1a4      	bne.n	8011be0 <__ieee754_pow+0x108>
 8011c96:	4602      	mov	r2, r0
 8011c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c9c:	4610      	mov	r0, r2
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	e79e      	b.n	8011be0 <__ieee754_pow+0x108>
 8011ca2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011ca6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8011caa:	950a      	str	r5, [sp, #40]	; 0x28
 8011cac:	9d00      	ldr	r5, [sp, #0]
 8011cae:	46ac      	mov	ip, r5
 8011cb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011cb2:	ea5c 0505 	orrs.w	r5, ip, r5
 8011cb6:	d0e4      	beq.n	8011c82 <__ieee754_pow+0x1aa>
 8011cb8:	4b15      	ldr	r3, [pc, #84]	; (8011d10 <__ieee754_pow+0x238>)
 8011cba:	429e      	cmp	r6, r3
 8011cbc:	f340 80fc 	ble.w	8011eb8 <__ieee754_pow+0x3e0>
 8011cc0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011cc4:	429e      	cmp	r6, r3
 8011cc6:	4b10      	ldr	r3, [pc, #64]	; (8011d08 <__ieee754_pow+0x230>)
 8011cc8:	dd07      	ble.n	8011cda <__ieee754_pow+0x202>
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	dc0a      	bgt.n	8011ce4 <__ieee754_pow+0x20c>
 8011cce:	2f00      	cmp	r7, #0
 8011cd0:	da84      	bge.n	8011bdc <__ieee754_pow+0x104>
 8011cd2:	a307      	add	r3, pc, #28	; (adr r3, 8011cf0 <__ieee754_pow+0x218>)
 8011cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd8:	e795      	b.n	8011c06 <__ieee754_pow+0x12e>
 8011cda:	429c      	cmp	r4, r3
 8011cdc:	dbf7      	blt.n	8011cce <__ieee754_pow+0x1f6>
 8011cde:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <__ieee754_pow+0x22c>)
 8011ce0:	429c      	cmp	r4, r3
 8011ce2:	dd17      	ble.n	8011d14 <__ieee754_pow+0x23c>
 8011ce4:	2f00      	cmp	r7, #0
 8011ce6:	dcf4      	bgt.n	8011cd2 <__ieee754_pow+0x1fa>
 8011ce8:	e778      	b.n	8011bdc <__ieee754_pow+0x104>
 8011cea:	bf00      	nop
 8011cec:	f3af 8000 	nop.w
 8011cf0:	8800759c 	.word	0x8800759c
 8011cf4:	7e37e43c 	.word	0x7e37e43c
 8011cf8:	7ff00000 	.word	0x7ff00000
 8011cfc:	08013d78 	.word	0x08013d78
 8011d00:	433fffff 	.word	0x433fffff
 8011d04:	3ff00000 	.word	0x3ff00000
 8011d08:	3fefffff 	.word	0x3fefffff
 8011d0c:	3fe00000 	.word	0x3fe00000
 8011d10:	41e00000 	.word	0x41e00000
 8011d14:	4b64      	ldr	r3, [pc, #400]	; (8011ea8 <__ieee754_pow+0x3d0>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	f7ee fad6 	bl	80002c8 <__aeabi_dsub>
 8011d1c:	a356      	add	r3, pc, #344	; (adr r3, 8011e78 <__ieee754_pow+0x3a0>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	4604      	mov	r4, r0
 8011d24:	460d      	mov	r5, r1
 8011d26:	f7ee fc87 	bl	8000638 <__aeabi_dmul>
 8011d2a:	a355      	add	r3, pc, #340	; (adr r3, 8011e80 <__ieee754_pow+0x3a8>)
 8011d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d30:	4606      	mov	r6, r0
 8011d32:	460f      	mov	r7, r1
 8011d34:	4620      	mov	r0, r4
 8011d36:	4629      	mov	r1, r5
 8011d38:	f7ee fc7e 	bl	8000638 <__aeabi_dmul>
 8011d3c:	4b5b      	ldr	r3, [pc, #364]	; (8011eac <__ieee754_pow+0x3d4>)
 8011d3e:	4682      	mov	sl, r0
 8011d40:	468b      	mov	fp, r1
 8011d42:	2200      	movs	r2, #0
 8011d44:	4620      	mov	r0, r4
 8011d46:	4629      	mov	r1, r5
 8011d48:	f7ee fc76 	bl	8000638 <__aeabi_dmul>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	a14d      	add	r1, pc, #308	; (adr r1, 8011e88 <__ieee754_pow+0x3b0>)
 8011d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d56:	f7ee fab7 	bl	80002c8 <__aeabi_dsub>
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	f7ee fc6b 	bl	8000638 <__aeabi_dmul>
 8011d62:	4602      	mov	r2, r0
 8011d64:	460b      	mov	r3, r1
 8011d66:	2000      	movs	r0, #0
 8011d68:	4951      	ldr	r1, [pc, #324]	; (8011eb0 <__ieee754_pow+0x3d8>)
 8011d6a:	f7ee faad 	bl	80002c8 <__aeabi_dsub>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4680      	mov	r8, r0
 8011d72:	4689      	mov	r9, r1
 8011d74:	462b      	mov	r3, r5
 8011d76:	4620      	mov	r0, r4
 8011d78:	4629      	mov	r1, r5
 8011d7a:	f7ee fc5d 	bl	8000638 <__aeabi_dmul>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	4640      	mov	r0, r8
 8011d84:	4649      	mov	r1, r9
 8011d86:	f7ee fc57 	bl	8000638 <__aeabi_dmul>
 8011d8a:	a341      	add	r3, pc, #260	; (adr r3, 8011e90 <__ieee754_pow+0x3b8>)
 8011d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d90:	f7ee fc52 	bl	8000638 <__aeabi_dmul>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	4650      	mov	r0, sl
 8011d9a:	4659      	mov	r1, fp
 8011d9c:	f7ee fa94 	bl	80002c8 <__aeabi_dsub>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4680      	mov	r8, r0
 8011da6:	4689      	mov	r9, r1
 8011da8:	4630      	mov	r0, r6
 8011daa:	4639      	mov	r1, r7
 8011dac:	f7ee fa8e 	bl	80002cc <__adddf3>
 8011db0:	2400      	movs	r4, #0
 8011db2:	4632      	mov	r2, r6
 8011db4:	463b      	mov	r3, r7
 8011db6:	4620      	mov	r0, r4
 8011db8:	460d      	mov	r5, r1
 8011dba:	f7ee fa85 	bl	80002c8 <__aeabi_dsub>
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	4640      	mov	r0, r8
 8011dc4:	4649      	mov	r1, r9
 8011dc6:	f7ee fa7f 	bl	80002c8 <__aeabi_dsub>
 8011dca:	9b00      	ldr	r3, [sp, #0]
 8011dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	4682      	mov	sl, r0
 8011dd4:	468b      	mov	fp, r1
 8011dd6:	f040 81f1 	bne.w	80121bc <__ieee754_pow+0x6e4>
 8011dda:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011e98 <__ieee754_pow+0x3c0>
 8011dde:	eeb0 8a47 	vmov.f32	s16, s14
 8011de2:	eef0 8a67 	vmov.f32	s17, s15
 8011de6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011dea:	2600      	movs	r6, #0
 8011dec:	4632      	mov	r2, r6
 8011dee:	463b      	mov	r3, r7
 8011df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df4:	f7ee fa68 	bl	80002c8 <__aeabi_dsub>
 8011df8:	4622      	mov	r2, r4
 8011dfa:	462b      	mov	r3, r5
 8011dfc:	f7ee fc1c 	bl	8000638 <__aeabi_dmul>
 8011e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e04:	4680      	mov	r8, r0
 8011e06:	4689      	mov	r9, r1
 8011e08:	4650      	mov	r0, sl
 8011e0a:	4659      	mov	r1, fp
 8011e0c:	f7ee fc14 	bl	8000638 <__aeabi_dmul>
 8011e10:	4602      	mov	r2, r0
 8011e12:	460b      	mov	r3, r1
 8011e14:	4640      	mov	r0, r8
 8011e16:	4649      	mov	r1, r9
 8011e18:	f7ee fa58 	bl	80002cc <__adddf3>
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	463b      	mov	r3, r7
 8011e20:	4680      	mov	r8, r0
 8011e22:	4689      	mov	r9, r1
 8011e24:	4620      	mov	r0, r4
 8011e26:	4629      	mov	r1, r5
 8011e28:	f7ee fc06 	bl	8000638 <__aeabi_dmul>
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	4602      	mov	r2, r0
 8011e34:	4649      	mov	r1, r9
 8011e36:	4640      	mov	r0, r8
 8011e38:	f7ee fa48 	bl	80002cc <__adddf3>
 8011e3c:	4b1d      	ldr	r3, [pc, #116]	; (8011eb4 <__ieee754_pow+0x3dc>)
 8011e3e:	4299      	cmp	r1, r3
 8011e40:	ec45 4b19 	vmov	d9, r4, r5
 8011e44:	4606      	mov	r6, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	468b      	mov	fp, r1
 8011e4a:	f340 82fe 	ble.w	801244a <__ieee754_pow+0x972>
 8011e4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011e52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011e56:	4303      	orrs	r3, r0
 8011e58:	f000 81f0 	beq.w	801223c <__ieee754_pow+0x764>
 8011e5c:	a310      	add	r3, pc, #64	; (adr r3, 8011ea0 <__ieee754_pow+0x3c8>)
 8011e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e62:	ec51 0b18 	vmov	r0, r1, d8
 8011e66:	f7ee fbe7 	bl	8000638 <__aeabi_dmul>
 8011e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8011ea0 <__ieee754_pow+0x3c8>)
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	e6cb      	b.n	8011c0a <__ieee754_pow+0x132>
 8011e72:	bf00      	nop
 8011e74:	f3af 8000 	nop.w
 8011e78:	60000000 	.word	0x60000000
 8011e7c:	3ff71547 	.word	0x3ff71547
 8011e80:	f85ddf44 	.word	0xf85ddf44
 8011e84:	3e54ae0b 	.word	0x3e54ae0b
 8011e88:	55555555 	.word	0x55555555
 8011e8c:	3fd55555 	.word	0x3fd55555
 8011e90:	652b82fe 	.word	0x652b82fe
 8011e94:	3ff71547 	.word	0x3ff71547
 8011e98:	00000000 	.word	0x00000000
 8011e9c:	bff00000 	.word	0xbff00000
 8011ea0:	8800759c 	.word	0x8800759c
 8011ea4:	7e37e43c 	.word	0x7e37e43c
 8011ea8:	3ff00000 	.word	0x3ff00000
 8011eac:	3fd00000 	.word	0x3fd00000
 8011eb0:	3fe00000 	.word	0x3fe00000
 8011eb4:	408fffff 	.word	0x408fffff
 8011eb8:	4bd7      	ldr	r3, [pc, #860]	; (8012218 <__ieee754_pow+0x740>)
 8011eba:	ea03 0309 	and.w	r3, r3, r9
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	b92b      	cbnz	r3, 8011ece <__ieee754_pow+0x3f6>
 8011ec2:	4bd6      	ldr	r3, [pc, #856]	; (801221c <__ieee754_pow+0x744>)
 8011ec4:	f7ee fbb8 	bl	8000638 <__aeabi_dmul>
 8011ec8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ecc:	460c      	mov	r4, r1
 8011ece:	1523      	asrs	r3, r4, #20
 8011ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011ed4:	4413      	add	r3, r2
 8011ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed8:	4bd1      	ldr	r3, [pc, #836]	; (8012220 <__ieee754_pow+0x748>)
 8011eda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011ede:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011ee2:	429c      	cmp	r4, r3
 8011ee4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011ee8:	dd08      	ble.n	8011efc <__ieee754_pow+0x424>
 8011eea:	4bce      	ldr	r3, [pc, #824]	; (8012224 <__ieee754_pow+0x74c>)
 8011eec:	429c      	cmp	r4, r3
 8011eee:	f340 8163 	ble.w	80121b8 <__ieee754_pow+0x6e0>
 8011ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011efc:	2400      	movs	r4, #0
 8011efe:	00e3      	lsls	r3, r4, #3
 8011f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f02:	4bc9      	ldr	r3, [pc, #804]	; (8012228 <__ieee754_pow+0x750>)
 8011f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f08:	ed93 7b00 	vldr	d7, [r3]
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	ec53 2b17 	vmov	r2, r3, d7
 8011f12:	eeb0 8a47 	vmov.f32	s16, s14
 8011f16:	eef0 8a67 	vmov.f32	s17, s15
 8011f1a:	4682      	mov	sl, r0
 8011f1c:	f7ee f9d4 	bl	80002c8 <__aeabi_dsub>
 8011f20:	4652      	mov	r2, sl
 8011f22:	4606      	mov	r6, r0
 8011f24:	460f      	mov	r7, r1
 8011f26:	462b      	mov	r3, r5
 8011f28:	ec51 0b18 	vmov	r0, r1, d8
 8011f2c:	f7ee f9ce 	bl	80002cc <__adddf3>
 8011f30:	4602      	mov	r2, r0
 8011f32:	460b      	mov	r3, r1
 8011f34:	2000      	movs	r0, #0
 8011f36:	49bd      	ldr	r1, [pc, #756]	; (801222c <__ieee754_pow+0x754>)
 8011f38:	f7ee fca8 	bl	800088c <__aeabi_ddiv>
 8011f3c:	ec41 0b19 	vmov	d9, r0, r1
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	4630      	mov	r0, r6
 8011f46:	4639      	mov	r1, r7
 8011f48:	f7ee fb76 	bl	8000638 <__aeabi_dmul>
 8011f4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f58:	2300      	movs	r3, #0
 8011f5a:	9304      	str	r3, [sp, #16]
 8011f5c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011f60:	46ab      	mov	fp, r5
 8011f62:	106d      	asrs	r5, r5, #1
 8011f64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011f68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011f6c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011f70:	2200      	movs	r2, #0
 8011f72:	4640      	mov	r0, r8
 8011f74:	4649      	mov	r1, r9
 8011f76:	4614      	mov	r4, r2
 8011f78:	461d      	mov	r5, r3
 8011f7a:	f7ee fb5d 	bl	8000638 <__aeabi_dmul>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	460b      	mov	r3, r1
 8011f82:	4630      	mov	r0, r6
 8011f84:	4639      	mov	r1, r7
 8011f86:	f7ee f99f 	bl	80002c8 <__aeabi_dsub>
 8011f8a:	ec53 2b18 	vmov	r2, r3, d8
 8011f8e:	4606      	mov	r6, r0
 8011f90:	460f      	mov	r7, r1
 8011f92:	4620      	mov	r0, r4
 8011f94:	4629      	mov	r1, r5
 8011f96:	f7ee f997 	bl	80002c8 <__aeabi_dsub>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4650      	mov	r0, sl
 8011fa0:	4659      	mov	r1, fp
 8011fa2:	f7ee f991 	bl	80002c8 <__aeabi_dsub>
 8011fa6:	4642      	mov	r2, r8
 8011fa8:	464b      	mov	r3, r9
 8011faa:	f7ee fb45 	bl	8000638 <__aeabi_dmul>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	4639      	mov	r1, r7
 8011fb6:	f7ee f987 	bl	80002c8 <__aeabi_dsub>
 8011fba:	ec53 2b19 	vmov	r2, r3, d9
 8011fbe:	f7ee fb3b 	bl	8000638 <__aeabi_dmul>
 8011fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011fc6:	ec41 0b18 	vmov	d8, r0, r1
 8011fca:	4610      	mov	r0, r2
 8011fcc:	4619      	mov	r1, r3
 8011fce:	f7ee fb33 	bl	8000638 <__aeabi_dmul>
 8011fd2:	a37d      	add	r3, pc, #500	; (adr r3, 80121c8 <__ieee754_pow+0x6f0>)
 8011fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd8:	4604      	mov	r4, r0
 8011fda:	460d      	mov	r5, r1
 8011fdc:	f7ee fb2c 	bl	8000638 <__aeabi_dmul>
 8011fe0:	a37b      	add	r3, pc, #492	; (adr r3, 80121d0 <__ieee754_pow+0x6f8>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	f7ee f971 	bl	80002cc <__adddf3>
 8011fea:	4622      	mov	r2, r4
 8011fec:	462b      	mov	r3, r5
 8011fee:	f7ee fb23 	bl	8000638 <__aeabi_dmul>
 8011ff2:	a379      	add	r3, pc, #484	; (adr r3, 80121d8 <__ieee754_pow+0x700>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee f968 	bl	80002cc <__adddf3>
 8011ffc:	4622      	mov	r2, r4
 8011ffe:	462b      	mov	r3, r5
 8012000:	f7ee fb1a 	bl	8000638 <__aeabi_dmul>
 8012004:	a376      	add	r3, pc, #472	; (adr r3, 80121e0 <__ieee754_pow+0x708>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	f7ee f95f 	bl	80002cc <__adddf3>
 801200e:	4622      	mov	r2, r4
 8012010:	462b      	mov	r3, r5
 8012012:	f7ee fb11 	bl	8000638 <__aeabi_dmul>
 8012016:	a374      	add	r3, pc, #464	; (adr r3, 80121e8 <__ieee754_pow+0x710>)
 8012018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201c:	f7ee f956 	bl	80002cc <__adddf3>
 8012020:	4622      	mov	r2, r4
 8012022:	462b      	mov	r3, r5
 8012024:	f7ee fb08 	bl	8000638 <__aeabi_dmul>
 8012028:	a371      	add	r3, pc, #452	; (adr r3, 80121f0 <__ieee754_pow+0x718>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	f7ee f94d 	bl	80002cc <__adddf3>
 8012032:	4622      	mov	r2, r4
 8012034:	4606      	mov	r6, r0
 8012036:	460f      	mov	r7, r1
 8012038:	462b      	mov	r3, r5
 801203a:	4620      	mov	r0, r4
 801203c:	4629      	mov	r1, r5
 801203e:	f7ee fafb 	bl	8000638 <__aeabi_dmul>
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	4630      	mov	r0, r6
 8012048:	4639      	mov	r1, r7
 801204a:	f7ee faf5 	bl	8000638 <__aeabi_dmul>
 801204e:	4642      	mov	r2, r8
 8012050:	4604      	mov	r4, r0
 8012052:	460d      	mov	r5, r1
 8012054:	464b      	mov	r3, r9
 8012056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801205a:	f7ee f937 	bl	80002cc <__adddf3>
 801205e:	ec53 2b18 	vmov	r2, r3, d8
 8012062:	f7ee fae9 	bl	8000638 <__aeabi_dmul>
 8012066:	4622      	mov	r2, r4
 8012068:	462b      	mov	r3, r5
 801206a:	f7ee f92f 	bl	80002cc <__adddf3>
 801206e:	4642      	mov	r2, r8
 8012070:	4682      	mov	sl, r0
 8012072:	468b      	mov	fp, r1
 8012074:	464b      	mov	r3, r9
 8012076:	4640      	mov	r0, r8
 8012078:	4649      	mov	r1, r9
 801207a:	f7ee fadd 	bl	8000638 <__aeabi_dmul>
 801207e:	4b6c      	ldr	r3, [pc, #432]	; (8012230 <__ieee754_pow+0x758>)
 8012080:	2200      	movs	r2, #0
 8012082:	4606      	mov	r6, r0
 8012084:	460f      	mov	r7, r1
 8012086:	f7ee f921 	bl	80002cc <__adddf3>
 801208a:	4652      	mov	r2, sl
 801208c:	465b      	mov	r3, fp
 801208e:	f7ee f91d 	bl	80002cc <__adddf3>
 8012092:	9c04      	ldr	r4, [sp, #16]
 8012094:	460d      	mov	r5, r1
 8012096:	4622      	mov	r2, r4
 8012098:	460b      	mov	r3, r1
 801209a:	4640      	mov	r0, r8
 801209c:	4649      	mov	r1, r9
 801209e:	f7ee facb 	bl	8000638 <__aeabi_dmul>
 80120a2:	4b63      	ldr	r3, [pc, #396]	; (8012230 <__ieee754_pow+0x758>)
 80120a4:	4680      	mov	r8, r0
 80120a6:	4689      	mov	r9, r1
 80120a8:	2200      	movs	r2, #0
 80120aa:	4620      	mov	r0, r4
 80120ac:	4629      	mov	r1, r5
 80120ae:	f7ee f90b 	bl	80002c8 <__aeabi_dsub>
 80120b2:	4632      	mov	r2, r6
 80120b4:	463b      	mov	r3, r7
 80120b6:	f7ee f907 	bl	80002c8 <__aeabi_dsub>
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	4650      	mov	r0, sl
 80120c0:	4659      	mov	r1, fp
 80120c2:	f7ee f901 	bl	80002c8 <__aeabi_dsub>
 80120c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120ca:	f7ee fab5 	bl	8000638 <__aeabi_dmul>
 80120ce:	4622      	mov	r2, r4
 80120d0:	4606      	mov	r6, r0
 80120d2:	460f      	mov	r7, r1
 80120d4:	462b      	mov	r3, r5
 80120d6:	ec51 0b18 	vmov	r0, r1, d8
 80120da:	f7ee faad 	bl	8000638 <__aeabi_dmul>
 80120de:	4602      	mov	r2, r0
 80120e0:	460b      	mov	r3, r1
 80120e2:	4630      	mov	r0, r6
 80120e4:	4639      	mov	r1, r7
 80120e6:	f7ee f8f1 	bl	80002cc <__adddf3>
 80120ea:	4606      	mov	r6, r0
 80120ec:	460f      	mov	r7, r1
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4640      	mov	r0, r8
 80120f4:	4649      	mov	r1, r9
 80120f6:	f7ee f8e9 	bl	80002cc <__adddf3>
 80120fa:	9c04      	ldr	r4, [sp, #16]
 80120fc:	a33e      	add	r3, pc, #248	; (adr r3, 80121f8 <__ieee754_pow+0x720>)
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	4620      	mov	r0, r4
 8012104:	460d      	mov	r5, r1
 8012106:	f7ee fa97 	bl	8000638 <__aeabi_dmul>
 801210a:	4642      	mov	r2, r8
 801210c:	ec41 0b18 	vmov	d8, r0, r1
 8012110:	464b      	mov	r3, r9
 8012112:	4620      	mov	r0, r4
 8012114:	4629      	mov	r1, r5
 8012116:	f7ee f8d7 	bl	80002c8 <__aeabi_dsub>
 801211a:	4602      	mov	r2, r0
 801211c:	460b      	mov	r3, r1
 801211e:	4630      	mov	r0, r6
 8012120:	4639      	mov	r1, r7
 8012122:	f7ee f8d1 	bl	80002c8 <__aeabi_dsub>
 8012126:	a336      	add	r3, pc, #216	; (adr r3, 8012200 <__ieee754_pow+0x728>)
 8012128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212c:	f7ee fa84 	bl	8000638 <__aeabi_dmul>
 8012130:	a335      	add	r3, pc, #212	; (adr r3, 8012208 <__ieee754_pow+0x730>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	4606      	mov	r6, r0
 8012138:	460f      	mov	r7, r1
 801213a:	4620      	mov	r0, r4
 801213c:	4629      	mov	r1, r5
 801213e:	f7ee fa7b 	bl	8000638 <__aeabi_dmul>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	4630      	mov	r0, r6
 8012148:	4639      	mov	r1, r7
 801214a:	f7ee f8bf 	bl	80002cc <__adddf3>
 801214e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012150:	4b38      	ldr	r3, [pc, #224]	; (8012234 <__ieee754_pow+0x75c>)
 8012152:	4413      	add	r3, r2
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	f7ee f8b8 	bl	80002cc <__adddf3>
 801215c:	4682      	mov	sl, r0
 801215e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012160:	468b      	mov	fp, r1
 8012162:	f7ee f9ff 	bl	8000564 <__aeabi_i2d>
 8012166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012168:	4b33      	ldr	r3, [pc, #204]	; (8012238 <__ieee754_pow+0x760>)
 801216a:	4413      	add	r3, r2
 801216c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012170:	4606      	mov	r6, r0
 8012172:	460f      	mov	r7, r1
 8012174:	4652      	mov	r2, sl
 8012176:	465b      	mov	r3, fp
 8012178:	ec51 0b18 	vmov	r0, r1, d8
 801217c:	f7ee f8a6 	bl	80002cc <__adddf3>
 8012180:	4642      	mov	r2, r8
 8012182:	464b      	mov	r3, r9
 8012184:	f7ee f8a2 	bl	80002cc <__adddf3>
 8012188:	4632      	mov	r2, r6
 801218a:	463b      	mov	r3, r7
 801218c:	f7ee f89e 	bl	80002cc <__adddf3>
 8012190:	9c04      	ldr	r4, [sp, #16]
 8012192:	4632      	mov	r2, r6
 8012194:	463b      	mov	r3, r7
 8012196:	4620      	mov	r0, r4
 8012198:	460d      	mov	r5, r1
 801219a:	f7ee f895 	bl	80002c8 <__aeabi_dsub>
 801219e:	4642      	mov	r2, r8
 80121a0:	464b      	mov	r3, r9
 80121a2:	f7ee f891 	bl	80002c8 <__aeabi_dsub>
 80121a6:	ec53 2b18 	vmov	r2, r3, d8
 80121aa:	f7ee f88d 	bl	80002c8 <__aeabi_dsub>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4650      	mov	r0, sl
 80121b4:	4659      	mov	r1, fp
 80121b6:	e606      	b.n	8011dc6 <__ieee754_pow+0x2ee>
 80121b8:	2401      	movs	r4, #1
 80121ba:	e6a0      	b.n	8011efe <__ieee754_pow+0x426>
 80121bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012210 <__ieee754_pow+0x738>
 80121c0:	e60d      	b.n	8011dde <__ieee754_pow+0x306>
 80121c2:	bf00      	nop
 80121c4:	f3af 8000 	nop.w
 80121c8:	4a454eef 	.word	0x4a454eef
 80121cc:	3fca7e28 	.word	0x3fca7e28
 80121d0:	93c9db65 	.word	0x93c9db65
 80121d4:	3fcd864a 	.word	0x3fcd864a
 80121d8:	a91d4101 	.word	0xa91d4101
 80121dc:	3fd17460 	.word	0x3fd17460
 80121e0:	518f264d 	.word	0x518f264d
 80121e4:	3fd55555 	.word	0x3fd55555
 80121e8:	db6fabff 	.word	0xdb6fabff
 80121ec:	3fdb6db6 	.word	0x3fdb6db6
 80121f0:	33333303 	.word	0x33333303
 80121f4:	3fe33333 	.word	0x3fe33333
 80121f8:	e0000000 	.word	0xe0000000
 80121fc:	3feec709 	.word	0x3feec709
 8012200:	dc3a03fd 	.word	0xdc3a03fd
 8012204:	3feec709 	.word	0x3feec709
 8012208:	145b01f5 	.word	0x145b01f5
 801220c:	be3e2fe0 	.word	0xbe3e2fe0
 8012210:	00000000 	.word	0x00000000
 8012214:	3ff00000 	.word	0x3ff00000
 8012218:	7ff00000 	.word	0x7ff00000
 801221c:	43400000 	.word	0x43400000
 8012220:	0003988e 	.word	0x0003988e
 8012224:	000bb679 	.word	0x000bb679
 8012228:	08013d80 	.word	0x08013d80
 801222c:	3ff00000 	.word	0x3ff00000
 8012230:	40080000 	.word	0x40080000
 8012234:	08013da0 	.word	0x08013da0
 8012238:	08013d90 	.word	0x08013d90
 801223c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012514 <__ieee754_pow+0xa3c>)
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	4640      	mov	r0, r8
 8012244:	4649      	mov	r1, r9
 8012246:	f7ee f841 	bl	80002cc <__adddf3>
 801224a:	4622      	mov	r2, r4
 801224c:	ec41 0b1a 	vmov	d10, r0, r1
 8012250:	462b      	mov	r3, r5
 8012252:	4630      	mov	r0, r6
 8012254:	4639      	mov	r1, r7
 8012256:	f7ee f837 	bl	80002c8 <__aeabi_dsub>
 801225a:	4602      	mov	r2, r0
 801225c:	460b      	mov	r3, r1
 801225e:	ec51 0b1a 	vmov	r0, r1, d10
 8012262:	f7ee fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8012266:	2800      	cmp	r0, #0
 8012268:	f47f adf8 	bne.w	8011e5c <__ieee754_pow+0x384>
 801226c:	4aa4      	ldr	r2, [pc, #656]	; (8012500 <__ieee754_pow+0xa28>)
 801226e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012272:	4293      	cmp	r3, r2
 8012274:	f340 810b 	ble.w	801248e <__ieee754_pow+0x9b6>
 8012278:	151b      	asrs	r3, r3, #20
 801227a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801227e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012282:	fa4a f303 	asr.w	r3, sl, r3
 8012286:	445b      	add	r3, fp
 8012288:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801228c:	4e9d      	ldr	r6, [pc, #628]	; (8012504 <__ieee754_pow+0xa2c>)
 801228e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012292:	4116      	asrs	r6, r2
 8012294:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012298:	2000      	movs	r0, #0
 801229a:	ea23 0106 	bic.w	r1, r3, r6
 801229e:	f1c2 0214 	rsb	r2, r2, #20
 80122a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80122a6:	fa4a fa02 	asr.w	sl, sl, r2
 80122aa:	f1bb 0f00 	cmp.w	fp, #0
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4620      	mov	r0, r4
 80122b4:	4629      	mov	r1, r5
 80122b6:	bfb8      	it	lt
 80122b8:	f1ca 0a00 	rsblt	sl, sl, #0
 80122bc:	f7ee f804 	bl	80002c8 <__aeabi_dsub>
 80122c0:	ec41 0b19 	vmov	d9, r0, r1
 80122c4:	4642      	mov	r2, r8
 80122c6:	464b      	mov	r3, r9
 80122c8:	ec51 0b19 	vmov	r0, r1, d9
 80122cc:	f7ed fffe 	bl	80002cc <__adddf3>
 80122d0:	2400      	movs	r4, #0
 80122d2:	a379      	add	r3, pc, #484	; (adr r3, 80124b8 <__ieee754_pow+0x9e0>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	4620      	mov	r0, r4
 80122da:	460d      	mov	r5, r1
 80122dc:	f7ee f9ac 	bl	8000638 <__aeabi_dmul>
 80122e0:	ec53 2b19 	vmov	r2, r3, d9
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	4620      	mov	r0, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	f7ed ffec 	bl	80002c8 <__aeabi_dsub>
 80122f0:	4602      	mov	r2, r0
 80122f2:	460b      	mov	r3, r1
 80122f4:	4640      	mov	r0, r8
 80122f6:	4649      	mov	r1, r9
 80122f8:	f7ed ffe6 	bl	80002c8 <__aeabi_dsub>
 80122fc:	a370      	add	r3, pc, #448	; (adr r3, 80124c0 <__ieee754_pow+0x9e8>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	f7ee f999 	bl	8000638 <__aeabi_dmul>
 8012306:	a370      	add	r3, pc, #448	; (adr r3, 80124c8 <__ieee754_pow+0x9f0>)
 8012308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230c:	4680      	mov	r8, r0
 801230e:	4689      	mov	r9, r1
 8012310:	4620      	mov	r0, r4
 8012312:	4629      	mov	r1, r5
 8012314:	f7ee f990 	bl	8000638 <__aeabi_dmul>
 8012318:	4602      	mov	r2, r0
 801231a:	460b      	mov	r3, r1
 801231c:	4640      	mov	r0, r8
 801231e:	4649      	mov	r1, r9
 8012320:	f7ed ffd4 	bl	80002cc <__adddf3>
 8012324:	4604      	mov	r4, r0
 8012326:	460d      	mov	r5, r1
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	4630      	mov	r0, r6
 801232e:	4639      	mov	r1, r7
 8012330:	f7ed ffcc 	bl	80002cc <__adddf3>
 8012334:	4632      	mov	r2, r6
 8012336:	463b      	mov	r3, r7
 8012338:	4680      	mov	r8, r0
 801233a:	4689      	mov	r9, r1
 801233c:	f7ed ffc4 	bl	80002c8 <__aeabi_dsub>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4620      	mov	r0, r4
 8012346:	4629      	mov	r1, r5
 8012348:	f7ed ffbe 	bl	80002c8 <__aeabi_dsub>
 801234c:	4642      	mov	r2, r8
 801234e:	4606      	mov	r6, r0
 8012350:	460f      	mov	r7, r1
 8012352:	464b      	mov	r3, r9
 8012354:	4640      	mov	r0, r8
 8012356:	4649      	mov	r1, r9
 8012358:	f7ee f96e 	bl	8000638 <__aeabi_dmul>
 801235c:	a35c      	add	r3, pc, #368	; (adr r3, 80124d0 <__ieee754_pow+0x9f8>)
 801235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012362:	4604      	mov	r4, r0
 8012364:	460d      	mov	r5, r1
 8012366:	f7ee f967 	bl	8000638 <__aeabi_dmul>
 801236a:	a35b      	add	r3, pc, #364	; (adr r3, 80124d8 <__ieee754_pow+0xa00>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	f7ed ffaa 	bl	80002c8 <__aeabi_dsub>
 8012374:	4622      	mov	r2, r4
 8012376:	462b      	mov	r3, r5
 8012378:	f7ee f95e 	bl	8000638 <__aeabi_dmul>
 801237c:	a358      	add	r3, pc, #352	; (adr r3, 80124e0 <__ieee754_pow+0xa08>)
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	f7ed ffa3 	bl	80002cc <__adddf3>
 8012386:	4622      	mov	r2, r4
 8012388:	462b      	mov	r3, r5
 801238a:	f7ee f955 	bl	8000638 <__aeabi_dmul>
 801238e:	a356      	add	r3, pc, #344	; (adr r3, 80124e8 <__ieee754_pow+0xa10>)
 8012390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012394:	f7ed ff98 	bl	80002c8 <__aeabi_dsub>
 8012398:	4622      	mov	r2, r4
 801239a:	462b      	mov	r3, r5
 801239c:	f7ee f94c 	bl	8000638 <__aeabi_dmul>
 80123a0:	a353      	add	r3, pc, #332	; (adr r3, 80124f0 <__ieee754_pow+0xa18>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff91 	bl	80002cc <__adddf3>
 80123aa:	4622      	mov	r2, r4
 80123ac:	462b      	mov	r3, r5
 80123ae:	f7ee f943 	bl	8000638 <__aeabi_dmul>
 80123b2:	4602      	mov	r2, r0
 80123b4:	460b      	mov	r3, r1
 80123b6:	4640      	mov	r0, r8
 80123b8:	4649      	mov	r1, r9
 80123ba:	f7ed ff85 	bl	80002c8 <__aeabi_dsub>
 80123be:	4604      	mov	r4, r0
 80123c0:	460d      	mov	r5, r1
 80123c2:	4602      	mov	r2, r0
 80123c4:	460b      	mov	r3, r1
 80123c6:	4640      	mov	r0, r8
 80123c8:	4649      	mov	r1, r9
 80123ca:	f7ee f935 	bl	8000638 <__aeabi_dmul>
 80123ce:	2200      	movs	r2, #0
 80123d0:	ec41 0b19 	vmov	d9, r0, r1
 80123d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123d8:	4620      	mov	r0, r4
 80123da:	4629      	mov	r1, r5
 80123dc:	f7ed ff74 	bl	80002c8 <__aeabi_dsub>
 80123e0:	4602      	mov	r2, r0
 80123e2:	460b      	mov	r3, r1
 80123e4:	ec51 0b19 	vmov	r0, r1, d9
 80123e8:	f7ee fa50 	bl	800088c <__aeabi_ddiv>
 80123ec:	4632      	mov	r2, r6
 80123ee:	4604      	mov	r4, r0
 80123f0:	460d      	mov	r5, r1
 80123f2:	463b      	mov	r3, r7
 80123f4:	4640      	mov	r0, r8
 80123f6:	4649      	mov	r1, r9
 80123f8:	f7ee f91e 	bl	8000638 <__aeabi_dmul>
 80123fc:	4632      	mov	r2, r6
 80123fe:	463b      	mov	r3, r7
 8012400:	f7ed ff64 	bl	80002cc <__adddf3>
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	4620      	mov	r0, r4
 801240a:	4629      	mov	r1, r5
 801240c:	f7ed ff5c 	bl	80002c8 <__aeabi_dsub>
 8012410:	4642      	mov	r2, r8
 8012412:	464b      	mov	r3, r9
 8012414:	f7ed ff58 	bl	80002c8 <__aeabi_dsub>
 8012418:	460b      	mov	r3, r1
 801241a:	4602      	mov	r2, r0
 801241c:	493a      	ldr	r1, [pc, #232]	; (8012508 <__ieee754_pow+0xa30>)
 801241e:	2000      	movs	r0, #0
 8012420:	f7ed ff52 	bl	80002c8 <__aeabi_dsub>
 8012424:	e9cd 0100 	strd	r0, r1, [sp]
 8012428:	9b01      	ldr	r3, [sp, #4]
 801242a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801242e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012432:	da2f      	bge.n	8012494 <__ieee754_pow+0x9bc>
 8012434:	4650      	mov	r0, sl
 8012436:	ed9d 0b00 	vldr	d0, [sp]
 801243a:	f001 f919 	bl	8013670 <scalbn>
 801243e:	ec51 0b10 	vmov	r0, r1, d0
 8012442:	ec53 2b18 	vmov	r2, r3, d8
 8012446:	f7ff bbe0 	b.w	8011c0a <__ieee754_pow+0x132>
 801244a:	4b30      	ldr	r3, [pc, #192]	; (801250c <__ieee754_pow+0xa34>)
 801244c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012450:	429e      	cmp	r6, r3
 8012452:	f77f af0b 	ble.w	801226c <__ieee754_pow+0x794>
 8012456:	4b2e      	ldr	r3, [pc, #184]	; (8012510 <__ieee754_pow+0xa38>)
 8012458:	440b      	add	r3, r1
 801245a:	4303      	orrs	r3, r0
 801245c:	d00b      	beq.n	8012476 <__ieee754_pow+0x99e>
 801245e:	a326      	add	r3, pc, #152	; (adr r3, 80124f8 <__ieee754_pow+0xa20>)
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	ec51 0b18 	vmov	r0, r1, d8
 8012468:	f7ee f8e6 	bl	8000638 <__aeabi_dmul>
 801246c:	a322      	add	r3, pc, #136	; (adr r3, 80124f8 <__ieee754_pow+0xa20>)
 801246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012472:	f7ff bbca 	b.w	8011c0a <__ieee754_pow+0x132>
 8012476:	4622      	mov	r2, r4
 8012478:	462b      	mov	r3, r5
 801247a:	f7ed ff25 	bl	80002c8 <__aeabi_dsub>
 801247e:	4642      	mov	r2, r8
 8012480:	464b      	mov	r3, r9
 8012482:	f7ee fb5f 	bl	8000b44 <__aeabi_dcmpge>
 8012486:	2800      	cmp	r0, #0
 8012488:	f43f aef0 	beq.w	801226c <__ieee754_pow+0x794>
 801248c:	e7e7      	b.n	801245e <__ieee754_pow+0x986>
 801248e:	f04f 0a00 	mov.w	sl, #0
 8012492:	e717      	b.n	80122c4 <__ieee754_pow+0x7ec>
 8012494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012498:	4619      	mov	r1, r3
 801249a:	e7d2      	b.n	8012442 <__ieee754_pow+0x96a>
 801249c:	491a      	ldr	r1, [pc, #104]	; (8012508 <__ieee754_pow+0xa30>)
 801249e:	2000      	movs	r0, #0
 80124a0:	f7ff bb9e 	b.w	8011be0 <__ieee754_pow+0x108>
 80124a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124a8:	f7ff bb9a 	b.w	8011be0 <__ieee754_pow+0x108>
 80124ac:	9000      	str	r0, [sp, #0]
 80124ae:	f7ff bb76 	b.w	8011b9e <__ieee754_pow+0xc6>
 80124b2:	2100      	movs	r1, #0
 80124b4:	f7ff bb60 	b.w	8011b78 <__ieee754_pow+0xa0>
 80124b8:	00000000 	.word	0x00000000
 80124bc:	3fe62e43 	.word	0x3fe62e43
 80124c0:	fefa39ef 	.word	0xfefa39ef
 80124c4:	3fe62e42 	.word	0x3fe62e42
 80124c8:	0ca86c39 	.word	0x0ca86c39
 80124cc:	be205c61 	.word	0xbe205c61
 80124d0:	72bea4d0 	.word	0x72bea4d0
 80124d4:	3e663769 	.word	0x3e663769
 80124d8:	c5d26bf1 	.word	0xc5d26bf1
 80124dc:	3ebbbd41 	.word	0x3ebbbd41
 80124e0:	af25de2c 	.word	0xaf25de2c
 80124e4:	3f11566a 	.word	0x3f11566a
 80124e8:	16bebd93 	.word	0x16bebd93
 80124ec:	3f66c16c 	.word	0x3f66c16c
 80124f0:	5555553e 	.word	0x5555553e
 80124f4:	3fc55555 	.word	0x3fc55555
 80124f8:	c2f8f359 	.word	0xc2f8f359
 80124fc:	01a56e1f 	.word	0x01a56e1f
 8012500:	3fe00000 	.word	0x3fe00000
 8012504:	000fffff 	.word	0x000fffff
 8012508:	3ff00000 	.word	0x3ff00000
 801250c:	4090cbff 	.word	0x4090cbff
 8012510:	3f6f3400 	.word	0x3f6f3400
 8012514:	652b82fe 	.word	0x652b82fe
 8012518:	3c971547 	.word	0x3c971547
 801251c:	00000000 	.word	0x00000000

08012520 <__ieee754_rem_pio2>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	ed2d 8b02 	vpush	{d8}
 8012528:	ec55 4b10 	vmov	r4, r5, d0
 801252c:	4bca      	ldr	r3, [pc, #808]	; (8012858 <__ieee754_rem_pio2+0x338>)
 801252e:	b08b      	sub	sp, #44	; 0x2c
 8012530:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012534:	4598      	cmp	r8, r3
 8012536:	4682      	mov	sl, r0
 8012538:	9502      	str	r5, [sp, #8]
 801253a:	dc08      	bgt.n	801254e <__ieee754_rem_pio2+0x2e>
 801253c:	2200      	movs	r2, #0
 801253e:	2300      	movs	r3, #0
 8012540:	ed80 0b00 	vstr	d0, [r0]
 8012544:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012548:	f04f 0b00 	mov.w	fp, #0
 801254c:	e028      	b.n	80125a0 <__ieee754_rem_pio2+0x80>
 801254e:	4bc3      	ldr	r3, [pc, #780]	; (801285c <__ieee754_rem_pio2+0x33c>)
 8012550:	4598      	cmp	r8, r3
 8012552:	dc78      	bgt.n	8012646 <__ieee754_rem_pio2+0x126>
 8012554:	9b02      	ldr	r3, [sp, #8]
 8012556:	4ec2      	ldr	r6, [pc, #776]	; (8012860 <__ieee754_rem_pio2+0x340>)
 8012558:	2b00      	cmp	r3, #0
 801255a:	ee10 0a10 	vmov	r0, s0
 801255e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012820 <__ieee754_rem_pio2+0x300>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	4629      	mov	r1, r5
 8012566:	dd39      	ble.n	80125dc <__ieee754_rem_pio2+0xbc>
 8012568:	f7ed feae 	bl	80002c8 <__aeabi_dsub>
 801256c:	45b0      	cmp	r8, r6
 801256e:	4604      	mov	r4, r0
 8012570:	460d      	mov	r5, r1
 8012572:	d01b      	beq.n	80125ac <__ieee754_rem_pio2+0x8c>
 8012574:	a3ac      	add	r3, pc, #688	; (adr r3, 8012828 <__ieee754_rem_pio2+0x308>)
 8012576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257a:	f7ed fea5 	bl	80002c8 <__aeabi_dsub>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	e9ca 2300 	strd	r2, r3, [sl]
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ed fe9d 	bl	80002c8 <__aeabi_dsub>
 801258e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012828 <__ieee754_rem_pio2+0x308>)
 8012590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012594:	f7ed fe98 	bl	80002c8 <__aeabi_dsub>
 8012598:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801259c:	f04f 0b01 	mov.w	fp, #1
 80125a0:	4658      	mov	r0, fp
 80125a2:	b00b      	add	sp, #44	; 0x2c
 80125a4:	ecbd 8b02 	vpop	{d8}
 80125a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8012830 <__ieee754_rem_pio2+0x310>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ed fe89 	bl	80002c8 <__aeabi_dsub>
 80125b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012838 <__ieee754_rem_pio2+0x318>)
 80125b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125bc:	4604      	mov	r4, r0
 80125be:	460d      	mov	r5, r1
 80125c0:	f7ed fe82 	bl	80002c8 <__aeabi_dsub>
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	e9ca 2300 	strd	r2, r3, [sl]
 80125cc:	4620      	mov	r0, r4
 80125ce:	4629      	mov	r1, r5
 80125d0:	f7ed fe7a 	bl	80002c8 <__aeabi_dsub>
 80125d4:	a398      	add	r3, pc, #608	; (adr r3, 8012838 <__ieee754_rem_pio2+0x318>)
 80125d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125da:	e7db      	b.n	8012594 <__ieee754_rem_pio2+0x74>
 80125dc:	f7ed fe76 	bl	80002cc <__adddf3>
 80125e0:	45b0      	cmp	r8, r6
 80125e2:	4604      	mov	r4, r0
 80125e4:	460d      	mov	r5, r1
 80125e6:	d016      	beq.n	8012616 <__ieee754_rem_pio2+0xf6>
 80125e8:	a38f      	add	r3, pc, #572	; (adr r3, 8012828 <__ieee754_rem_pio2+0x308>)
 80125ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ee:	f7ed fe6d 	bl	80002cc <__adddf3>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	e9ca 2300 	strd	r2, r3, [sl]
 80125fa:	4620      	mov	r0, r4
 80125fc:	4629      	mov	r1, r5
 80125fe:	f7ed fe63 	bl	80002c8 <__aeabi_dsub>
 8012602:	a389      	add	r3, pc, #548	; (adr r3, 8012828 <__ieee754_rem_pio2+0x308>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f7ed fe60 	bl	80002cc <__adddf3>
 801260c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012610:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012614:	e7c4      	b.n	80125a0 <__ieee754_rem_pio2+0x80>
 8012616:	a386      	add	r3, pc, #536	; (adr r3, 8012830 <__ieee754_rem_pio2+0x310>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	f7ed fe56 	bl	80002cc <__adddf3>
 8012620:	a385      	add	r3, pc, #532	; (adr r3, 8012838 <__ieee754_rem_pio2+0x318>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	4604      	mov	r4, r0
 8012628:	460d      	mov	r5, r1
 801262a:	f7ed fe4f 	bl	80002cc <__adddf3>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	e9ca 2300 	strd	r2, r3, [sl]
 8012636:	4620      	mov	r0, r4
 8012638:	4629      	mov	r1, r5
 801263a:	f7ed fe45 	bl	80002c8 <__aeabi_dsub>
 801263e:	a37e      	add	r3, pc, #504	; (adr r3, 8012838 <__ieee754_rem_pio2+0x318>)
 8012640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012644:	e7e0      	b.n	8012608 <__ieee754_rem_pio2+0xe8>
 8012646:	4b87      	ldr	r3, [pc, #540]	; (8012864 <__ieee754_rem_pio2+0x344>)
 8012648:	4598      	cmp	r8, r3
 801264a:	f300 80d9 	bgt.w	8012800 <__ieee754_rem_pio2+0x2e0>
 801264e:	f000 feed 	bl	801342c <fabs>
 8012652:	ec55 4b10 	vmov	r4, r5, d0
 8012656:	ee10 0a10 	vmov	r0, s0
 801265a:	a379      	add	r3, pc, #484	; (adr r3, 8012840 <__ieee754_rem_pio2+0x320>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	4629      	mov	r1, r5
 8012662:	f7ed ffe9 	bl	8000638 <__aeabi_dmul>
 8012666:	4b80      	ldr	r3, [pc, #512]	; (8012868 <__ieee754_rem_pio2+0x348>)
 8012668:	2200      	movs	r2, #0
 801266a:	f7ed fe2f 	bl	80002cc <__adddf3>
 801266e:	f7ee fa93 	bl	8000b98 <__aeabi_d2iz>
 8012672:	4683      	mov	fp, r0
 8012674:	f7ed ff76 	bl	8000564 <__aeabi_i2d>
 8012678:	4602      	mov	r2, r0
 801267a:	460b      	mov	r3, r1
 801267c:	ec43 2b18 	vmov	d8, r2, r3
 8012680:	a367      	add	r3, pc, #412	; (adr r3, 8012820 <__ieee754_rem_pio2+0x300>)
 8012682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012686:	f7ed ffd7 	bl	8000638 <__aeabi_dmul>
 801268a:	4602      	mov	r2, r0
 801268c:	460b      	mov	r3, r1
 801268e:	4620      	mov	r0, r4
 8012690:	4629      	mov	r1, r5
 8012692:	f7ed fe19 	bl	80002c8 <__aeabi_dsub>
 8012696:	a364      	add	r3, pc, #400	; (adr r3, 8012828 <__ieee754_rem_pio2+0x308>)
 8012698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269c:	4606      	mov	r6, r0
 801269e:	460f      	mov	r7, r1
 80126a0:	ec51 0b18 	vmov	r0, r1, d8
 80126a4:	f7ed ffc8 	bl	8000638 <__aeabi_dmul>
 80126a8:	f1bb 0f1f 	cmp.w	fp, #31
 80126ac:	4604      	mov	r4, r0
 80126ae:	460d      	mov	r5, r1
 80126b0:	dc0d      	bgt.n	80126ce <__ieee754_rem_pio2+0x1ae>
 80126b2:	4b6e      	ldr	r3, [pc, #440]	; (801286c <__ieee754_rem_pio2+0x34c>)
 80126b4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80126b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126bc:	4543      	cmp	r3, r8
 80126be:	d006      	beq.n	80126ce <__ieee754_rem_pio2+0x1ae>
 80126c0:	4622      	mov	r2, r4
 80126c2:	462b      	mov	r3, r5
 80126c4:	4630      	mov	r0, r6
 80126c6:	4639      	mov	r1, r7
 80126c8:	f7ed fdfe 	bl	80002c8 <__aeabi_dsub>
 80126cc:	e00f      	b.n	80126ee <__ieee754_rem_pio2+0x1ce>
 80126ce:	462b      	mov	r3, r5
 80126d0:	4622      	mov	r2, r4
 80126d2:	4630      	mov	r0, r6
 80126d4:	4639      	mov	r1, r7
 80126d6:	f7ed fdf7 	bl	80002c8 <__aeabi_dsub>
 80126da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80126de:	9303      	str	r3, [sp, #12]
 80126e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80126e8:	f1b8 0f10 	cmp.w	r8, #16
 80126ec:	dc02      	bgt.n	80126f4 <__ieee754_rem_pio2+0x1d4>
 80126ee:	e9ca 0100 	strd	r0, r1, [sl]
 80126f2:	e039      	b.n	8012768 <__ieee754_rem_pio2+0x248>
 80126f4:	a34e      	add	r3, pc, #312	; (adr r3, 8012830 <__ieee754_rem_pio2+0x310>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	ec51 0b18 	vmov	r0, r1, d8
 80126fe:	f7ed ff9b 	bl	8000638 <__aeabi_dmul>
 8012702:	4604      	mov	r4, r0
 8012704:	460d      	mov	r5, r1
 8012706:	4602      	mov	r2, r0
 8012708:	460b      	mov	r3, r1
 801270a:	4630      	mov	r0, r6
 801270c:	4639      	mov	r1, r7
 801270e:	f7ed fddb 	bl	80002c8 <__aeabi_dsub>
 8012712:	4602      	mov	r2, r0
 8012714:	460b      	mov	r3, r1
 8012716:	4680      	mov	r8, r0
 8012718:	4689      	mov	r9, r1
 801271a:	4630      	mov	r0, r6
 801271c:	4639      	mov	r1, r7
 801271e:	f7ed fdd3 	bl	80002c8 <__aeabi_dsub>
 8012722:	4622      	mov	r2, r4
 8012724:	462b      	mov	r3, r5
 8012726:	f7ed fdcf 	bl	80002c8 <__aeabi_dsub>
 801272a:	a343      	add	r3, pc, #268	; (adr r3, 8012838 <__ieee754_rem_pio2+0x318>)
 801272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012730:	4604      	mov	r4, r0
 8012732:	460d      	mov	r5, r1
 8012734:	ec51 0b18 	vmov	r0, r1, d8
 8012738:	f7ed ff7e 	bl	8000638 <__aeabi_dmul>
 801273c:	4622      	mov	r2, r4
 801273e:	462b      	mov	r3, r5
 8012740:	f7ed fdc2 	bl	80002c8 <__aeabi_dsub>
 8012744:	4602      	mov	r2, r0
 8012746:	460b      	mov	r3, r1
 8012748:	4604      	mov	r4, r0
 801274a:	460d      	mov	r5, r1
 801274c:	4640      	mov	r0, r8
 801274e:	4649      	mov	r1, r9
 8012750:	f7ed fdba 	bl	80002c8 <__aeabi_dsub>
 8012754:	9a03      	ldr	r2, [sp, #12]
 8012756:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	2b31      	cmp	r3, #49	; 0x31
 801275e:	dc24      	bgt.n	80127aa <__ieee754_rem_pio2+0x28a>
 8012760:	e9ca 0100 	strd	r0, r1, [sl]
 8012764:	4646      	mov	r6, r8
 8012766:	464f      	mov	r7, r9
 8012768:	e9da 8900 	ldrd	r8, r9, [sl]
 801276c:	4630      	mov	r0, r6
 801276e:	4642      	mov	r2, r8
 8012770:	464b      	mov	r3, r9
 8012772:	4639      	mov	r1, r7
 8012774:	f7ed fda8 	bl	80002c8 <__aeabi_dsub>
 8012778:	462b      	mov	r3, r5
 801277a:	4622      	mov	r2, r4
 801277c:	f7ed fda4 	bl	80002c8 <__aeabi_dsub>
 8012780:	9b02      	ldr	r3, [sp, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012788:	f6bf af0a 	bge.w	80125a0 <__ieee754_rem_pio2+0x80>
 801278c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012790:	f8ca 3004 	str.w	r3, [sl, #4]
 8012794:	f8ca 8000 	str.w	r8, [sl]
 8012798:	f8ca 0008 	str.w	r0, [sl, #8]
 801279c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80127a4:	f1cb 0b00 	rsb	fp, fp, #0
 80127a8:	e6fa      	b.n	80125a0 <__ieee754_rem_pio2+0x80>
 80127aa:	a327      	add	r3, pc, #156	; (adr r3, 8012848 <__ieee754_rem_pio2+0x328>)
 80127ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b0:	ec51 0b18 	vmov	r0, r1, d8
 80127b4:	f7ed ff40 	bl	8000638 <__aeabi_dmul>
 80127b8:	4604      	mov	r4, r0
 80127ba:	460d      	mov	r5, r1
 80127bc:	4602      	mov	r2, r0
 80127be:	460b      	mov	r3, r1
 80127c0:	4640      	mov	r0, r8
 80127c2:	4649      	mov	r1, r9
 80127c4:	f7ed fd80 	bl	80002c8 <__aeabi_dsub>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4606      	mov	r6, r0
 80127ce:	460f      	mov	r7, r1
 80127d0:	4640      	mov	r0, r8
 80127d2:	4649      	mov	r1, r9
 80127d4:	f7ed fd78 	bl	80002c8 <__aeabi_dsub>
 80127d8:	4622      	mov	r2, r4
 80127da:	462b      	mov	r3, r5
 80127dc:	f7ed fd74 	bl	80002c8 <__aeabi_dsub>
 80127e0:	a31b      	add	r3, pc, #108	; (adr r3, 8012850 <__ieee754_rem_pio2+0x330>)
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	4604      	mov	r4, r0
 80127e8:	460d      	mov	r5, r1
 80127ea:	ec51 0b18 	vmov	r0, r1, d8
 80127ee:	f7ed ff23 	bl	8000638 <__aeabi_dmul>
 80127f2:	4622      	mov	r2, r4
 80127f4:	462b      	mov	r3, r5
 80127f6:	f7ed fd67 	bl	80002c8 <__aeabi_dsub>
 80127fa:	4604      	mov	r4, r0
 80127fc:	460d      	mov	r5, r1
 80127fe:	e75f      	b.n	80126c0 <__ieee754_rem_pio2+0x1a0>
 8012800:	4b1b      	ldr	r3, [pc, #108]	; (8012870 <__ieee754_rem_pio2+0x350>)
 8012802:	4598      	cmp	r8, r3
 8012804:	dd36      	ble.n	8012874 <__ieee754_rem_pio2+0x354>
 8012806:	ee10 2a10 	vmov	r2, s0
 801280a:	462b      	mov	r3, r5
 801280c:	4620      	mov	r0, r4
 801280e:	4629      	mov	r1, r5
 8012810:	f7ed fd5a 	bl	80002c8 <__aeabi_dsub>
 8012814:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012818:	e9ca 0100 	strd	r0, r1, [sl]
 801281c:	e694      	b.n	8012548 <__ieee754_rem_pio2+0x28>
 801281e:	bf00      	nop
 8012820:	54400000 	.word	0x54400000
 8012824:	3ff921fb 	.word	0x3ff921fb
 8012828:	1a626331 	.word	0x1a626331
 801282c:	3dd0b461 	.word	0x3dd0b461
 8012830:	1a600000 	.word	0x1a600000
 8012834:	3dd0b461 	.word	0x3dd0b461
 8012838:	2e037073 	.word	0x2e037073
 801283c:	3ba3198a 	.word	0x3ba3198a
 8012840:	6dc9c883 	.word	0x6dc9c883
 8012844:	3fe45f30 	.word	0x3fe45f30
 8012848:	2e000000 	.word	0x2e000000
 801284c:	3ba3198a 	.word	0x3ba3198a
 8012850:	252049c1 	.word	0x252049c1
 8012854:	397b839a 	.word	0x397b839a
 8012858:	3fe921fb 	.word	0x3fe921fb
 801285c:	4002d97b 	.word	0x4002d97b
 8012860:	3ff921fb 	.word	0x3ff921fb
 8012864:	413921fb 	.word	0x413921fb
 8012868:	3fe00000 	.word	0x3fe00000
 801286c:	08013db0 	.word	0x08013db0
 8012870:	7fefffff 	.word	0x7fefffff
 8012874:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012878:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801287c:	ee10 0a10 	vmov	r0, s0
 8012880:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012884:	ee10 6a10 	vmov	r6, s0
 8012888:	460f      	mov	r7, r1
 801288a:	f7ee f985 	bl	8000b98 <__aeabi_d2iz>
 801288e:	f7ed fe69 	bl	8000564 <__aeabi_i2d>
 8012892:	4602      	mov	r2, r0
 8012894:	460b      	mov	r3, r1
 8012896:	4630      	mov	r0, r6
 8012898:	4639      	mov	r1, r7
 801289a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801289e:	f7ed fd13 	bl	80002c8 <__aeabi_dsub>
 80128a2:	4b22      	ldr	r3, [pc, #136]	; (801292c <__ieee754_rem_pio2+0x40c>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	f7ed fec7 	bl	8000638 <__aeabi_dmul>
 80128aa:	460f      	mov	r7, r1
 80128ac:	4606      	mov	r6, r0
 80128ae:	f7ee f973 	bl	8000b98 <__aeabi_d2iz>
 80128b2:	f7ed fe57 	bl	8000564 <__aeabi_i2d>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	4630      	mov	r0, r6
 80128bc:	4639      	mov	r1, r7
 80128be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80128c2:	f7ed fd01 	bl	80002c8 <__aeabi_dsub>
 80128c6:	4b19      	ldr	r3, [pc, #100]	; (801292c <__ieee754_rem_pio2+0x40c>)
 80128c8:	2200      	movs	r2, #0
 80128ca:	f7ed feb5 	bl	8000638 <__aeabi_dmul>
 80128ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128d2:	ad04      	add	r5, sp, #16
 80128d4:	f04f 0803 	mov.w	r8, #3
 80128d8:	46a9      	mov	r9, r5
 80128da:	2600      	movs	r6, #0
 80128dc:	2700      	movs	r7, #0
 80128de:	4632      	mov	r2, r6
 80128e0:	463b      	mov	r3, r7
 80128e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80128e6:	46c3      	mov	fp, r8
 80128e8:	3d08      	subs	r5, #8
 80128ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80128ee:	f7ee f90b 	bl	8000b08 <__aeabi_dcmpeq>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d1f3      	bne.n	80128de <__ieee754_rem_pio2+0x3be>
 80128f6:	4b0e      	ldr	r3, [pc, #56]	; (8012930 <__ieee754_rem_pio2+0x410>)
 80128f8:	9301      	str	r3, [sp, #4]
 80128fa:	2302      	movs	r3, #2
 80128fc:	9300      	str	r3, [sp, #0]
 80128fe:	4622      	mov	r2, r4
 8012900:	465b      	mov	r3, fp
 8012902:	4651      	mov	r1, sl
 8012904:	4648      	mov	r0, r9
 8012906:	f000 f993 	bl	8012c30 <__kernel_rem_pio2>
 801290a:	9b02      	ldr	r3, [sp, #8]
 801290c:	2b00      	cmp	r3, #0
 801290e:	4683      	mov	fp, r0
 8012910:	f6bf ae46 	bge.w	80125a0 <__ieee754_rem_pio2+0x80>
 8012914:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012918:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801291c:	f8ca 3004 	str.w	r3, [sl, #4]
 8012920:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012924:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012928:	e73a      	b.n	80127a0 <__ieee754_rem_pio2+0x280>
 801292a:	bf00      	nop
 801292c:	41700000 	.word	0x41700000
 8012930:	08013e30 	.word	0x08013e30

08012934 <__ieee754_sqrt>:
 8012934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012938:	ec55 4b10 	vmov	r4, r5, d0
 801293c:	4e56      	ldr	r6, [pc, #344]	; (8012a98 <__ieee754_sqrt+0x164>)
 801293e:	43ae      	bics	r6, r5
 8012940:	ee10 0a10 	vmov	r0, s0
 8012944:	ee10 3a10 	vmov	r3, s0
 8012948:	4629      	mov	r1, r5
 801294a:	462a      	mov	r2, r5
 801294c:	d110      	bne.n	8012970 <__ieee754_sqrt+0x3c>
 801294e:	ee10 2a10 	vmov	r2, s0
 8012952:	462b      	mov	r3, r5
 8012954:	f7ed fe70 	bl	8000638 <__aeabi_dmul>
 8012958:	4602      	mov	r2, r0
 801295a:	460b      	mov	r3, r1
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	f7ed fcb4 	bl	80002cc <__adddf3>
 8012964:	4604      	mov	r4, r0
 8012966:	460d      	mov	r5, r1
 8012968:	ec45 4b10 	vmov	d0, r4, r5
 801296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012970:	2d00      	cmp	r5, #0
 8012972:	dc10      	bgt.n	8012996 <__ieee754_sqrt+0x62>
 8012974:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012978:	4330      	orrs	r0, r6
 801297a:	d0f5      	beq.n	8012968 <__ieee754_sqrt+0x34>
 801297c:	b15d      	cbz	r5, 8012996 <__ieee754_sqrt+0x62>
 801297e:	ee10 2a10 	vmov	r2, s0
 8012982:	462b      	mov	r3, r5
 8012984:	ee10 0a10 	vmov	r0, s0
 8012988:	f7ed fc9e 	bl	80002c8 <__aeabi_dsub>
 801298c:	4602      	mov	r2, r0
 801298e:	460b      	mov	r3, r1
 8012990:	f7ed ff7c 	bl	800088c <__aeabi_ddiv>
 8012994:	e7e6      	b.n	8012964 <__ieee754_sqrt+0x30>
 8012996:	1509      	asrs	r1, r1, #20
 8012998:	d076      	beq.n	8012a88 <__ieee754_sqrt+0x154>
 801299a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801299e:	07ce      	lsls	r6, r1, #31
 80129a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80129a4:	bf5e      	ittt	pl
 80129a6:	0fda      	lsrpl	r2, r3, #31
 80129a8:	005b      	lslpl	r3, r3, #1
 80129aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80129ae:	0fda      	lsrs	r2, r3, #31
 80129b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80129b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80129b8:	2000      	movs	r0, #0
 80129ba:	106d      	asrs	r5, r5, #1
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	f04f 0e16 	mov.w	lr, #22
 80129c2:	4684      	mov	ip, r0
 80129c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80129c8:	eb0c 0401 	add.w	r4, ip, r1
 80129cc:	4294      	cmp	r4, r2
 80129ce:	bfde      	ittt	le
 80129d0:	1b12      	suble	r2, r2, r4
 80129d2:	eb04 0c01 	addle.w	ip, r4, r1
 80129d6:	1840      	addle	r0, r0, r1
 80129d8:	0052      	lsls	r2, r2, #1
 80129da:	f1be 0e01 	subs.w	lr, lr, #1
 80129de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80129e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80129e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129ea:	d1ed      	bne.n	80129c8 <__ieee754_sqrt+0x94>
 80129ec:	4671      	mov	r1, lr
 80129ee:	2720      	movs	r7, #32
 80129f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80129f4:	4562      	cmp	r2, ip
 80129f6:	eb04 060e 	add.w	r6, r4, lr
 80129fa:	dc02      	bgt.n	8012a02 <__ieee754_sqrt+0xce>
 80129fc:	d113      	bne.n	8012a26 <__ieee754_sqrt+0xf2>
 80129fe:	429e      	cmp	r6, r3
 8012a00:	d811      	bhi.n	8012a26 <__ieee754_sqrt+0xf2>
 8012a02:	2e00      	cmp	r6, #0
 8012a04:	eb06 0e04 	add.w	lr, r6, r4
 8012a08:	da43      	bge.n	8012a92 <__ieee754_sqrt+0x15e>
 8012a0a:	f1be 0f00 	cmp.w	lr, #0
 8012a0e:	db40      	blt.n	8012a92 <__ieee754_sqrt+0x15e>
 8012a10:	f10c 0801 	add.w	r8, ip, #1
 8012a14:	eba2 020c 	sub.w	r2, r2, ip
 8012a18:	429e      	cmp	r6, r3
 8012a1a:	bf88      	it	hi
 8012a1c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012a20:	1b9b      	subs	r3, r3, r6
 8012a22:	4421      	add	r1, r4
 8012a24:	46c4      	mov	ip, r8
 8012a26:	0052      	lsls	r2, r2, #1
 8012a28:	3f01      	subs	r7, #1
 8012a2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012a2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a36:	d1dd      	bne.n	80129f4 <__ieee754_sqrt+0xc0>
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	d006      	beq.n	8012a4a <__ieee754_sqrt+0x116>
 8012a3c:	1c4c      	adds	r4, r1, #1
 8012a3e:	bf13      	iteet	ne
 8012a40:	3101      	addne	r1, #1
 8012a42:	3001      	addeq	r0, #1
 8012a44:	4639      	moveq	r1, r7
 8012a46:	f021 0101 	bicne.w	r1, r1, #1
 8012a4a:	1043      	asrs	r3, r0, #1
 8012a4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012a50:	0849      	lsrs	r1, r1, #1
 8012a52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012a56:	07c2      	lsls	r2, r0, #31
 8012a58:	bf48      	it	mi
 8012a5a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012a5e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012a62:	460c      	mov	r4, r1
 8012a64:	463d      	mov	r5, r7
 8012a66:	e77f      	b.n	8012968 <__ieee754_sqrt+0x34>
 8012a68:	0ada      	lsrs	r2, r3, #11
 8012a6a:	3815      	subs	r0, #21
 8012a6c:	055b      	lsls	r3, r3, #21
 8012a6e:	2a00      	cmp	r2, #0
 8012a70:	d0fa      	beq.n	8012a68 <__ieee754_sqrt+0x134>
 8012a72:	02d7      	lsls	r7, r2, #11
 8012a74:	d50a      	bpl.n	8012a8c <__ieee754_sqrt+0x158>
 8012a76:	f1c1 0420 	rsb	r4, r1, #32
 8012a7a:	fa23 f404 	lsr.w	r4, r3, r4
 8012a7e:	1e4d      	subs	r5, r1, #1
 8012a80:	408b      	lsls	r3, r1
 8012a82:	4322      	orrs	r2, r4
 8012a84:	1b41      	subs	r1, r0, r5
 8012a86:	e788      	b.n	801299a <__ieee754_sqrt+0x66>
 8012a88:	4608      	mov	r0, r1
 8012a8a:	e7f0      	b.n	8012a6e <__ieee754_sqrt+0x13a>
 8012a8c:	0052      	lsls	r2, r2, #1
 8012a8e:	3101      	adds	r1, #1
 8012a90:	e7ef      	b.n	8012a72 <__ieee754_sqrt+0x13e>
 8012a92:	46e0      	mov	r8, ip
 8012a94:	e7be      	b.n	8012a14 <__ieee754_sqrt+0xe0>
 8012a96:	bf00      	nop
 8012a98:	7ff00000 	.word	0x7ff00000
 8012a9c:	00000000 	.word	0x00000000

08012aa0 <__kernel_cos>:
 8012aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa4:	ec57 6b10 	vmov	r6, r7, d0
 8012aa8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012aac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012ab0:	ed8d 1b00 	vstr	d1, [sp]
 8012ab4:	da07      	bge.n	8012ac6 <__kernel_cos+0x26>
 8012ab6:	ee10 0a10 	vmov	r0, s0
 8012aba:	4639      	mov	r1, r7
 8012abc:	f7ee f86c 	bl	8000b98 <__aeabi_d2iz>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	f000 8088 	beq.w	8012bd6 <__kernel_cos+0x136>
 8012ac6:	4632      	mov	r2, r6
 8012ac8:	463b      	mov	r3, r7
 8012aca:	4630      	mov	r0, r6
 8012acc:	4639      	mov	r1, r7
 8012ace:	f7ed fdb3 	bl	8000638 <__aeabi_dmul>
 8012ad2:	4b51      	ldr	r3, [pc, #324]	; (8012c18 <__kernel_cos+0x178>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	460d      	mov	r5, r1
 8012ada:	f7ed fdad 	bl	8000638 <__aeabi_dmul>
 8012ade:	a340      	add	r3, pc, #256	; (adr r3, 8012be0 <__kernel_cos+0x140>)
 8012ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae4:	4682      	mov	sl, r0
 8012ae6:	468b      	mov	fp, r1
 8012ae8:	4620      	mov	r0, r4
 8012aea:	4629      	mov	r1, r5
 8012aec:	f7ed fda4 	bl	8000638 <__aeabi_dmul>
 8012af0:	a33d      	add	r3, pc, #244	; (adr r3, 8012be8 <__kernel_cos+0x148>)
 8012af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af6:	f7ed fbe9 	bl	80002cc <__adddf3>
 8012afa:	4622      	mov	r2, r4
 8012afc:	462b      	mov	r3, r5
 8012afe:	f7ed fd9b 	bl	8000638 <__aeabi_dmul>
 8012b02:	a33b      	add	r3, pc, #236	; (adr r3, 8012bf0 <__kernel_cos+0x150>)
 8012b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b08:	f7ed fbde 	bl	80002c8 <__aeabi_dsub>
 8012b0c:	4622      	mov	r2, r4
 8012b0e:	462b      	mov	r3, r5
 8012b10:	f7ed fd92 	bl	8000638 <__aeabi_dmul>
 8012b14:	a338      	add	r3, pc, #224	; (adr r3, 8012bf8 <__kernel_cos+0x158>)
 8012b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1a:	f7ed fbd7 	bl	80002cc <__adddf3>
 8012b1e:	4622      	mov	r2, r4
 8012b20:	462b      	mov	r3, r5
 8012b22:	f7ed fd89 	bl	8000638 <__aeabi_dmul>
 8012b26:	a336      	add	r3, pc, #216	; (adr r3, 8012c00 <__kernel_cos+0x160>)
 8012b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2c:	f7ed fbcc 	bl	80002c8 <__aeabi_dsub>
 8012b30:	4622      	mov	r2, r4
 8012b32:	462b      	mov	r3, r5
 8012b34:	f7ed fd80 	bl	8000638 <__aeabi_dmul>
 8012b38:	a333      	add	r3, pc, #204	; (adr r3, 8012c08 <__kernel_cos+0x168>)
 8012b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3e:	f7ed fbc5 	bl	80002cc <__adddf3>
 8012b42:	4622      	mov	r2, r4
 8012b44:	462b      	mov	r3, r5
 8012b46:	f7ed fd77 	bl	8000638 <__aeabi_dmul>
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	462b      	mov	r3, r5
 8012b4e:	f7ed fd73 	bl	8000638 <__aeabi_dmul>
 8012b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b56:	4604      	mov	r4, r0
 8012b58:	460d      	mov	r5, r1
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	f7ed fd6b 	bl	8000638 <__aeabi_dmul>
 8012b62:	460b      	mov	r3, r1
 8012b64:	4602      	mov	r2, r0
 8012b66:	4629      	mov	r1, r5
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ed fbad 	bl	80002c8 <__aeabi_dsub>
 8012b6e:	4b2b      	ldr	r3, [pc, #172]	; (8012c1c <__kernel_cos+0x17c>)
 8012b70:	4598      	cmp	r8, r3
 8012b72:	4606      	mov	r6, r0
 8012b74:	460f      	mov	r7, r1
 8012b76:	dc10      	bgt.n	8012b9a <__kernel_cos+0xfa>
 8012b78:	4602      	mov	r2, r0
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	4650      	mov	r0, sl
 8012b7e:	4659      	mov	r1, fp
 8012b80:	f7ed fba2 	bl	80002c8 <__aeabi_dsub>
 8012b84:	460b      	mov	r3, r1
 8012b86:	4926      	ldr	r1, [pc, #152]	; (8012c20 <__kernel_cos+0x180>)
 8012b88:	4602      	mov	r2, r0
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	f7ed fb9c 	bl	80002c8 <__aeabi_dsub>
 8012b90:	ec41 0b10 	vmov	d0, r0, r1
 8012b94:	b003      	add	sp, #12
 8012b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b9a:	4b22      	ldr	r3, [pc, #136]	; (8012c24 <__kernel_cos+0x184>)
 8012b9c:	4920      	ldr	r1, [pc, #128]	; (8012c20 <__kernel_cos+0x180>)
 8012b9e:	4598      	cmp	r8, r3
 8012ba0:	bfcc      	ite	gt
 8012ba2:	4d21      	ldrgt	r5, [pc, #132]	; (8012c28 <__kernel_cos+0x188>)
 8012ba4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012ba8:	2400      	movs	r4, #0
 8012baa:	4622      	mov	r2, r4
 8012bac:	462b      	mov	r3, r5
 8012bae:	2000      	movs	r0, #0
 8012bb0:	f7ed fb8a 	bl	80002c8 <__aeabi_dsub>
 8012bb4:	4622      	mov	r2, r4
 8012bb6:	4680      	mov	r8, r0
 8012bb8:	4689      	mov	r9, r1
 8012bba:	462b      	mov	r3, r5
 8012bbc:	4650      	mov	r0, sl
 8012bbe:	4659      	mov	r1, fp
 8012bc0:	f7ed fb82 	bl	80002c8 <__aeabi_dsub>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	f7ed fb7e 	bl	80002c8 <__aeabi_dsub>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	4649      	mov	r1, r9
 8012bd4:	e7da      	b.n	8012b8c <__kernel_cos+0xec>
 8012bd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012c10 <__kernel_cos+0x170>
 8012bda:	e7db      	b.n	8012b94 <__kernel_cos+0xf4>
 8012bdc:	f3af 8000 	nop.w
 8012be0:	be8838d4 	.word	0xbe8838d4
 8012be4:	bda8fae9 	.word	0xbda8fae9
 8012be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012bec:	3e21ee9e 	.word	0x3e21ee9e
 8012bf0:	809c52ad 	.word	0x809c52ad
 8012bf4:	3e927e4f 	.word	0x3e927e4f
 8012bf8:	19cb1590 	.word	0x19cb1590
 8012bfc:	3efa01a0 	.word	0x3efa01a0
 8012c00:	16c15177 	.word	0x16c15177
 8012c04:	3f56c16c 	.word	0x3f56c16c
 8012c08:	5555554c 	.word	0x5555554c
 8012c0c:	3fa55555 	.word	0x3fa55555
 8012c10:	00000000 	.word	0x00000000
 8012c14:	3ff00000 	.word	0x3ff00000
 8012c18:	3fe00000 	.word	0x3fe00000
 8012c1c:	3fd33332 	.word	0x3fd33332
 8012c20:	3ff00000 	.word	0x3ff00000
 8012c24:	3fe90000 	.word	0x3fe90000
 8012c28:	3fd20000 	.word	0x3fd20000
 8012c2c:	00000000 	.word	0x00000000

08012c30 <__kernel_rem_pio2>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	ed2d 8b02 	vpush	{d8}
 8012c38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012c3c:	f112 0f14 	cmn.w	r2, #20
 8012c40:	9308      	str	r3, [sp, #32]
 8012c42:	9101      	str	r1, [sp, #4]
 8012c44:	4bc6      	ldr	r3, [pc, #792]	; (8012f60 <__kernel_rem_pio2+0x330>)
 8012c46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012c48:	9009      	str	r0, [sp, #36]	; 0x24
 8012c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c4e:	9304      	str	r3, [sp, #16]
 8012c50:	9b08      	ldr	r3, [sp, #32]
 8012c52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012c56:	bfa8      	it	ge
 8012c58:	1ed4      	subge	r4, r2, #3
 8012c5a:	9306      	str	r3, [sp, #24]
 8012c5c:	bfb2      	itee	lt
 8012c5e:	2400      	movlt	r4, #0
 8012c60:	2318      	movge	r3, #24
 8012c62:	fb94 f4f3 	sdivge	r4, r4, r3
 8012c66:	f06f 0317 	mvn.w	r3, #23
 8012c6a:	fb04 3303 	mla	r3, r4, r3, r3
 8012c6e:	eb03 0a02 	add.w	sl, r3, r2
 8012c72:	9b04      	ldr	r3, [sp, #16]
 8012c74:	9a06      	ldr	r2, [sp, #24]
 8012c76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012f50 <__kernel_rem_pio2+0x320>
 8012c7a:	eb03 0802 	add.w	r8, r3, r2
 8012c7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012c80:	1aa7      	subs	r7, r4, r2
 8012c82:	ae20      	add	r6, sp, #128	; 0x80
 8012c84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012c88:	2500      	movs	r5, #0
 8012c8a:	4545      	cmp	r5, r8
 8012c8c:	dd18      	ble.n	8012cc0 <__kernel_rem_pio2+0x90>
 8012c8e:	9b08      	ldr	r3, [sp, #32]
 8012c90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012c94:	aa20      	add	r2, sp, #128	; 0x80
 8012c96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012f50 <__kernel_rem_pio2+0x320>
 8012c9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012c9e:	f1c3 0301 	rsb	r3, r3, #1
 8012ca2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012ca6:	9307      	str	r3, [sp, #28]
 8012ca8:	9b07      	ldr	r3, [sp, #28]
 8012caa:	9a04      	ldr	r2, [sp, #16]
 8012cac:	4443      	add	r3, r8
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	db2f      	blt.n	8012d12 <__kernel_rem_pio2+0xe2>
 8012cb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012cb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012cba:	462f      	mov	r7, r5
 8012cbc:	2600      	movs	r6, #0
 8012cbe:	e01b      	b.n	8012cf8 <__kernel_rem_pio2+0xc8>
 8012cc0:	42ef      	cmn	r7, r5
 8012cc2:	d407      	bmi.n	8012cd4 <__kernel_rem_pio2+0xa4>
 8012cc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012cc8:	f7ed fc4c 	bl	8000564 <__aeabi_i2d>
 8012ccc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012cd0:	3501      	adds	r5, #1
 8012cd2:	e7da      	b.n	8012c8a <__kernel_rem_pio2+0x5a>
 8012cd4:	ec51 0b18 	vmov	r0, r1, d8
 8012cd8:	e7f8      	b.n	8012ccc <__kernel_rem_pio2+0x9c>
 8012cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012cde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012ce2:	f7ed fca9 	bl	8000638 <__aeabi_dmul>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cee:	f7ed faed 	bl	80002cc <__adddf3>
 8012cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cf6:	3601      	adds	r6, #1
 8012cf8:	9b06      	ldr	r3, [sp, #24]
 8012cfa:	429e      	cmp	r6, r3
 8012cfc:	f1a7 0708 	sub.w	r7, r7, #8
 8012d00:	ddeb      	ble.n	8012cda <__kernel_rem_pio2+0xaa>
 8012d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d06:	3508      	adds	r5, #8
 8012d08:	ecab 7b02 	vstmia	fp!, {d7}
 8012d0c:	f108 0801 	add.w	r8, r8, #1
 8012d10:	e7ca      	b.n	8012ca8 <__kernel_rem_pio2+0x78>
 8012d12:	9b04      	ldr	r3, [sp, #16]
 8012d14:	aa0c      	add	r2, sp, #48	; 0x30
 8012d16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012d1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012d22:	9c04      	ldr	r4, [sp, #16]
 8012d24:	930a      	str	r3, [sp, #40]	; 0x28
 8012d26:	ab98      	add	r3, sp, #608	; 0x260
 8012d28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012d2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012d30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012d34:	f8cd b008 	str.w	fp, [sp, #8]
 8012d38:	4625      	mov	r5, r4
 8012d3a:	2d00      	cmp	r5, #0
 8012d3c:	dc78      	bgt.n	8012e30 <__kernel_rem_pio2+0x200>
 8012d3e:	ec47 6b10 	vmov	d0, r6, r7
 8012d42:	4650      	mov	r0, sl
 8012d44:	f000 fc94 	bl	8013670 <scalbn>
 8012d48:	ec57 6b10 	vmov	r6, r7, d0
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012d52:	ee10 0a10 	vmov	r0, s0
 8012d56:	4639      	mov	r1, r7
 8012d58:	f7ed fc6e 	bl	8000638 <__aeabi_dmul>
 8012d5c:	ec41 0b10 	vmov	d0, r0, r1
 8012d60:	f000 fb7a 	bl	8013458 <floor>
 8012d64:	4b7f      	ldr	r3, [pc, #508]	; (8012f64 <__kernel_rem_pio2+0x334>)
 8012d66:	ec51 0b10 	vmov	r0, r1, d0
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f7ed fc64 	bl	8000638 <__aeabi_dmul>
 8012d70:	4602      	mov	r2, r0
 8012d72:	460b      	mov	r3, r1
 8012d74:	4630      	mov	r0, r6
 8012d76:	4639      	mov	r1, r7
 8012d78:	f7ed faa6 	bl	80002c8 <__aeabi_dsub>
 8012d7c:	460f      	mov	r7, r1
 8012d7e:	4606      	mov	r6, r0
 8012d80:	f7ed ff0a 	bl	8000b98 <__aeabi_d2iz>
 8012d84:	9007      	str	r0, [sp, #28]
 8012d86:	f7ed fbed 	bl	8000564 <__aeabi_i2d>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4630      	mov	r0, r6
 8012d90:	4639      	mov	r1, r7
 8012d92:	f7ed fa99 	bl	80002c8 <__aeabi_dsub>
 8012d96:	f1ba 0f00 	cmp.w	sl, #0
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	460f      	mov	r7, r1
 8012d9e:	dd70      	ble.n	8012e82 <__kernel_rem_pio2+0x252>
 8012da0:	1e62      	subs	r2, r4, #1
 8012da2:	ab0c      	add	r3, sp, #48	; 0x30
 8012da4:	9d07      	ldr	r5, [sp, #28]
 8012da6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012daa:	f1ca 0118 	rsb	r1, sl, #24
 8012dae:	fa40 f301 	asr.w	r3, r0, r1
 8012db2:	441d      	add	r5, r3
 8012db4:	408b      	lsls	r3, r1
 8012db6:	1ac0      	subs	r0, r0, r3
 8012db8:	ab0c      	add	r3, sp, #48	; 0x30
 8012dba:	9507      	str	r5, [sp, #28]
 8012dbc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012dc0:	f1ca 0317 	rsb	r3, sl, #23
 8012dc4:	fa40 f303 	asr.w	r3, r0, r3
 8012dc8:	9302      	str	r3, [sp, #8]
 8012dca:	9b02      	ldr	r3, [sp, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	dd66      	ble.n	8012e9e <__kernel_rem_pio2+0x26e>
 8012dd0:	9b07      	ldr	r3, [sp, #28]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	9307      	str	r3, [sp, #28]
 8012dd8:	4615      	mov	r5, r2
 8012dda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012dde:	4294      	cmp	r4, r2
 8012de0:	f300 8099 	bgt.w	8012f16 <__kernel_rem_pio2+0x2e6>
 8012de4:	f1ba 0f00 	cmp.w	sl, #0
 8012de8:	dd07      	ble.n	8012dfa <__kernel_rem_pio2+0x1ca>
 8012dea:	f1ba 0f01 	cmp.w	sl, #1
 8012dee:	f000 80a5 	beq.w	8012f3c <__kernel_rem_pio2+0x30c>
 8012df2:	f1ba 0f02 	cmp.w	sl, #2
 8012df6:	f000 80c1 	beq.w	8012f7c <__kernel_rem_pio2+0x34c>
 8012dfa:	9b02      	ldr	r3, [sp, #8]
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d14e      	bne.n	8012e9e <__kernel_rem_pio2+0x26e>
 8012e00:	4632      	mov	r2, r6
 8012e02:	463b      	mov	r3, r7
 8012e04:	4958      	ldr	r1, [pc, #352]	; (8012f68 <__kernel_rem_pio2+0x338>)
 8012e06:	2000      	movs	r0, #0
 8012e08:	f7ed fa5e 	bl	80002c8 <__aeabi_dsub>
 8012e0c:	4606      	mov	r6, r0
 8012e0e:	460f      	mov	r7, r1
 8012e10:	2d00      	cmp	r5, #0
 8012e12:	d044      	beq.n	8012e9e <__kernel_rem_pio2+0x26e>
 8012e14:	4650      	mov	r0, sl
 8012e16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012f58 <__kernel_rem_pio2+0x328>
 8012e1a:	f000 fc29 	bl	8013670 <scalbn>
 8012e1e:	4630      	mov	r0, r6
 8012e20:	4639      	mov	r1, r7
 8012e22:	ec53 2b10 	vmov	r2, r3, d0
 8012e26:	f7ed fa4f 	bl	80002c8 <__aeabi_dsub>
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	e036      	b.n	8012e9e <__kernel_rem_pio2+0x26e>
 8012e30:	4b4e      	ldr	r3, [pc, #312]	; (8012f6c <__kernel_rem_pio2+0x33c>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	4630      	mov	r0, r6
 8012e36:	4639      	mov	r1, r7
 8012e38:	f7ed fbfe 	bl	8000638 <__aeabi_dmul>
 8012e3c:	f7ed feac 	bl	8000b98 <__aeabi_d2iz>
 8012e40:	f7ed fb90 	bl	8000564 <__aeabi_i2d>
 8012e44:	4b4a      	ldr	r3, [pc, #296]	; (8012f70 <__kernel_rem_pio2+0x340>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	4680      	mov	r8, r0
 8012e4a:	4689      	mov	r9, r1
 8012e4c:	f7ed fbf4 	bl	8000638 <__aeabi_dmul>
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	4630      	mov	r0, r6
 8012e56:	4639      	mov	r1, r7
 8012e58:	f7ed fa36 	bl	80002c8 <__aeabi_dsub>
 8012e5c:	f7ed fe9c 	bl	8000b98 <__aeabi_d2iz>
 8012e60:	9b02      	ldr	r3, [sp, #8]
 8012e62:	f843 0b04 	str.w	r0, [r3], #4
 8012e66:	3d01      	subs	r5, #1
 8012e68:	9302      	str	r3, [sp, #8]
 8012e6a:	ab70      	add	r3, sp, #448	; 0x1c0
 8012e6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e74:	4640      	mov	r0, r8
 8012e76:	4649      	mov	r1, r9
 8012e78:	f7ed fa28 	bl	80002cc <__adddf3>
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	460f      	mov	r7, r1
 8012e80:	e75b      	b.n	8012d3a <__kernel_rem_pio2+0x10a>
 8012e82:	d105      	bne.n	8012e90 <__kernel_rem_pio2+0x260>
 8012e84:	1e63      	subs	r3, r4, #1
 8012e86:	aa0c      	add	r2, sp, #48	; 0x30
 8012e88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012e8c:	15c3      	asrs	r3, r0, #23
 8012e8e:	e79b      	b.n	8012dc8 <__kernel_rem_pio2+0x198>
 8012e90:	4b38      	ldr	r3, [pc, #224]	; (8012f74 <__kernel_rem_pio2+0x344>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	f7ed fe56 	bl	8000b44 <__aeabi_dcmpge>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d139      	bne.n	8012f10 <__kernel_rem_pio2+0x2e0>
 8012e9c:	9002      	str	r0, [sp, #8]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	4639      	mov	r1, r7
 8012ea6:	f7ed fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	f000 80b4 	beq.w	8013018 <__kernel_rem_pio2+0x3e8>
 8012eb0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	9904      	ldr	r1, [sp, #16]
 8012eba:	428b      	cmp	r3, r1
 8012ebc:	da65      	bge.n	8012f8a <__kernel_rem_pio2+0x35a>
 8012ebe:	2a00      	cmp	r2, #0
 8012ec0:	d07b      	beq.n	8012fba <__kernel_rem_pio2+0x38a>
 8012ec2:	ab0c      	add	r3, sp, #48	; 0x30
 8012ec4:	f1aa 0a18 	sub.w	sl, sl, #24
 8012ec8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f000 80a0 	beq.w	8013012 <__kernel_rem_pio2+0x3e2>
 8012ed2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012f58 <__kernel_rem_pio2+0x328>
 8012ed6:	4650      	mov	r0, sl
 8012ed8:	f000 fbca 	bl	8013670 <scalbn>
 8012edc:	4f23      	ldr	r7, [pc, #140]	; (8012f6c <__kernel_rem_pio2+0x33c>)
 8012ede:	ec55 4b10 	vmov	r4, r5, d0
 8012ee2:	46d8      	mov	r8, fp
 8012ee4:	2600      	movs	r6, #0
 8012ee6:	f1b8 0f00 	cmp.w	r8, #0
 8012eea:	f280 80cf 	bge.w	801308c <__kernel_rem_pio2+0x45c>
 8012eee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012f50 <__kernel_rem_pio2+0x320>
 8012ef2:	465f      	mov	r7, fp
 8012ef4:	f04f 0800 	mov.w	r8, #0
 8012ef8:	2f00      	cmp	r7, #0
 8012efa:	f2c0 80fd 	blt.w	80130f8 <__kernel_rem_pio2+0x4c8>
 8012efe:	ab70      	add	r3, sp, #448	; 0x1c0
 8012f00:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012f78 <__kernel_rem_pio2+0x348>
 8012f04:	ec55 4b18 	vmov	r4, r5, d8
 8012f08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8012f0c:	2600      	movs	r6, #0
 8012f0e:	e0e5      	b.n	80130dc <__kernel_rem_pio2+0x4ac>
 8012f10:	2302      	movs	r3, #2
 8012f12:	9302      	str	r3, [sp, #8]
 8012f14:	e75c      	b.n	8012dd0 <__kernel_rem_pio2+0x1a0>
 8012f16:	f8db 3000 	ldr.w	r3, [fp]
 8012f1a:	b955      	cbnz	r5, 8012f32 <__kernel_rem_pio2+0x302>
 8012f1c:	b123      	cbz	r3, 8012f28 <__kernel_rem_pio2+0x2f8>
 8012f1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012f22:	f8cb 3000 	str.w	r3, [fp]
 8012f26:	2301      	movs	r3, #1
 8012f28:	3201      	adds	r2, #1
 8012f2a:	f10b 0b04 	add.w	fp, fp, #4
 8012f2e:	461d      	mov	r5, r3
 8012f30:	e755      	b.n	8012dde <__kernel_rem_pio2+0x1ae>
 8012f32:	1acb      	subs	r3, r1, r3
 8012f34:	f8cb 3000 	str.w	r3, [fp]
 8012f38:	462b      	mov	r3, r5
 8012f3a:	e7f5      	b.n	8012f28 <__kernel_rem_pio2+0x2f8>
 8012f3c:	1e62      	subs	r2, r4, #1
 8012f3e:	ab0c      	add	r3, sp, #48	; 0x30
 8012f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012f48:	a90c      	add	r1, sp, #48	; 0x30
 8012f4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012f4e:	e754      	b.n	8012dfa <__kernel_rem_pio2+0x1ca>
	...
 8012f5c:	3ff00000 	.word	0x3ff00000
 8012f60:	08013f78 	.word	0x08013f78
 8012f64:	40200000 	.word	0x40200000
 8012f68:	3ff00000 	.word	0x3ff00000
 8012f6c:	3e700000 	.word	0x3e700000
 8012f70:	41700000 	.word	0x41700000
 8012f74:	3fe00000 	.word	0x3fe00000
 8012f78:	08013f38 	.word	0x08013f38
 8012f7c:	1e62      	subs	r2, r4, #1
 8012f7e:	ab0c      	add	r3, sp, #48	; 0x30
 8012f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f88:	e7de      	b.n	8012f48 <__kernel_rem_pio2+0x318>
 8012f8a:	a90c      	add	r1, sp, #48	; 0x30
 8012f8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	430a      	orrs	r2, r1
 8012f94:	e790      	b.n	8012eb8 <__kernel_rem_pio2+0x288>
 8012f96:	3301      	adds	r3, #1
 8012f98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012f9c:	2900      	cmp	r1, #0
 8012f9e:	d0fa      	beq.n	8012f96 <__kernel_rem_pio2+0x366>
 8012fa0:	9a08      	ldr	r2, [sp, #32]
 8012fa2:	18e3      	adds	r3, r4, r3
 8012fa4:	18a6      	adds	r6, r4, r2
 8012fa6:	aa20      	add	r2, sp, #128	; 0x80
 8012fa8:	1c65      	adds	r5, r4, #1
 8012faa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012fae:	9302      	str	r3, [sp, #8]
 8012fb0:	9b02      	ldr	r3, [sp, #8]
 8012fb2:	42ab      	cmp	r3, r5
 8012fb4:	da04      	bge.n	8012fc0 <__kernel_rem_pio2+0x390>
 8012fb6:	461c      	mov	r4, r3
 8012fb8:	e6b5      	b.n	8012d26 <__kernel_rem_pio2+0xf6>
 8012fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e7eb      	b.n	8012f98 <__kernel_rem_pio2+0x368>
 8012fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012fc6:	f7ed facd 	bl	8000564 <__aeabi_i2d>
 8012fca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fd0:	46b3      	mov	fp, r6
 8012fd2:	461c      	mov	r4, r3
 8012fd4:	2700      	movs	r7, #0
 8012fd6:	f04f 0800 	mov.w	r8, #0
 8012fda:	f04f 0900 	mov.w	r9, #0
 8012fde:	9b06      	ldr	r3, [sp, #24]
 8012fe0:	429f      	cmp	r7, r3
 8012fe2:	dd06      	ble.n	8012ff2 <__kernel_rem_pio2+0x3c2>
 8012fe4:	ab70      	add	r3, sp, #448	; 0x1c0
 8012fe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012fea:	e9c3 8900 	strd	r8, r9, [r3]
 8012fee:	3501      	adds	r5, #1
 8012ff0:	e7de      	b.n	8012fb0 <__kernel_rem_pio2+0x380>
 8012ff2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012ff6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ffa:	f7ed fb1d 	bl	8000638 <__aeabi_dmul>
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4640      	mov	r0, r8
 8013004:	4649      	mov	r1, r9
 8013006:	f7ed f961 	bl	80002cc <__adddf3>
 801300a:	3701      	adds	r7, #1
 801300c:	4680      	mov	r8, r0
 801300e:	4689      	mov	r9, r1
 8013010:	e7e5      	b.n	8012fde <__kernel_rem_pio2+0x3ae>
 8013012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013016:	e754      	b.n	8012ec2 <__kernel_rem_pio2+0x292>
 8013018:	ec47 6b10 	vmov	d0, r6, r7
 801301c:	f1ca 0000 	rsb	r0, sl, #0
 8013020:	f000 fb26 	bl	8013670 <scalbn>
 8013024:	ec57 6b10 	vmov	r6, r7, d0
 8013028:	4b9f      	ldr	r3, [pc, #636]	; (80132a8 <__kernel_rem_pio2+0x678>)
 801302a:	ee10 0a10 	vmov	r0, s0
 801302e:	2200      	movs	r2, #0
 8013030:	4639      	mov	r1, r7
 8013032:	f7ed fd87 	bl	8000b44 <__aeabi_dcmpge>
 8013036:	b300      	cbz	r0, 801307a <__kernel_rem_pio2+0x44a>
 8013038:	4b9c      	ldr	r3, [pc, #624]	; (80132ac <__kernel_rem_pio2+0x67c>)
 801303a:	2200      	movs	r2, #0
 801303c:	4630      	mov	r0, r6
 801303e:	4639      	mov	r1, r7
 8013040:	f7ed fafa 	bl	8000638 <__aeabi_dmul>
 8013044:	f7ed fda8 	bl	8000b98 <__aeabi_d2iz>
 8013048:	4605      	mov	r5, r0
 801304a:	f7ed fa8b 	bl	8000564 <__aeabi_i2d>
 801304e:	4b96      	ldr	r3, [pc, #600]	; (80132a8 <__kernel_rem_pio2+0x678>)
 8013050:	2200      	movs	r2, #0
 8013052:	f7ed faf1 	bl	8000638 <__aeabi_dmul>
 8013056:	460b      	mov	r3, r1
 8013058:	4602      	mov	r2, r0
 801305a:	4639      	mov	r1, r7
 801305c:	4630      	mov	r0, r6
 801305e:	f7ed f933 	bl	80002c8 <__aeabi_dsub>
 8013062:	f7ed fd99 	bl	8000b98 <__aeabi_d2iz>
 8013066:	f104 0b01 	add.w	fp, r4, #1
 801306a:	ab0c      	add	r3, sp, #48	; 0x30
 801306c:	f10a 0a18 	add.w	sl, sl, #24
 8013070:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013074:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013078:	e72b      	b.n	8012ed2 <__kernel_rem_pio2+0x2a2>
 801307a:	4630      	mov	r0, r6
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed fd8b 	bl	8000b98 <__aeabi_d2iz>
 8013082:	ab0c      	add	r3, sp, #48	; 0x30
 8013084:	46a3      	mov	fp, r4
 8013086:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801308a:	e722      	b.n	8012ed2 <__kernel_rem_pio2+0x2a2>
 801308c:	ab70      	add	r3, sp, #448	; 0x1c0
 801308e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013092:	ab0c      	add	r3, sp, #48	; 0x30
 8013094:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013098:	f7ed fa64 	bl	8000564 <__aeabi_i2d>
 801309c:	4622      	mov	r2, r4
 801309e:	462b      	mov	r3, r5
 80130a0:	f7ed faca 	bl	8000638 <__aeabi_dmul>
 80130a4:	4632      	mov	r2, r6
 80130a6:	e9c9 0100 	strd	r0, r1, [r9]
 80130aa:	463b      	mov	r3, r7
 80130ac:	4620      	mov	r0, r4
 80130ae:	4629      	mov	r1, r5
 80130b0:	f7ed fac2 	bl	8000638 <__aeabi_dmul>
 80130b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80130b8:	4604      	mov	r4, r0
 80130ba:	460d      	mov	r5, r1
 80130bc:	e713      	b.n	8012ee6 <__kernel_rem_pio2+0x2b6>
 80130be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80130c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80130c6:	f7ed fab7 	bl	8000638 <__aeabi_dmul>
 80130ca:	4602      	mov	r2, r0
 80130cc:	460b      	mov	r3, r1
 80130ce:	4620      	mov	r0, r4
 80130d0:	4629      	mov	r1, r5
 80130d2:	f7ed f8fb 	bl	80002cc <__adddf3>
 80130d6:	3601      	adds	r6, #1
 80130d8:	4604      	mov	r4, r0
 80130da:	460d      	mov	r5, r1
 80130dc:	9b04      	ldr	r3, [sp, #16]
 80130de:	429e      	cmp	r6, r3
 80130e0:	dc01      	bgt.n	80130e6 <__kernel_rem_pio2+0x4b6>
 80130e2:	45b0      	cmp	r8, r6
 80130e4:	daeb      	bge.n	80130be <__kernel_rem_pio2+0x48e>
 80130e6:	ab48      	add	r3, sp, #288	; 0x120
 80130e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80130ec:	e9c3 4500 	strd	r4, r5, [r3]
 80130f0:	3f01      	subs	r7, #1
 80130f2:	f108 0801 	add.w	r8, r8, #1
 80130f6:	e6ff      	b.n	8012ef8 <__kernel_rem_pio2+0x2c8>
 80130f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80130fa:	2b02      	cmp	r3, #2
 80130fc:	dc0b      	bgt.n	8013116 <__kernel_rem_pio2+0x4e6>
 80130fe:	2b00      	cmp	r3, #0
 8013100:	dc6e      	bgt.n	80131e0 <__kernel_rem_pio2+0x5b0>
 8013102:	d045      	beq.n	8013190 <__kernel_rem_pio2+0x560>
 8013104:	9b07      	ldr	r3, [sp, #28]
 8013106:	f003 0007 	and.w	r0, r3, #7
 801310a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801310e:	ecbd 8b02 	vpop	{d8}
 8013112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013116:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013118:	2b03      	cmp	r3, #3
 801311a:	d1f3      	bne.n	8013104 <__kernel_rem_pio2+0x4d4>
 801311c:	ab48      	add	r3, sp, #288	; 0x120
 801311e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8013122:	46d0      	mov	r8, sl
 8013124:	46d9      	mov	r9, fp
 8013126:	f1b9 0f00 	cmp.w	r9, #0
 801312a:	f1a8 0808 	sub.w	r8, r8, #8
 801312e:	dc64      	bgt.n	80131fa <__kernel_rem_pio2+0x5ca>
 8013130:	465c      	mov	r4, fp
 8013132:	2c01      	cmp	r4, #1
 8013134:	f1aa 0a08 	sub.w	sl, sl, #8
 8013138:	dc7e      	bgt.n	8013238 <__kernel_rem_pio2+0x608>
 801313a:	2000      	movs	r0, #0
 801313c:	2100      	movs	r1, #0
 801313e:	f1bb 0f01 	cmp.w	fp, #1
 8013142:	f300 8097 	bgt.w	8013274 <__kernel_rem_pio2+0x644>
 8013146:	9b02      	ldr	r3, [sp, #8]
 8013148:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801314c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013150:	2b00      	cmp	r3, #0
 8013152:	f040 8099 	bne.w	8013288 <__kernel_rem_pio2+0x658>
 8013156:	9b01      	ldr	r3, [sp, #4]
 8013158:	e9c3 5600 	strd	r5, r6, [r3]
 801315c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013160:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013164:	e7ce      	b.n	8013104 <__kernel_rem_pio2+0x4d4>
 8013166:	ab48      	add	r3, sp, #288	; 0x120
 8013168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	f7ed f8ac 	bl	80002cc <__adddf3>
 8013174:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013178:	f1bb 0f00 	cmp.w	fp, #0
 801317c:	daf3      	bge.n	8013166 <__kernel_rem_pio2+0x536>
 801317e:	9b02      	ldr	r3, [sp, #8]
 8013180:	b113      	cbz	r3, 8013188 <__kernel_rem_pio2+0x558>
 8013182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013186:	4619      	mov	r1, r3
 8013188:	9b01      	ldr	r3, [sp, #4]
 801318a:	e9c3 0100 	strd	r0, r1, [r3]
 801318e:	e7b9      	b.n	8013104 <__kernel_rem_pio2+0x4d4>
 8013190:	2000      	movs	r0, #0
 8013192:	2100      	movs	r1, #0
 8013194:	e7f0      	b.n	8013178 <__kernel_rem_pio2+0x548>
 8013196:	ab48      	add	r3, sp, #288	; 0x120
 8013198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a0:	f7ed f894 	bl	80002cc <__adddf3>
 80131a4:	3c01      	subs	r4, #1
 80131a6:	2c00      	cmp	r4, #0
 80131a8:	daf5      	bge.n	8013196 <__kernel_rem_pio2+0x566>
 80131aa:	9b02      	ldr	r3, [sp, #8]
 80131ac:	b1e3      	cbz	r3, 80131e8 <__kernel_rem_pio2+0x5b8>
 80131ae:	4602      	mov	r2, r0
 80131b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131b4:	9c01      	ldr	r4, [sp, #4]
 80131b6:	e9c4 2300 	strd	r2, r3, [r4]
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80131c2:	f7ed f881 	bl	80002c8 <__aeabi_dsub>
 80131c6:	ad4a      	add	r5, sp, #296	; 0x128
 80131c8:	2401      	movs	r4, #1
 80131ca:	45a3      	cmp	fp, r4
 80131cc:	da0f      	bge.n	80131ee <__kernel_rem_pio2+0x5be>
 80131ce:	9b02      	ldr	r3, [sp, #8]
 80131d0:	b113      	cbz	r3, 80131d8 <__kernel_rem_pio2+0x5a8>
 80131d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131d6:	4619      	mov	r1, r3
 80131d8:	9b01      	ldr	r3, [sp, #4]
 80131da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80131de:	e791      	b.n	8013104 <__kernel_rem_pio2+0x4d4>
 80131e0:	465c      	mov	r4, fp
 80131e2:	2000      	movs	r0, #0
 80131e4:	2100      	movs	r1, #0
 80131e6:	e7de      	b.n	80131a6 <__kernel_rem_pio2+0x576>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	e7e2      	b.n	80131b4 <__kernel_rem_pio2+0x584>
 80131ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80131f2:	f7ed f86b 	bl	80002cc <__adddf3>
 80131f6:	3401      	adds	r4, #1
 80131f8:	e7e7      	b.n	80131ca <__kernel_rem_pio2+0x59a>
 80131fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80131fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8013202:	4620      	mov	r0, r4
 8013204:	4632      	mov	r2, r6
 8013206:	463b      	mov	r3, r7
 8013208:	4629      	mov	r1, r5
 801320a:	f7ed f85f 	bl	80002cc <__adddf3>
 801320e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	4620      	mov	r0, r4
 8013218:	4629      	mov	r1, r5
 801321a:	f7ed f855 	bl	80002c8 <__aeabi_dsub>
 801321e:	4632      	mov	r2, r6
 8013220:	463b      	mov	r3, r7
 8013222:	f7ed f853 	bl	80002cc <__adddf3>
 8013226:	ed9d 7b04 	vldr	d7, [sp, #16]
 801322a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801322e:	ed88 7b00 	vstr	d7, [r8]
 8013232:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013236:	e776      	b.n	8013126 <__kernel_rem_pio2+0x4f6>
 8013238:	e9da 8900 	ldrd	r8, r9, [sl]
 801323c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013240:	4640      	mov	r0, r8
 8013242:	4632      	mov	r2, r6
 8013244:	463b      	mov	r3, r7
 8013246:	4649      	mov	r1, r9
 8013248:	f7ed f840 	bl	80002cc <__adddf3>
 801324c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	4640      	mov	r0, r8
 8013256:	4649      	mov	r1, r9
 8013258:	f7ed f836 	bl	80002c8 <__aeabi_dsub>
 801325c:	4632      	mov	r2, r6
 801325e:	463b      	mov	r3, r7
 8013260:	f7ed f834 	bl	80002cc <__adddf3>
 8013264:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801326c:	ed8a 7b00 	vstr	d7, [sl]
 8013270:	3c01      	subs	r4, #1
 8013272:	e75e      	b.n	8013132 <__kernel_rem_pio2+0x502>
 8013274:	ab48      	add	r3, sp, #288	; 0x120
 8013276:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	f7ed f825 	bl	80002cc <__adddf3>
 8013282:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013286:	e75a      	b.n	801313e <__kernel_rem_pio2+0x50e>
 8013288:	9b01      	ldr	r3, [sp, #4]
 801328a:	9a01      	ldr	r2, [sp, #4]
 801328c:	601d      	str	r5, [r3, #0]
 801328e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013292:	605c      	str	r4, [r3, #4]
 8013294:	609f      	str	r7, [r3, #8]
 8013296:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801329a:	60d3      	str	r3, [r2, #12]
 801329c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132a0:	6110      	str	r0, [r2, #16]
 80132a2:	6153      	str	r3, [r2, #20]
 80132a4:	e72e      	b.n	8013104 <__kernel_rem_pio2+0x4d4>
 80132a6:	bf00      	nop
 80132a8:	41700000 	.word	0x41700000
 80132ac:	3e700000 	.word	0x3e700000

080132b0 <__kernel_sin>:
 80132b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b4:	ed2d 8b04 	vpush	{d8-d9}
 80132b8:	eeb0 8a41 	vmov.f32	s16, s2
 80132bc:	eef0 8a61 	vmov.f32	s17, s3
 80132c0:	ec55 4b10 	vmov	r4, r5, d0
 80132c4:	b083      	sub	sp, #12
 80132c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80132ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80132ce:	9001      	str	r0, [sp, #4]
 80132d0:	da06      	bge.n	80132e0 <__kernel_sin+0x30>
 80132d2:	ee10 0a10 	vmov	r0, s0
 80132d6:	4629      	mov	r1, r5
 80132d8:	f7ed fc5e 	bl	8000b98 <__aeabi_d2iz>
 80132dc:	2800      	cmp	r0, #0
 80132de:	d051      	beq.n	8013384 <__kernel_sin+0xd4>
 80132e0:	4622      	mov	r2, r4
 80132e2:	462b      	mov	r3, r5
 80132e4:	4620      	mov	r0, r4
 80132e6:	4629      	mov	r1, r5
 80132e8:	f7ed f9a6 	bl	8000638 <__aeabi_dmul>
 80132ec:	4682      	mov	sl, r0
 80132ee:	468b      	mov	fp, r1
 80132f0:	4602      	mov	r2, r0
 80132f2:	460b      	mov	r3, r1
 80132f4:	4620      	mov	r0, r4
 80132f6:	4629      	mov	r1, r5
 80132f8:	f7ed f99e 	bl	8000638 <__aeabi_dmul>
 80132fc:	a341      	add	r3, pc, #260	; (adr r3, 8013404 <__kernel_sin+0x154>)
 80132fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013302:	4680      	mov	r8, r0
 8013304:	4689      	mov	r9, r1
 8013306:	4650      	mov	r0, sl
 8013308:	4659      	mov	r1, fp
 801330a:	f7ed f995 	bl	8000638 <__aeabi_dmul>
 801330e:	a33f      	add	r3, pc, #252	; (adr r3, 801340c <__kernel_sin+0x15c>)
 8013310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013314:	f7ec ffd8 	bl	80002c8 <__aeabi_dsub>
 8013318:	4652      	mov	r2, sl
 801331a:	465b      	mov	r3, fp
 801331c:	f7ed f98c 	bl	8000638 <__aeabi_dmul>
 8013320:	a33c      	add	r3, pc, #240	; (adr r3, 8013414 <__kernel_sin+0x164>)
 8013322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013326:	f7ec ffd1 	bl	80002cc <__adddf3>
 801332a:	4652      	mov	r2, sl
 801332c:	465b      	mov	r3, fp
 801332e:	f7ed f983 	bl	8000638 <__aeabi_dmul>
 8013332:	a33a      	add	r3, pc, #232	; (adr r3, 801341c <__kernel_sin+0x16c>)
 8013334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013338:	f7ec ffc6 	bl	80002c8 <__aeabi_dsub>
 801333c:	4652      	mov	r2, sl
 801333e:	465b      	mov	r3, fp
 8013340:	f7ed f97a 	bl	8000638 <__aeabi_dmul>
 8013344:	a337      	add	r3, pc, #220	; (adr r3, 8013424 <__kernel_sin+0x174>)
 8013346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334a:	f7ec ffbf 	bl	80002cc <__adddf3>
 801334e:	9b01      	ldr	r3, [sp, #4]
 8013350:	4606      	mov	r6, r0
 8013352:	460f      	mov	r7, r1
 8013354:	b9eb      	cbnz	r3, 8013392 <__kernel_sin+0xe2>
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	4650      	mov	r0, sl
 801335c:	4659      	mov	r1, fp
 801335e:	f7ed f96b 	bl	8000638 <__aeabi_dmul>
 8013362:	a325      	add	r3, pc, #148	; (adr r3, 80133f8 <__kernel_sin+0x148>)
 8013364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013368:	f7ec ffae 	bl	80002c8 <__aeabi_dsub>
 801336c:	4642      	mov	r2, r8
 801336e:	464b      	mov	r3, r9
 8013370:	f7ed f962 	bl	8000638 <__aeabi_dmul>
 8013374:	4602      	mov	r2, r0
 8013376:	460b      	mov	r3, r1
 8013378:	4620      	mov	r0, r4
 801337a:	4629      	mov	r1, r5
 801337c:	f7ec ffa6 	bl	80002cc <__adddf3>
 8013380:	4604      	mov	r4, r0
 8013382:	460d      	mov	r5, r1
 8013384:	ec45 4b10 	vmov	d0, r4, r5
 8013388:	b003      	add	sp, #12
 801338a:	ecbd 8b04 	vpop	{d8-d9}
 801338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013392:	4b1b      	ldr	r3, [pc, #108]	; (8013400 <__kernel_sin+0x150>)
 8013394:	ec51 0b18 	vmov	r0, r1, d8
 8013398:	2200      	movs	r2, #0
 801339a:	f7ed f94d 	bl	8000638 <__aeabi_dmul>
 801339e:	4632      	mov	r2, r6
 80133a0:	ec41 0b19 	vmov	d9, r0, r1
 80133a4:	463b      	mov	r3, r7
 80133a6:	4640      	mov	r0, r8
 80133a8:	4649      	mov	r1, r9
 80133aa:	f7ed f945 	bl	8000638 <__aeabi_dmul>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	ec51 0b19 	vmov	r0, r1, d9
 80133b6:	f7ec ff87 	bl	80002c8 <__aeabi_dsub>
 80133ba:	4652      	mov	r2, sl
 80133bc:	465b      	mov	r3, fp
 80133be:	f7ed f93b 	bl	8000638 <__aeabi_dmul>
 80133c2:	ec53 2b18 	vmov	r2, r3, d8
 80133c6:	f7ec ff7f 	bl	80002c8 <__aeabi_dsub>
 80133ca:	a30b      	add	r3, pc, #44	; (adr r3, 80133f8 <__kernel_sin+0x148>)
 80133cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d0:	4606      	mov	r6, r0
 80133d2:	460f      	mov	r7, r1
 80133d4:	4640      	mov	r0, r8
 80133d6:	4649      	mov	r1, r9
 80133d8:	f7ed f92e 	bl	8000638 <__aeabi_dmul>
 80133dc:	4602      	mov	r2, r0
 80133de:	460b      	mov	r3, r1
 80133e0:	4630      	mov	r0, r6
 80133e2:	4639      	mov	r1, r7
 80133e4:	f7ec ff72 	bl	80002cc <__adddf3>
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	4620      	mov	r0, r4
 80133ee:	4629      	mov	r1, r5
 80133f0:	f7ec ff6a 	bl	80002c8 <__aeabi_dsub>
 80133f4:	e7c4      	b.n	8013380 <__kernel_sin+0xd0>
 80133f6:	bf00      	nop
 80133f8:	55555549 	.word	0x55555549
 80133fc:	3fc55555 	.word	0x3fc55555
 8013400:	3fe00000 	.word	0x3fe00000
 8013404:	5acfd57c 	.word	0x5acfd57c
 8013408:	3de5d93a 	.word	0x3de5d93a
 801340c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013410:	3e5ae5e6 	.word	0x3e5ae5e6
 8013414:	57b1fe7d 	.word	0x57b1fe7d
 8013418:	3ec71de3 	.word	0x3ec71de3
 801341c:	19c161d5 	.word	0x19c161d5
 8013420:	3f2a01a0 	.word	0x3f2a01a0
 8013424:	1110f8a6 	.word	0x1110f8a6
 8013428:	3f811111 	.word	0x3f811111

0801342c <fabs>:
 801342c:	ec51 0b10 	vmov	r0, r1, d0
 8013430:	ee10 2a10 	vmov	r2, s0
 8013434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013438:	ec43 2b10 	vmov	d0, r2, r3
 801343c:	4770      	bx	lr

0801343e <finite>:
 801343e:	b082      	sub	sp, #8
 8013440:	ed8d 0b00 	vstr	d0, [sp]
 8013444:	9801      	ldr	r0, [sp, #4]
 8013446:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801344a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801344e:	0fc0      	lsrs	r0, r0, #31
 8013450:	b002      	add	sp, #8
 8013452:	4770      	bx	lr
 8013454:	0000      	movs	r0, r0
	...

08013458 <floor>:
 8013458:	ec51 0b10 	vmov	r0, r1, d0
 801345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013460:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013464:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013468:	2e13      	cmp	r6, #19
 801346a:	ee10 5a10 	vmov	r5, s0
 801346e:	ee10 8a10 	vmov	r8, s0
 8013472:	460c      	mov	r4, r1
 8013474:	dc32      	bgt.n	80134dc <floor+0x84>
 8013476:	2e00      	cmp	r6, #0
 8013478:	da14      	bge.n	80134a4 <floor+0x4c>
 801347a:	a333      	add	r3, pc, #204	; (adr r3, 8013548 <floor+0xf0>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ec ff24 	bl	80002cc <__adddf3>
 8013484:	2200      	movs	r2, #0
 8013486:	2300      	movs	r3, #0
 8013488:	f7ed fb66 	bl	8000b58 <__aeabi_dcmpgt>
 801348c:	b138      	cbz	r0, 801349e <floor+0x46>
 801348e:	2c00      	cmp	r4, #0
 8013490:	da57      	bge.n	8013542 <floor+0xea>
 8013492:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013496:	431d      	orrs	r5, r3
 8013498:	d001      	beq.n	801349e <floor+0x46>
 801349a:	4c2d      	ldr	r4, [pc, #180]	; (8013550 <floor+0xf8>)
 801349c:	2500      	movs	r5, #0
 801349e:	4621      	mov	r1, r4
 80134a0:	4628      	mov	r0, r5
 80134a2:	e025      	b.n	80134f0 <floor+0x98>
 80134a4:	4f2b      	ldr	r7, [pc, #172]	; (8013554 <floor+0xfc>)
 80134a6:	4137      	asrs	r7, r6
 80134a8:	ea01 0307 	and.w	r3, r1, r7
 80134ac:	4303      	orrs	r3, r0
 80134ae:	d01f      	beq.n	80134f0 <floor+0x98>
 80134b0:	a325      	add	r3, pc, #148	; (adr r3, 8013548 <floor+0xf0>)
 80134b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b6:	f7ec ff09 	bl	80002cc <__adddf3>
 80134ba:	2200      	movs	r2, #0
 80134bc:	2300      	movs	r3, #0
 80134be:	f7ed fb4b 	bl	8000b58 <__aeabi_dcmpgt>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d0eb      	beq.n	801349e <floor+0x46>
 80134c6:	2c00      	cmp	r4, #0
 80134c8:	bfbe      	ittt	lt
 80134ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80134ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80134d2:	19a4      	addlt	r4, r4, r6
 80134d4:	ea24 0407 	bic.w	r4, r4, r7
 80134d8:	2500      	movs	r5, #0
 80134da:	e7e0      	b.n	801349e <floor+0x46>
 80134dc:	2e33      	cmp	r6, #51	; 0x33
 80134de:	dd0b      	ble.n	80134f8 <floor+0xa0>
 80134e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80134e4:	d104      	bne.n	80134f0 <floor+0x98>
 80134e6:	ee10 2a10 	vmov	r2, s0
 80134ea:	460b      	mov	r3, r1
 80134ec:	f7ec feee 	bl	80002cc <__adddf3>
 80134f0:	ec41 0b10 	vmov	d0, r0, r1
 80134f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013500:	fa23 f707 	lsr.w	r7, r3, r7
 8013504:	4207      	tst	r7, r0
 8013506:	d0f3      	beq.n	80134f0 <floor+0x98>
 8013508:	a30f      	add	r3, pc, #60	; (adr r3, 8013548 <floor+0xf0>)
 801350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350e:	f7ec fedd 	bl	80002cc <__adddf3>
 8013512:	2200      	movs	r2, #0
 8013514:	2300      	movs	r3, #0
 8013516:	f7ed fb1f 	bl	8000b58 <__aeabi_dcmpgt>
 801351a:	2800      	cmp	r0, #0
 801351c:	d0bf      	beq.n	801349e <floor+0x46>
 801351e:	2c00      	cmp	r4, #0
 8013520:	da02      	bge.n	8013528 <floor+0xd0>
 8013522:	2e14      	cmp	r6, #20
 8013524:	d103      	bne.n	801352e <floor+0xd6>
 8013526:	3401      	adds	r4, #1
 8013528:	ea25 0507 	bic.w	r5, r5, r7
 801352c:	e7b7      	b.n	801349e <floor+0x46>
 801352e:	2301      	movs	r3, #1
 8013530:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013534:	fa03 f606 	lsl.w	r6, r3, r6
 8013538:	4435      	add	r5, r6
 801353a:	4545      	cmp	r5, r8
 801353c:	bf38      	it	cc
 801353e:	18e4      	addcc	r4, r4, r3
 8013540:	e7f2      	b.n	8013528 <floor+0xd0>
 8013542:	2500      	movs	r5, #0
 8013544:	462c      	mov	r4, r5
 8013546:	e7aa      	b.n	801349e <floor+0x46>
 8013548:	8800759c 	.word	0x8800759c
 801354c:	7e37e43c 	.word	0x7e37e43c
 8013550:	bff00000 	.word	0xbff00000
 8013554:	000fffff 	.word	0x000fffff

08013558 <rint>:
 8013558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801355a:	ec51 0b10 	vmov	r0, r1, d0
 801355e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013562:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013566:	2e13      	cmp	r6, #19
 8013568:	ee10 4a10 	vmov	r4, s0
 801356c:	460b      	mov	r3, r1
 801356e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013572:	dc58      	bgt.n	8013626 <rint+0xce>
 8013574:	2e00      	cmp	r6, #0
 8013576:	da2b      	bge.n	80135d0 <rint+0x78>
 8013578:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801357c:	4302      	orrs	r2, r0
 801357e:	d023      	beq.n	80135c8 <rint+0x70>
 8013580:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013584:	4302      	orrs	r2, r0
 8013586:	4254      	negs	r4, r2
 8013588:	4314      	orrs	r4, r2
 801358a:	0c4b      	lsrs	r3, r1, #17
 801358c:	0b24      	lsrs	r4, r4, #12
 801358e:	045b      	lsls	r3, r3, #17
 8013590:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013594:	ea44 0103 	orr.w	r1, r4, r3
 8013598:	4b32      	ldr	r3, [pc, #200]	; (8013664 <rint+0x10c>)
 801359a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801359e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80135a2:	4602      	mov	r2, r0
 80135a4:	460b      	mov	r3, r1
 80135a6:	4630      	mov	r0, r6
 80135a8:	4639      	mov	r1, r7
 80135aa:	f7ec fe8f 	bl	80002cc <__adddf3>
 80135ae:	e9cd 0100 	strd	r0, r1, [sp]
 80135b2:	463b      	mov	r3, r7
 80135b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135b8:	4632      	mov	r2, r6
 80135ba:	f7ec fe85 	bl	80002c8 <__aeabi_dsub>
 80135be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80135c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80135c6:	4639      	mov	r1, r7
 80135c8:	ec41 0b10 	vmov	d0, r0, r1
 80135cc:	b003      	add	sp, #12
 80135ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d0:	4a25      	ldr	r2, [pc, #148]	; (8013668 <rint+0x110>)
 80135d2:	4132      	asrs	r2, r6
 80135d4:	ea01 0702 	and.w	r7, r1, r2
 80135d8:	4307      	orrs	r7, r0
 80135da:	d0f5      	beq.n	80135c8 <rint+0x70>
 80135dc:	0851      	lsrs	r1, r2, #1
 80135de:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80135e2:	4314      	orrs	r4, r2
 80135e4:	d00c      	beq.n	8013600 <rint+0xa8>
 80135e6:	ea23 0201 	bic.w	r2, r3, r1
 80135ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80135ee:	2e13      	cmp	r6, #19
 80135f0:	fa43 f606 	asr.w	r6, r3, r6
 80135f4:	bf0c      	ite	eq
 80135f6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80135fa:	2400      	movne	r4, #0
 80135fc:	ea42 0306 	orr.w	r3, r2, r6
 8013600:	4918      	ldr	r1, [pc, #96]	; (8013664 <rint+0x10c>)
 8013602:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013606:	4622      	mov	r2, r4
 8013608:	e9d5 4500 	ldrd	r4, r5, [r5]
 801360c:	4620      	mov	r0, r4
 801360e:	4629      	mov	r1, r5
 8013610:	f7ec fe5c 	bl	80002cc <__adddf3>
 8013614:	e9cd 0100 	strd	r0, r1, [sp]
 8013618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801361c:	4622      	mov	r2, r4
 801361e:	462b      	mov	r3, r5
 8013620:	f7ec fe52 	bl	80002c8 <__aeabi_dsub>
 8013624:	e7d0      	b.n	80135c8 <rint+0x70>
 8013626:	2e33      	cmp	r6, #51	; 0x33
 8013628:	dd07      	ble.n	801363a <rint+0xe2>
 801362a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801362e:	d1cb      	bne.n	80135c8 <rint+0x70>
 8013630:	ee10 2a10 	vmov	r2, s0
 8013634:	f7ec fe4a 	bl	80002cc <__adddf3>
 8013638:	e7c6      	b.n	80135c8 <rint+0x70>
 801363a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801363e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8013642:	40d6      	lsrs	r6, r2
 8013644:	4230      	tst	r0, r6
 8013646:	d0bf      	beq.n	80135c8 <rint+0x70>
 8013648:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801364c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8013650:	bf1f      	itttt	ne
 8013652:	ea24 0101 	bicne.w	r1, r4, r1
 8013656:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801365a:	fa44 f202 	asrne.w	r2, r4, r2
 801365e:	ea41 0402 	orrne.w	r4, r1, r2
 8013662:	e7cd      	b.n	8013600 <rint+0xa8>
 8013664:	08013f88 	.word	0x08013f88
 8013668:	000fffff 	.word	0x000fffff
 801366c:	00000000 	.word	0x00000000

08013670 <scalbn>:
 8013670:	b570      	push	{r4, r5, r6, lr}
 8013672:	ec55 4b10 	vmov	r4, r5, d0
 8013676:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801367a:	4606      	mov	r6, r0
 801367c:	462b      	mov	r3, r5
 801367e:	b99a      	cbnz	r2, 80136a8 <scalbn+0x38>
 8013680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013684:	4323      	orrs	r3, r4
 8013686:	d036      	beq.n	80136f6 <scalbn+0x86>
 8013688:	4b39      	ldr	r3, [pc, #228]	; (8013770 <scalbn+0x100>)
 801368a:	4629      	mov	r1, r5
 801368c:	ee10 0a10 	vmov	r0, s0
 8013690:	2200      	movs	r2, #0
 8013692:	f7ec ffd1 	bl	8000638 <__aeabi_dmul>
 8013696:	4b37      	ldr	r3, [pc, #220]	; (8013774 <scalbn+0x104>)
 8013698:	429e      	cmp	r6, r3
 801369a:	4604      	mov	r4, r0
 801369c:	460d      	mov	r5, r1
 801369e:	da10      	bge.n	80136c2 <scalbn+0x52>
 80136a0:	a32b      	add	r3, pc, #172	; (adr r3, 8013750 <scalbn+0xe0>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	e03a      	b.n	801371e <scalbn+0xae>
 80136a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80136ac:	428a      	cmp	r2, r1
 80136ae:	d10c      	bne.n	80136ca <scalbn+0x5a>
 80136b0:	ee10 2a10 	vmov	r2, s0
 80136b4:	4620      	mov	r0, r4
 80136b6:	4629      	mov	r1, r5
 80136b8:	f7ec fe08 	bl	80002cc <__adddf3>
 80136bc:	4604      	mov	r4, r0
 80136be:	460d      	mov	r5, r1
 80136c0:	e019      	b.n	80136f6 <scalbn+0x86>
 80136c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80136c6:	460b      	mov	r3, r1
 80136c8:	3a36      	subs	r2, #54	; 0x36
 80136ca:	4432      	add	r2, r6
 80136cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80136d0:	428a      	cmp	r2, r1
 80136d2:	dd08      	ble.n	80136e6 <scalbn+0x76>
 80136d4:	2d00      	cmp	r5, #0
 80136d6:	a120      	add	r1, pc, #128	; (adr r1, 8013758 <scalbn+0xe8>)
 80136d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136dc:	da1c      	bge.n	8013718 <scalbn+0xa8>
 80136de:	a120      	add	r1, pc, #128	; (adr r1, 8013760 <scalbn+0xf0>)
 80136e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136e4:	e018      	b.n	8013718 <scalbn+0xa8>
 80136e6:	2a00      	cmp	r2, #0
 80136e8:	dd08      	ble.n	80136fc <scalbn+0x8c>
 80136ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80136f6:	ec45 4b10 	vmov	d0, r4, r5
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013700:	da19      	bge.n	8013736 <scalbn+0xc6>
 8013702:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013706:	429e      	cmp	r6, r3
 8013708:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801370c:	dd0a      	ble.n	8013724 <scalbn+0xb4>
 801370e:	a112      	add	r1, pc, #72	; (adr r1, 8013758 <scalbn+0xe8>)
 8013710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d1e2      	bne.n	80136de <scalbn+0x6e>
 8013718:	a30f      	add	r3, pc, #60	; (adr r3, 8013758 <scalbn+0xe8>)
 801371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371e:	f7ec ff8b 	bl	8000638 <__aeabi_dmul>
 8013722:	e7cb      	b.n	80136bc <scalbn+0x4c>
 8013724:	a10a      	add	r1, pc, #40	; (adr r1, 8013750 <scalbn+0xe0>)
 8013726:	e9d1 0100 	ldrd	r0, r1, [r1]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d0b8      	beq.n	80136a0 <scalbn+0x30>
 801372e:	a10e      	add	r1, pc, #56	; (adr r1, 8013768 <scalbn+0xf8>)
 8013730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013734:	e7b4      	b.n	80136a0 <scalbn+0x30>
 8013736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801373a:	3236      	adds	r2, #54	; 0x36
 801373c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013740:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013744:	4620      	mov	r0, r4
 8013746:	4b0c      	ldr	r3, [pc, #48]	; (8013778 <scalbn+0x108>)
 8013748:	2200      	movs	r2, #0
 801374a:	e7e8      	b.n	801371e <scalbn+0xae>
 801374c:	f3af 8000 	nop.w
 8013750:	c2f8f359 	.word	0xc2f8f359
 8013754:	01a56e1f 	.word	0x01a56e1f
 8013758:	8800759c 	.word	0x8800759c
 801375c:	7e37e43c 	.word	0x7e37e43c
 8013760:	8800759c 	.word	0x8800759c
 8013764:	fe37e43c 	.word	0xfe37e43c
 8013768:	c2f8f359 	.word	0xc2f8f359
 801376c:	81a56e1f 	.word	0x81a56e1f
 8013770:	43500000 	.word	0x43500000
 8013774:	ffff3cb0 	.word	0xffff3cb0
 8013778:	3c900000 	.word	0x3c900000

0801377c <_init>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	bf00      	nop
 8013780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013782:	bc08      	pop	{r3}
 8013784:	469e      	mov	lr, r3
 8013786:	4770      	bx	lr

08013788 <_fini>:
 8013788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378a:	bf00      	nop
 801378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801378e:	bc08      	pop	{r3}
 8013790:	469e      	mov	lr, r3
 8013792:	4770      	bx	lr
