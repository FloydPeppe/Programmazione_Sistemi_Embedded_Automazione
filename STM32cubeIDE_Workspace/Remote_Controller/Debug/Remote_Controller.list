
Remote_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08011578  08011578  00021578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d00  08011d00  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011d00  08011d00  00021d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d08  08011d08  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d08  08011d08  00021d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d0c  08011d0c  00021d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08011d10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005320  200001ec  08011efc  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000550c  08011efc  0003550c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264ea  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004870  00000000  00000000  00056706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0005af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  0005c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e5f  00000000  00000000  0005ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cade  00000000  00000000  00063d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfb57  00000000  00000000  0008080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c30  00000000  00000000  001603b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801155c 	.word	0x0801155c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0801155c 	.word	0x0801155c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f004 f9d7 	bl	80053e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f899 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 faed 	bl	8001618 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 facb 	bl	80015d8 <MX_DMA_Init>
  MX_TIM2_Init();
 8001042:	f000 f9a9 	bl	8001398 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001046:	f000 f8ff 	bl	8001248 <MX_TIM1_Init>
  MX_TIM3_Init();
 800104a:	f000 f9f9 	bl	8001440 <MX_TIM3_Init>
  MX_TIM5_Init();
 800104e:	f000 fa45 	bl	80014dc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001052:	f000 fa97 	bl	8001584 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initializing my libraries
  MAIN_DIFFDRIVE_Init();
 8001056:	f000 fba9 	bl	80017ac <MAIN_DIFFDRIVE_Init>
  MAIN_DATASTREAM_Init();
 800105a:	f000 fb8b 	bl	8001774 <MAIN_DATASTREAM_Init>
  MAIN_MAF_Init();
 800105e:	f000 fc81 	bl	8001964 <MAIN_MAF_Init>

  // Using the flag "wait_button" to start MCU with WIFI disabled
  // if blue button is pressed during reset. It's useful to avoid
  // battery leakage
  bool wait_for_button= false;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4832      	ldr	r0, [pc, #200]	; (8001134 <main+0x108>)
 800106c:	f005 f854 	bl	8006118 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11a      	bne.n	80010ac <main+0x80>
   	wait_for_button= true;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
   	// Show pressed button
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 800107a:	e006      	b.n	800108a <main+0x5e>
   		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800107c:	2120      	movs	r1, #32
 800107e:	482e      	ldr	r0, [pc, #184]	; (8001138 <main+0x10c>)
 8001080:	f005 f87b 	bl	800617a <HAL_GPIO_TogglePin>
   		HAL_Delay(50);
 8001084:	2032      	movs	r0, #50	; 0x32
 8001086:	f004 f9ef 	bl	8005468 <HAL_Delay>
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	4829      	ldr	r0, [pc, #164]	; (8001134 <main+0x108>)
 8001090:	f005 f842 	bl	8006118 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <main+0x50>
   	}
   	// Turn on LED
   	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2120      	movs	r1, #32
 800109e:	4826      	ldr	r0, [pc, #152]	; (8001138 <main+0x10c>)
 80010a0:	f005 f852 	bl	8006148 <HAL_GPIO_WritePin>
   	// Debouncing released button
   	HAL_Delay(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a8:	f004 f9de 	bl	8005468 <HAL_Delay>
  }

  // Reset ESP-8266
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	4820      	ldr	r0, [pc, #128]	; (8001134 <main+0x108>)
 80010b2:	f005 f849 	bl	8006148 <HAL_GPIO_WritePin>

  // Wait for blue button if this option is on
  if( wait_for_button )
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <main+0xa2>
	  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 80010bc:	bf00      	nop
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	481c      	ldr	r0, [pc, #112]	; (8001134 <main+0x108>)
 80010c4:	f005 f828 	bl	8006118 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f7      	bne.n	80010be <main+0x92>
		  	  ;

  HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f004 f9c9 	bl	8005468 <HAL_Delay>

  // Start ESP
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2101      	movs	r1, #1
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <main+0x108>)
 80010dc:	f005 f834 	bl	8006148 <HAL_GPIO_WritePin>

  // Wait a bit for ESP initialization
  HAL_Delay(3000);
 80010e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e4:	f004 f9c0 	bl	8005468 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010e8:	f007 ff0e 	bl	8008f08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DiffDriveTask */
  DiffDriveTaskHandle = osThreadNew(MoveDifferentialDrive, NULL, &DiffDriveTask_attributes);
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <main+0x110>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <main+0x114>)
 80010f2:	f007 ff68 	bl	8008fc6 <osThreadNew>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <main+0x118>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* creation of InfraredTask */
  InfraredTaskHandle = osThreadNew(InfraredSensor, NULL, &InfraredTask_attributes);
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <main+0x11c>)
 80010fe:	2100      	movs	r1, #0
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <main+0x120>)
 8001102:	f007 ff60 	bl	8008fc6 <osThreadNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <main+0x124>)
 800110a:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(TxStream, NULL, &TxTask_attributes);
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <main+0x128>)
 800110e:	2100      	movs	r1, #0
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <main+0x12c>)
 8001112:	f007 ff58 	bl	8008fc6 <osThreadNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <main+0x130>)
 800111a:	6013      	str	r3, [r2, #0]

  /* creation of RxTask */
  RxTaskHandle = osThreadNew(RxStream, NULL, &RxTask_attributes);
 800111c:	4a10      	ldr	r2, [pc, #64]	; (8001160 <main+0x134>)
 800111e:	2100      	movs	r1, #0
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <main+0x138>)
 8001122:	f007 ff50 	bl	8008fc6 <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <main+0x13c>)
 800112a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800112c:	f007 ff10 	bl	8008f50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001130:	e7fe      	b.n	8001130 <main+0x104>
 8001132:	bf00      	nop
 8001134:	40020800 	.word	0x40020800
 8001138:	40020000 	.word	0x40020000
 800113c:	080115ec 	.word	0x080115ec
 8001140:	080019e9 	.word	0x080019e9
 8001144:	20004bfc 	.word	0x20004bfc
 8001148:	08011610 	.word	0x08011610
 800114c:	08001bb9 	.word	0x08001bb9
 8001150:	20004da4 	.word	0x20004da4
 8001154:	08011634 	.word	0x08011634
 8001158:	08001bf9 	.word	0x08001bf9
 800115c:	20004cec 	.word	0x20004cec
 8001160:	08011658 	.word	0x08011658
 8001164:	08001f71 	.word	0x08001f71
 8001168:	20004f44 	.word	0x20004f44

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2234      	movs	r2, #52	; 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00b fc34 	bl	800c9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <SystemClock_Config+0xd4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <SystemClock_Config+0xd4>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <SystemClock_Config+0xd4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <SystemClock_Config+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b8:	4a22      	ldr	r2, [pc, #136]	; (8001244 <SystemClock_Config+0xd8>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <SystemClock_Config+0xd8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e0:	2310      	movs	r3, #16
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fad6 	bl	80067ac <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001206:	f001 f8df 	bl	80023c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ffc2 	bl	80061b0 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001232:	f001 f8c9 	bl	80023c8 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b092      	sub	sp, #72	; 0x48
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2220      	movs	r2, #32
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00b fbb8 	bl	800c9e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <MX_TIM1_Init+0x148>)
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <MX_TIM1_Init+0x14c>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <MX_TIM1_Init+0x148>)
 8001280:	2208      	movs	r2, #8
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_TIM1_Init+0x148>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <MX_TIM1_Init+0x148>)
 800128c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <MX_TIM1_Init+0x148>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <MX_TIM1_Init+0x148>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <MX_TIM1_Init+0x148>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <MX_TIM1_Init+0x148>)
 80012a6:	f005 fe1b 	bl	8006ee0 <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012b0:	f001 f88a 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c0:	4619      	mov	r1, r3
 80012c2:	4833      	ldr	r0, [pc, #204]	; (8001390 <MX_TIM1_Init+0x148>)
 80012c4:	f006 fee6 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f001 f87b 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4826      	ldr	r0, [pc, #152]	; (8001390 <MX_TIM1_Init+0x148>)
 80012f8:	f006 f980 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001302:	f001 f861 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4820      	ldr	r0, [pc, #128]	; (8001390 <MX_TIM1_Init+0x148>)
 8001310:	f006 f974 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800131a:	f001 f855 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	2208      	movs	r2, #8
 8001324:	4619      	mov	r1, r3
 8001326:	481a      	ldr	r0, [pc, #104]	; (8001390 <MX_TIM1_Init+0x148>)
 8001328:	f006 f968 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001332:	f001 f849 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	220c      	movs	r2, #12
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_TIM1_Init+0x148>)
 8001340:	f006 f95c 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800134a:	f001 f83d 	bl	80023c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x148>)
 8001372:	f006 ff0b 	bl	800818c <HAL_TIMEx_ConfigBreakDeadTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800137c:	f001 f824 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x148>)
 8001382:	f001 f919 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3748      	adds	r7, #72	; 0x48
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20004e90 	.word	0x20004e90
 8001394:	40010000 	.word	0x40010000

08001398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2224      	movs	r2, #36	; 0x24
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b fb1e 	bl	800c9e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_TIM2_Init+0xa4>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_TIM2_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_TIM2_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_TIM2_Init+0xa4>)
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_TIM2_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_TIM2_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013ec:	230f      	movs	r3, #15
 80013ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013fc:	230f      	movs	r3, #15
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_TIM2_Init+0xa4>)
 8001408:	f005 fe8e 	bl	8007128 <HAL_TIM_Encoder_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001412:	f000 ffd9 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_TIM2_Init+0xa4>)
 8001424:	f006 fe36 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800142e:	f000 ffcb 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3730      	adds	r7, #48	; 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20004f48 	.word	0x20004f48

08001440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM3_Init+0x94>)
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <MX_TIM3_Init+0x98>)
 8001460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_TIM3_Init+0x94>)
 8001464:	f240 3247 	movw	r2, #839	; 0x347
 8001468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM3_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_TIM3_Init+0x94>)
 8001472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_TIM3_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM3_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_TIM3_Init+0x94>)
 8001486:	f005 fc2f 	bl	8006ce8 <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001490:	f000 ff9a 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_TIM3_Init+0x94>)
 80014a2:	f006 f96d 	bl	8007780 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014ac:	f000 ff8c 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM3_Init+0x94>)
 80014be:	f006 fde9 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 ff7e 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20004da8 	.word	0x20004da8
 80014d8:	40000400 	.word	0x40000400

080014dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2224      	movs	r2, #36	; 0x24
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00b fa7c 	bl	800c9e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_TIM5_Init+0xa0>)
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <MX_TIM5_Init+0xa4>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_TIM5_Init+0xa0>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM5_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_TIM5_Init+0xa0>)
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001510:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM5_Init+0xa0>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM5_Init+0xa0>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800151e:	2301      	movs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001526:	2301      	movs	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800152e:	230f      	movs	r3, #15
 8001530:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001536:	2301      	movs	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800153e:	230f      	movs	r3, #15
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM5_Init+0xa0>)
 800154a:	f005 fded 	bl	8007128 <HAL_TIM_Encoder_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 ff38 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM5_Init+0xa0>)
 8001566:	f006 fd95 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 ff2a 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20004cf0 	.word	0x20004cf0
 8001580:	40000c00 	.word	0x40000c00

08001584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART3_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001590:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015bc:	f006 fe56 	bl	800826c <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 feff 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20004c78 	.word	0x20004c78
 80015d4:	40004800 	.word	0x40004800

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <MX_DMA_Init+0x3c>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_DMA_Init+0x3c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	200c      	movs	r0, #12
 8001600:	f004 f849 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001604:	200c      	movs	r0, #12
 8001606:	f004 f862 	bl	80056ce <HAL_NVIC_EnableIRQ>

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <MX_GPIO_Init+0x150>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <MX_GPIO_Init+0x150>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <MX_GPIO_Init+0x150>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <MX_GPIO_Init+0x150>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a45      	ldr	r2, [pc, #276]	; (8001768 <MX_GPIO_Init+0x150>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <MX_GPIO_Init+0x150>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <MX_GPIO_Init+0x150>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a3e      	ldr	r2, [pc, #248]	; (8001768 <MX_GPIO_Init+0x150>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <MX_GPIO_Init+0x150>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <MX_GPIO_Init+0x150>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a37      	ldr	r2, [pc, #220]	; (8001768 <MX_GPIO_Init+0x150>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <MX_GPIO_Init+0x150>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	4832      	ldr	r0, [pc, #200]	; (800176c <MX_GPIO_Init+0x154>)
 80016a4:	f004 fd50 	bl	8006148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2130      	movs	r1, #48	; 0x30
 80016ac:	4830      	ldr	r0, [pc, #192]	; (8001770 <MX_GPIO_Init+0x158>)
 80016ae:	f004 fd4b 	bl	8006148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_GPIO_Init+0x154>)
 80016ca:	f004 fb91 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 80016ce:	2301      	movs	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_GPIO_Init+0x154>)
 80016e6:	f004 fb83 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	481a      	ldr	r0, [pc, #104]	; (8001770 <MX_GPIO_Init+0x158>)
 8001706:	f004 fb73 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 800170a:	2330      	movs	r3, #48	; 0x30
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <MX_GPIO_Init+0x158>)
 8001722:	f004 fb65 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_GPIO_Init+0x154>)
 800173a:	f004 fb59 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001750:	2308      	movs	r3, #8
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_GPIO_Init+0x158>)
 800175c:	f004 fb48 	bl	8005df0 <HAL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40020800 	.word	0x40020800
 8001770:	40020000 	.word	0x40020000

08001774 <MAIN_DATASTREAM_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DATASTREAM_Init(){
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0

	DATASTREAM_InitTypeDef DATASTREAM_InitStruct;

	DATASTREAM_InitStruct.DMA_Rx_Enable= true;
 800177a:	2301      	movs	r3, #1
 800177c:	723b      	strb	r3, [r7, #8]
	DATASTREAM_InitStruct.DMA_Rx_Stream_IRQn= DMA1_Stream1_IRQn;
 800177e:	230c      	movs	r3, #12
 8001780:	60fb      	str	r3, [r7, #12]
	DATASTREAM_InitStruct.huart= &huart3;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MAIN_DATASTREAM_Init+0x30>)
 8001784:	607b      	str	r3, [r7, #4]

	hstream.Init= DATASTREAM_InitStruct;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MAIN_DATASTREAM_Init+0x34>)
 8001788:	461c      	mov	r4, r3
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001790:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	DATASTREAM_Init(&hstream);
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MAIN_DATASTREAM_Init+0x34>)
 8001796:	f001 f94b 	bl	8002a30 <DATASTREAM_Init>

}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20004c78 	.word	0x20004c78
 80017a8:	20004e5c 	.word	0x20004e5c

080017ac <MAIN_DIFFDRIVE_Init>:


static void MAIN_DIFFDRIVE_Init(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0

	uint16_t max_sample= 1200u;
 80017b2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80017b6:	84fb      	strh	r3, [r7, #38]	; 0x26

	hdiffdrive.Init.timing_htim= &htim3;
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <MAIN_DIFFDRIVE_Init+0x17c>)
 80017bc:	64da      	str	r2, [r3, #76]	; 0x4c
	hdiffdrive.Init.timing_time_step= TIME_STEP;
 80017be:	4b59      	ldr	r3, [pc, #356]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017c0:	4a5a      	ldr	r2, [pc, #360]	; (800192c <MAIN_DIFFDRIVE_Init+0x180>)
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 80017c4:	4b57      	ldr	r3, [pc, #348]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017c6:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <MAIN_DIFFDRIVE_Init+0x184>)
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017cc:	4a59      	ldr	r2, [pc, #356]	; (8001934 <MAIN_DIFFDRIVE_Init+0x188>)
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_tim_channel[left ]= TIM_CHANNEL_1;
 80017d0:	4b54      	ldr	r3, [pc, #336]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_tim_channel[right]= TIM_CHANNEL_1;
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017d8:	2200      	movs	r2, #0
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
	hdiffdrive.Init.encoder_tim_arr_resolution[left ]= 32;
 80017dc:	4b51      	ldr	r3, [pc, #324]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.encoder_tim_arr_resolution[right]= 32;
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017ee:	4a52      	ldr	r2, [pc, #328]	; (8001938 <MAIN_DIFFDRIVE_Init+0x18c>)
 80017f0:	665a      	str	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <MAIN_DIFFDRIVE_Init+0x18c>)
 80017f6:	669a      	str	r2, [r3, #104]	; 0x68

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80017fa:	4a50      	ldr	r2, [pc, #320]	; (800193c <MAIN_DIFFDRIVE_Init+0x190>)
 80017fc:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <MAIN_DIFFDRIVE_Init+0x190>)
 8001802:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001806:	4a4d      	ldr	r2, [pc, #308]	; (800193c <MAIN_DIFFDRIVE_Init+0x190>)
 8001808:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <MAIN_DIFFDRIVE_Init+0x190>)
 800180e:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001818:	2204      	movs	r2, #4
 800181a:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800181e:	2208      	movs	r2, #8
 8001820:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001824:	220c      	movs	r2, #12
 8001826:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	 MOTOR_MAX_VOLTAGE;
 8001828:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800182a:	4a45      	ldr	r2, [pc, #276]	; (8001940 <MAIN_DIFFDRIVE_Init+0x194>)
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	 MOTOR_MAX_VOLTAGE;
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001830:	4a43      	ldr	r2, [pc, #268]	; (8001940 <MAIN_DIFFDRIVE_Init+0x194>)
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	 MOTOR_MIN_VOLTAGE;
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	 MOTOR_MIN_VOLTAGE;
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=  SUPPLY_VOLTAGE;
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <MAIN_DIFFDRIVE_Init+0x194>)
 8001848:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]= SUPPLY_VOLTAGE;
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800184c:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <MAIN_DIFFDRIVE_Init+0x194>)
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 8001850:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <MAIN_DIFFDRIVE_Init+0x198>)
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	ca07      	ldmia	r2, {r0, r1, r2}
 8001858:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800185c:	4a31      	ldr	r2, [pc, #196]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	ca07      	ldmia	r2, {r0, r1, r2}
 800186c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <MAIN_DIFFDRIVE_Init+0x1a0>)
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <MAIN_DIFFDRIVE_Init+0x1a4>)
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001894:	2203      	movs	r2, #3
 8001896:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800189c:	2203      	movs	r2, #3
 800189e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018bc:	2202      	movs	r2, #2
 80018be:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	hdiffdrive.Init.control_pid_P[left ]= PID_P_L;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MAIN_DIFFDRIVE_Init+0x1a8>)
 80018c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_P[right]= PID_P_R;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018cc:	4a21      	ldr	r2, [pc, #132]	; (8001954 <MAIN_DIFFDRIVE_Init+0x1a8>)
 80018ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_I[left ]= PID_I_L;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018d4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80018d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_I[right]= PID_I_R;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80018e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	hdiffdrive.Init.control_pid_D[left ]= PID_D_L;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	hdiffdrive.Init.control_pid_D[right]= PID_D_R;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	hdiffdrive.Init.history_max_sample= max_sample;
 80018fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 80018fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	// --- Mechanical parameters (from real model) --- //
	hdiffdrive.Init.mech_prmtr_l= WHEEL_DISTANCE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <MAIN_DIFFDRIVE_Init+0x1ac>)
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.mech_prmtr_r= WHEEL_RADIUS;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <MAIN_DIFFDRIVE_Init+0x1b0>)
 800190c:	659a      	str	r2, [r3, #88]	; 0x58
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= WHEEL_MAX_SPEED;
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <MAIN_DIFFDRIVE_Init+0x1b4>)
 8001912:	661a      	str	r2, [r3, #96]	; 0x60

	// --- Initialize handle --- //
	DIFFDRIVE_Init(&hdiffdrive);
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <MAIN_DIFFDRIVE_Init+0x178>)
 8001916:	f001 fb57 	bl	8002fc8 <DIFFDRIVE_Init>

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20005014 	.word	0x20005014
 8001928:	20004da8 	.word	0x20004da8
 800192c:	3c23d70a 	.word	0x3c23d70a
 8001930:	20004f48 	.word	0x20004f48
 8001934:	20004cf0 	.word	0x20004cf0
 8001938:	44ed8000 	.word	0x44ed8000
 800193c:	20004e90 	.word	0x20004e90
 8001940:	40f00000 	.word	0x40f00000
 8001944:	080115a8 	.word	0x080115a8
 8001948:	080115b4 	.word	0x080115b4
 800194c:	3a41b391 	.word	0x3a41b391
 8001950:	3a3b4831 	.word	0x3a3b4831
 8001954:	41c80000 	.word	0x41c80000
 8001958:	3d9eb852 	.word	0x3d9eb852
 800195c:	3d0d4fdf 	.word	0x3d0d4fdf
 8001960:	41200000 	.word	0x41200000

08001964 <MAIN_MAF_Init>:
// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0

#ifdef PHONE_CONTROLLER
	int filtr_v_size=  10;
 800196a:	230a      	movs	r3, #10
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_om_size= 10;
 800196e:	230a      	movs	r3, #10
 8001970:	623b      	str	r3, [r7, #32]
	int filtr_a_size=  30;
	int filtr_th_size= 50;
#endif
#endif

	int filtr_infrared_size= 100;
 8001972:	2364      	movs	r3, #100	; 0x64
 8001974:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_v  =	   MAF_Create(filtr_v_size,  weights_buff);
 800197a:	4c18      	ldr	r4, [pc, #96]	; (80019dc <MAIN_MAF_Init+0x78>)
 800197c:	463b      	mov	r3, r7
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001982:	4618      	mov	r0, r3
 8001984:	f003 f9d2 	bl	8004d2c <MAF_Create>
 8001988:	4625      	mov	r5, r4
 800198a:	463c      	mov	r4, r7
 800198c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001994:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_om = 	   MAF_Create(filtr_om_size, weights_buff);
 8001998:	4c11      	ldr	r4, [pc, #68]	; (80019e0 <MAIN_MAF_Init+0x7c>)
 800199a:	463b      	mov	r3, r7
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	6a39      	ldr	r1, [r7, #32]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 f9c3 	bl	8004d2c <MAF_Create>
 80019a6:	4625      	mov	r5, r4
 80019a8:	463c      	mov	r4, r7
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b2:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 80019b6:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <MAIN_MAF_Init+0x80>)
 80019b8:	463b      	mov	r3, r7
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	69f9      	ldr	r1, [r7, #28]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f9b4 	bl	8004d2c <MAF_Create>
 80019c4:	4625      	mov	r5, r4
 80019c6:	463c      	mov	r4, r7
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d0:	e885 0003 	stmia.w	r5, {r0, r1}

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bdb0      	pop	{r4, r5, r7, pc}
 80019dc:	20004ffc 	.word	0x20004ffc
 80019e0:	20004e78 	.word	0x20004e78
 80019e4:	20004c00 	.word	0x20004c00

080019e8 <MoveDifferentialDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MoveDifferentialDrive */
void MoveDifferentialDrive(void *argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// Trajectory speeds (linear and angular speed)
	float v= 0, om= 0;
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Trajectory speed limits (theoretically computed below)
	float v_max, om_max, v_max_curr;

	// Extracting Max wheels speed (radiant each second)
	float wheel_speed[2];
	float wheel_speed_max= hdiffdrive.mech_prmtr.max_wheel_speed;
 80019fc:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <MoveDifferentialDrive+0x1a8>)
 80019fe:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
	wheel_speed[left ]= wheel_speed_max;
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	60bb      	str	r3, [r7, #8]
	wheel_speed[right]= wheel_speed_max;
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	60fb      	str	r3, [r7, #12]

	// Delta_a_max computation (linear variation, is max when wheels rotate at max speed on same direction)
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v_max, NULL, wheel_speed);
 8001a0c:	f107 0208 	add.w	r2, r7, #8
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f830 	bl	8004a7c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	v_max *= 1; // Here you could modulate max value
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	617b      	str	r3, [r7, #20]

	// Delta_th_max computation (angular variation, is max when wheel rotate at max speed on opposite direction)
	wheel_speed[left]= -wheel_speed_max;
 8001a20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a24:	eef1 7a67 	vneg.f32	s15, s15
 8001a28:	edc7 7a02 	vstr	s15, [r7, #8]
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(NULL, &om_max, wheel_speed);
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	2000      	movs	r0, #0
 8001a38:	f003 f820 	bl	8004a7c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	om_max *= 1; // Here you could modulate max value
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	613b      	str	r3, [r7, #16]

	// IR sensor variables
	float IR_val;
	float IR_thres= 0.3;
 8001a40:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <MoveDifferentialDrive+0x1ac>)
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24

	// Setting Global flag to indicate that Diff Drive is going to move
	diffDrive_stopped= false;
 8001a44:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <MoveDifferentialDrive+0x1b0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

	// Start control
	DIFFDRIVE_TrackingStart();
 8001a4a:	f003 f905 	bl	8004c58 <DIFFDRIVE_TrackingStart>

	/* Infinite loop */
	for(;;){

		// If movement is enabled
		if( diffDrive_enabled ){
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <MoveDifferentialDrive+0x1b4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8081 	beq.w	8001b5c <MoveDifferentialDrive+0x174>

			// Compute angular trajectory increment (y_val spans from -1 to 1)
			om = (float)y_val * om_max;
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <MoveDifferentialDrive+0x1b8>)
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			// have just to find the max or min v value (min is -max) with the constraints of omega fixed and
			// wheel_speed between the fixed range:
			//
			// https://github.com/FloydPeppe/Progetto_Sistemi_Embedded/blob/main/Tesina/Tesina_Progetto_Embedded.pdf
			//
			float l = hdiffdrive.mech_prmtr.l;
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <MoveDifferentialDrive+0x1a8>)
 8001a6e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8001a72:	623b      	str	r3, [r7, #32]
			float r = hdiffdrive.mech_prmtr.r;
 8001a74:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <MoveDifferentialDrive+0x1a8>)
 8001a76:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8001a7a:	61fb      	str	r3, [r7, #28]
			if( om >= 0 )
 8001a7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	db10      	blt.n	8001aac <MoveDifferentialDrive+0xc4>
				v_max_curr = r * wheel_speed_max - om * l;
 8001a8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a96:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8001aaa:	e00f      	b.n	8001acc <MoveDifferentialDrive+0xe4>
			else
				v_max_curr = r * wheel_speed_max + om * l;
 8001aac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ab0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001abc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			// Compute linear trajectory increment (x_val spans from -1 to 1)
			v  = (float)x_val * v_max_curr;
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <MoveDifferentialDrive+0x1bc>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

			// Update filters
			MAF_Update(&hfilter_v,  v);
 8001ade:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001ae2:	4831      	ldr	r0, [pc, #196]	; (8001ba8 <MoveDifferentialDrive+0x1c0>)
 8001ae4:	f003 f971 	bl	8004dca <MAF_Update>
			MAF_Update(&hfilter_om, om);
 8001ae8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001aec:	482f      	ldr	r0, [pc, #188]	; (8001bac <MoveDifferentialDrive+0x1c4>)
 8001aee:	f003 f96c 	bl	8004dca <MAF_Update>

			// Get current values
			v=  __MAF_GET_VAL(&hfilter_v);
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MoveDifferentialDrive+0x1c0>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
			om= __MAF_GET_VAL(&hfilter_om);
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <MoveDifferentialDrive+0x1c4>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c


			// If diff drive has been previously stopped
			if( diffDrive_stopped ){
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MoveDifferentialDrive+0x1b0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <MoveDifferentialDrive+0x12a>
				// Restart control
				DIFFDRIVE_TrackingResume();
 8001b08:	f003 f8b4 	bl	8004c74 <DIFFDRIVE_TrackingResume>
				// Set flag to indicate that is going to move
				diffDrive_stopped= false;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MoveDifferentialDrive+0x1b0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
			}

			// Only in forward direction (infrared sensor is in front of diff drive)
			if( v > 0 ){
 8001b12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	dd16      	ble.n	8001b4e <MoveDifferentialDrive+0x166>
				// v enveloped by infrared sensor value
				v *= (IR_val = __MAF_GET_VAL(&hfilter_infrared));
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MoveDifferentialDrive+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

				// If IR_val < IR_thres, v = 0
				if( IR_val < IR_thres )
 8001b36:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d502      	bpl.n	8001b4e <MoveDifferentialDrive+0x166>
					v = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
			}

			// Make step control
			DIFFDRIVE_TrackingStep(v, om);
 8001b4e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001b52:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001b56:	f003 f899 	bl	8004c8c <DIFFDRIVE_TrackingStep>
 8001b5a:	e778      	b.n	8001a4e <MoveDifferentialDrive+0x66>

		}
		// if movement is disabled and diffDrive is moving
		else if( !diffDrive_stopped ){
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MoveDifferentialDrive+0x1b0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f43f af70 	beq.w	8001a4e <MoveDifferentialDrive+0x66>
			// Suspend control (stop diff drive)
			DIFFDRIVE_TrackingSuspend();
 8001b6e:	f003 f887 	bl	8004c80 <DIFFDRIVE_TrackingSuspend>

			// Reset filters
			MAF_Reset(&hfilter_v,  0);
 8001b72:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001bb4 <MoveDifferentialDrive+0x1cc>
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <MoveDifferentialDrive+0x1c0>)
 8001b78:	f003 f8ff 	bl	8004d7a <MAF_Reset>
			MAF_Reset(&hfilter_om, 0);
 8001b7c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001bb4 <MoveDifferentialDrive+0x1cc>
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <MoveDifferentialDrive+0x1c4>)
 8001b82:	f003 f8fa 	bl	8004d7a <MAF_Reset>

			// Set global flag to indicate that diff drive is now stopped
			diffDrive_stopped= true;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <MoveDifferentialDrive+0x1b0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
		if( diffDrive_enabled ){
 8001b8c:	e75f      	b.n	8001a4e <MoveDifferentialDrive+0x66>
 8001b8e:	bf00      	nop
 8001b90:	20005014 	.word	0x20005014
 8001b94:	3e99999a 	.word	0x3e99999a
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000210 	.word	0x20000210
 8001ba0:	2000020c 	.word	0x2000020c
 8001ba4:	20000208 	.word	0x20000208
 8001ba8:	20004ffc 	.word	0x20004ffc
 8001bac:	20004e78 	.word	0x20004e78
 8001bb0:	20004c00 	.word	0x20004c00
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <InfraredSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InfraredSensor */
void InfraredSensor(void *argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InfraredSensor */

	// Infrared variable
	float sens = 0;
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// Read current value on IR pin
		sens = HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <InfraredSensor+0x38>)
 8001bca:	f004 faa5 	bl	8006118 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd8:	edc7 7a03 	vstr	s15, [r7, #12]

		// Use MAF filter to transform only 0 or 1 state in values that span from 0 to 1
		MAF_Update(&hfilter_infrared, sens);
 8001bdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <InfraredSensor+0x3c>)
 8001be2:	f003 f8f2 	bl	8004dca <MAF_Update>

		osDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f007 fac1 	bl	800916e <osDelay>
		sens = HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8001bec:	e7eb      	b.n	8001bc6 <InfraredSensor+0xe>
 8001bee:	bf00      	nop
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	20004c00 	.word	0x20004c00

08001bf8 <TxStream>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TxStream */
void TxStream(void *argument)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b0e4      	sub	sp, #400	; 0x190
 8001bfe:	af24      	add	r7, sp, #144	; 0x90
 8001c00:	6778      	str	r0, [r7, #116]	; 0x74
  /* Infinite loop */
  for(;;)
  {

	  // If blue button is pressed
	  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	4850      	ldr	r0, [pc, #320]	; (8001d48 <TxStream+0x150>)
 8001c08:	f004 fa86 	bl	8006118 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f7      	bne.n	8001c02 <TxStream+0xa>

		  // Stop Differential Drive motion
		  diffDrive_enabled= false;
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <TxStream+0x154>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

		  // Wait until diff drive is still
		  while( !diffDrive_stopped )
 8001c18:	bf00      	nop
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <TxStream+0x158>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f7      	bne.n	8001c1a <TxStream+0x22>
			  ;

		  // Stop Rx stream
		  RxStream_enabled= false;
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <TxStream+0x15c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

		  // Wait until Rx is stream is stopped
		  while( !RxStream_stopped )
 8001c30:	bf00      	nop
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <TxStream+0x160>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f083 0301 	eor.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f7      	bne.n	8001c32 <TxStream+0x3a>
			  ;

		  // Suspend other threads while sending values
		  osThreadSuspend(DiffDriveTaskHandle);
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <TxStream+0x164>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fa4f 	bl	80090ea <osThreadSuspend>
		  osThreadSuspend(InfraredTaskHandle);
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <TxStream+0x168>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 fa4a 	bl	80090ea <osThreadSuspend>
		  osThreadSuspend(RxTaskHandle);
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <TxStream+0x16c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 fa45 	bl	80090ea <osThreadSuspend>

		  // Turn on LED
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2120      	movs	r1, #32
 8001c64:	4840      	ldr	r0, [pc, #256]	; (8001d68 <TxStream+0x170>)
 8001c66:	f004 fa6f 	bl	8006148 <HAL_GPIO_WritePin>

		  // Reset ESP-8266
		  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4836      	ldr	r0, [pc, #216]	; (8001d48 <TxStream+0x150>)
 8001c70:	f004 fa6a 	bl	8006148 <HAL_GPIO_WritePin>

		  osDelay(400);
 8001c74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c78:	f007 fa79 	bl	800916e <osDelay>

		  // Send values forever
		  for(;;){

			  // If blue button is pressed again
			  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c80:	4831      	ldr	r0, [pc, #196]	; (8001d48 <TxStream+0x150>)
 8001c82:	f004 fa49 	bl	8006118 <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f7      	bne.n	8001c7c <TxStream+0x84>

				  // Enable ESP-8266
				  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2101      	movs	r1, #1
 8001c90:	482d      	ldr	r0, [pc, #180]	; (8001d48 <TxStream+0x150>)
 8001c92:	f004 fa59 	bl	8006148 <HAL_GPIO_WritePin>

				  // Rapidly flash led to show MCU ready to send values
				  for(int i=0; i<20; i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c9c:	e00b      	b.n	8001cb6 <TxStream+0xbe>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	4831      	ldr	r0, [pc, #196]	; (8001d68 <TxStream+0x170>)
 8001ca2:	f004 fa6a 	bl	800617a <HAL_GPIO_TogglePin>
					  osDelay(50);
 8001ca6:	2032      	movs	r0, #50	; 0x32
 8001ca8:	f007 fa61 	bl	800916e <osDelay>
				  for(int i=0; i<20; i++){
 8001cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cba:	2b13      	cmp	r3, #19
 8001cbc:	ddef      	ble.n	8001c9e <TxStream+0xa6>
				  }

				  // Turn off LED
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	4829      	ldr	r0, [pc, #164]	; (8001d68 <TxStream+0x170>)
 8001cc4:	f004 fa40 	bl	8006148 <HAL_GPIO_WritePin>
				  // Wait for 10 received chars
				  char ch[10];
				  //HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);

				  // Start DMA Rx (Rx_flag will be connected with the flag inside datastream handle struct)
				  DATASTREAM_ReceiveDMA(&hstream, (uint8_t*)ch, sizeof(ch));
 8001cc8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ccc:	220a      	movs	r2, #10
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4826      	ldr	r0, [pc, #152]	; (8001d6c <TxStream+0x174>)
 8001cd2:	f000 ff03 	bl	8002adc <DATASTREAM_ReceiveDMA>

				  // Wait for a received input
				  while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001cd6:	e000      	b.n	8001cda <TxStream+0xe2>
					  __NOP();
 8001cd8:	bf00      	nop
				  while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <TxStream+0x174>)
 8001cdc:	7e1b      	ldrb	r3, [r3, #24]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f6      	bne.n	8001cd8 <TxStream+0xe0>

				  // Wait a bit
				  osDelay(2000);
 8001cea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cee:	f007 fa3e 	bl	800916e <osDelay>

				  DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <TxStream+0x178>)
 8001cf4:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001cf8:	f503 7510 	add.w	r5, r3, #576	; 0x240
 8001cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d04:	e884 0003 	stmia.w	r4, {r0, r1}

				  // Number of saved samples
				  uint N_sample;
				  if( tmphist.sample_cnt < tmphist.max_sample )
 8001d08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d204      	bcs.n	8001d1e <TxStream+0x126>
					  N_sample=  tmphist.sample_cnt;
 8001d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d1c:	e003      	b.n	8001d26 <TxStream+0x12e>
				  else
					  N_sample=  tmphist.max_sample;
 8001d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

				  // First values send is the actual number of samples
				  DATASTREAM_Print(&hstream, int_csv, 1, N_sample);
 8001d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <TxStream+0x174>)
 8001d30:	f000 ff26 	bl	8002b80 <DATASTREAM_Print>
				  // Bit of transfer delay
				  osDelay(5);
 8001d34:	2005      	movs	r0, #5
 8001d36:	f007 fa1a 	bl	800916e <osDelay>

				  // Init History Get function
				  DIFFDRIVE_HISTORY_Get_Init();
 8001d3a:	f002 fb4d 	bl	80043d8 <DIFFDRIVE_HISTORY_Get_Init>

				  for(int k= 0; k < N_sample; k++){
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d44:	e0f9      	b.n	8001f3a <TxStream+0x342>
 8001d46:	bf00      	nop
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	20000210 	.word	0x20000210
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000001 	.word	0x20000001
 8001d58:	20000211 	.word	0x20000211
 8001d5c:	20004bfc 	.word	0x20004bfc
 8001d60:	20004da4 	.word	0x20004da4
 8001d64:	20004f44 	.word	0x20004f44
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	20004e5c 	.word	0x20004e5c
 8001d70:	20005014 	.word	0x20005014
					  // Temporary variables
					  DIFFDRIVE_STATE_TypeDef state_measure, state_target;

					  // Get one state sample from history
					  DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 8001d74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fb52 	bl	8004428 <DIFFDRIVE_HISTORY_Get_Sample>

					  // Send values to serial connected to ESP WiFi module
					  DATASTREAM_Print(
								&hstream, float_csv, 18,
								state_measure.input[left], state_measure.input[right],
 8001d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
					  DATASTREAM_Print(
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbfd 	bl	8000588 <__aeabi_f2d>
 8001d8e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
								state_measure.input[left], state_measure.input[right],
 8001d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
					  DATASTREAM_Print(
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbf6 	bl	8000588 <__aeabi_f2d>
 8001d9c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
								state_target .input[left], state_target .input[right],
 8001da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
					  DATASTREAM_Print(
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbef 	bl	8000588 <__aeabi_f2d>
 8001daa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
								state_target .input[left], state_target .input[right],
 8001dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
					  DATASTREAM_Print(
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbe8 	bl	8000588 <__aeabi_f2d>
 8001db8:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
								state_measure.wheel[left], state_measure.wheel[right],
 8001dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
					  DATASTREAM_Print(
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbe1 	bl	8000588 <__aeabi_f2d>
 8001dc6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
								state_measure.wheel[left], state_measure.wheel[right],
 8001dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
					  DATASTREAM_Print(
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbda 	bl	8000588 <__aeabi_f2d>
 8001dd4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
								state_target .wheel[left], state_target .wheel[right],
 8001dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
					  DATASTREAM_Print(
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbd3 	bl	8000588 <__aeabi_f2d>
 8001de2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
								state_target .wheel[left], state_target .wheel[right],
 8001de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
					  DATASTREAM_Print(
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbcc 	bl	8000588 <__aeabi_f2d>
 8001df0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
								state_measure.pose.x_a,    state_measure.pose.y_a,
 8001df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
					  DATASTREAM_Print(
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbc6 	bl	8000588 <__aeabi_f2d>
 8001dfc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
								state_measure.pose.x_a,    state_measure.pose.y_a,
 8001e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
					  DATASTREAM_Print(
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbc0 	bl	8000588 <__aeabi_f2d>
 8001e08:	e9c7 0108 	strd	r0, r1, [r7, #32]
								state_measure.pose.theta,  state_measure.pose.v,
 8001e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
					  DATASTREAM_Print(
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fbb9 	bl	8000588 <__aeabi_f2d>
 8001e16:	e9c7 0106 	strd	r0, r1, [r7, #24]
								state_measure.pose.theta,  state_measure.pose.v,
 8001e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
					  DATASTREAM_Print(
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fbb2 	bl	8000588 <__aeabi_f2d>
 8001e24:	e9c7 0104 	strd	r0, r1, [r7, #16]
								state_measure.pose.om,
 8001e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
					  DATASTREAM_Print(
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fbab 	bl	8000588 <__aeabi_f2d>
 8001e32:	e9c7 0102 	strd	r0, r1, [r7, #8]
								state_target .pose.x_a,    state_target.pose.y_a,
 8001e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
					  DATASTREAM_Print(
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fba4 	bl	8000588 <__aeabi_f2d>
 8001e40:	e9c7 0100 	strd	r0, r1, [r7]
								state_target .pose.x_a,    state_target.pose.y_a,
 8001e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
					  DATASTREAM_Print(
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb9d 	bl	8000588 <__aeabi_f2d>
 8001e4e:	4682      	mov	sl, r0
 8001e50:	468b      	mov	fp, r1
								state_target .pose.theta,  state_target.pose.v,
 8001e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
					  DATASTREAM_Print(
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb96 	bl	8000588 <__aeabi_f2d>
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	4689      	mov	r9, r1
								state_target .pose.theta,  state_target.pose.v,
 8001e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
					  DATASTREAM_Print(
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb8f 	bl	8000588 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
								state_target .pose.om
 8001e6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
					  DATASTREAM_Print(
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb88 	bl	8000588 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8001e80:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8001e84:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8001e88:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 8001e8c:	ed97 7b00 	vldr	d7, [r7]
 8001e90:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8001e94:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e98:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001e9c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ea0:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001ea4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ea8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001eac:	ed97 7b08 	vldr	d7, [r7, #32]
 8001eb0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001eb4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001eb8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001ebc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001ec0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001ec4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001ec8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001ecc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001ed0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001ed4:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001ed8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001edc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001ee0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ee4:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001ee8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001eec:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001ef0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ef4:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001ef8:	ed8d 7b00 	vstr	d7, [sp]
 8001efc:	2212      	movs	r2, #18
 8001efe:	2101      	movs	r1, #1
 8001f00:	4817      	ldr	r0, [pc, #92]	; (8001f60 <TxStream+0x368>)
 8001f02:	f000 fe3d 	bl	8002b80 <DATASTREAM_Print>
					  );
					  // Bit of transfer delay
					  osDelay(5);
 8001f06:	2005      	movs	r0, #5
 8001f08:	f007 f931 	bl	800916e <osDelay>
					  // Toggling led to show data transfer operation
					  if( !(k%50) )
 8001f0c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <TxStream+0x36c>)
 8001f12:	fb83 1302 	smull	r1, r3, r3, r2
 8001f16:	1119      	asrs	r1, r3, #4
 8001f18:	17d3      	asrs	r3, r2, #31
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	2132      	movs	r1, #50	; 0x32
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <TxStream+0x338>
						  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f28:	2120      	movs	r1, #32
 8001f2a:	480f      	ldr	r0, [pc, #60]	; (8001f68 <TxStream+0x370>)
 8001f2c:	f004 f925 	bl	800617a <HAL_GPIO_TogglePin>
				  for(int k= 0; k < N_sample; k++){
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f34:	3301      	adds	r3, #1
 8001f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001f42:	429a      	cmp	r2, r3
 8001f44:	f63f af16 	bhi.w	8001d74 <TxStream+0x17c>
				  }

				  // Turn off LED
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <TxStream+0x370>)
 8001f4e:	f004 f8fb 	bl	8006148 <HAL_GPIO_WritePin>

				  // Reset ESP-8266
				  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <TxStream+0x374>)
 8001f58:	f004 f8f6 	bl	8006148 <HAL_GPIO_WritePin>
			  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001f5c:	e68e      	b.n	8001c7c <TxStream+0x84>
 8001f5e:	bf00      	nop
 8001f60:	20004e5c 	.word	0x20004e5c
 8001f64:	51eb851f 	.word	0x51eb851f
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020800 	.word	0x40020800

08001f70 <RxStream>:

//#define STOP_WHEN_ZERO_ENTRY_

/* USER CODE END Header_RxStream */
void RxStream(void *argument)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RxStream */
	/* Infinite loop */

	// Debug array
	uint32_t running_time[100]={0};
 8001f7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f80:	4618      	mov	r0, r3
 8001f82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f86:	461a      	mov	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	f00a fd2d 	bl	800c9e8 <memset>
	int k_= 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	// Communication timeout of milliseconds
	uint32_t timeout_time= 1000;
 8001f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f98:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	// Values threshold (for noise rejection)
	float val_thres= 0.2;
 8001f9c:	4bad      	ldr	r3, [pc, #692]	; (8002254 <RxStream+0x2e4>)
 8001f9e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
#endif /* JSON_PACKET */
#endif /* CSV_PACKET */


	// Keep LED on to show that data transfer is down
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	48ac      	ldr	r0, [pc, #688]	; (8002258 <RxStream+0x2e8>)
 8001fa8:	f004 f8ce 	bl	8006148 <HAL_GPIO_WritePin>

	// Start DMA Rx (Rx_flag will be connected with the flag inside datastream handle struct)
	DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	224a      	movs	r2, #74	; 0x4a
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	48a9      	ldr	r0, [pc, #676]	; (800225c <RxStream+0x2ec>)
 8001fb6:	f000 fd91 	bl	8002adc <DATASTREAM_ReceiveDMA>

	// Wait for a received input
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001fba:	e000      	b.n	8001fbe <RxStream+0x4e>
		__NOP();
 8001fbc:	bf00      	nop
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001fbe:	4ba7      	ldr	r3, [pc, #668]	; (800225c <RxStream+0x2ec>)
 8001fc0:	7e1b      	ldrb	r3, [r3, #24]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f6      	bne.n	8001fbc <RxStream+0x4c>

	// LED off to show that data transfer is up
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	48a1      	ldr	r0, [pc, #644]	; (8002258 <RxStream+0x2e8>)
 8001fd4:	f004 f8b8 	bl	8006148 <HAL_GPIO_WritePin>

	// Setting Global flag to enable Diff Drive
	diffDrive_enabled= true;
 8001fd8:	4ba1      	ldr	r3, [pc, #644]	; (8002260 <RxStream+0x2f0>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]

	// Measure time
	uint32_t tic= osKernelGetTickCount();
 8001fde:	f006 ffdd 	bl	8008f9c <osKernelGetTickCount>
 8001fe2:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	uint32_t toc;

	for(;;){

		// If data is received
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8001fe6:	4b9d      	ldr	r3, [pc, #628]	; (800225c <RxStream+0x2ec>)
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 815e 	beq.w	80022ae <RxStream+0x33e>

			// Debug Rx time
			if( k_ < sizeof(running_time)/sizeof(*running_time) )
 8001ff2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ff6:	2b63      	cmp	r3, #99	; 0x63
 8001ff8:	d80e      	bhi.n	8002018 <RxStream+0xa8>
				running_time[k_++]= osKernelGetTickCount()-tic;
 8001ffa:	f006 ffcf 	bl	8008f9c <osKernelGetTickCount>
 8001ffe:	4601      	mov	r1, r0
 8002000:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 800200a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800200e:	1a89      	subs	r1, r1, r2
 8002010:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


			// ---  Start reading packet --- //
			int start_idx=0;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

#ifdef CSV_PACKET

			// Find message start index (where the '\n' char is)
			while( data[start_idx++] != '\n' && start_idx < sizeof(data) )
 800201e:	bf00      	nop
 8002020:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800202a:	f107 0208 	add.w	r2, r7, #8
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d003      	beq.n	800203c <RxStream+0xcc>
 8002034:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002038:	2b49      	cmp	r3, #73	; 0x49
 800203a:	d9f1      	bls.n	8002020 <RxStream+0xb0>
#endif

			// Read 2 values from CSV message (inside data itself is CSV formatted both for JSON and pure CSV packet) //

			// --- Reading first string --- //
			int i= start_idx;
 800203c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002040:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			while( data[i] != ',' &&  i-start_idx < sizeof(str_1) && i < sizeof(data) ){
 8002044:	e012      	b.n	800206c <RxStream+0xfc>
				str_1[i-start_idx] = data[i];
 8002046:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800204a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f107 0108 	add.w	r1, r7, #8
 8002054:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002058:	440a      	add	r2, r1
 800205a:	7811      	ldrb	r1, [r2, #0]
 800205c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002060:	54d1      	strb	r1, [r2, r3]
				i++;
 8002062:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002066:	3301      	adds	r3, #1
 8002068:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			while( data[i] != ',' &&  i-start_idx < sizeof(str_1) && i < sizeof(data) ){
 800206c:	f107 0208 	add.w	r2, r7, #8
 8002070:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b2c      	cmp	r3, #44	; 0x2c
 800207a:	d00a      	beq.n	8002092 <RxStream+0x122>
 800207c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002080:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b13      	cmp	r3, #19
 8002088:	d803      	bhi.n	8002092 <RxStream+0x122>
 800208a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800208e:	2b49      	cmp	r3, #73	; 0x49
 8002090:	d9d9      	bls.n	8002046 <RxStream+0xd6>
			}
			// Place string terminator in last char
			if( i-start_idx < sizeof(str_1) )
 8002092:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002096:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b13      	cmp	r3, #19
 800209e:	d809      	bhi.n	80020b4 <RxStream+0x144>
				str_1[i-start_idx]= '\0';
 80020a0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80020a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80020ae:	2100      	movs	r1, #0
 80020b0:	54d1      	strb	r1, [r2, r3]
 80020b2:	e003      	b.n	80020bc <RxStream+0x14c>
			else
				str_1[sizeof(str_1)-1]= '\0';
 80020b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020b8:	2200      	movs	r2, #0
 80020ba:	74da      	strb	r2, [r3, #19]

			// --- Reading second string --- //
			start_idx= ++i;
 80020bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020c0:	3301      	adds	r3, #1
 80020c2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80020c6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020ca:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			while( data[i] != ',' && i-start_idx < sizeof(str_2) && i < sizeof(data) ){
 80020ce:	e012      	b.n	80020f6 <RxStream+0x186>
				str_2[i-start_idx] = data[i];
 80020d0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80020d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f107 0108 	add.w	r1, r7, #8
 80020de:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80020e2:	440a      	add	r2, r1
 80020e4:	7811      	ldrb	r1, [r2, #0]
 80020e6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80020ea:	54d1      	strb	r1, [r2, r3]
				i++;
 80020ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020f0:	3301      	adds	r3, #1
 80020f2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			while( data[i] != ',' && i-start_idx < sizeof(str_2) && i < sizeof(data) ){
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2c      	cmp	r3, #44	; 0x2c
 8002104:	d00a      	beq.n	800211c <RxStream+0x1ac>
 8002106:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800210a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b13      	cmp	r3, #19
 8002112:	d803      	bhi.n	800211c <RxStream+0x1ac>
 8002114:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002118:	2b49      	cmp	r3, #73	; 0x49
 800211a:	d9d9      	bls.n	80020d0 <RxStream+0x160>
			}
			// Place string terminator in last char
			if( i-start_idx < sizeof(str_2) )
 800211c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002120:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b13      	cmp	r3, #19
 8002128:	d809      	bhi.n	800213e <RxStream+0x1ce>
				str_2[i-start_idx]= '\0';
 800212a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800212e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002138:	2100      	movs	r1, #0
 800213a:	54d1      	strb	r1, [r2, r3]
 800213c:	e003      	b.n	8002146 <RxStream+0x1d6>
			else
				str_2[sizeof(str_2)-1]= '\0';
 800213e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002142:	2200      	movs	r2, #0
 8002144:	74da      	strb	r2, [r3, #19]

			// -- Convert strings in float values -- //
			x_val= (float)atof((char*) str_1);
 8002146:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800214a:	4618      	mov	r0, r3
 800214c:	f00a fb06 	bl	800c75c <atof>
 8002150:	ec53 2b10 	vmov	r2, r3, d0
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd66 	bl	8000c28 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	4a41      	ldr	r2, [pc, #260]	; (8002264 <RxStream+0x2f4>)
 8002160:	6013      	str	r3, [r2, #0]
			y_val= (float)atof((char*) str_2);
 8002162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002166:	4618      	mov	r0, r3
 8002168:	f00a faf8 	bl	800c75c <atof>
 800216c:	ec53 2b10 	vmov	r2, r3, d0
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fd58 	bl	8000c28 <__aeabi_d2f>
 8002178:	4603      	mov	r3, r0
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <RxStream+0x2f8>)
 800217c:	6013      	str	r3, [r2, #0]

#ifdef PHONE_CONTROLLER

			// Convert sensors read gravity (~ -9.8 to 9.8) in -1 to 1
			x_val = -x_val/9; //9.9;
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <RxStream+0x2f4>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eeb1 7a67 	vneg.f32	s14, s15
 8002188:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800218c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <RxStream+0x2f4>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
			y_val = -y_val/9; //9.9;
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <RxStream+0x2f8>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	eeb1 7a67 	vneg.f32	s14, s15
 80021a0:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80021a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a8:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <RxStream+0x2f8>)
 80021aa:	edc3 7a00 	vstr	s15, [r3]

#endif
#endif

			// Set zero values below a threshold to reject noise
			if( fabsf(x_val) < val_thres )
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <RxStream+0x2f4>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eef0 7ae7 	vabs.f32	s15, s15
 80021b8:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 80021bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	dd03      	ble.n	80021ce <RxStream+0x25e>
				x_val= 0;
 80021c6:	4b27      	ldr	r3, [pc, #156]	; (8002264 <RxStream+0x2f4>)
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
			if( fabsf(y_val) < val_thres )
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <RxStream+0x2f8>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	eef0 7ae7 	vabs.f32	s15, s15
 80021d8:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 80021dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd03      	ble.n	80021ee <RxStream+0x27e>
				y_val= 0;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <RxStream+0x2f8>)
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

			// Enroll values between -1 and 1 ( sign(z) == z/|z| )
			if( fabsf(x_val) > 1 )
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <RxStream+0x2f4>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eef0 7ae7 	vabs.f32	s15, s15
 80021f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	dd0c      	ble.n	8002220 <RxStream+0x2b0>
				x_val= x_val/fabsf(x_val);
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <RxStream+0x2f4>)
 8002208:	edd3 6a00 	vldr	s13, [r3]
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <RxStream+0x2f4>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eeb0 7ae7 	vabs.f32	s14, s15
 8002216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <RxStream+0x2f4>)
 800221c:	edc3 7a00 	vstr	s15, [r3]
			if( fabsf(y_val) > 1 )
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <RxStream+0x2f8>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	eef0 7ae7 	vabs.f32	s15, s15
 800222a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800222e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	dd0c      	ble.n	8002252 <RxStream+0x2e2>
				y_val= y_val/fabsf(y_val);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RxStream+0x2f8>)
 800223a:	edd3 6a00 	vldr	s13, [r3]
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RxStream+0x2f8>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	eeb0 7ae7 	vabs.f32	s14, s15
 8002248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <RxStream+0x2f8>)
 800224e:	edc3 7a00 	vstr	s15, [r3]
			else
				diffDrive_enabled= true;
#endif

			// While receiving is disabled keep loop here before to start new Rx
			while( !RxStream_enabled ){
 8002252:	e019      	b.n	8002288 <RxStream+0x318>
 8002254:	3e4ccccd 	.word	0x3e4ccccd
 8002258:	40020000 	.word	0x40020000
 800225c:	20004e5c 	.word	0x20004e5c
 8002260:	20000210 	.word	0x20000210
 8002264:	20000208 	.word	0x20000208
 8002268:	2000020c 	.word	0x2000020c
				if( !RxStream_stopped ){
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <RxStream+0x414>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <RxStream+0x318>
					DATASTREAM_ReceiveDMA_Reset(&hstream);
 800227c:	4842      	ldr	r0, [pc, #264]	; (8002388 <RxStream+0x418>)
 800227e:	f000 fc59 	bl	8002b34 <DATASTREAM_ReceiveDMA_Reset>
					RxStream_stopped= true;
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <RxStream+0x414>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
			while( !RxStream_enabled ){
 8002288:	4b40      	ldr	r3, [pc, #256]	; (800238c <RxStream+0x41c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e9      	bne.n	800226c <RxStream+0x2fc>
				}
			}

			// Ready for receive new messages
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	224a      	movs	r2, #74	; 0x4a
 800229e:	4619      	mov	r1, r3
 80022a0:	4839      	ldr	r0, [pc, #228]	; (8002388 <RxStream+0x418>)
 80022a2:	f000 fc1b 	bl	8002adc <DATASTREAM_ReceiveDMA>

			// Get current time
			tic= osKernelGetTickCount();
 80022a6:	f006 fe79 	bl	8008f9c <osKernelGetTickCount>
 80022aa:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

		}

		// If data aren't received for a period of time
		if( (toc= osKernelGetTickCount()-tic) > timeout_time ){
 80022ae:	f006 fe75 	bl	8008f9c <osKernelGetTickCount>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80022be:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80022c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f67f ae8d 	bls.w	8001fe6 <RxStream+0x76>

			// Stop Differential Drive motion
			diffDrive_enabled= false;
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <RxStream+0x420>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]

			// Wait until diff drive is still
			while( !diffDrive_stopped )
 80022d2:	bf00      	nop
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <RxStream+0x424>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f7      	bne.n	80022d4 <RxStream+0x364>
				;

			// Suspend other threads
			osThreadSuspend(DiffDriveTaskHandle);
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <RxStream+0x428>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fefe 	bl	80090ea <osThreadSuspend>
			osThreadSuspend(InfraredTaskHandle);
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <RxStream+0x42c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 fef9 	bl	80090ea <osThreadSuspend>

			// Turn on LED to show that connection is down
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2120      	movs	r1, #32
 80022fc:	4828      	ldr	r0, [pc, #160]	; (80023a0 <RxStream+0x430>)
 80022fe:	f003 ff23 	bl	8006148 <HAL_GPIO_WritePin>

			// Try resetting uart Rx and DMA interrupt
			DATASTREAM_ReceiveDMA_Reset(&hstream);
 8002302:	4821      	ldr	r0, [pc, #132]	; (8002388 <RxStream+0x418>)
 8002304:	f000 fc16 	bl	8002b34 <DATASTREAM_ReceiveDMA_Reset>

			// Try to start a new DMA receiving request
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	224a      	movs	r2, #74	; 0x4a
 800230e:	4619      	mov	r1, r3
 8002310:	481d      	ldr	r0, [pc, #116]	; (8002388 <RxStream+0x418>)
 8002312:	f000 fbe3 	bl	8002adc <DATASTREAM_ReceiveDMA>

			// Wait for input
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8002316:	e019      	b.n	800234c <RxStream+0x3dc>

				// While receiving is disabled keep loop here before to reset
				while( !RxStream_enabled )
					RxStream_stopped= true;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <RxStream+0x414>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
				while( !RxStream_enabled )
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <RxStream+0x41c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f4      	bne.n	8002318 <RxStream+0x3a8>

				// If more time elapses, without received data, reset system
				if( (osKernelGetTickCount()-tic) > 3*timeout_time ){
 800232e:	f006 fe35 	bl	8008f9c <osKernelGetTickCount>
 8002332:	4602      	mov	r2, r0
 8002334:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002338:	1ad1      	subs	r1, r2, r3
 800233a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	4299      	cmp	r1, r3
 8002346:	d901      	bls.n	800234c <RxStream+0x3dc>
					// Reset MCU
					HAL_NVIC_SystemReset();
 8002348:	f003 f9dd 	bl	8005706 <HAL_NVIC_SystemReset>
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <RxStream+0x418>)
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e0      	bne.n	800231e <RxStream+0x3ae>
				}
			}

			// Turn on LED to show that connection is up
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2120      	movs	r1, #32
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <RxStream+0x430>)
 8002362:	f003 fef1 	bl	8006148 <HAL_GPIO_WritePin>

			// Resume other threads
			osThreadResume(DiffDriveTaskHandle);
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <RxStream+0x428>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f006 fede 	bl	800912c <osThreadResume>
			osThreadResume(InfraredTaskHandle);
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <RxStream+0x42c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f006 fed9 	bl	800912c <osThreadResume>

			// Enable diffDrive
			diffDrive_enabled= true;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <RxStream+0x420>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8002380:	e631      	b.n	8001fe6 <RxStream+0x76>
 8002382:	bf00      	nop
 8002384:	20000211 	.word	0x20000211
 8002388:	20004e5c 	.word	0x20004e5c
 800238c:	20000001 	.word	0x20000001
 8002390:	20000210 	.word	0x20000210
 8002394:	20000000 	.word	0x20000000
 8002398:	20004bfc 	.word	0x20004bfc
 800239c:	20004da4 	.word	0x20004da4
 80023a0:	40020000 	.word	0x40020000

080023a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b6:	f003 f837 	bl	8005428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40001000 	.word	0x40001000

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <Error_Handler+0x8>
	...

080023d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_MspInit+0x54>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_MspInit+0x54>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_MspInit+0x54>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_MspInit+0x54>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_MspInit+0x54>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_MspInit+0x54>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	210f      	movs	r1, #15
 8002416:	f06f 0001 	mvn.w	r0, #1
 800241a:	f003 f93c 	bl	8005696 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_TIM_PWM_MspInit+0x3c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10d      	bne.n	800245a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_TIM_PWM_MspInit+0x40>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_TIM_PWM_MspInit+0x40>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_TIM_PWM_MspInit+0x40>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d12d      	bne.n	80024ee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 80024ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024dc:	2301      	movs	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	481d      	ldr	r0, [pc, #116]	; (800255c <HAL_TIM_Encoder_MspInit+0xec>)
 80024e8:	f003 fc82 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024ec:	e030      	b.n	8002550 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_TIM_Encoder_MspInit+0xf0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12b      	bne.n	8002550 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6413      	str	r3, [r2, #64]	; 0x40
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8002530:	2303      	movs	r3, #3
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002540:	2302      	movs	r3, #2
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <HAL_TIM_Encoder_MspInit+0xf4>)
 800254c:	f003 fc50 	bl	8005df0 <HAL_GPIO_Init>
}
 8002550:	bf00      	nop
 8002552:	3730      	adds	r7, #48	; 0x30
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	40020400 	.word	0x40020400
 8002560:	40000c00 	.word	0x40000c00
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d115      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2105      	movs	r1, #5
 800259a:	201d      	movs	r0, #29
 800259c:	f003 f87b 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025a0:	201d      	movs	r0, #29
 80025a2:	f003 f894 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_TIM_MspPostInit+0x68>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d11e      	bne.n	8002618 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 80025f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002608:	2301      	movs	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4619      	mov	r1, r3
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_TIM_MspPostInit+0x70>)
 8002614:	f003 fbec 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40010000 	.word	0x40010000
 8002624:	40023800 	.word	0x40023800
 8002628:	40020000 	.word	0x40020000

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_UART_MspInit+0x120>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d179      	bne.n	8002742 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a37      	ldr	r2, [pc, #220]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_UART_MspInit+0x124>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_UART_MspInit+0x124>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_UART_MspInit+0x124>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026a2:	2320      	movs	r3, #32
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026b2:	2307      	movs	r3, #7
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4825      	ldr	r0, [pc, #148]	; (8002754 <HAL_UART_MspInit+0x128>)
 80026be:	f003 fb97 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026d4:	2307      	movs	r3, #7
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	481e      	ldr	r0, [pc, #120]	; (8002758 <HAL_UART_MspInit+0x12c>)
 80026e0:	f003 fb86 	bl	8005df0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_UART_MspInit+0x130>)
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_UART_MspInit+0x134>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_UART_MspInit+0x130>)
 80026ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_UART_MspInit+0x130>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_UART_MspInit+0x130>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_UART_MspInit+0x130>)
 8002700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002704:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_UART_MspInit+0x130>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_UART_MspInit+0x130>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_UART_MspInit+0x130>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_UART_MspInit+0x130>)
 800271a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_UART_MspInit+0x130>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <HAL_UART_MspInit+0x130>)
 8002728:	f002 fff2 	bl	8005710 <HAL_DMA_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002732:	f7ff fe49 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_UART_MspInit+0x130>)
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_UART_MspInit+0x130>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40004800 	.word	0x40004800
 8002750:	40023800 	.word	0x40023800
 8002754:	40020800 	.word	0x40020800
 8002758:	40020400 	.word	0x40020400
 800275c:	20004c18 	.word	0x20004c18
 8002760:	40026028 	.word	0x40026028

08002764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	2036      	movs	r0, #54	; 0x36
 800277a:	f002 ff8c 	bl	8005696 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800277e:	2036      	movs	r0, #54	; 0x36
 8002780:	f002 ffa5 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_InitTick+0xa4>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_InitTick+0xa4>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_InitTick+0xa4>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027a0:	f107 0210 	add.w	r2, r7, #16
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fe1a 	bl	80063e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027b0:	f003 fdf0 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 80027b4:	4603      	mov	r3, r0
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_InitTick+0xa8>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	3b01      	subs	r3, #1
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_InitTick+0xac>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_InitTick+0xb0>)
 80027cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_InitTick+0xac>)
 80027d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_InitTick+0xac>)
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_InitTick+0xac>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_InitTick+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027e8:	4809      	ldr	r0, [pc, #36]	; (8002810 <HAL_InitTick+0xac>)
 80027ea:	f004 fa7d 	bl	8006ce8 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <HAL_InitTick+0xac>)
 80027f6:	f004 fad3 	bl	8006da0 <HAL_TIM_Base_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3730      	adds	r7, #48	; 0x30
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	431bde83 	.word	0x431bde83
 8002810:	2000526c 	.word	0x2000526c
 8002814:	40001000 	.word	0x40001000

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <DMA1_Stream1_IRQHandler+0x10>)
 800284a:	f003 f867 	bl	800591c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20004c18 	.word	0x20004c18

08002858 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <TIM3_IRQHandler+0x10>)
 800285e:	f004 fda5 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20004da8 	.word	0x20004da8

0800286c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM6_DAC_IRQHandler+0x10>)
 8002872:	f004 fd9b 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000526c 	.word	0x2000526c

08002880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_kill>:

int _kill(int pid, int sig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800289a:	f009 ff6b 	bl	800c774 <__errno>
 800289e:	4603      	mov	r3, r0
 80028a0:	2216      	movs	r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
	return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_exit>:

void _exit (int status)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffe7 	bl	8002890 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028c2:	e7fe      	b.n	80028c2 <_exit+0x12>

080028c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e00a      	b.n	80028ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d6:	f3af 8000 	nop.w
 80028da:	4601      	mov	r1, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	b2ca      	uxtb	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dbf0      	blt.n	80028d6 <_read+0x12>
	}

return len;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e009      	b.n	8002924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	60ba      	str	r2, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3301      	adds	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	dbf1      	blt.n	8002910 <_write+0x12>
	}
	return len;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_close>:

int _close(int file)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return -1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295e:	605a      	str	r2, [r3, #4]
	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_isatty>:

int _isatty(int file)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
	return 1;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
	return 0;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f009 fed0 	bl	800c774 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20020000 	.word	0x20020000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	20000214 	.word	0x20000214
 8002a08:	20005510 	.word	0x20005510

08002a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <DATASTREAM_Init>:


/* ----------------- Functions definition --------------------- */

// Setting up streaming
DATASTREAM_StatusTypeDef DATASTREAM_Init(DATASTREAM_HandleTypeDef* hstream){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new stream
	if( glbl_idx < MAX_STREAMS ){
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <DATASTREAM_Init+0x9c>)
 8002a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	dc2e      	bgt.n	8002aa0 <DATASTREAM_Init+0x70>

		// Realloc array of handles pointers
		hdatastream= (DATASTREAM_HandleTypeDef**)realloc(hdatastream, glbl_idx*sizeof(DATASTREAM_HandleTypeDef*));
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <DATASTREAM_Init+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <DATASTREAM_Init+0x9c>)
 8002a48:	f992 2000 	ldrsb.w	r2, [r2]
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00a f88b 	bl	800cb6c <realloc>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <DATASTREAM_Init+0xa0>)
 8002a5a:	6013      	str	r3, [r2, #0]

		// Connect current handle with input handle using pointers
		hdatastream[glbl_idx]= hstream;
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <DATASTREAM_Init+0xa0>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <DATASTREAM_Init+0x9c>)
 8002a62:	f993 3000 	ldrsb.w	r3, [r3]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
	else
		// Return failure
		return DATASTREAM_ERROR;

	// Assign handle id and increment global index
	hstream->id= glbl_idx++;
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <DATASTREAM_Init+0x9c>)
 8002a70:	f993 2000 	ldrsb.w	r2, [r3]
 8002a74:	b2d3      	uxtb	r3, r2
 8002a76:	3301      	adds	r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	b259      	sxtb	r1, r3
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <DATASTREAM_Init+0x9c>)
 8002a7e:	7019      	strb	r1, [r3, #0]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	765a      	strb	r2, [r3, #25]

	// Local UART handle
	hstream->huart=              hstream->Init.huart;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60da      	str	r2, [r3, #12]
	// DMA Enable
	hstream->DMA_Rx_Enable=      hstream->Init.DMA_Rx_Enable;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	791a      	ldrb	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	741a      	strb	r2, [r3, #16]

	if( hstream->DMA_Rx_Enable ){
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7c1b      	ldrb	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <DATASTREAM_Init+0x8a>
 8002a9e:	e001      	b.n	8002aa4 <DATASTREAM_Init+0x74>
		return DATASTREAM_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00f      	b.n	8002ac4 <DATASTREAM_Init+0x94>
		// DMA Interrupt Request "id"
		hstream->DMA_Rx_Stream_IRQn= hstream->Init.DMA_Rx_Stream_IRQn;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	615a      	str	r2, [r3, #20]
		// Assign Rx callback
		hstream->huart->RxCpltCallback= DATASTREAM_RxCpltCallback;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <DATASTREAM_Init+0xa4>)
 8002ab2:	651a      	str	r2, [r3, #80]	; 0x50
		// Assign default true value to flag
		hstream->RxCpltFlag= true;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	761a      	strb	r2, [r3, #24]
	}

	// Assign Error callback
	hstream->huart->ErrorCallback=  DATASTREAM_ErrorCallback;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <DATASTREAM_Init+0xa8>)
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

	// Return success
	return DATASTREAM_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000218 	.word	0x20000218
 8002ad0:	20005320 	.word	0x20005320
 8002ad4:	08002cfd 	.word	0x08002cfd
 8002ad8:	08002d5d 	.word	0x08002d5d

08002adc <DATASTREAM_ReceiveDMA>:
	free(hdatastream);
}


// Receive Data in DMA mode, setting a flag when data is received
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA(DATASTREAM_HandleTypeDef* hstream, uint8_t *data, uint32_t data_size){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]

	// If flag is false it means that a previous DMA receive is still hanging. Also
	// if DMA is not enabled return error
	if( !hstream->RxCpltFlag || !hstream->DMA_Rx_Enable )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <DATASTREAM_ReceiveDMA+0x2a>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	7c1b      	ldrb	r3, [r3, #16]
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <DATASTREAM_ReceiveDMA+0x2e>
		return DATASTREAM_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e010      	b.n	8002b2c <DATASTREAM_ReceiveDMA+0x50>

	// Assign false to Rx complete flag
	hstream->RxCpltFlag= false;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	761a      	strb	r2, [r3, #24]

	// Start DMA receiving (if HAL error occurred return failure)
	if( HAL_UART_Receive_DMA(hstream->huart, data, data_size) != HAL_OK )
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	b292      	uxth	r2, r2
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 fc92 	bl	8008444 <HAL_UART_Receive_DMA>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <DATASTREAM_ReceiveDMA+0x4e>
		return DATASTREAM_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <DATASTREAM_ReceiveDMA+0x50>

	// Return success
	return DATASTREAM_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <DATASTREAM_ReceiveDMA_Reset>:


// Function to reset Rx with DMA communication
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA_Reset(DATASTREAM_HandleTypeDef* hstream){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

	// If DMA is not enabled return error
	if( !hstream->DMA_Rx_Enable )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c1b      	ldrb	r3, [r3, #16]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <DATASTREAM_ReceiveDMA_Reset+0x1a>
		return DATASTREAM_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e014      	b.n	8002b78 <DATASTREAM_ReceiveDMA_Reset+0x44>

	// Assign default true to flag
	hstream->RxCpltFlag= true;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	761a      	strb	r2, [r3, #24]

	// Try resetting uart Rx and DMA interrupt
	HAL_NVIC_DisableIRQ(hstream->DMA_Rx_Stream_IRQn);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fdc5 	bl	80056ea <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(hstream->DMA_Rx_Stream_IRQn);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fdb1 	bl	80056ce <HAL_NVIC_EnableIRQ>

	// Set Uart Rx Ready
	hstream->huart->RxState= HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return DATASTREAM_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <DATASTREAM_Print>:


// Do send values into serial, using a Variadic function. This version is for freeRTOS that doesn't support
// printf and sprintf
void DATASTREAM_Print(DATASTREAM_HandleTypeDef* hstream, DATASTREAM_PrintMode mode, int vargn, ...){
 8002b80:	b40c      	push	{r2, r3}
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b094      	sub	sp, #80	; 0x50
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	70fb      	strb	r3, [r7, #3]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 8002b8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38

	// Timeout of ms
	uint32_t timeout= 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(mode){
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	f200 80a6 	bhi.w	8002cec <DATASTREAM_Print+0x16c>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <DATASTREAM_Print+0x28>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002c5f 	.word	0x08002c5f
 8002bac:	08002bb9 	.word	0x08002bb9
 8002bb0:	08002ced 	.word	0x08002ced
 8002bb4:	08002ced 	.word	0x08002ced
		// ------------ Streaming values in csv format --------------------
		// (Using this mode I send N values separated by comma character,
		//  each stream is ended with a newline)
		case float_csv:

			for(int i=0; i<vargn; i++){
 8002bb8:	2300      	movs	r3, #0
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbc:	e03e      	b.n	8002c3c <DATASTREAM_Print+0xbc>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc2:	e008      	b.n	8002bd6 <DATASTREAM_Print+0x56>
					data_buff[k]= '\0';
 8002bc4:	f107 0220 	add.w	r2, r7, #32
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	4413      	add	r3, r2
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd8:	2b0e      	cmp	r3, #14
 8002bda:	d9f3      	bls.n	8002bc4 <DATASTREAM_Print+0x44>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), data_buff, 7);
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	3307      	adds	r3, #7
 8002be0:	f023 0307 	bic.w	r3, r3, #7
 8002be4:	f103 0208 	add.w	r2, r3, #8
 8002be8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fe f819 	bl	8000c28 <__aeabi_d2f>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f107 0320 	add.w	r3, r7, #32
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	4618      	mov	r0, r3
 8002c00:	ee00 2a10 	vmov	s0, r2
 8002c04:	f000 f940 	bl	8002e88 <ftoa>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68d8      	ldr	r0, [r3, #12]
 8002c0c:	f107 0120 	add.w	r1, r7, #32
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	220f      	movs	r2, #15
 8002c14:	f005 fb84 	bl	8008320 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d009      	beq.n	8002c36 <DATASTREAM_Print+0xb6>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68d8      	ldr	r0, [r3, #12]
 8002c26:	232c      	movs	r3, #44	; 0x2c
 8002c28:	773b      	strb	r3, [r7, #28]
 8002c2a:	f107 011c 	add.w	r1, r7, #28
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c30:	2201      	movs	r2, #1
 8002c32:	f005 fb75 	bl	8008320 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	3301      	adds	r3, #1
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbbc      	blt.n	8002bbe <DATASTREAM_Print+0x3e>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68d8      	ldr	r0, [r3, #12]
 8002c48:	230a      	movs	r3, #10
 8002c4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002c4e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c56:	2201      	movs	r2, #1
 8002c58:	f005 fb62 	bl	8008320 <HAL_UART_Transmit>

			break;
 8002c5c:	e047      	b.n	8002cee <DATASTREAM_Print+0x16e>

		case int_csv:

			for(int i=0; i<vargn; i++){
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
 8002c62:	e032      	b.n	8002cca <DATASTREAM_Print+0x14a>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
 8002c68:	e008      	b.n	8002c7c <DATASTREAM_Print+0xfc>
					data_buff[k]= '\0';
 8002c6a:	f107 020c 	add.w	r2, r7, #12
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c70:	4413      	add	r3, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	3301      	adds	r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	2b0e      	cmp	r3, #14
 8002c80:	d9f3      	bls.n	8002c6a <DATASTREAM_Print+0xea>

				// Float to Array!
				itostr(va_arg(vargp, int), data_buff, 0);
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 010c 	add.w	r1, r7, #12
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f89d 	bl	8002dd0 <itostr>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68d8      	ldr	r0, [r3, #12]
 8002c9a:	f107 010c 	add.w	r1, r7, #12
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	f005 fb3d 	bl	8008320 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d009      	beq.n	8002cc4 <DATASTREAM_Print+0x144>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68d8      	ldr	r0, [r3, #12]
 8002cb4:	232c      	movs	r3, #44	; 0x2c
 8002cb6:	723b      	strb	r3, [r7, #8]
 8002cb8:	f107 0108 	add.w	r1, r7, #8
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f005 fb2e 	bl	8008320 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dbc8      	blt.n	8002c64 <DATASTREAM_Print+0xe4>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002cdc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f005 fb1b 	bl	8008320 <HAL_UART_Transmit>

			break;
 8002cea:	e000      	b.n	8002cee <DATASTREAM_Print+0x16e>

		case int_binary:
			break;

		default:
			break;
 8002cec:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 8002cee:	bf00      	nop
 8002cf0:	3750      	adds	r7, #80	; 0x50
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cf8:	b002      	add	sp, #8
 8002cfa:	4770      	bx	lr

08002cfc <DATASTREAM_RxCpltCallback>:


// --- Rx Callback --- //

void DATASTREAM_RxCpltCallback(UART_HandleTypeDef *huart){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

	// Checking which stream caused the callback, then assign true value to Rx complete flag
	for(int i=0; i<glbl_idx; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e015      	b.n	8002d36 <DATASTREAM_RxCpltCallback+0x3a>
		if(hdatastream[i]->huart == huart){
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <DATASTREAM_RxCpltCallback+0x58>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d108      	bne.n	8002d30 <DATASTREAM_RxCpltCallback+0x34>
			hdatastream[i]->RxCpltFlag= true;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <DATASTREAM_RxCpltCallback+0x58>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	761a      	strb	r2, [r3, #24]
			break;
 8002d2e:	e00a      	b.n	8002d46 <DATASTREAM_RxCpltCallback+0x4a>
	for(int i=0; i<glbl_idx; i++)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <DATASTREAM_RxCpltCallback+0x5c>)
 8002d38:	f993 3000 	ldrsb.w	r3, [r3]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4293      	cmp	r3, r2
 8002d42:	dbe2      	blt.n	8002d0a <DATASTREAM_RxCpltCallback+0xe>
		}

}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20005320 	.word	0x20005320
 8002d58:	20000218 	.word	0x20000218

08002d5c <DATASTREAM_ErrorCallback>:


// --- Error callback --- //

void DATASTREAM_ErrorCallback(UART_HandleTypeDef *huart){
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	__NOP();
 8002d64:	bf00      	nop
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002d86:	e018      	b.n	8002dba <reverse+0x48>
        temp = str[i];
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	441a      	add	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	7812      	ldrb	r2, [r2, #0]
 8002da0:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
        i++;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
        j--;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	dbe2      	blt.n	8002d88 <reverse+0x16>
    }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <itostr>:

int itostr(int x, char str[], int d){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    int neg= 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da23      	bge.n	8002e32 <itostr+0x62>
    	x= -x;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	425b      	negs	r3, r3
 8002dee:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 8002df4:	e01d      	b.n	8002e32 <itostr+0x62>
        str[i++] = (x % 10) + '0';
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <itostr+0xb4>)
 8002dfa:	fb83 1302 	smull	r1, r3, r3, r2
 8002dfe:	1099      	asrs	r1, r3, #2
 8002e00:	17d3      	asrs	r3, r2, #31
 8002e02:	1ac9      	subs	r1, r1, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	1ad1      	subs	r1, r2, r3
 8002e0e:	b2ca      	uxtb	r2, r1
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1c59      	adds	r1, r3, #1
 8002e14:	6179      	str	r1, [r7, #20]
 8002e16:	4619      	mov	r1, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3230      	adds	r2, #48	; 0x30
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <itostr+0xb4>)
 8002e26:	fb82 1203 	smull	r1, r2, r2, r3
 8002e2a:	1092      	asrs	r2, r2, #2
 8002e2c:	17db      	asrs	r3, r3, #31
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1de      	bne.n	8002df6 <itostr+0x26>
    }

    while (i < d)
 8002e38:	e007      	b.n	8002e4a <itostr+0x7a>
        str[i++] = '0';
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	617a      	str	r2, [r7, #20]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4413      	add	r3, r2
 8002e46:	2230      	movs	r2, #48	; 0x30
 8002e48:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbf3      	blt.n	8002e3a <itostr+0x6a>

    if(neg)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <itostr+0x98>
    	str[i++]= '-';
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	617a      	str	r2, [r7, #20]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4413      	add	r3, r2
 8002e64:	222d      	movs	r2, #45	; 0x2d
 8002e66:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	f7ff ff81 	bl	8002d72 <reverse>

    str[i] = '\0';
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]

    return i;
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	66666667 	.word	0x66666667

08002e88 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e92:	60b8      	str	r0, [r7, #8]
 8002e94:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9e:	ee17 3a90 	vmov	r3, s15
 8002ea2:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 8002ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d50d      	bpl.n	8002ece <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	eef1 7a67 	vneg.f32	s15, s15
 8002ec8:	edc7 7a07 	vstr	s15, [r7, #28]
 8002ecc:	e00a      	b.n	8002ee4 <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee0:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 8002ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	d50c      	bpl.n	8002f10 <ftoa+0x88>
 8002ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	dd05      	ble.n	8002f10 <ftoa+0x88>
    	res[0]= '0';
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2230      	movs	r2, #48	; 0x30
 8002f08:	701a      	strb	r2, [r3, #0]
    	i= 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e01f      	b.n	8002f50 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 8002f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d512      	bpl.n	8002f44 <ftoa+0xbc>
 8002f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd09      	ble.n	8002f44 <ftoa+0xbc>
    	res[0]= '-';
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	222d      	movs	r2, #45	; 0x2d
 8002f34:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	2230      	movs	r2, #48	; 0x30
 8002f3c:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e005      	b.n	8002f50 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f7ff ff41 	bl	8002dd0 <itostr>
 8002f4e:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d030      	beq.n	8002fb8 <ftoa+0x130>
        res[i] = '.';
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	222e      	movs	r2, #46	; 0x2e
 8002f5e:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002f60:	69f8      	ldr	r0, [r7, #28]
 8002f62:	f7fd fb11 	bl	8000588 <__aeabi_f2d>
 8002f66:	4604      	mov	r4, r0
 8002f68:	460d      	mov	r5, r1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fafa 	bl	8000564 <__aeabi_i2d>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b11 	vmov	d1, r2, r3
 8002f78:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002fc0 <ftoa+0x138>
 8002f7c:	f00c fbec 	bl	800f758 <pow>
 8002f80:	ec53 2b10 	vmov	r2, r3, d0
 8002f84:	4620      	mov	r0, r4
 8002f86:	4629      	mov	r1, r5
 8002f88:	f7fd fb56 	bl	8000638 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd fe48 	bl	8000c28 <__aeabi_d2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8002f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4413      	add	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	ee17 0a90 	vmov	r0, s15
 8002fb4:	f7ff ff0c 	bl	8002dd0 <itostr>
    }
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	40240000 	.word	0x40240000

08002fc8 <DIFFDRIVE_Init>:
#endif

/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002fd0:	4a83      	ldr	r2, [pc, #524]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 8002fd6:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002fde:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002fe0:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b7e      	ldr	r3, [pc, #504]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8002ffc:	4b78      	ldr	r3, [pc, #480]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003006:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 800300a:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003014:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003022:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800302c:	e273      	b.n	8003516 <DIFFDRIVE_Init+0x54e>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003036:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800303a:	2068      	movs	r0, #104	; 0x68
 800303c:	fb00 f202 	mul.w	r2, r0, r2
 8003040:	6a38      	ldr	r0, [r7, #32]
 8003042:	4402      	add	r2, r0
 8003044:	3334      	adds	r3, #52	; 0x34
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	889b      	ldrh	r3, [r3, #4]
 800304c:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 800304e:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800305a:	2068      	movs	r0, #104	; 0x68
 800305c:	fb00 f303 	mul.w	r3, r0, r3
 8003060:	6a38      	ldr	r0, [r7, #32]
 8003062:	4403      	add	r3, r0
 8003064:	3138      	adds	r1, #56	; 0x38
 8003066:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800306a:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 800306c:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003078:	2068      	movs	r0, #104	; 0x68
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	6a38      	ldr	r0, [r7, #32]
 8003080:	4403      	add	r3, r0
 8003082:	311e      	adds	r1, #30
 8003084:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003088:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003096:	2068      	movs	r0, #104	; 0x68
 8003098:	fb00 f303 	mul.w	r3, r0, r3
 800309c:	6a38      	ldr	r0, [r7, #32]
 800309e:	4403      	add	r3, r0
 80030a0:	3120      	adds	r1, #32
 80030a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80030a6:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030b4:	2068      	movs	r0, #104	; 0x68
 80030b6:	fb00 f202 	mul.w	r2, r0, r2
 80030ba:	6a38      	ldr	r0, [r7, #32]
 80030bc:	4402      	add	r2, r0
 80030be:	3338      	adds	r3, #56	; 0x38
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 80030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030cc:	2268      	movs	r2, #104	; 0x68
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	4413      	add	r3, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 ff02 	bl	8004ee0 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 80030dc:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e8:	2068      	movs	r0, #104	; 0x68
 80030ea:	fb00 f303 	mul.w	r3, r0, r3
 80030ee:	6a38      	ldr	r0, [r7, #32]
 80030f0:	4403      	add	r3, r0
 80030f2:	3222      	adds	r2, #34	; 0x22
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	440a      	add	r2, r1
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003108:	2068      	movs	r0, #104	; 0x68
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	6a38      	ldr	r0, [r7, #32]
 8003110:	4403      	add	r3, r0
 8003112:	3224      	adds	r2, #36	; 0x24
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	440a      	add	r2, r1
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 800311c:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003128:	2068      	movs	r0, #104	; 0x68
 800312a:	fb00 f303 	mul.w	r3, r0, r3
 800312e:	6a38      	ldr	r0, [r7, #32]
 8003130:	4403      	add	r3, r0
 8003132:	3226      	adds	r2, #38	; 0x26
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	440a      	add	r2, r1
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003144:	2168      	movs	r1, #104	; 0x68
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	440b      	add	r3, r1
 800314e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 8003154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003158:	2268      	movs	r2, #104	; 0x68
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	4413      	add	r3, r2
 8003162:	3334      	adds	r3, #52	; 0x34
 8003164:	4618      	mov	r0, r3
 8003166:	f002 f862 	bl	800522e <PID_Init>

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800317a:	3208      	adds	r2, #8
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4402      	add	r2, r0
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	202c      	movs	r0, #44	; 0x2c
 8003184:	fb00 f303 	mul.w	r3, r0, r3
 8003188:	440b      	add	r3, r1
 800318a:	33c0      	adds	r3, #192	; 0xc0
 800318c:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800319e:	320a      	adds	r2, #10
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4402      	add	r2, r0
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	202c      	movs	r0, #44	; 0x2c
 80031a8:	fb00 f303 	mul.w	r3, r0, r3
 80031ac:	440b      	add	r3, r1
 80031ae:	33c4      	adds	r3, #196	; 0xc4
 80031b0:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <DIFFDRIVE_Init+0x218>)
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c2:	320c      	adds	r2, #12
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	4402      	add	r2, r0
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	202c      	movs	r0, #44	; 0x2c
 80031cc:	fb00 f303 	mul.w	r3, r0, r3
 80031d0:	440b      	add	r3, r1
 80031d2:	33c8      	adds	r3, #200	; 0xc8
 80031d4:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031dc:	e05c      	b.n	8003298 <DIFFDRIVE_Init+0x2d0>
 80031de:	bf00      	nop
 80031e0:	200054b4 	.word	0x200054b4
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 80031e4:	4bab      	ldr	r3, [pc, #684]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80031ec:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80031f0:	4aa8      	ldr	r2, [pc, #672]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80031f2:	6811      	ldr	r1, [r2, #0]
 80031f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031f8:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 80031fc:	006d      	lsls	r5, r5, #1
 80031fe:	4428      	add	r0, r5
 8003200:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	4423      	add	r3, r4
 8003210:	332c      	adds	r3, #44	; 0x2c
 8003212:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 8003216:	4b9f      	ldr	r3, [pc, #636]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800321e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003222:	4a9c      	ldr	r2, [pc, #624]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003224:	6811      	ldr	r1, [r2, #0]
 8003226:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800322a:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 800322e:	006d      	lsls	r5, r5, #1
 8003230:	4428      	add	r0, r5
 8003232:	3004      	adds	r0, #4
 8003234:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	4423      	add	r3, r4
 8003244:	332e      	adds	r3, #46	; 0x2e
 8003246:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003252:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	4403      	add	r3, r0
 8003262:	332c      	adds	r3, #44	; 0x2c
 8003264:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003268:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003270:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	4403      	add	r3, r0
 8003280:	332e      	adds	r3, #46	; 0x2e
 8003282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003286:	4619      	mov	r1, r3
 8003288:	4620      	mov	r0, r4
 800328a:	f003 fe85 	bl	8006f98 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 800328e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003292:	3301      	adds	r3, #1
 8003294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800329c:	2b01      	cmp	r3, #1
 800329e:	d9a1      	bls.n	80031e4 <DIFFDRIVE_Init+0x21c>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	33c0      	adds	r3, #192	; 0xc0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 80032b6:	4b77      	ldr	r3, [pc, #476]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	33c8      	adds	r3, #200	; 0xc8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 80032cc:	4b71      	ldr	r3, [pc, #452]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	33c4      	adds	r3, #196	; 0xc4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	33b0      	adds	r3, #176	; 0xb0
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003302:	edd7 7a04 	vldr	s15, [r7, #16]
 8003306:	ee67 6a27 	vmul.f32	s13, s14, s15
 800330a:	ed97 7a05 	vldr	s14, [r7, #20]
 800330e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331e:	ee17 0a90 	vmov	r0, s15
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	33cc      	adds	r3, #204	; 0xcc
 800332c:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	33b0      	adds	r3, #176	; 0xb0
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800334e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003352:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003356:	ed97 7a05 	vldr	s14, [r7, #20]
 800335a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335e:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800336a:	ee17 0a90 	vmov	r0, s15
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	33d0      	adds	r3, #208	; 0xd0
 8003378:	6018      	str	r0, [r3, #0]

		// Encoder Sensors
		hdiffdrv->encoder[side].htim=               hdiffdrv->Init.encoder_htim[side];
 800337a:	4b46      	ldr	r3, [pc, #280]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003382:	4a44      	ldr	r2, [pc, #272]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003384:	6810      	ldr	r0, [r2, #0]
 8003386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800338a:	310e      	adds	r1, #14
 800338c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4403      	add	r3, r0
 800339a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800339e:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].tim_channel=        hdiffdrv->Init.encoder_tim_channel[side];
 80033a0:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80033a8:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033aa:	6810      	ldr	r0, [r2, #0]
 80033ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033b0:	3110      	adds	r1, #16
 80033b2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4403      	add	r3, r0
 80033c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80033c4:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution=         hdiffdrv->Init.encoder_resolution[side];
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ce:	4a31      	ldr	r2, [pc, #196]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033d0:	6810      	ldr	r0, [r2, #0]
 80033d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033d6:	3318      	adds	r3, #24
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3304      	adds	r3, #4
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4403      	add	r3, r0
 80033ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80033ee:	6019      	str	r1, [r3, #0]

		// AutoReloadRegister bit resolution
		hdiffdrv->encoder[side].tim_arr_resolution= hdiffdrv->Init.encoder_tim_arr_resolution[side];
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 80033fa:	6811      	ldr	r1, [r2, #0]
 80033fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003400:	4403      	add	r3, r0
 8003402:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003414:	4602      	mov	r2, r0
 8003416:	701a      	strb	r2, [r3, #0]

		// Setting up encoders' timers
		__HAL_TIM_SET_PRESCALER(hdiffdrv->encoder[side].htim, 0);
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	; 0x28

		// Set max autoreload value
		if( hdiffdrv->encoder[side].tim_arr_resolution == 32 )
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	440b      	add	r3, r1
 8003448:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b20      	cmp	r3, #32
 8003450:	d122      	bne.n	8003498 <DIFFDRIVE_Init+0x4d0>
			// 32 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffffffu);
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <DIFFDRIVE_Init+0x4cc>)
 8003474:	6819      	ldr	r1, [r3, #0]
 8003476:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	e021      	b.n	80034d6 <DIFFDRIVE_Init+0x50e>
 8003492:	bf00      	nop
 8003494:	200054b4 	.word	0x200054b4
		else
			// Default 16 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffu);
 8003498:	4bb9      	ldr	r3, [pc, #740]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b8:	4bb1      	ldr	r3, [pc, #708]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d4:	60da      	str	r2, [r3, #12]

		// Starting Encoder Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].tim_channel);
 80034d6:	4baa      	ldr	r3, [pc, #680]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	4ba4      	ldr	r3, [pc, #656]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4619      	mov	r1, r3
 8003508:	f003 fec2 	bl	8007290 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003510:	3301      	adds	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351a:	2b01      	cmp	r3, #1
 800351c:	f67f ad87 	bls.w	800302e <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   =  0;
 8003520:	4b97      	ldr	r3, [pc, #604]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hdiffdrv->state.pose.y_a   =  0;
 800352c:	4b94      	ldr	r3, [pc, #592]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	hdiffdrv->state.pose.theta =  0;
 8003538:	4b91      	ldr	r3, [pc, #580]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 8003544:	4b8e      	ldr	r3, [pc, #568]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800354c:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8003554:	4b8a      	ldr	r3, [pc, #552]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800355c:	4a88      	ldr	r2, [pc, #544]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800355e:	6814      	ldr	r4, [r2, #0]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	4618      	mov	r0, r3
 8003564:	f009 f8fe 	bl	800c764 <calloc>
 8003568:	4603      	mov	r3, r0
 800356a:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 800356e:	4b84      	ldr	r3, [pc, #528]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8003576:	4a82      	ldr	r2, [pc, #520]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003578:	6814      	ldr	r4, [r2, #0]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	4618      	mov	r0, r3
 800357e:	f009 f8f1 	bl	800c764 <calloc>
 8003582:	4603      	mov	r3, r0
 8003584:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

	// Initializing time index
	hdiffdrv->history.index= 0;
 8003588:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	hdiffdrv->history.sample_cnt= 0;
 8003592:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <DIFFDRIVE_Init+0x7b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	33a4      	adds	r3, #164	; 0xa4
 80035a2:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a76      	ldr	r2, [pc, #472]	; (8003784 <DIFFDRIVE_Init+0x7bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d017      	beq.n	80035e0 <DIFFDRIVE_Init+0x618>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a74      	ldr	r2, [pc, #464]	; (8003788 <DIFFDRIVE_Init+0x7c0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d011      	beq.n	80035e0 <DIFFDRIVE_Init+0x618>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a72      	ldr	r2, [pc, #456]	; (800378c <DIFFDRIVE_Init+0x7c4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <DIFFDRIVE_Init+0x618>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <DIFFDRIVE_Init+0x7c8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d005      	beq.n	80035e0 <DIFFDRIVE_Init+0x618>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <DIFFDRIVE_Init+0x7cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d11b      	bne.n	8003618 <DIFFDRIVE_Init+0x650>
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <DIFFDRIVE_Init+0x7d0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <DIFFDRIVE_Init+0x63a>
 80035ec:	f002 fee6 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ffa2 	bl	8000544 <__aeabi_ui2d>
 8003600:	e025      	b.n	800364e <DIFFDRIVE_Init+0x686>
 8003602:	f002 fedb 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 8003606:	4602      	mov	r2, r0
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ff97 	bl	8000544 <__aeabi_ui2d>
 8003616:	e01a      	b.n	800364e <DIFFDRIVE_Init+0x686>
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <DIFFDRIVE_Init+0x7d0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <DIFFDRIVE_Init+0x672>
 8003624:	f002 feb6 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8003628:	4602      	mov	r2, r0
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ff86 	bl	8000544 <__aeabi_ui2d>
 8003638:	e009      	b.n	800364e <DIFFDRIVE_Init+0x686>
 800363a:	f002 feab 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800363e:	4602      	mov	r2, r0
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ff7b 	bl	8000544 <__aeabi_ui2d>
 800364e:	a34a      	add	r3, pc, #296	; (adr r3, 8003778 <DIFFDRIVE_Init+0x7b0>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fd f91a 	bl	800088c <__aeabi_ddiv>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	4b4d      	ldr	r3, [pc, #308]	; (800379c <DIFFDRIVE_Init+0x7d4>)
 8003666:	f7fc fe2f 	bl	80002c8 <__aeabi_dsub>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f7fd fab9 	bl	8000be8 <__aeabi_d2uiz>
 8003676:	4603      	mov	r3, r0
 8003678:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a40      	ldr	r2, [pc, #256]	; (8003784 <DIFFDRIVE_Init+0x7bc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d017      	beq.n	80036b6 <DIFFDRIVE_Init+0x6ee>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <DIFFDRIVE_Init+0x7c0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d011      	beq.n	80036b6 <DIFFDRIVE_Init+0x6ee>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <DIFFDRIVE_Init+0x7c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <DIFFDRIVE_Init+0x6ee>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <DIFFDRIVE_Init+0x7c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d005      	beq.n	80036b6 <DIFFDRIVE_Init+0x6ee>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <DIFFDRIVE_Init+0x7cc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d115      	bne.n	80036e2 <DIFFDRIVE_Init+0x71a>
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <DIFFDRIVE_Init+0x7d0>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <DIFFDRIVE_Init+0x708>
 80036c2:	f002 fe7b 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 80036c6:	ee07 0a90 	vmov	s15, r0
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	e01d      	b.n	800370c <DIFFDRIVE_Init+0x744>
 80036d0:	f002 fe74 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 80036d4:	4603      	mov	r3, r0
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	e014      	b.n	800370c <DIFFDRIVE_Init+0x744>
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <DIFFDRIVE_Init+0x7d0>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <DIFFDRIVE_Init+0x734>
 80036ee:	f002 fe51 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 80036f2:	ee07 0a90 	vmov	s15, r0
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	e007      	b.n	800370c <DIFFDRIVE_Init+0x744>
 80036fc:	f002 fe4a 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8003700:	4603      	mov	r3, r0
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370c:	8b7b      	ldrh	r3, [r7, #26]
 800370e:	3301      	adds	r3, #1
 8003710:	ee07 3a10 	vmov	s14, r3
 8003714:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	ed93 7a01 	vldr	s14, [r3, #4]
 800371e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003722:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003732:	ee17 3a90 	vmov	r3, s15
 8003736:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	8b7a      	ldrh	r2, [r7, #26]
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	8b3a      	ldrh	r2, [r7, #24]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	8b3a      	ldrh	r2, [r7, #24]
 8003752:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_PeriodElapsedCallback;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <DIFFDRIVE_Init+0x7d8>)
 800375a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifdef DIFFDRIVE_RTOS_V_
	  /* Creation of diffDrive_semaphore */
	  timing->semaphore_id = osSemaphoreNew(1, 1, &diffDrive_semaphore_attributes);
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <DIFFDRIVE_Init+0x7dc>)
 8003760:	2101      	movs	r1, #1
 8003762:	2001      	movs	r0, #1
 8003764:	f005 fd1e 	bl	80091a4 <osSemaphoreNew>
 8003768:	4602      	mov	r2, r0
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	609a      	str	r2, [r3, #8]
#else
	// Reset timing flag
	timing->flag= false;
#endif

}
 800376e:	bf00      	nop
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bdb0      	pop	{r4, r5, r7, pc}
 8003776:	bf00      	nop
 8003778:	00000000 	.word	0x00000000
 800377c:	412e8480 	.word	0x412e8480
 8003780:	200054b4 	.word	0x200054b4
 8003784:	40010000 	.word	0x40010000
 8003788:	40010400 	.word	0x40010400
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	40023800 	.word	0x40023800
 800379c:	3ff00000 	.word	0x3ff00000
 80037a0:	08004d09 	.word	0x08004d09
 80037a4:	08011694 	.word	0x08011694

080037a8 <DIFFDRIVE_MOTOR_Stop>:
	osSemaphoreDelete(hdiffdrv->timing.semaphore_id);
#endif
}


void DIFFDRIVE_MOTOR_Stop(){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	463b      	mov	r3, r7
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f805 	bl	80037cc <DIFFDRIVE_MOTOR_SetPWMs>

}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 80037d4:	4bb4      	ldr	r3, [pc, #720]	; (8003aa8 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	33b0      	adds	r3, #176	; 0xb0
 80037da:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0c8      	b.n	8003974 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 80037e2:	7ffb      	ldrb	r3, [r7, #31]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	441a      	add	r2, r3
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f107 0120 	add.w	r1, r7, #32
 80037f4:	440b      	add	r3, r1
 80037f6:	3b14      	subs	r3, #20
 80037f8:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	222c      	movs	r2, #44	; 0x2c
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f107 0220 	add.w	r2, r7, #32
 8003812:	4413      	add	r3, r2
 8003814:	3b14      	subs	r3, #20
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	dd09      	ble.n	8003838 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
 8003826:	222c      	movs	r2, #44	; 0x2c
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003836:	e027      	b.n	8003888 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8003838:	7ffb      	ldrb	r3, [r7, #31]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f107 0220 	add.w	r2, r7, #32
 8003840:	4413      	add	r3, r2
 8003842:	3b14      	subs	r3, #20
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	d51a      	bpl.n	8003888 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	222c      	movs	r2, #44	; 0x2c
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4413      	add	r3, r2
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8003864:	7ffb      	ldrb	r3, [r7, #31]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	f107 0220 	add.w	r2, r7, #32
 800386c:	4413      	add	r3, r2
 800386e:	3b14      	subs	r3, #20
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	eef1 7a67 	vneg.f32	s15, s15
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f107 0220 	add.w	r2, r7, #32
 8003880:	4413      	add	r3, r2
 8003882:	3b14      	subs	r3, #20
 8003884:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	222c      	movs	r2, #44	; 0x2c
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4413      	add	r3, r2
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f107 0220 	add.w	r2, r7, #32
 80038aa:	4413      	add	r3, r2
 80038ac:	3b14      	subs	r3, #20
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	222c      	movs	r2, #44	; 0x2c
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4413      	add	r3, r2
 80038ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ce:	ee17 2a90 	vmov	r2, s15
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	222c      	movs	r2, #44	; 0x2c
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	222c      	movs	r2, #44	; 0x2c
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4413      	add	r3, r2
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	7ffb      	ldrb	r3, [r7, #31]
 80038f2:	202c      	movs	r0, #44	; 0x2c
 80038f4:	fb00 f303 	mul.w	r3, r0, r3
 80038f8:	69b8      	ldr	r0, [r7, #24]
 80038fa:	4403      	add	r3, r0
 80038fc:	440a      	add	r2, r1
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8003900:	7ffb      	ldrb	r3, [r7, #31]
 8003902:	222c      	movs	r2, #44	; 0x2c
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390e:	7ffb      	ldrb	r3, [r7, #31]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	440b      	add	r3, r1
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d90e      	bls.n	800393e <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8003920:	7ffb      	ldrb	r3, [r7, #31]
 8003922:	222c      	movs	r2, #44	; 0x2c
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	441a      	add	r2, r3
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	440b      	add	r3, r1
 8003938:	6a12      	ldr	r2, [r2, #32]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
 800393c:	e017      	b.n	800396e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	222c      	movs	r2, #44	; 0x2c
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394c:	7ffb      	ldrb	r3, [r7, #31]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	440b      	add	r3, r1
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	429a      	cmp	r2, r3
 800395c:	d107      	bne.n	800396e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 800395e:	7ffb      	ldrb	r3, [r7, #31]
 8003960:	222c      	movs	r2, #44	; 0x2c
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4413      	add	r3, r2
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800396e:	7ffb      	ldrb	r3, [r7, #31]
 8003970:	3301      	adds	r3, #1
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b01      	cmp	r3, #1
 8003978:	f67f af33 	bls.w	80037e2 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800397c:	2300      	movs	r3, #0
 800397e:	77bb      	strb	r3, [r7, #30]
 8003980:	e14f      	b.n	8003c22 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003982:	7fbb      	ldrb	r3, [r7, #30]
 8003984:	222c      	movs	r2, #44	; 0x2c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4413      	add	r3, r2
 800398e:	7fba      	ldrb	r2, [r7, #30]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f202 	mul.w	r2, r1, r2
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	440a      	add	r2, r1
 800399a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800399e:	2a00      	cmp	r2, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2201      	moveq	r2, #1
 80039a4:	2200      	movne	r2, #0
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	3202      	adds	r2, #2
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d118      	bne.n	80039e4 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 80039b2:	7fbb      	ldrb	r3, [r7, #30]
 80039b4:	222c      	movs	r2, #44	; 0x2c
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4413      	add	r3, r2
 80039be:	7fba      	ldrb	r2, [r7, #30]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f202 	mul.w	r2, r1, r2
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	440a      	add	r2, r1
 80039ca:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2201      	moveq	r2, #1
 80039d4:	2200      	movne	r2, #0
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
 80039e2:	e07b      	b.n	8003adc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 80039e4:	7fbb      	ldrb	r3, [r7, #30]
 80039e6:	222c      	movs	r2, #44	; 0x2c
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	7fba      	ldrb	r2, [r7, #30]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f202 	mul.w	r2, r1, r2
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	440a      	add	r2, r1
 80039fc:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003a00:	2a00      	cmp	r2, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2201      	moveq	r2, #1
 8003a06:	2200      	movne	r2, #0
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	3202      	adds	r2, #2
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d118      	bne.n	8003a46 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003a14:	7fbb      	ldrb	r3, [r7, #30]
 8003a16:	222c      	movs	r2, #44	; 0x2c
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	7fba      	ldrb	r2, [r7, #30]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f202 	mul.w	r2, r1, r2
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003a30:	2a00      	cmp	r2, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2201      	moveq	r2, #1
 8003a36:	2200      	movne	r2, #0
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	6393      	str	r3, [r2, #56]	; 0x38
 8003a44:	e04a      	b.n	8003adc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003a46:	7fbb      	ldrb	r3, [r7, #30]
 8003a48:	222c      	movs	r2, #44	; 0x2c
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	7fba      	ldrb	r2, [r7, #30]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f202 	mul.w	r2, r1, r2
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003a62:	2a00      	cmp	r2, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2201      	moveq	r2, #1
 8003a68:	2200      	movne	r2, #0
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	3202      	adds	r2, #2
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d11a      	bne.n	8003aac <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003a76:	7fbb      	ldrb	r3, [r7, #30]
 8003a78:	222c      	movs	r2, #44	; 0x2c
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4413      	add	r3, r2
 8003a82:	7fba      	ldrb	r2, [r7, #30]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f202 	mul.w	r2, r1, r2
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2201      	moveq	r2, #1
 8003a98:	2200      	movne	r2, #0
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003aa6:	e019      	b.n	8003adc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003aa8:	200054b4 	.word	0x200054b4
 8003aac:	7fbb      	ldrb	r3, [r7, #30]
 8003aae:	222c      	movs	r2, #44	; 0x2c
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	7fba      	ldrb	r2, [r7, #30]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f202 	mul.w	r2, r1, r2
 8003ac0:	69b9      	ldr	r1, [r7, #24]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2201      	moveq	r2, #1
 8003ace:	2200      	movne	r2, #0
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8003adc:	7fbb      	ldrb	r3, [r7, #30]
 8003ade:	222c      	movs	r2, #44	; 0x2c
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	7fba      	ldrb	r2, [r7, #30]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f202 	mul.w	r2, r1, r2
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	440a      	add	r2, r1
 8003af4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003af8:	3202      	adds	r2, #2
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8003b02:	7fbb      	ldrb	r3, [r7, #30]
 8003b04:	222c      	movs	r2, #44	; 0x2c
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	7fbb      	ldrb	r3, [r7, #30]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	440b      	add	r3, r1
 8003b1a:	7fb9      	ldrb	r1, [r7, #30]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f101 	mul.w	r1, r0, r1
 8003b22:	69b8      	ldr	r0, [r7, #24]
 8003b24:	4401      	add	r1, r0
 8003b26:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
 8003b34:	e072      	b.n	8003c1c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003b36:	7fbb      	ldrb	r3, [r7, #30]
 8003b38:	222c      	movs	r2, #44	; 0x2c
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	7fba      	ldrb	r2, [r7, #30]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f202 	mul.w	r2, r1, r2
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003b52:	3202      	adds	r2, #2
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d119      	bne.n	8003b90 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8003b5c:	7fbb      	ldrb	r3, [r7, #30]
 8003b5e:	222c      	movs	r2, #44	; 0x2c
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	7fba      	ldrb	r2, [r7, #30]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f202 	mul.w	r2, r1, r2
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	440a      	add	r2, r1
 8003b74:	7fb9      	ldrb	r1, [r7, #30]
 8003b76:	202c      	movs	r0, #44	; 0x2c
 8003b78:	fb00 f101 	mul.w	r1, r0, r1
 8003b7c:	69b8      	ldr	r0, [r7, #24]
 8003b7e:	4401      	add	r1, r0
 8003b80:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003b84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	6393      	str	r3, [r2, #56]	; 0x38
 8003b8e:	e045      	b.n	8003c1c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
 8003b92:	222c      	movs	r2, #44	; 0x2c
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	7fba      	ldrb	r2, [r7, #30]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f202 	mul.w	r2, r1, r2
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003bac:	3202      	adds	r2, #2
 8003bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d119      	bne.n	8003bea <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8003bb6:	7fbb      	ldrb	r3, [r7, #30]
 8003bb8:	222c      	movs	r2, #44	; 0x2c
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	7fba      	ldrb	r2, [r7, #30]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f202 	mul.w	r2, r1, r2
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	440a      	add	r2, r1
 8003bce:	7fb9      	ldrb	r1, [r7, #30]
 8003bd0:	202c      	movs	r0, #44	; 0x2c
 8003bd2:	fb00 f101 	mul.w	r1, r0, r1
 8003bd6:	69b8      	ldr	r0, [r7, #24]
 8003bd8:	4401      	add	r1, r0
 8003bda:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003bde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003be8:	e018      	b.n	8003c1c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003bea:	7fbb      	ldrb	r3, [r7, #30]
 8003bec:	222c      	movs	r2, #44	; 0x2c
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7fba      	ldrb	r2, [r7, #30]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f202 	mul.w	r2, r1, r2
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	440a      	add	r2, r1
 8003c02:	7fb9      	ldrb	r1, [r7, #30]
 8003c04:	202c      	movs	r0, #44	; 0x2c
 8003c06:	fb00 f101 	mul.w	r1, r0, r1
 8003c0a:	69b8      	ldr	r0, [r7, #24]
 8003c0c:	4401      	add	r1, r0
 8003c0e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003c12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c1c:	7fbb      	ldrb	r3, [r7, #30]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	77bb      	strb	r3, [r7, #30]
 8003c22:	7fbb      	ldrb	r3, [r7, #30]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f67f aeac 	bls.w	8003982 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	3724      	adds	r7, #36	; 0x24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8003c3e:	4b84      	ldr	r3, [pc, #528]	; (8003e50 <DIFFDRIVE_ENCODER_CaptureMeasure+0x218>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c46:	613b      	str	r3, [r7, #16]
	int32_t tmp_32, counter_max_32;
	int16_t tmp_16, counter_max_16;

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
 8003c4c:	e0f3      	b.n	8003e36 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1fe>
		// 32 bit timer
		if( tmpsens[side].tim_arr_resolution == 32 ){
 8003c4e:	7dfa      	ldrb	r2, [r7, #23]
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	7a1b      	ldrb	r3, [r3, #8]
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d170      	bne.n	8003d46 <DIFFDRIVE_ENCODER_CaptureMeasure+0x10e>
			// Counter max int32 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_32= 0x7fffffff-tmpsens[side].resolution;
 8003c64:	7dfa      	ldrb	r2, [r7, #23]
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c78:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003e54 <DIFFDRIVE_ENCODER_CaptureMeasure+0x21c>
 8003c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c84:	ee17 3a90 	vmov	r3, s15
 8003c88:	60bb      	str	r3, [r7, #8]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003c8a:	7dfa      	ldrb	r2, [r7, #23]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	461a      	mov	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1899      	adds	r1, r3, r2
 8003c9a:	7dfa      	ldrb	r2, [r7, #23]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	690a      	ldr	r2, [r1, #16]
 8003cac:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
			// 32 bit integer (signed) to have positive and negative values.
			tmp_32= (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003cae:	7dfa      	ldrb	r2, [r7, #23]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	607b      	str	r3, [r7, #4]

			// If counter reached threshold value return an exception
			if( tmp_32 <= -(int32_t)counter_max_32 || tmp_32 >= (int32_t)counter_max_32  )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	425b      	negs	r3, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	dd03      	ble.n	8003cd8 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa0>
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	db01      	blt.n	8003cdc <DIFFDRIVE_ENCODER_CaptureMeasure+0xa4>
				return DIFFDRIVE_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b1      	b.n	8003e40 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_32*(2*M_PI)/tmpsens[side].resolution;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce6:	ee17 0a90 	vmov	r0, s15
 8003cea:	f7fc fc4d 	bl	8000588 <__aeabi_f2d>
 8003cee:	a356      	add	r3, pc, #344	; (adr r3, 8003e48 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fca0 	bl	8000638 <__aeabi_dmul>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	7dfa      	ldrb	r2, [r7, #23]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fc38 	bl	8000588 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fdb4 	bl	800088c <__aeabi_ddiv>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	7dfa      	ldrb	r2, [r7, #23]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	461a      	mov	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	189c      	adds	r4, r3, r2
 8003d3c:	f7fc ff74 	bl	8000c28 <__aeabi_d2f>
 8003d40:	4603      	mov	r3, r0
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	e074      	b.n	8003e30 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1f8>
		}
		// 16 bit timer
		else{
			// Counter max int16 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_16= 0x7fff-tmpsens[side].resolution;
 8003d46:	7dfa      	ldrb	r2, [r7, #23]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	461a      	mov	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d5a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003e58 <DIFFDRIVE_ENCODER_CaptureMeasure+0x220>
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d66:	ee17 3a90 	vmov	r3, s15
 8003d6a:	81fb      	strh	r3, [r7, #14]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003d6c:	7dfa      	ldrb	r2, [r7, #23]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	461a      	mov	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1899      	adds	r1, r3, r2
 8003d7c:	7dfa      	ldrb	r2, [r7, #23]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	461a      	mov	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	690a      	ldr	r2, [r1, #16]
 8003d8e:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 16 bit unsigned integer so I cast in
			// 16 bit integer (signed) to have positive and negative values.
			tmp_16= (int16_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003d90:	7dfa      	ldrb	r2, [r7, #23]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	81bb      	strh	r3, [r7, #12]

			// If counter reached threshold value return an exception
			if( tmp_16 <= -(int16_t)counter_max_16 || tmp_16 >= (int16_t)counter_max_16  )
 8003da8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003db0:	425b      	negs	r3, r3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	dd05      	ble.n	8003dc2 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18a>
 8003db6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	db01      	blt.n	8003dc6 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18e>
				return DIFFDRIVE_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e03c      	b.n	8003e40 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_16*(2*M_PI)/tmpsens[side].resolution;
 8003dc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd2:	ee17 0a90 	vmov	r0, s15
 8003dd6:	f7fc fbd7 	bl	8000588 <__aeabi_f2d>
 8003dda:	a31b      	add	r3, pc, #108	; (adr r3, 8003e48 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fc2a 	bl	8000638 <__aeabi_dmul>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	7dfa      	ldrb	r2, [r7, #23]
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	461a      	mov	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fbc2 	bl	8000588 <__aeabi_f2d>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4620      	mov	r0, r4
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	f7fc fd3e 	bl	800088c <__aeabi_ddiv>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	7dfa      	ldrb	r2, [r7, #23]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	461a      	mov	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	189c      	adds	r4, r3, r2
 8003e28:	f7fc fefe 	bl	8000c28 <__aeabi_d2f>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	6123      	str	r3, [r4, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	3301      	adds	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f67f af08 	bls.w	8003c4e <DIFFDRIVE_ENCODER_CaptureMeasure+0x16>
		}
	}

	return DIFFDRIVE_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bdb0      	pop	{r4, r5, r7, pc}
 8003e48:	54442d18 	.word	0x54442d18
 8003e4c:	401921fb 	.word	0x401921fb
 8003e50:	200054b4 	.word	0x200054b4
 8003e54:	4f000000 	.word	0x4f000000
 8003e58:	46fffe00 	.word	0x46fffe00

08003e5c <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <DIFFDRIVE_ENCODER_Reset+0x60>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e6a:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	71fb      	strb	r3, [r7, #7]
 8003e70:	e019      	b.n	8003ea6 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 8003e72:	79fa      	ldrb	r2, [r7, #7]
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003e8a:	79fa      	ldrb	r2, [r7, #7]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	461a      	mov	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d9e2      	bls.n	8003e72 <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200054b4 	.word	0x200054b4

08003ec0 <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hdiffdrv->history.Enabled= true;
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200054b4 	.word	0x200054b4

08003ee8 <DIFFDRIVE_HISTORY_Resume>:


void DIFFDRIVE_HISTORY_Resume(void){
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

	// Enable history again
	hdiffdrv->history.Enabled= true;
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <DIFFDRIVE_HISTORY_Resume+0x18>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	200054b4 	.word	0x200054b4

08003f04 <DIFFDRIVE_HISTORY_Suspend>:
	hdiffdrv->history.Enabled= false;

}


void DIFFDRIVE_HISTORY_Suspend(void){
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <DIFFDRIVE_HISTORY_Suspend+0x18>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	200054b4 	.word	0x200054b4

08003f20 <DIFFDRIVE_HISTORY_Update>:


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float v_target, float om_target){
 8003f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f24:	b094      	sub	sp, #80	; 0x50
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f2c:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8003f3a:	4b60      	ldr	r3, [pc, #384]	; (80040bc <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8003f44:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f107 0408 	add.w	r4, r7, #8
 8003f4c:	f503 7502 	add.w	r5, r3, #520	; 0x208
 8003f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float theta;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8003f60:	4b56      	ldr	r3, [pc, #344]	; (80040bc <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Current index (using operator % to enroll k between 0 and max_sample; sample_cnt, instead, is unbounded)
	uint32_t k_curr= tmphist->sample_cnt%tmphist->max_sample;
 8003f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f70:	6892      	ldr	r2, [r2, #8]
 8003f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f76:	fb02 f201 	mul.w	r2, r2, r1
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Update index
	tmphist->index= k_curr;
 8003f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f82:	60da      	str	r2, [r3, #12]

	// Previous index
	uint32_t k_prev;
	if( tmphist->sample_cnt != 0 )
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <DIFFDRIVE_HISTORY_Update+0x82>
		k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f94:	6892      	ldr	r2, [r2, #8]
 8003f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f9a:	fb02 f201 	mul.w	r2, r2, r1
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Update history if is enabled
	if( tmphist->Enabled ){
 8003fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8210 	beq.w	80043cc <DIFFDRIVE_HISTORY_Update+0x4ac>

		/* ------ Target history ------ */

		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003fb2:	e09a      	b.n	80040ea <DIFFDRIVE_HISTORY_Update+0x1ca>

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k_curr].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	6919      	ldr	r1, [r3, #16]
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	242c      	movs	r4, #44	; 0x2c
 8003fc4:	fb04 f303 	mul.w	r3, r4, r3
 8003fc8:	4419      	add	r1, r3
 8003fca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003fce:	2468      	movs	r4, #104	; 0x68
 8003fd0:	fb04 f202 	mul.w	r2, r4, r2
 8003fd4:	4402      	add	r2, r0
 8003fd6:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	601a      	str	r2, [r3, #0]

			// Target wheel values
			tmphist->state_target[k_curr].wheel[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8003fe6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003fea:	2268      	movs	r2, #104	; 0x68
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff2:	441a      	add	r2, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	6919      	ldr	r1, [r3, #16]
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	202c      	movs	r0, #44	; 0x2c
 8003ffc:	fb00 f303 	mul.w	r3, r0, r3
 8004000:	4419      	add	r1, r3
 8004002:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004006:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004008:	3304      	adds	r3, #4
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3304      	adds	r3, #4
 8004010:	601a      	str	r2, [r3, #0]
			if( tmphist->sample_cnt != 0 ){
 8004012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d052      	beq.n	80040c0 <DIFFDRIVE_HISTORY_Update+0x1a0>
				// This is the law: wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	441a      	add	r2, r3
 8004028:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800402c:	3304      	adds	r3, #4
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	ed93 7a00 	vldr	s14, [r3]
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	441a      	add	r2, r3
 8004046:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800404a:	3304      	adds	r3, #4
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	ee37 7a67 	vsub.f32	s14, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 800405a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	441a      	add	r2, r3
 8004068:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 800406c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004070:	ee67 7a27 	vmul.f32	s15, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8004074:	3306      	adds	r3, #6
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	edc3 7a00 	vstr	s15, [r3]
				// To have continuity I set also the current variable at same value. Next step it will be update
				tmphist->state_target[k_curr].wheel_speed[side]= tmphist->state_target[k_prev].wheel_speed[side];
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	18d0      	adds	r0, r2, r3
 800408e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004094:	6919      	ldr	r1, [r3, #16]
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	242c      	movs	r4, #44	; 0x2c
 800409a:	fb04 f303 	mul.w	r3, r4, r3
 800409e:	4419      	add	r1, r3
 80040a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040a4:	3206      	adds	r2, #6
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4402      	add	r2, r0
 80040aa:	3204      	adds	r2, #4
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	3306      	adds	r3, #6
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3304      	adds	r3, #4
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e012      	b.n	80040e0 <DIFFDRIVE_HISTORY_Update+0x1c0>
 80040ba:	bf00      	nop
 80040bc:	200054b4 	.word	0x200054b4
			}
			else
				tmphist->state_target[k_curr].wheel_speed[side]= 0;
 80040c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	441a      	add	r2, r3
 80040ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040d2:	3306      	adds	r3, #6
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80040e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040e4:	3301      	adds	r3, #1
 80040e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80040ea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	f67f af60 	bls.w	8003fb4 <DIFFDRIVE_HISTORY_Update+0x94>
		}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 80040f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80c2 	beq.w	8004282 <DIFFDRIVE_HISTORY_Update+0x362>
			theta= tmphist->state_target[k_prev].pose.theta;
 80040fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + v_target*Ts*cos(theta);
 8004110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc fa31 	bl	8000588 <__aeabi_f2d>
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	ed97 7a01 	vldr	s14, [r7, #4]
 800412e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	ee17 0a90 	vmov	r0, s15
 800413a:	f7fc fa25 	bl	8000588 <__aeabi_f2d>
 800413e:	4680      	mov	r8, r0
 8004140:	4689      	mov	r9, r1
 8004142:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004144:	f7fc fa20 	bl	8000588 <__aeabi_f2d>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	ec43 2b10 	vmov	d0, r2, r3
 8004150:	f00b fa5e 	bl	800f610 <cos>
 8004154:	ec53 2b10 	vmov	r2, r3, d0
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f7fc fa6c 	bl	8000638 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc f8b0 	bl	80002cc <__adddf3>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	242c      	movs	r4, #44	; 0x2c
 800417c:	fb04 f303 	mul.w	r3, r4, r3
 8004180:	18d4      	adds	r4, r2, r3
 8004182:	f7fc fd51 	bl	8000c28 <__aeabi_d2f>
 8004186:	4603      	mov	r3, r0
 8004188:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + v_target*Ts*sin(theta);
 800418a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc f9f4 	bl	8000588 <__aeabi_f2d>
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80041a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b0:	ee17 0a90 	vmov	r0, s15
 80041b4:	f7fc f9e8 	bl	8000588 <__aeabi_f2d>
 80041b8:	4680      	mov	r8, r0
 80041ba:	4689      	mov	r9, r1
 80041bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041be:	f7fc f9e3 	bl	8000588 <__aeabi_f2d>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	ec43 2b10 	vmov	d0, r2, r3
 80041ca:	f00b fa71 	bl	800f6b0 <sin>
 80041ce:	ec53 2b10 	vmov	r2, r3, d0
 80041d2:	4640      	mov	r0, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	f7fc fa2f 	bl	8000638 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f7fc f873 	bl	80002cc <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	242c      	movs	r4, #44	; 0x2c
 80041f6:	fb04 f303 	mul.w	r3, r4, r3
 80041fa:	18d4      	adds	r4, r2, r3
 80041fc:	f7fc fd14 	bl	8000c28 <__aeabi_d2f>
 8004200:	4603      	mov	r3, r0
 8004202:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  tmphist->state_target[k_prev].pose.theta + om_target*Ts;
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420a:	212c      	movs	r1, #44	; 0x2c
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	4413      	add	r3, r2
 8004212:	ed93 7a02 	vldr	s14, [r3, #8]
 8004216:	edd7 6a00 	vldr	s13, [r7]
 800421a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800421e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004234:	edc3 7a02 	vstr	s15, [r3, #8]
			// The law is: pose(k)= pose(k-1) + TrajSpeed(k-1)*Ts, because is a discrete time Dynamic System
			// so here I update previous speed
			tmphist->state_target[k_prev].pose.v= v_target;
 8004238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_prev].pose.om= om_target;
 800424a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	611a      	str	r2, [r3, #16]
			// To have continuity I set also the current variable at same value. Next step it will be update
			tmphist->state_target[k_curr].pose.v= v_target;
 800425c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_curr].pose.om= om_target;
 800426e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	611a      	str	r2, [r3, #16]
 8004280:	e065      	b.n	800434e <DIFFDRIVE_HISTORY_Update+0x42e>
		}else{
			theta= 0;
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  v_target*Ts*cos(theta);
 8004288:	ed97 7a01 	vldr	s14, [r7, #4]
 800428c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004294:	ee17 0a90 	vmov	r0, s15
 8004298:	f7fc f976 	bl	8000588 <__aeabi_f2d>
 800429c:	4604      	mov	r4, r0
 800429e:	460d      	mov	r5, r1
 80042a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042a2:	f7fc f971 	bl	8000588 <__aeabi_f2d>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	ec43 2b10 	vmov	d0, r2, r3
 80042ae:	f00b f9af 	bl	800f610 <cos>
 80042b2:	ec53 2b10 	vmov	r2, r3, d0
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fc f9bd 	bl	8000638 <__aeabi_dmul>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	242c      	movs	r4, #44	; 0x2c
 80042ce:	fb04 f303 	mul.w	r3, r4, r3
 80042d2:	18d4      	adds	r4, r2, r3
 80042d4:	f7fc fca8 	bl	8000c28 <__aeabi_d2f>
 80042d8:	4603      	mov	r3, r0
 80042da:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  v_target*Ts*sin(theta);
 80042dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80042e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	ee17 0a90 	vmov	r0, s15
 80042ec:	f7fc f94c 	bl	8000588 <__aeabi_f2d>
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042f6:	f7fc f947 	bl	8000588 <__aeabi_f2d>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	ec43 2b10 	vmov	d0, r2, r3
 8004302:	f00b f9d5 	bl	800f6b0 <sin>
 8004306:	ec53 2b10 	vmov	r2, r3, d0
 800430a:	4620      	mov	r0, r4
 800430c:	4629      	mov	r1, r5
 800430e:	f7fc f993 	bl	8000638 <__aeabi_dmul>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	242c      	movs	r4, #44	; 0x2c
 8004322:	fb04 f303 	mul.w	r3, r4, r3
 8004326:	18d4      	adds	r4, r2, r3
 8004328:	f7fc fc7e 	bl	8000c28 <__aeabi_d2f>
 800432c:	4603      	mov	r3, r0
 800432e:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  om_target*Ts;
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	ed97 7a00 	vldr	s14, [r7]
 8004342:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434a:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		/* ------ State history ------ */

		// State measure, extracted from state register
		tmphist->state_measure[k_curr]= tmpstate;
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	461d      	mov	r5, r3
 800435e:	f107 0408 	add.w	r4, r7, #8
 8004362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800436e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// Assigning PREVIOUS speed, because the law is:
		// wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
		if( tmphist->sample_cnt != 0 ){
 8004372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <DIFFDRIVE_HISTORY_Update+0x4a2>
			tmphist->state_measure[k_prev].wheel_speed[left ]= tmpstate.wheel_speed[left ];
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	61da      	str	r2, [r3, #28]
			tmphist->state_measure[k_prev].wheel_speed[right]= tmpstate.wheel_speed[right];
 800438c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800439c:	621a      	str	r2, [r3, #32]
			// Same for trajectory speed
			tmphist->state_measure[k_prev].pose.v=  tmpstate.pose.v;
 800439e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	60da      	str	r2, [r3, #12]
			tmphist->state_measure[k_prev].pose.om= tmpstate.pose.om;
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	611a      	str	r2, [r3, #16]

		}

		/* Increment sample counter */
		tmphist->sample_cnt++;
 80043c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ca:	605a      	str	r2, [r3, #4]
	}
}
 80043cc:	bf00      	nop
 80043ce:	3750      	adds	r7, #80	; 0x50
 80043d0:	46bd      	mov	sp, r7
 80043d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043d6:	bf00      	nop

080043d8 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0

	// Disabling history recording
	DIFFDRIVE_HISTORY_Suspend();
 80043de:	f7ff fd91 	bl	8003f04 <DIFFDRIVE_HISTORY_Suspend>

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80043ea:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d30e      	bcc.n	8004416 <DIFFDRIVE_HISTORY_Get_Init+0x3e>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	fbb3 f1f2 	udiv	r1, r3, r2
 800440a:	fb02 f201 	mul.w	r2, r2, r1
 800440e:	1a9a      	subs	r2, r3, r2
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8004414:	e002      	b.n	800441c <DIFFDRIVE_HISTORY_Get_Init+0x44>
		tmphist->index= 0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	60da      	str	r2, [r3, #12]
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200054b4 	.word	0x200054b4

08004428 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8004428:	b4b0      	push	{r4, r5, r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <DIFFDRIVE_HISTORY_Get_Sample+0xb4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800443a:	60fb      	str	r3, [r7, #12]

	if( state_measure != NULL )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d012      	beq.n	8004468 <DIFFDRIVE_HISTORY_Get_Sample+0x40>
		*state_measure= tmphist->state_measure[tmphist->index];
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004460:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004464:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if( state_target != NULL )
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d012      	beq.n	8004494 <DIFFDRIVE_HISTORY_Get_Sample+0x6c>
		*state_target = tmphist->state_target[tmphist->index];
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800448a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800448c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004490:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// If history is disabled (it means that I read history after the movement happened) update index.
	// Otherwise just read current sample.
	if( !(tmphist->Enabled) ){
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	f083 0301 	eor.w	r3, r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d017      	beq.n	80044d2 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
 		// Update index for next step reading
		if( tmphist->sample_cnt >= tmphist->max_sample )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d30c      	bcc.n	80044c8 <DIFFDRIVE_HISTORY_Get_Sample+0xa0>
			tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	3301      	adds	r3, #1
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	6892      	ldr	r2, [r2, #8]
 80044b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80044bc:	fb02 f201 	mul.w	r2, r2, r1
 80044c0:	1a9a      	subs	r2, r3, r2
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	60da      	str	r2, [r3, #12]
		else
			tmphist->index++;
	}
}
 80044c6:	e004      	b.n	80044d2 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
			tmphist->index++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	60da      	str	r2, [r3, #12]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bcb0      	pop	{r4, r5, r7}
 80044da:	4770      	bx	lr
 80044dc:	200054b4 	.word	0x200054b4

080044e0 <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0

	// Reset Encoders
	DIFFDRIVE_ENCODER_Reset();
 80044e4:	f7ff fcba 	bl	8003e5c <DIFFDRIVE_ENCODER_Reset>

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80044e8:	f000 f81a 	bl	8004520 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 80044ec:	f7ff fce8 	bl	8003ec0 <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 80044f0:	f000 f8b4 	bl	800465c <DIFFDRIVE_TIMING_Start>

}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <DIFFDRIVE_CONTROL_Resume>:

void DIFFDRIVE_CONTROL_Resume(void){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80044fc:	f000 f810 	bl	8004520 <DIFFDRIVE_CONTROL_Reset>

	// Enabling again history
	DIFFDRIVE_HISTORY_Resume();
 8004500:	f7ff fcf2 	bl	8003ee8 <DIFFDRIVE_HISTORY_Resume>

	// Restart control timing
	DIFFDRIVE_TIMING_Start();
 8004504:	f000 f8aa 	bl	800465c <DIFFDRIVE_TIMING_Start>

}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}

0800450c <DIFFDRIVE_CONTROL_Suspend>:
	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();

}

void DIFFDRIVE_CONTROL_Suspend(void){
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0

	// Disabling history
	DIFFDRIVE_HISTORY_Suspend();
 8004510:	f7ff fcf8 	bl	8003f04 <DIFFDRIVE_HISTORY_Suspend>

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8004514:	f000 f8bc 	bl	8004690 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8004518:	f7ff f946 	bl	80037a8 <DIFFDRIVE_MOTOR_Stop>

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 8004526:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800452e:	613b      	str	r3, [r7, #16]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8004530:	4b49      	ldr	r3, [pc, #292]	; (8004658 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004538:	60fb      	str	r3, [r7, #12]

	// Capture current wheel measure
	DIFFDRIVE_ENCODER_CaptureMeasure();
 800453a:	f7ff fb7d 	bl	8003c38 <DIFFDRIVE_ENCODER_CaptureMeasure>

	// Update diffDrive state (input is {0,0} because at restart i guess input voltage is zero)
	DIFFDRIVE_STATE_Update((float[2]){0,0});
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	463b      	mov	r3, r7
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f8e5 	bl	800471c <DIFFDRIVE_STATE_Update>

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e021      	b.n	800459c <DIFFDRIVE_CONTROL_Reset+0x7c>

		// Reset feed-forward buffer with initial values the same with measured ones
		FEEDFORWARD_Reset(&hctrl[side].fdfrwrd, hdiffdrv->state.wheel[side]);
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2268      	movs	r2, #104	; 0x68
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4b3c      	ldr	r3, [pc, #240]	; (8004658 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	3386      	adds	r3, #134	; 0x86
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	3304      	adds	r3, #4
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	eeb0 0a67 	vmov.f32	s0, s15
 800457c:	4608      	mov	r0, r1
 800457e:	f000 fd1b 	bl	8004fb8 <FEEDFORWARD_Reset>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2268      	movs	r2, #104	; 0x68
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	3334      	adds	r3, #52	; 0x34
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fe7a 	bl	800528a <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	3301      	adds	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d9da      	bls.n	8004558 <DIFFDRIVE_CONTROL_Reset+0x38>
	}

	// If a reset occurred let converge pose target and pose measure. Because it's like that control start again
	// from a new initial point.
	uint32_t k_curr= tmphist->index;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	60bb      	str	r3, [r7, #8]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	75bb      	strb	r3, [r7, #22]
 80045ac:	e01c      	b.n	80045e8 <DIFFDRIVE_CONTROL_Reset+0xc8>
		tmphist->state_target[k_curr].wheel[side]= tmphist->state_measure[k_curr].wheel[side];
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	18d0      	adds	r0, r2, r3
 80045bc:	7dba      	ldrb	r2, [r7, #22]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6919      	ldr	r1, [r3, #16]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	242c      	movs	r4, #44	; 0x2c
 80045c6:	fb04 f303 	mul.w	r3, r4, r3
 80045ca:	4419      	add	r1, r3
 80045cc:	7dbb      	ldrb	r3, [r7, #22]
 80045ce:	3204      	adds	r2, #4
 80045d0:	0092      	lsls	r2, r2, #2
 80045d2:	4402      	add	r2, r0
 80045d4:	3204      	adds	r2, #4
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3304      	adds	r3, #4
 80045e0:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 80045e2:	7dbb      	ldrb	r3, [r7, #22]
 80045e4:	3301      	adds	r3, #1
 80045e6:	75bb      	strb	r3, [r7, #22]
 80045e8:	7dbb      	ldrb	r3, [r7, #22]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d9df      	bls.n	80045ae <DIFFDRIVE_CONTROL_Reset+0x8e>
	tmphist->state_target[k_curr].pose.theta= tmphist->state_measure[k_curr].pose.theta;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6919      	ldr	r1, [r3, #16]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	202c      	movs	r0, #44	; 0x2c
 8004604:	fb00 f303 	mul.w	r3, r0, r3
 8004608:	440b      	add	r3, r1
 800460a:	6892      	ldr	r2, [r2, #8]
 800460c:	609a      	str	r2, [r3, #8]
	tmphist->state_target[k_curr].pose.x_a=   tmphist->state_measure[k_curr].pose.x_a;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6919      	ldr	r1, [r3, #16]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	202c      	movs	r0, #44	; 0x2c
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	440b      	add	r3, r1
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	601a      	str	r2, [r3, #0]
	tmphist->state_target[k_curr].pose.y_a=   tmphist->state_measure[k_curr].pose.y_a;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	441a      	add	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6919      	ldr	r1, [r3, #16]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	202c      	movs	r0, #44	; 0x2c
 8004644:	fb00 f303 	mul.w	r3, r0, r3
 8004648:	440b      	add	r3, r1
 800464a:	6852      	ldr	r2, [r2, #4]
 800464c:	605a      	str	r2, [r3, #4]

}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	bf00      	nop
 8004658:	200054b4 	.word	0x200054b4

0800465c <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_
	// At starting take the only one available token
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, 0);
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <DIFFDRIVE_TIMING_Start+0x30>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f004 fe23 	bl	80092b8 <osSemaphoreAcquire>
 8004672:	6078      	str	r0, [r7, #4]
	(void)stat;
#endif
	// Starting timer in interrupt mode for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <DIFFDRIVE_TIMING_Start+0x30>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800467c:	4618      	mov	r0, r3
 800467e:	f002 fb8f 	bl	8006da0 <HAL_TIM_Base_Start_IT>

}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200054b4 	.word	0x200054b4

08004690 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <DIFFDRIVE_TIMING_Stop+0x24>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800469c:	4618      	mov	r0, r3
 800469e:	f002 fbef 	bl	8006e80 <HAL_TIM_Base_Stop_IT>

#ifdef DIFFDRIVE_RTOS_V_
	// Try to release a token when timing is being stopped (if the token was already released, by callback, it doesn't mind)
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <DIFFDRIVE_TIMING_Stop+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 fe56 	bl	800935c <osSemaphoreRelease>
#endif

}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200054b4 	.word	0x200054b4

080046b8 <DIFFDRIVE_TIMING_Wait>:
#ifdef DIFFDRIVE_DEBUG_TIMING_
	// Variable used to check system timing
	uint32_t tic=0, toc[100], i_=0;
#endif

void DIFFDRIVE_TIMING_Wait(void){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_

	// Wait for an available token (TIMING_Callback function will release the only token when invoked by ISR)
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, osWaitForever);
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <DIFFDRIVE_TIMING_Wait+0x54>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fdf4 	bl	80092b8 <osSemaphoreAcquire>
 80046d0:	6078      	str	r0, [r7, #4]
	(void)stat;

#ifdef DIFFDRIVE_DEBUG_TIMING_

			// Check if control timing is really working
			if( i_ < sizeof(toc)/sizeof(uint32_t) )
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <DIFFDRIVE_TIMING_Wait+0x58>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b63      	cmp	r3, #99	; 0x63
 80046d8:	d80a      	bhi.n	80046f0 <DIFFDRIVE_TIMING_Wait+0x38>
				toc[i_]= osKernelGetTickCount()-tic;
 80046da:	f004 fc5f 	bl	8008f9c <osKernelGetTickCount>
 80046de:	4601      	mov	r1, r0
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <DIFFDRIVE_TIMING_Wait+0x5c>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <DIFFDRIVE_TIMING_Wait+0x58>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1a8a      	subs	r2, r1, r2
 80046ea:	490b      	ldr	r1, [pc, #44]	; (8004718 <DIFFDRIVE_TIMING_Wait+0x60>)
 80046ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i_++;
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <DIFFDRIVE_TIMING_Wait+0x58>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a06      	ldr	r2, [pc, #24]	; (8004710 <DIFFDRIVE_TIMING_Wait+0x58>)
 80046f8:	6013      	str	r3, [r2, #0]

			tic= osKernelGetTickCount();
 80046fa:	f004 fc4f 	bl	8008f9c <osKernelGetTickCount>
 80046fe:	4603      	mov	r3, r0
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <DIFFDRIVE_TIMING_Wait+0x5c>)
 8004702:	6013      	str	r3, [r2, #0]
			tic=  HAL_GetTick();

#endif /* DIFFDRIVE_DEBUG_TIMING_ */
#endif /* DIFFDRIVE_RTOS_V */

}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200054b4 	.word	0x200054b4
 8004710:	20000220 	.word	0x20000220
 8004714:	2000021c 	.word	0x2000021c
 8004718:	20005324 	.word	0x20005324

0800471c <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 800471c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004720:	b08a      	sub	sp, #40	; 0x28
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8004726:	4ba4      	ldr	r3, [pc, #656]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800472e:	623b      	str	r3, [r7, #32]

	float min_volt;
	float max_volt;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004730:	4ba1      	ldr	r3, [pc, #644]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004738:	61fb      	str	r3, [r7, #28]

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004740:	e0ad      	b.n	800489e <DIFFDRIVE_STATE_Update+0x182>
		tmpstate->wheel[side]=        hdiffdrv->encoder[side].current_value;
 8004742:	4b9d      	ldr	r3, [pc, #628]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800474a:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	440b      	add	r3, r1
 8004758:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	6a39      	ldr	r1, [r7, #32]
 8004760:	1d03      	adds	r3, r0, #4
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3304      	adds	r3, #4
 8004768:	601a      	str	r2, [r3, #0]
		tmpstate->wheel_speed[side]= (hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value)/Ts;
 800476a:	4b93      	ldr	r3, [pc, #588]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004772:	4613      	mov	r3, r2
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4413      	add	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	440b      	add	r3, r1
 800477c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004780:	ed93 7a00 	vldr	s14, [r3]
 8004784:	4b8c      	ldr	r3, [pc, #560]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800479a:	edd3 7a00 	vldr	s15, [r3]
 800479e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80047a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	3306      	adds	r3, #6
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	3304      	adds	r3, #4
 80047b8:	edc3 7a00 	vstr	s15, [r3]

		min_volt= hdiffdrv->motor[side].min_voltage;
 80047bc:	4b7e      	ldr	r3, [pc, #504]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	33c8      	adds	r3, #200	; 0xc8
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	617b      	str	r3, [r7, #20]
		max_volt= hdiffdrv->motor[side].max_voltage;
 80047d2:	4b79      	ldr	r3, [pc, #484]	; (80049b8 <DIFFDRIVE_STATE_Update+0x29c>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047da:	212c      	movs	r1, #44	; 0x2c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	33c4      	adds	r3, #196	; 0xc4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	613b      	str	r3, [r7, #16]

		// Input Saturation limits, for "measured" tension-------------------------
		if( input[side] > (max_volt-min_volt))
 80047e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	ed93 7a00 	vldr	s14, [r3]
 80047f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80047fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80047fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	dd0f      	ble.n	800482c <DIFFDRIVE_STATE_Update+0x110>
			tmpstate->input[side]= max_volt-min_volt;
 800480c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004810:	ed97 7a04 	vldr	s14, [r7, #16]
 8004814:	edd7 7a05 	vldr	s15, [r7, #20]
 8004818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	3308      	adds	r3, #8
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	edc3 7a00 	vstr	s15, [r3]
 800482a:	e033      	b.n	8004894 <DIFFDRIVE_STATE_Update+0x178>
		else
		if( input[side] < -(max_volt-min_volt))
 800482c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	edd7 6a04 	vldr	s13, [r7, #16]
 800483e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004842:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004846:	eef1 7a67 	vneg.f32	s15, s15
 800484a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	d511      	bpl.n	8004878 <DIFFDRIVE_STATE_Update+0x15c>
			tmpstate->input[side]= -(max_volt-min_volt);
 8004854:	ed97 7a04 	vldr	s14, [r7, #16]
 8004858:	edd7 7a05 	vldr	s15, [r7, #20]
 800485c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004864:	eef1 7a67 	vneg.f32	s15, s15
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	3308      	adds	r3, #8
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	3304      	adds	r3, #4
 8004872:	edc3 7a00 	vstr	s15, [r3]
 8004876:	e00d      	b.n	8004894 <DIFFDRIVE_STATE_Update+0x178>
		else
			tmpstate->input[side]= input[side];
 8004878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	441a      	add	r2, r3
 8004882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	3308      	adds	r3, #8
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3304      	adds	r3, #4
 8004892:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004898:	3301      	adds	r3, #1
 800489a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800489e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f67f af4d 	bls.w	8004742 <DIFFDRIVE_STATE_Update+0x26>
		// ------------------------------------------------------------------------
	}

	// Compute and update current pose an speed
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v, &om,  tmpstate->wheel_speed);
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f103 021c 	add.w	r2, r3, #28
 80048ae:	f107 0108 	add.w	r1, r7, #8
 80048b2:	f107 030c 	add.w	r3, r7, #12
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f8e0 	bl	8004a7c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>

	theta= tmpstate->pose.theta;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	61bb      	str	r3, [r7, #24]
	tmpstate->pose.x_a   +=  v*Ts*cos(theta);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fb fe5e 	bl	8000588 <__aeabi_f2d>
 80048cc:	4604      	mov	r4, r0
 80048ce:	460d      	mov	r5, r1
 80048d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80048d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	ee17 0a90 	vmov	r0, s15
 80048e0:	f7fb fe52 	bl	8000588 <__aeabi_f2d>
 80048e4:	4680      	mov	r8, r0
 80048e6:	4689      	mov	r9, r1
 80048e8:	69b8      	ldr	r0, [r7, #24]
 80048ea:	f7fb fe4d 	bl	8000588 <__aeabi_f2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	ec43 2b10 	vmov	d0, r2, r3
 80048f6:	f00a fe8b 	bl	800f610 <cos>
 80048fa:	ec53 2b10 	vmov	r2, r3, d0
 80048fe:	4640      	mov	r0, r8
 8004900:	4649      	mov	r1, r9
 8004902:	f7fb fe99 	bl	8000638 <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fb fcdd 	bl	80002cc <__adddf3>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f7fc f985 	bl	8000c28 <__aeabi_d2f>
 800491e:	4602      	mov	r2, r0
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  v*Ts*sin(theta);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fb fe2d 	bl	8000588 <__aeabi_f2d>
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	ed97 7a03 	vldr	s14, [r7, #12]
 8004936:	edd7 7a07 	vldr	s15, [r7, #28]
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	ee17 0a90 	vmov	r0, s15
 8004942:	f7fb fe21 	bl	8000588 <__aeabi_f2d>
 8004946:	4680      	mov	r8, r0
 8004948:	4689      	mov	r9, r1
 800494a:	69b8      	ldr	r0, [r7, #24]
 800494c:	f7fb fe1c 	bl	8000588 <__aeabi_f2d>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	ec43 2b10 	vmov	d0, r2, r3
 8004958:	f00a feaa 	bl	800f6b0 <sin>
 800495c:	ec53 2b10 	vmov	r2, r3, d0
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	f7fb fe68 	bl	8000638 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fcac 	bl	80002cc <__adddf3>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f7fc f954 	bl	8000c28 <__aeabi_d2f>
 8004980:	4602      	mov	r2, r0
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  om*Ts;
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	ed93 7a02 	vldr	s14, [r3, #8]
 800498c:	edd7 6a02 	vldr	s13, [r7, #8]
 8004990:	edd7 7a07 	vldr	s15, [r7, #28]
 8004994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	edc3 7a02 	vstr	s15, [r3, #8]
	tmpstate->pose.v=  v;
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	60da      	str	r2, [r3, #12]
	tmpstate->pose.om= om;
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	611a      	str	r2, [r3, #16]
}
 80049ae:	bf00      	nop
 80049b0:	3728      	adds	r7, #40	; 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049b8:	200054b4 	.word	0x200054b4

080049bc <DIFFDRIVE_TrajectorySpeed2WheelAngle>:


void DIFFDRIVE_TrajectorySpeed2WheelAngle(float* wheel, float v, float om){
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80049c8:	edc7 0a01 	vstr	s1, [r7, #4]

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 80049cc:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049d4:	61fb      	str	r3, [r7, #28]

	float r= hdiffdrv->mech_prmtr.r;
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80049de:	61bb      	str	r3, [r7, #24]
	float l= hdiffdrv->mech_prmtr.l;
 80049e0:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80049e8:	617b      	str	r3, [r7, #20]

	// Wheel target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03d      	beq.n	8004a6c <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xb0>
		wheel[left ] +=  (v/r - l*om/r)*Ts;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	ed93 7a00 	vldr	s14, [r3]
 80049f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80049fe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004a02:	ed97 6a05 	vldr	s12, [r7, #20]
 8004a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0a:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004a0e:	ed97 6a06 	vldr	s12, [r7, #24]
 8004a12:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004a16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  (v/r + l*om/r)*Ts;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	ed93 7a00 	vldr	s14, [r3]
 8004a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a38:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a3c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004a40:	ed97 6a05 	vldr	s12, [r7, #20]
 8004a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a48:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004a4c:	ed97 6a06 	vldr	s12, [r7, #24]
 8004a50:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004a54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3304      	adds	r3, #4
 8004a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a68:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8004a6c:	bf00      	nop
 8004a6e:	3724      	adds	r7, #36	; 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	200054b4 	.word	0x200054b4

08004a7c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>:

void DIFFDRIVE_WheelSpeed2TrajectorySpeed(float* v_p, float* om_p, float* wheel_speed){
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004a88:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004a90:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8004a9a:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars v_p and om_p because are pointers)
	if( v_p != NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x4e>
		*v_p= (wheel_speed[right] + wheel_speed[left])*r/2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	ed93 7a00 	vldr	s14, [r3]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	edd3 7a00 	vldr	s15, [r3]
 8004ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004abc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	edc3 7a00 	vstr	s15, [r3]

	if( om_p != NULL )
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x80>
		*om_p= (wheel_speed[right] - wheel_speed[left])*r/(2*l);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	ed93 7a00 	vldr	s14, [r3]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	edd3 7a00 	vldr	s15, [r3]
 8004ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ae2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	edc3 7a00 	vstr	s15, [r3]

}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	200054b4 	.word	0x200054b4

08004b0c <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b08b      	sub	sp, #44	; 0x2c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004b1c:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8004b1e:	f7ff fdcb 	bl	80046b8 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8004b22:	f7ff f889 	bl	8003c38 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8004b26:	4603      	mov	r3, r0
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	7ffb      	ldrb	r3, [r7, #31]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10a      	bne.n	8004b46 <DIFFDRIVE_CONTROL_WheelStep+0x3a>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8004b30:	f7ff fcf6 	bl	8004520 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b4c:	e06f      	b.n	8004c2e <DIFFDRIVE_CONTROL_WheelStep+0x122>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8004b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b52:	2268      	movs	r2, #104	; 0x68
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	edd3 7a00 	vldr	s15, [r3]
 8004b6c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004b70:	eeb0 0a67 	vmov.f32	s0, s15
 8004b74:	4608      	mov	r0, r1
 8004b76:	f000 fa78 	bl	800506a <FEEDFORWARD_InversionControl>
 8004b7a:	eef0 7a40 	vmov.f32	s15, s0
 8004b7e:	00a3      	lsls	r3, r4, #2
 8004b80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b84:	4413      	add	r3, r2
 8004b86:	3b20      	subs	r3, #32
 8004b88:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004b94:	4613      	mov	r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004baa:	2268      	movs	r2, #104	; 0x68
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3b18      	subs	r3, #24
 8004bc4:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8004bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bca:	2268      	movs	r2, #104	; 0x68
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004be2:	440b      	add	r3, r1
 8004be4:	3b18      	subs	r3, #24
 8004be6:	edd3 7a00 	vldr	s15, [r3]
 8004bea:	edd7 0a06 	vldr	s1, [r7, #24]
 8004bee:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fb67 	bl	80052c6 <PID_Control>
 8004bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8004bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c06:	4413      	add	r3, r2
 8004c08:	3b20      	subs	r3, #32
 8004c0a:	edd3 7a00 	vldr	s15, [r3]
 8004c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3b20      	subs	r3, #32
 8004c20:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d98b      	bls.n	8004b4e <DIFFDRIVE_CONTROL_WheelStep+0x42>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fdc6 	bl	80037cc <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fd69 	bl	800471c <DIFFDRIVE_STATE_Update>

}
 8004c4a:	bf00      	nop
 8004c4c:	372c      	adds	r7, #44	; 0x2c
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200054b4 	.word	0x200054b4

08004c58 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8004c5c:	f7ff fc40 	bl	80044e0 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8004c60:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004c70 <DIFFDRIVE_TrackingStart+0x18>
 8004c64:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004c70 <DIFFDRIVE_TrackingStart+0x18>
 8004c68:	f000 f810 	bl	8004c8c <DIFFDRIVE_TrackingStep>

}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	00000000 	.word	0x00000000

08004c74 <DIFFDRIVE_TrackingResume>:

void DIFFDRIVE_TrackingResume(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0

	// Resume control
	DIFFDRIVE_CONTROL_Resume();
 8004c78:	f7ff fc3e 	bl	80044f8 <DIFFDRIVE_CONTROL_Resume>

}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <DIFFDRIVE_TrackingSuspend>:
	// Stop control
	DIFFDRIVE_CONTROL_Stop();

}

void DIFFDRIVE_TrackingSuspend(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0

	// Suspend control
	DIFFDRIVE_CONTROL_Suspend();
 8004c84:	f7ff fc42 	bl	800450c <DIFFDRIVE_CONTROL_Suspend>

}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <DIFFDRIVE_TrackingStep>:

void DIFFDRIVE_TrackingStep(float v, float om){
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c96:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <DIFFDRIVE_TrackingStep+0x78>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004ca2:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
 8004ca8:	e010      	b.n	8004ccc <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2268      	movs	r2, #104	; 0x68
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	f107 0118 	add.w	r1, r7, #24
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3b10      	subs	r3, #16
 8004cc4:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d9eb      	bls.n	8004caa <DIFFDRIVE_TrackingStep+0x1e>

	// Computing newest target
	DIFFDRIVE_TrajectorySpeed2WheelAngle(newest_target, v, om);
 8004cd2:	f107 0308 	add.w	r3, r7, #8
 8004cd6:	edd7 0a00 	vldr	s1, [r7]
 8004cda:	ed97 0a01 	vldr	s0, [r7, #4]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fe6c 	bl	80049bc <DIFFDRIVE_TrajectorySpeed2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff0f 	bl	8004b0c <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(v, om);
 8004cee:	edd7 0a00 	vldr	s1, [r7]
 8004cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004cf6:	f7ff f913 	bl	8003f20 <DIFFDRIVE_HISTORY_Update>

}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200054b4 	.word	0x200054b4

08004d08 <DIFFDRIVE_TIMING_PeriodElapsedCallback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

#ifdef DIFFDRIVE_RTOS_V_
	// Release the token
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <DIFFDRIVE_TIMING_PeriodElapsedCallback+0x20>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 fb1f 	bl	800935c <osSemaphoreRelease>
#else
	// Enabling timing flag
	hdiffdrv->timing.flag= true;
#endif

}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200054b4 	.word	0x200054b4

08004d2c <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8004d2c:	b5b0      	push	{r4, r5, r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4618      	mov	r0, r3
 8004d42:	f007 fd0f 	bl	800c764 <calloc>
 8004d46:	4603      	mov	r3, r0
 8004d48:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	461d      	mov	r5, r3
 8004d62:	f107 0410 	add.w	r4, r7, #16
 8004d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d6e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bdb0      	pop	{r4, r5, r7, pc}

08004d7a <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e009      	b.n	8004db2 <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	dbf0      	blt.n	8004d9e <MAF_Reset+0x24>
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d03e      	beq.n	8004e5c <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8004df4:	2301      	movs	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e027      	b.n	8004e4a <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	fb93 f1f2 	sdiv	r1, r3, r2
 8004e0a:	fb02 f201 	mul.w	r2, r2, r1
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	ed93 7a00 	vldr	s14, [r3]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e38:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e40:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3301      	adds	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	ddd2      	ble.n	8004dfa <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	e02f      	b.n	8004ebc <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e82:	edd7 7a00 	vldr	s15, [r7]
 8004e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	fb93 f1f2 	sdiv	r1, r3, r2
 8004eca:	fb02 f201 	mul.w	r2, r2, r1
 8004ece:	1a9a      	subs	r2, r3, r2
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]

}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	885a      	ldrh	r2, [r3, #2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	889a      	ldrh	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8a1b      	ldrh	r3, [r3, #16]
 8004f04:	2104      	movs	r1, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f007 fc2c 	bl	800c764 <calloc>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e00e      	b.n	8004f38 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6999      	ldr	r1, [r3, #24]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8a1b      	ldrh	r3, [r3, #16]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	dbea      	blt.n	8004f1a <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8a5b      	ldrh	r3, [r3, #18]
 8004f48:	2104      	movs	r1, #4
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f007 fc0a 	bl	800c764 <calloc>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	e00e      	b.n	8004f7c <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69d9      	ldr	r1, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8a5b      	ldrh	r3, [r3, #18]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4293      	cmp	r3, r2
 8004f86:	dbea      	blt.n	8004f5e <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8a1b      	ldrh	r3, [r3, #16]
 8004f8c:	2104      	movs	r1, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f007 fbe8 	bl	800c764 <calloc>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8a5b      	ldrh	r3, [r3, #18]
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f007 fbde 	bl	800c764 <calloc>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]

}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <FEEDFORWARD_Reset>:
	free(hctrl->target_buffer);
	free(hctrl->input_buffer);

}

void FEEDFORWARD_Reset(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	ed87 0a00 	vstr	s0, [r7]

	// Reset feed-forward target buffer, with all all initial conditon
	FEEDFORWARD_BufferInit(hctrl, target_init);
 8004fc4:	ed97 0a00 	vldr	s0, [r7]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f804 	bl	8004fd6 <FEEDFORWARD_BufferInit>

}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <FEEDFORWARD_BufferInit>:

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004fd6:	b490      	push	{r4, r7}
 8004fd8:	b08a      	sub	sp, #40	; 0x28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	ed87 0a00 	vstr	s0, [r7]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f107 040c 	add.w	r4, r7, #12
 8004fe8:	3310      	adds	r3, #16
 8004fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8004ff0:	89bb      	ldrh	r3, [r7, #12]
 8004ff2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t n_ma= arma.n_ma;
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	843b      	strh	r3, [r7, #32]
	uint16_t  tau= arma.tau;
 8004ff8:	8a3b      	ldrh	r3, [r7, #16]
 8004ffa:	83fb      	strh	r3, [r7, #30]

	// Complete first values with the same initial value
	for(int i= 0; i < n_ar; i++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	e009      	b.n	8005016 <FEEDFORWARD_BufferInit+0x40>
		hctrl->target_buffer[i]= target_init;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
	for(int i= 0; i < n_ar; i++)
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
 8005016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	dbf1      	blt.n	8005002 <FEEDFORWARD_BufferInit+0x2c>

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005024:	1e59      	subs	r1, r3, #1
 8005026:	8bfb      	ldrh	r3, [r7, #30]
 8005028:	1acb      	subs	r3, r1, r3
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	8c3b      	ldrh	r3, [r7, #32]
 800503a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800503e:	3b01      	subs	r3, #1
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504e:	89bb      	ldrh	r3, [r7, #12]
 8005050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005054:	3b01      	subs	r3, #1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005060:	bf00      	nop
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bc90      	pop	{r4, r7}
 8005068:	4770      	bx	lr

0800506a <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 800506a:	b590      	push	{r4, r7, lr}
 800506c:	b08f      	sub	sp, #60	; 0x3c
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f107 040c 	add.w	r4, r7, #12
 8005082:	3310      	adds	r3, #16
 8005084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 800508a:	2300      	movs	r3, #0
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 800508e:	89bb      	ldrh	r3, [r7, #12]
 8005090:	3b01      	subs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	3b01      	subs	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	633b      	str	r3, [r7, #48]	; 0x30
 80050b0:	e019      	b.n	80050e6 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	1acb      	subs	r3, r1, r3
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	ed93 7a00 	vldr	s14, [r3]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80050d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	3301      	adds	r3, #1
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dde1      	ble.n	80050b2 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	e01b      	b.n	800512c <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	69f9      	ldr	r1, [r7, #28]
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	edd3 7a00 	vldr	s15, [r3]
 8005104:	eeb1 7a67 	vneg.f32	s14, s15
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	edd3 7a00 	vldr	s15, [r3]
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800511e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005122:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	3301      	adds	r3, #1
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	dcdf      	bgt.n	80050f4 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	ed93 7a00 	vldr	s14, [r3]
 800513a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800513e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005142:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005152:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f808 	bl	800516a <FEEDFORWARD_BufferUpdate>

	return input;
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	ee07 3a90 	vmov	s15, r3
}
 8005160:	eeb0 0a67 	vmov.f32	s0, s15
 8005164:	373c      	adds	r7, #60	; 0x3c
 8005166:	46bd      	mov	sp, r7
 8005168:	bd90      	pop	{r4, r7, pc}

0800516a <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 800516a:	b490      	push	{r4, r7}
 800516c:	b088      	sub	sp, #32
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f107 0408 	add.w	r4, r7, #8
 8005178:	3310      	adds	r3, #16
 800517a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800517c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	3b01      	subs	r3, #1
 8005188:	89b9      	ldrh	r1, [r7, #12]
 800518a:	1a5b      	subs	r3, r3, r1
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051a0:	3b01      	subs	r3, #1
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b0:	893b      	ldrh	r3, [r7, #8]
 80051b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b6:	3b01      	subs	r3, #1
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	e00f      	b.n	80051e8 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	893b      	ldrh	r3, [r7, #8]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dbea      	blt.n	80051c8 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e00f      	b.n	8005218 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3301      	adds	r3, #1
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a19      	ldr	r1, [r3, #32]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	3b01      	subs	r3, #1
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	429a      	cmp	r2, r3
 8005220:	dbea      	blt.n	80051f8 <FEEDFORWARD_BufferUpdate+0x8e>

}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bc90      	pop	{r4, r7}
 800522c:	4770      	bx	lr

0800522e <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c



}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 80052c6:	b480      	push	{r7}
 80052c8:	b089      	sub	sp, #36	; 0x24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80052d2:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 80052dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80052e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80052e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e8:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80052f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80052fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	ed93 7a08 	vldr	s14, [r3, #32]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005312:	edd7 7a05 	vldr	s15, [r7, #20]
 8005316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800531a:	edd7 7a07 	vldr	s15, [r7, #28]
 800531e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005332:	edd7 6a06 	vldr	s13, [r7, #24]
 8005336:	edd7 7a05 	vldr	s15, [r7, #20]
 800533a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800533e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005342:	ed97 7a07 	vldr	s14, [r7, #28]
 8005346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	ed93 7a07 	vldr	s14, [r3, #28]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	edd3 7a08 	vldr	s15, [r3, #32]
 800535c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536a:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	ee07 3a90 	vmov	s15, r3

}
 8005380:	eeb0 0a67 	vmov.f32	s0, s15
 8005384:	3724      	adds	r7, #36	; 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005394:	480d      	ldr	r0, [pc, #52]	; (80053cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005396:	490e      	ldr	r1, [pc, #56]	; (80053d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800539a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800539c:	e002      	b.n	80053a4 <LoopCopyDataInit>

0800539e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800539e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053a2:	3304      	adds	r3, #4

080053a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053a8:	d3f9      	bcc.n	800539e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053aa:	4a0b      	ldr	r2, [pc, #44]	; (80053d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053ac:	4c0b      	ldr	r4, [pc, #44]	; (80053dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80053ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053b0:	e001      	b.n	80053b6 <LoopFillZerobss>

080053b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053b4:	3204      	adds	r2, #4

080053b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053b8:	d3fb      	bcc.n	80053b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053ba:	f7fd fb27 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053be:	f007 fad5 	bl	800c96c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053c2:	f7fb fe33 	bl	800102c <main>
  bx  lr    
 80053c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053d0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80053d4:	08011d10 	.word	0x08011d10
  ldr r2, =_sbss
 80053d8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80053dc:	2000550c 	.word	0x2000550c

080053e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053e0:	e7fe      	b.n	80053e0 <ADC_IRQHandler>
	...

080053e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053e8:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <HAL_Init+0x40>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0d      	ldr	r2, [pc, #52]	; (8005424 <HAL_Init+0x40>)
 80053ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_Init+0x40>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <HAL_Init+0x40>)
 80053fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005400:	4b08      	ldr	r3, [pc, #32]	; (8005424 <HAL_Init+0x40>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <HAL_Init+0x40>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800540c:	2003      	movs	r0, #3
 800540e:	f000 f937 	bl	8005680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005412:	2000      	movs	r0, #0
 8005414:	f7fd f9a6 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005418:	f7fc ffdc 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023c00 	.word	0x40023c00

08005428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_IncTick+0x20>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_IncTick+0x24>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4413      	add	r3, r2
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <HAL_IncTick+0x24>)
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000000c 	.word	0x2000000c
 800544c:	200054b8 	.word	0x200054b8

08005450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return uwTick;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <HAL_GetTick+0x14>)
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200054b8 	.word	0x200054b8

08005468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005470:	f7ff ffee 	bl	8005450 <HAL_GetTick>
 8005474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005480:	d005      	beq.n	800548e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_Delay+0x44>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800548e:	bf00      	nop
 8005490:	f7ff ffde 	bl	8005450 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d8f7      	bhi.n	8005490 <HAL_Delay+0x28>
  {
  }
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <__NVIC_SetPriorityGrouping+0x44>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054cc:	4013      	ands	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054e2:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <__NVIC_SetPriorityGrouping+0x44>)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	60d3      	str	r3, [r2, #12]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <__NVIC_GetPriorityGrouping+0x18>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 0307 	and.w	r3, r3, #7
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db0b      	blt.n	800553e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	f003 021f 	and.w	r2, r3, #31
 800552c:	4907      	ldr	r1, [pc, #28]	; (800554c <__NVIC_EnableIRQ+0x38>)
 800552e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2001      	movs	r0, #1
 8005536:	fa00 f202 	lsl.w	r2, r0, r2
 800553a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000e100 	.word	0xe000e100

08005550 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800555a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555e:	2b00      	cmp	r3, #0
 8005560:	db12      	blt.n	8005588 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	f003 021f 	and.w	r2, r3, #31
 8005568:	490a      	ldr	r1, [pc, #40]	; (8005594 <__NVIC_DisableIRQ+0x44>)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2001      	movs	r0, #1
 8005572:	fa00 f202 	lsl.w	r2, r0, r2
 8005576:	3320      	adds	r3, #32
 8005578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800557c:	f3bf 8f4f 	dsb	sy
}
 8005580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005582:	f3bf 8f6f 	isb	sy
}
 8005586:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000e100 	.word	0xe000e100

08005598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db0a      	blt.n	80055c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	490c      	ldr	r1, [pc, #48]	; (80055e4 <__NVIC_SetPriority+0x4c>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	440b      	add	r3, r1
 80055bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c0:	e00a      	b.n	80055d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4908      	ldr	r1, [pc, #32]	; (80055e8 <__NVIC_SetPriority+0x50>)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3b04      	subs	r3, #4
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	440b      	add	r3, r1
 80055d6:	761a      	strb	r2, [r3, #24]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000e100 	.word	0xe000e100
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f1c3 0307 	rsb	r3, r3, #7
 8005606:	2b04      	cmp	r3, #4
 8005608:	bf28      	it	cs
 800560a:	2304      	movcs	r3, #4
 800560c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3304      	adds	r3, #4
 8005612:	2b06      	cmp	r3, #6
 8005614:	d902      	bls.n	800561c <NVIC_EncodePriority+0x30>
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3b03      	subs	r3, #3
 800561a:	e000      	b.n	800561e <NVIC_EncodePriority+0x32>
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	401a      	ands	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	43d9      	mvns	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	4313      	orrs	r3, r2
         );
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005658:	f3bf 8f4f 	dsb	sy
}
 800565c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <__NVIC_SystemReset+0x24>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005666:	4904      	ldr	r1, [pc, #16]	; (8005678 <__NVIC_SystemReset+0x24>)
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <__NVIC_SystemReset+0x28>)
 800566a:	4313      	orrs	r3, r2
 800566c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800566e:	f3bf 8f4f 	dsb	sy
}
 8005672:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <__NVIC_SystemReset+0x20>
 8005678:	e000ed00 	.word	0xe000ed00
 800567c:	05fa0004 	.word	0x05fa0004

08005680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff11 	bl	80054b0 <__NVIC_SetPriorityGrouping>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056a8:	f7ff ff26 	bl	80054f8 <__NVIC_GetPriorityGrouping>
 80056ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f7ff ff9a 	bl	80055ec <NVIC_EncodePriority>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff69 	bl	8005598 <__NVIC_SetPriority>
}
 80056c6:	bf00      	nop
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff19 	bl	8005514 <__NVIC_EnableIRQ>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	4603      	mov	r3, r0
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff29 	bl	8005550 <__NVIC_DisableIRQ>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800570a:	f7ff ffa3 	bl	8005654 <__NVIC_SystemReset>
	...

08005710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff fe98 	bl	8005450 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e099      	b.n	8005860 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800574c:	e00f      	b.n	800576e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800574e:	f7ff fe7f 	bl	8005450 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b05      	cmp	r3, #5
 800575a:	d908      	bls.n	800576e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2203      	movs	r2, #3
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e078      	b.n	8005860 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e8      	bne.n	800574e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_DMA_Init+0x158>)
 8005788:	4013      	ands	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800579a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d107      	bne.n	80057d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d117      	bne.n	8005832 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa6f 	bl	8005cf8 <DMA_CheckFifoParam>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2240      	movs	r2, #64	; 0x40
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800582e:	2301      	movs	r3, #1
 8005830:	e016      	b.n	8005860 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa26 	bl	8005c8c <DMA_CalcBaseAndBitshift>
 8005840:	4603      	mov	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	223f      	movs	r2, #63	; 0x3f
 800584a:	409a      	lsls	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	f010803f 	.word	0xf010803f

0800586c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_DMA_Start_IT+0x26>
 800588e:	2302      	movs	r3, #2
 8005890:	e040      	b.n	8005914 <HAL_DMA_Start_IT+0xa8>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d12f      	bne.n	8005906 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f9b8 	bl	8005c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	223f      	movs	r2, #63	; 0x3f
 80058c6:	409a      	lsls	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0216 	orr.w	r2, r2, #22
 80058da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e005      	b.n	8005912 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800590e:	2302      	movs	r3, #2
 8005910:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005928:	4b92      	ldr	r3, [pc, #584]	; (8005b74 <HAL_DMA_IRQHandler+0x258>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a92      	ldr	r2, [pc, #584]	; (8005b78 <HAL_DMA_IRQHandler+0x25c>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	0a9b      	lsrs	r3, r3, #10
 8005934:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	2208      	movs	r2, #8
 8005948:	409a      	lsls	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01a      	beq.n	8005988 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	2208      	movs	r2, #8
 8005976:	409a      	lsls	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	f043 0201 	orr.w	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	2201      	movs	r2, #1
 800598e:	409a      	lsls	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4013      	ands	r3, r2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d012      	beq.n	80059be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	2201      	movs	r2, #1
 80059ac:	409a      	lsls	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f043 0202 	orr.w	r2, r3, #2
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	2204      	movs	r2, #4
 80059c4:	409a      	lsls	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d012      	beq.n	80059f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	2204      	movs	r2, #4
 80059e2:	409a      	lsls	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	2210      	movs	r2, #16
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d043      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03c      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	2210      	movs	r2, #16
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d018      	beq.n	8005a5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d024      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
 8005a4a:	e01f      	b.n	8005a8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01b      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
 8005a5c:	e016      	b.n	8005a8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d107      	bne.n	8005a7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0208 	bic.w	r2, r2, #8
 8005a7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a90:	2220      	movs	r2, #32
 8005a92:	409a      	lsls	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 808e 	beq.w	8005bba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8086 	beq.w	8005bba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d136      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0216 	bic.w	r2, r2, #22
 8005ad4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ae4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x1da>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0208 	bic.w	r2, r2, #8
 8005b04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	223f      	movs	r2, #63	; 0x3f
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d07d      	beq.n	8005c26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
        }
        return;
 8005b32:	e078      	b.n	8005c26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d108      	bne.n	8005b62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d030      	beq.n	8005bba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
 8005b60:	e02b      	b.n	8005bba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d027      	beq.n	8005bba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
 8005b72:	e022      	b.n	8005bba <HAL_DMA_IRQHandler+0x29e>
 8005b74:	20000004 	.word	0x20000004
 8005b78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0210 	bic.w	r2, r2, #16
 8005b98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d032      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d022      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2205      	movs	r2, #5
 8005bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d307      	bcc.n	8005c02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f2      	bne.n	8005be6 <HAL_DMA_IRQHandler+0x2ca>
 8005c00:	e000      	b.n	8005c04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005c02:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
 8005c24:	e000      	b.n	8005c28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005c26:	bf00      	nop
    }
  }
}
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop

08005c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d108      	bne.n	8005c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c6e:	e007      	b.n	8005c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	60da      	str	r2, [r3, #12]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	3b10      	subs	r3, #16
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ca6:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d909      	bls.n	8005cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	659a      	str	r2, [r3, #88]	; 0x58
 8005ccc:	e007      	b.n	8005cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	aaaaaaab 	.word	0xaaaaaaab
 8005cf4:	080116a4 	.word	0x080116a4

08005cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11f      	bne.n	8005d52 <DMA_CheckFifoParam+0x5a>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d856      	bhi.n	8005dc6 <DMA_CheckFifoParam+0xce>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <DMA_CheckFifoParam+0x28>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d43 	.word	0x08005d43
 8005d28:	08005d31 	.word	0x08005d31
 8005d2c:	08005dc7 	.word	0x08005dc7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d046      	beq.n	8005dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d40:	e043      	b.n	8005dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d4a:	d140      	bne.n	8005dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d50:	e03d      	b.n	8005dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5a:	d121      	bne.n	8005da0 <DMA_CheckFifoParam+0xa8>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d837      	bhi.n	8005dd2 <DMA_CheckFifoParam+0xda>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <DMA_CheckFifoParam+0x70>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d7f 	.word	0x08005d7f
 8005d70:	08005d79 	.word	0x08005d79
 8005d74:	08005d91 	.word	0x08005d91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7c:	e030      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d025      	beq.n	8005dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d8e:	e022      	b.n	8005dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d98:	d11f      	bne.n	8005dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d9e:	e01c      	b.n	8005dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d903      	bls.n	8005dae <DMA_CheckFifoParam+0xb6>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d003      	beq.n	8005db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dac:	e018      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
      break;
 8005db2:	e015      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00e      	beq.n	8005dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e00b      	b.n	8005dde <DMA_CheckFifoParam+0xe6>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e00a      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e008      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e006      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dde:	bf00      	nop
    }
  } 
  
  return status; 
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	e165      	b.n	80060d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	f040 8154 	bne.w	80060d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d005      	beq.n	8005e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d130      	bne.n	8005ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 0201 	and.w	r2, r3, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d017      	beq.n	8005ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	2203      	movs	r2, #3
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d123      	bne.n	8005f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	08da      	lsrs	r2, r3, #3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3208      	adds	r2, #8
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	220f      	movs	r2, #15
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	08da      	lsrs	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3208      	adds	r2, #8
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	2203      	movs	r2, #3
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0203 	and.w	r2, r3, #3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80ae 	beq.w	80060d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	4b5d      	ldr	r3, [pc, #372]	; (80060f0 <HAL_GPIO_Init+0x300>)
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <HAL_GPIO_Init+0x300>)
 8005f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f84:	6453      	str	r3, [r2, #68]	; 0x44
 8005f86:	4b5a      	ldr	r3, [pc, #360]	; (80060f0 <HAL_GPIO_Init+0x300>)
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f92:	4a58      	ldr	r2, [pc, #352]	; (80060f4 <HAL_GPIO_Init+0x304>)
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	089b      	lsrs	r3, r3, #2
 8005f98:	3302      	adds	r3, #2
 8005f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	220f      	movs	r2, #15
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <HAL_GPIO_Init+0x308>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d025      	beq.n	800600a <HAL_GPIO_Init+0x21a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <HAL_GPIO_Init+0x30c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01f      	beq.n	8006006 <HAL_GPIO_Init+0x216>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4d      	ldr	r2, [pc, #308]	; (8006100 <HAL_GPIO_Init+0x310>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d019      	beq.n	8006002 <HAL_GPIO_Init+0x212>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <HAL_GPIO_Init+0x314>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_GPIO_Init+0x20e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <HAL_GPIO_Init+0x318>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00d      	beq.n	8005ffa <HAL_GPIO_Init+0x20a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <HAL_GPIO_Init+0x31c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <HAL_GPIO_Init+0x206>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a49      	ldr	r2, [pc, #292]	; (8006110 <HAL_GPIO_Init+0x320>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <HAL_GPIO_Init+0x202>
 8005fee:	2306      	movs	r3, #6
 8005ff0:	e00c      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8005ff2:	2307      	movs	r3, #7
 8005ff4:	e00a      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8005ff6:	2305      	movs	r3, #5
 8005ff8:	e008      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	e006      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8005ffe:	2303      	movs	r3, #3
 8006000:	e004      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8006002:	2302      	movs	r3, #2
 8006004:	e002      	b.n	800600c <HAL_GPIO_Init+0x21c>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_GPIO_Init+0x21c>
 800600a:	2300      	movs	r3, #0
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	f002 0203 	and.w	r2, r2, #3
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	4093      	lsls	r3, r2
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800601c:	4935      	ldr	r1, [pc, #212]	; (80060f4 <HAL_GPIO_Init+0x304>)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	3302      	adds	r3, #2
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800602a:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <HAL_GPIO_Init+0x324>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800604e:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_GPIO_Init+0x324>)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006054:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <HAL_GPIO_Init+0x324>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_GPIO_Init+0x324>)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800607e:	4b25      	ldr	r3, [pc, #148]	; (8006114 <HAL_GPIO_Init+0x324>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060a2:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_GPIO_Init+0x324>)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <HAL_GPIO_Init+0x324>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060cc:	4a11      	ldr	r2, [pc, #68]	; (8006114 <HAL_GPIO_Init+0x324>)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3301      	adds	r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b0f      	cmp	r3, #15
 80060dc:	f67f ae96 	bls.w	8005e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800
 80060f4:	40013800 	.word	0x40013800
 80060f8:	40020000 	.word	0x40020000
 80060fc:	40020400 	.word	0x40020400
 8006100:	40020800 	.word	0x40020800
 8006104:	40020c00 	.word	0x40020c00
 8006108:	40021000 	.word	0x40021000
 800610c:	40021400 	.word	0x40021400
 8006110:	40021800 	.word	0x40021800
 8006114:	40013c00 	.word	0x40013c00

08006118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e001      	b.n	800613a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	807b      	strh	r3, [r7, #2]
 8006154:	4613      	mov	r3, r2
 8006156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006158:	787b      	ldrb	r3, [r7, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006164:	e003      	b.n	800616e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006166:	887b      	ldrh	r3, [r7, #2]
 8006168:	041a      	lsls	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	619a      	str	r2, [r3, #24]
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800618c:	887a      	ldrh	r2, [r7, #2]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4013      	ands	r3, r2
 8006192:	041a      	lsls	r2, r3, #16
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	43d9      	mvns	r1, r3
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	400b      	ands	r3, r1
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	619a      	str	r2, [r3, #24]
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0cc      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061c4:	4b68      	ldr	r3, [pc, #416]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90c      	bls.n	80061ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d2:	4b65      	ldr	r3, [pc, #404]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0b8      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006204:	4b59      	ldr	r3, [pc, #356]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800620e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800621c:	4b53      	ldr	r3, [pc, #332]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a52      	ldr	r2, [pc, #328]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	494d      	ldr	r1, [pc, #308]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d044      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d119      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e07f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800626a:	2b03      	cmp	r3, #3
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e06f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e067      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f023 0203 	bic.w	r2, r3, #3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4934      	ldr	r1, [pc, #208]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	4313      	orrs	r3, r2
 800629e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a0:	f7ff f8d6 	bl	8005450 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	e00a      	b.n	80062be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a8:	f7ff f8d2 	bl	8005450 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e04f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 020c 	and.w	r2, r3, #12
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1eb      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20c      	bcs.n	80062f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b20      	ldr	r3, [pc, #128]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e032      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4916      	ldr	r1, [pc, #88]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	490e      	ldr	r1, [pc, #56]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006336:	f000 f887 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 800633a:	4602      	mov	r2, r0
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	490a      	ldr	r1, [pc, #40]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 8006348:	5ccb      	ldrb	r3, [r1, r3]
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <HAL_RCC_ClockConfig+0x1c8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fc fa04 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40023c00 	.word	0x40023c00
 800636c:	40023800 	.word	0x40023800
 8006370:	0801167c 	.word	0x0801167c
 8006374:	20000004 	.word	0x20000004
 8006378:	20000008 	.word	0x20000008

0800637c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <HAL_RCC_GetHCLKFreq+0x14>)
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000004 	.word	0x20000004

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006398:	f7ff fff0 	bl	800637c <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4903      	ldr	r1, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0801168c 	.word	0x0801168c

080063bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063c0:	f7ff ffdc 	bl	800637c <HAL_RCC_GetHCLKFreq>
 80063c4:	4602      	mov	r2, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	0b5b      	lsrs	r3, r3, #13
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4903      	ldr	r1, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d2:	5ccb      	ldrb	r3, [r1, r3]
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40023800 	.word	0x40023800
 80063e0:	0801168c 	.word	0x0801168c

080063e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	220f      	movs	r2, #15
 80063f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0203 	and.w	r2, r3, #3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <HAL_RCC_GetClockConfig+0x60>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b088      	sub	sp, #32
 800644e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006464:	4bce      	ldr	r3, [pc, #824]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b0c      	cmp	r3, #12
 800646e:	f200 818d 	bhi.w	800678c <HAL_RCC_GetSysClockFreq+0x344>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_RCC_GetSysClockFreq+0x30>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	080064ad 	.word	0x080064ad
 800647c:	0800678d 	.word	0x0800678d
 8006480:	0800678d 	.word	0x0800678d
 8006484:	0800678d 	.word	0x0800678d
 8006488:	080064b3 	.word	0x080064b3
 800648c:	0800678d 	.word	0x0800678d
 8006490:	0800678d 	.word	0x0800678d
 8006494:	0800678d 	.word	0x0800678d
 8006498:	080064b9 	.word	0x080064b9
 800649c:	0800678d 	.word	0x0800678d
 80064a0:	0800678d 	.word	0x0800678d
 80064a4:	0800678d 	.word	0x0800678d
 80064a8:	0800662d 	.word	0x0800662d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064ac:	4bbd      	ldr	r3, [pc, #756]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80064ae:	61bb      	str	r3, [r7, #24]
       break;
 80064b0:	e16f      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064b2:	4bbd      	ldr	r3, [pc, #756]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x360>)
 80064b4:	61bb      	str	r3, [r7, #24]
      break;
 80064b6:	e16c      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b8:	4bb9      	ldr	r3, [pc, #740]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064c2:	4bb7      	ldr	r3, [pc, #732]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d053      	beq.n	8006576 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ce:	4bb4      	ldr	r3, [pc, #720]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	099b      	lsrs	r3, r3, #6
 80064d4:	461a      	mov	r2, r3
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	ea02 0400 	and.w	r4, r2, r0
 80064e6:	603c      	str	r4, [r7, #0]
 80064e8:	400b      	ands	r3, r1
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	014b      	lsls	r3, r1, #5
 80064fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006502:	0142      	lsls	r2, r0, #5
 8006504:	4610      	mov	r0, r2
 8006506:	4619      	mov	r1, r3
 8006508:	4623      	mov	r3, r4
 800650a:	1ac0      	subs	r0, r0, r3
 800650c:	462b      	mov	r3, r5
 800650e:	eb61 0103 	sbc.w	r1, r1, r3
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	018b      	lsls	r3, r1, #6
 800651c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006520:	0182      	lsls	r2, r0, #6
 8006522:	1a12      	subs	r2, r2, r0
 8006524:	eb63 0301 	sbc.w	r3, r3, r1
 8006528:	f04f 0000 	mov.w	r0, #0
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	00d9      	lsls	r1, r3, #3
 8006532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006536:	00d0      	lsls	r0, r2, #3
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4621      	mov	r1, r4
 800653e:	1852      	adds	r2, r2, r1
 8006540:	4629      	mov	r1, r5
 8006542:	eb43 0101 	adc.w	r1, r3, r1
 8006546:	460b      	mov	r3, r1
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	0259      	lsls	r1, r3, #9
 8006552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006556:	0250      	lsls	r0, r2, #9
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	461a      	mov	r2, r3
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	f7fa fbae 	bl	8000cc8 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4613      	mov	r3, r2
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e04c      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006576:	4b8a      	ldr	r3, [pc, #552]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	099b      	lsrs	r3, r3, #6
 800657c:	461a      	mov	r2, r3
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	ea02 0a00 	and.w	sl, r2, r0
 800658e:	ea03 0b01 	and.w	fp, r3, r1
 8006592:	4650      	mov	r0, sl
 8006594:	4659      	mov	r1, fp
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	014b      	lsls	r3, r1, #5
 80065a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065a4:	0142      	lsls	r2, r0, #5
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	ebb0 000a 	subs.w	r0, r0, sl
 80065ae:	eb61 010b 	sbc.w	r1, r1, fp
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	018b      	lsls	r3, r1, #6
 80065bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065c0:	0182      	lsls	r2, r0, #6
 80065c2:	1a12      	subs	r2, r2, r0
 80065c4:	eb63 0301 	sbc.w	r3, r3, r1
 80065c8:	f04f 0000 	mov.w	r0, #0
 80065cc:	f04f 0100 	mov.w	r1, #0
 80065d0:	00d9      	lsls	r1, r3, #3
 80065d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065d6:	00d0      	lsls	r0, r2, #3
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	eb12 020a 	adds.w	r2, r2, sl
 80065e0:	eb43 030b 	adc.w	r3, r3, fp
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	0299      	lsls	r1, r3, #10
 80065ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065f2:	0290      	lsls	r0, r2, #10
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4610      	mov	r0, r2
 80065fa:	4619      	mov	r1, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	461a      	mov	r2, r3
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	f7fa fb60 	bl	8000cc8 <__aeabi_uldivmod>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4613      	mov	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006610:	4b63      	ldr	r3, [pc, #396]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	3301      	adds	r3, #1
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	61bb      	str	r3, [r7, #24]
      break;
 800662a:	e0b2      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800662c:	4b5c      	ldr	r3, [pc, #368]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006634:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006636:	4b5a      	ldr	r3, [pc, #360]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d04d      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006642:	4b57      	ldr	r3, [pc, #348]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	461a      	mov	r2, r3
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	ea02 0800 	and.w	r8, r2, r0
 800665a:	ea03 0901 	and.w	r9, r3, r1
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	014b      	lsls	r3, r1, #5
 800666c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006670:	0142      	lsls	r2, r0, #5
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	ebb0 0008 	subs.w	r0, r0, r8
 800667a:	eb61 0109 	sbc.w	r1, r1, r9
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	018b      	lsls	r3, r1, #6
 8006688:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800668c:	0182      	lsls	r2, r0, #6
 800668e:	1a12      	subs	r2, r2, r0
 8006690:	eb63 0301 	sbc.w	r3, r3, r1
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	00d9      	lsls	r1, r3, #3
 800669e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066a2:	00d0      	lsls	r0, r2, #3
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	eb12 0208 	adds.w	r2, r2, r8
 80066ac:	eb43 0309 	adc.w	r3, r3, r9
 80066b0:	f04f 0000 	mov.w	r0, #0
 80066b4:	f04f 0100 	mov.w	r1, #0
 80066b8:	0259      	lsls	r1, r3, #9
 80066ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80066be:	0250      	lsls	r0, r2, #9
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4610      	mov	r0, r2
 80066c6:	4619      	mov	r1, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f7fa fafa 	bl	8000cc8 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4613      	mov	r3, r2
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e04a      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	461a      	mov	r2, r3
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066ee:	f04f 0100 	mov.w	r1, #0
 80066f2:	ea02 0400 	and.w	r4, r2, r0
 80066f6:	ea03 0501 	and.w	r5, r3, r1
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	014b      	lsls	r3, r1, #5
 8006708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800670c:	0142      	lsls	r2, r0, #5
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	1b00      	subs	r0, r0, r4
 8006714:	eb61 0105 	sbc.w	r1, r1, r5
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	018b      	lsls	r3, r1, #6
 8006722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006726:	0182      	lsls	r2, r0, #6
 8006728:	1a12      	subs	r2, r2, r0
 800672a:	eb63 0301 	sbc.w	r3, r3, r1
 800672e:	f04f 0000 	mov.w	r0, #0
 8006732:	f04f 0100 	mov.w	r1, #0
 8006736:	00d9      	lsls	r1, r3, #3
 8006738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800673c:	00d0      	lsls	r0, r2, #3
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	1912      	adds	r2, r2, r4
 8006744:	eb45 0303 	adc.w	r3, r5, r3
 8006748:	f04f 0000 	mov.w	r0, #0
 800674c:	f04f 0100 	mov.w	r1, #0
 8006750:	0299      	lsls	r1, r3, #10
 8006752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006756:	0290      	lsls	r0, r2, #10
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	461a      	mov	r2, r3
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	f7fa faae 	bl	8000cc8 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	0f1b      	lsrs	r3, r3, #28
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	61bb      	str	r3, [r7, #24]
      break;
 800678a:	e002      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800678e:	61bb      	str	r3, [r7, #24]
      break;
 8006790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006792:	69bb      	ldr	r3, [r7, #24]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	00f42400 	.word	0x00f42400
 80067a8:	007a1200 	.word	0x007a1200

080067ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e28d      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8083 	beq.w	80068d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067cc:	4b94      	ldr	r3, [pc, #592]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 030c 	and.w	r3, r3, #12
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d019      	beq.n	800680c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067d8:	4b91      	ldr	r3, [pc, #580]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d106      	bne.n	80067f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067e4:	4b8e      	ldr	r3, [pc, #568]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f0:	d00c      	beq.n	800680c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067f2:	4b8b      	ldr	r3, [pc, #556]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d112      	bne.n	8006824 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fe:	4b88      	ldr	r3, [pc, #544]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680a:	d10b      	bne.n	8006824 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680c:	4b84      	ldr	r3, [pc, #528]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d05b      	beq.n	80068d0 <HAL_RCC_OscConfig+0x124>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d157      	bne.n	80068d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e25a      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d106      	bne.n	800683c <HAL_RCC_OscConfig+0x90>
 800682e:	4b7c      	ldr	r3, [pc, #496]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7b      	ldr	r2, [pc, #492]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e01d      	b.n	8006878 <HAL_RCC_OscConfig+0xcc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0xb4>
 8006846:	4b76      	ldr	r3, [pc, #472]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a75      	ldr	r2, [pc, #468]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800684c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4b73      	ldr	r3, [pc, #460]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a72      	ldr	r2, [pc, #456]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e00b      	b.n	8006878 <HAL_RCC_OscConfig+0xcc>
 8006860:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4b6c      	ldr	r3, [pc, #432]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6b      	ldr	r2, [pc, #428]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fe fde6 	bl	8005450 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006888:	f7fe fde2 	bl	8005450 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	; 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e21f      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689a:	4b61      	ldr	r3, [pc, #388]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0xdc>
 80068a6:	e014      	b.n	80068d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fe fdd2 	bl	8005450 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b0:	f7fe fdce 	bl	8005450 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	; 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e20b      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c2:	4b57      	ldr	r3, [pc, #348]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x104>
 80068ce:	e000      	b.n	80068d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06f      	beq.n	80069be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068de:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068ea:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d105      	bne.n	8006902 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d11c      	bne.n	8006948 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b44      	ldr	r3, [pc, #272]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x186>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e1d3      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006932:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4937      	ldr	r1, [pc, #220]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	e03a      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006950:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x278>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fe fd7b 	bl	8005450 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800695e:	f7fe fd77 	bl	8005450 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1b4      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006970:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697c:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4925      	ldr	r1, [pc, #148]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
 8006990:	e015      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006992:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <HAL_RCC_OscConfig+0x278>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fe fd5a 	bl	8005450 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fe fd56 	bl	8005450 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e193      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d036      	beq.n	8006a38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCC_OscConfig+0x27c>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fe fd3a 	bl	8005450 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fe fd36 	bl	8005450 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e173      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_OscConfig+0x274>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x234>
 80069fe:	e01b      	b.n	8006a38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RCC_OscConfig+0x27c>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fe fd23 	bl	8005450 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a0c:	e00e      	b.n	8006a2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a0e:	f7fe fd1f 	bl	8005450 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d907      	bls.n	8006a2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e15c      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	42470000 	.word	0x42470000
 8006a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	4b8a      	ldr	r3, [pc, #552]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ea      	bne.n	8006a0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8097 	beq.w	8006b74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b83      	ldr	r3, [pc, #524]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	; 0x40
 8006a66:	4b7c      	ldr	r3, [pc, #496]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b79      	ldr	r3, [pc, #484]	; (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d118      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a82:	4b76      	ldr	r3, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a75      	ldr	r2, [pc, #468]	; (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fe fcdf 	bl	8005450 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a96:	f7fe fcdb 	bl	8005450 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e118      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa8:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <HAL_RCC_OscConfig+0x31e>
 8006abc:	4b66      	ldr	r3, [pc, #408]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4a65      	ldr	r2, [pc, #404]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac8:	e01c      	b.n	8006b04 <HAL_RCC_OscConfig+0x358>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x340>
 8006ad2:	4b61      	ldr	r3, [pc, #388]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	4a60      	ldr	r2, [pc, #384]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ad8:	f043 0304 	orr.w	r3, r3, #4
 8006adc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ade:	4b5e      	ldr	r3, [pc, #376]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4a5d      	ldr	r2, [pc, #372]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0x358>
 8006aec:	4b5a      	ldr	r3, [pc, #360]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	4a59      	ldr	r2, [pc, #356]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	; 0x70
 8006af8:	4b57      	ldr	r3, [pc, #348]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	4a56      	ldr	r2, [pc, #344]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006afe:	f023 0304 	bic.w	r3, r3, #4
 8006b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fe fca0 	bl	8005450 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fe fc9c 	bl	8005450 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e0d7      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2a:	4b4b      	ldr	r3, [pc, #300]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ee      	beq.n	8006b14 <HAL_RCC_OscConfig+0x368>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b38:	f7fe fc8a 	bl	8005450 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b40:	f7fe fc86 	bl	8005450 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e0c1      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b56:	4b40      	ldr	r3, [pc, #256]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ee      	bne.n	8006b40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b68:	4b3b      	ldr	r3, [pc, #236]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	4a3a      	ldr	r2, [pc, #232]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80ad 	beq.w	8006cd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7e:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d060      	beq.n	8006c4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d145      	bne.n	8006c1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b33      	ldr	r3, [pc, #204]	; (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fe fc5a 	bl	8005450 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fe fc56 	bl	8005450 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e093      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	019b      	lsls	r3, r3, #6
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	071b      	lsls	r3, r3, #28
 8006bea:	491b      	ldr	r1, [pc, #108]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fe fc2b 	bl	8005450 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fe fc27 	bl	8005450 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e064      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c10:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x452>
 8006c1c:	e05c      	b.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fe fc14 	bl	8005450 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fe fc10 	bl	8005450 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e04d      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x480>
 8006c4a:	e045      	b.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d107      	bne.n	8006c64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e040      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40007000 	.word	0x40007000
 8006c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c64:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <HAL_RCC_OscConfig+0x538>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d030      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d129      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d122      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d119      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023800 	.word	0x40023800

08006ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e04c      	b.n	8006d94 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d111      	bne.n	8006d2a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 f968 	bl	8007fe4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <HAL_TIM_Base_Init+0xb4>)
 8006d20:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 fe41 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	08002569 	.word	0x08002569

08006da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d001      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e04e      	b.n	8006e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d022      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de2:	d01d      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x80>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d111      	bne.n	8006e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d010      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	e007      	b.n	8006e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40001800 	.word	0x40001800

08006e80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6a1a      	ldr	r2, [r3, #32]
 8006e9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10f      	bne.n	8006ec8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a1a      	ldr	r2, [r3, #32]
 8006eae:	f240 4344 	movw	r3, #1092	; 0x444
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d107      	bne.n	8006ec8 <HAL_TIM_Base_Stop_IT+0x48>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e04c      	b.n	8006f8c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d111      	bne.n	8006f22 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f86c 	bl	8007fe4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <HAL_TIM_PWM_Init+0xb4>)
 8006f18:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f000 fd45 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	0800242d 	.word	0x0800242d

08006f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <HAL_TIM_PWM_Start+0x24>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e022      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d109      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x3e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e015      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x58>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e008      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e07c      	b.n	8007104 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0x82>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007018:	e013      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0x92>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007028:	e00b      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Start+0xa2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007038:	e003      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 ffa4 	bl	8007f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2d      	ldr	r2, [pc, #180]	; (800710c <HAL_TIM_PWM_Start+0x174>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_TIM_PWM_Start+0xcc>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <HAL_TIM_PWM_Start+0x178>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d101      	bne.n	8007068 <HAL_TIM_PWM_Start+0xd0>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <HAL_TIM_PWM_Start+0xd2>
 8007068:	2300      	movs	r3, #0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a22      	ldr	r2, [pc, #136]	; (800710c <HAL_TIM_PWM_Start+0x174>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d022      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d01d      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <HAL_TIM_PWM_Start+0x17c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1d      	ldr	r2, [pc, #116]	; (8007118 <HAL_TIM_PWM_Start+0x180>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1c      	ldr	r2, [pc, #112]	; (800711c <HAL_TIM_PWM_Start+0x184>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a16      	ldr	r2, [pc, #88]	; (8007110 <HAL_TIM_PWM_Start+0x178>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_TIM_PWM_Start+0x188>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIM_PWM_Start+0x136>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a16      	ldr	r2, [pc, #88]	; (8007124 <HAL_TIM_PWM_Start+0x18c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d111      	bne.n	80070f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b06      	cmp	r3, #6
 80070de:	d010      	beq.n	8007102 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f0:	e007      	b.n	8007102 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40014000 	.word	0x40014000
 8007124:	40001800 	.word	0x40001800

08007128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0a2      	b.n	8007282 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d111      	bne.n	800716c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 ff47 	bl	8007fe4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a4a      	ldr	r2, [pc, #296]	; (800728c <HAL_TIM_Encoder_Init+0x164>)
 8007162:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f000 fc16 	bl	80079c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	4313      	orrs	r3, r2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071de:	f023 030c 	bic.w	r3, r3, #12
 80071e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	4313      	orrs	r3, r2
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	011a      	lsls	r2, r3, #4
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	4313      	orrs	r3, r2
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800721c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007224:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4313      	orrs	r3, r2
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	08002471 	.word	0x08002471

08007290 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d110      	bne.n	80072e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d102      	bne.n	80072cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c6:	7b7b      	ldrb	r3, [r7, #13]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d001      	beq.n	80072d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e069      	b.n	80073a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e0:	e031      	b.n	8007346 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d110      	bne.n	800730a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072ee:	7b3b      	ldrb	r3, [r7, #12]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d001      	beq.n	80072f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e055      	b.n	80073a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007308:	e01d      	b.n	8007346 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d108      	bne.n	8007322 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d105      	bne.n	8007322 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007316:	7b7b      	ldrb	r3, [r7, #13]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d102      	bne.n	8007322 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800731c:	7b3b      	ldrb	r3, [r7, #12]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d001      	beq.n	8007326 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e03e      	b.n	80073a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_TIM_Encoder_Start+0xc4>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b04      	cmp	r3, #4
 8007350:	d008      	beq.n	8007364 <HAL_TIM_Encoder_Start+0xd4>
 8007352:	e00f      	b.n	8007374 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2201      	movs	r2, #1
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fe1b 	bl	8007f98 <TIM_CCxChannelCmd>
      break;
 8007362:	e016      	b.n	8007392 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2201      	movs	r2, #1
 800736a:	2104      	movs	r1, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fe13 	bl	8007f98 <TIM_CCxChannelCmd>
      break;
 8007372:	e00e      	b.n	8007392 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fe0b 	bl	8007f98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2201      	movs	r2, #1
 8007388:	2104      	movs	r1, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fe04 	bl	8007f98 <TIM_CCxChannelCmd>
      break;
 8007390:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d128      	bne.n	8007414 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d121      	bne.n	8007414 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0202 	mvn.w	r2, #2
 80073d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
 80073f8:	e009      	b.n	800740e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b04      	cmp	r3, #4
 8007420:	d128      	bne.n	8007474 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b04      	cmp	r3, #4
 800742e:	d121      	bne.n	8007474 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0204 	mvn.w	r2, #4
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
 8007458:	e009      	b.n	800746e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b08      	cmp	r3, #8
 8007480:	d128      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d121      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0208 	mvn.w	r2, #8
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2204      	movs	r2, #4
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
 80074b8:	e009      	b.n	80074ce <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d128      	bne.n	8007534 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d121      	bne.n	8007534 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0210 	mvn.w	r2, #16
 80074f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2208      	movs	r2, #8
 80074fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
 8007518:	e009      	b.n	800752e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d110      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d109      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	d110      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d109      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d110      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d109      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d110      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d109      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0220 	mvn.w	r2, #32
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007616:	2302      	movs	r3, #2
 8007618:	e0ae      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b0c      	cmp	r3, #12
 8007626:	f200 809f 	bhi.w	8007768 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007665 	.word	0x08007665
 8007634:	08007769 	.word	0x08007769
 8007638:	08007769 	.word	0x08007769
 800763c:	08007769 	.word	0x08007769
 8007640:	080076a5 	.word	0x080076a5
 8007644:	08007769 	.word	0x08007769
 8007648:	08007769 	.word	0x08007769
 800764c:	08007769 	.word	0x08007769
 8007650:	080076e7 	.word	0x080076e7
 8007654:	08007769 	.word	0x08007769
 8007658:	08007769 	.word	0x08007769
 800765c:	08007769 	.word	0x08007769
 8007660:	08007727 	.word	0x08007727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fa4a 	bl	8007b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0208 	orr.w	r2, r2, #8
 800767e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0204 	bic.w	r2, r2, #4
 800768e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6999      	ldr	r1, [r3, #24]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	619a      	str	r2, [r3, #24]
      break;
 80076a2:	e064      	b.n	800776e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fa9a 	bl	8007be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6999      	ldr	r1, [r3, #24]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	619a      	str	r2, [r3, #24]
      break;
 80076e4:	e043      	b.n	800776e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 faef 	bl	8007cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0208 	orr.w	r2, r2, #8
 8007700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0204 	bic.w	r2, r2, #4
 8007710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69d9      	ldr	r1, [r3, #28]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	61da      	str	r2, [r3, #28]
      break;
 8007724:	e023      	b.n	800776e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fb43 	bl	8007db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69d9      	ldr	r1, [r3, #28]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	021a      	lsls	r2, r3, #8
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	61da      	str	r2, [r3, #28]
      break;
 8007766:	e002      	b.n	800776e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
      break;
 800776c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIM_ConfigClockSource+0x1c>
 8007798:	2302      	movs	r3, #2
 800779a:	e0b4      	b.n	8007906 <HAL_TIM_ConfigClockSource+0x186>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d4:	d03e      	beq.n	8007854 <HAL_TIM_ConfigClockSource+0xd4>
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	f200 8087 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e2:	f000 8086 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x172>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d87f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077ec:	2b70      	cmp	r3, #112	; 0x70
 80077ee:	d01a      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0xa6>
 80077f0:	2b70      	cmp	r3, #112	; 0x70
 80077f2:	d87b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d050      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x11a>
 80077f8:	2b60      	cmp	r3, #96	; 0x60
 80077fa:	d877      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b50      	cmp	r3, #80	; 0x50
 80077fe:	d03c      	beq.n	800787a <HAL_TIM_ConfigClockSource+0xfa>
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d873      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d058      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x13a>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d86f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	d064      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d86b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d060      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	2b20      	cmp	r3, #32
 800781a:	d867      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007820:	2b10      	cmp	r3, #16
 8007822:	d05a      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007824:	e062      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6899      	ldr	r1, [r3, #8]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f000 fb8f 	bl	8007f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	609a      	str	r2, [r3, #8]
      break;
 8007852:	e04f      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	6899      	ldr	r1, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f000 fb78 	bl	8007f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007876:	609a      	str	r2, [r3, #8]
      break;
 8007878:	e03c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	f000 faec 	bl	8007e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2150      	movs	r1, #80	; 0x50
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fb45 	bl	8007f22 <TIM_ITRx_SetConfig>
      break;
 8007898:	e02c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fb0b 	bl	8007ec2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2160      	movs	r1, #96	; 0x60
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fb35 	bl	8007f22 <TIM_ITRx_SetConfig>
      break;
 80078b8:	e01c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f000 facc 	bl	8007e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2140      	movs	r1, #64	; 0x40
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fb25 	bl	8007f22 <TIM_ITRx_SetConfig>
      break;
 80078d8:	e00c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f000 fb1c 	bl	8007f22 <TIM_ITRx_SetConfig>
      break;
 80078ea:	e003      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e000      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a40      	ldr	r2, [pc, #256]	; (8007ad8 <TIM_Base_SetConfig+0x114>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e2:	d00f      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a3d      	ldr	r2, [pc, #244]	; (8007adc <TIM_Base_SetConfig+0x118>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a3c      	ldr	r2, [pc, #240]	; (8007ae0 <TIM_Base_SetConfig+0x11c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d007      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a3b      	ldr	r2, [pc, #236]	; (8007ae4 <TIM_Base_SetConfig+0x120>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a3a      	ldr	r2, [pc, #232]	; (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d108      	bne.n	8007a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2f      	ldr	r2, [pc, #188]	; (8007ad8 <TIM_Base_SetConfig+0x114>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a24:	d027      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <TIM_Base_SetConfig+0x118>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d023      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2b      	ldr	r2, [pc, #172]	; (8007ae0 <TIM_Base_SetConfig+0x11c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2a      	ldr	r2, [pc, #168]	; (8007ae4 <TIM_Base_SetConfig+0x120>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a29      	ldr	r2, [pc, #164]	; (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d017      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a28      	ldr	r2, [pc, #160]	; (8007aec <TIM_Base_SetConfig+0x128>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a27      	ldr	r2, [pc, #156]	; (8007af0 <TIM_Base_SetConfig+0x12c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <TIM_Base_SetConfig+0x130>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a25      	ldr	r2, [pc, #148]	; (8007af8 <TIM_Base_SetConfig+0x134>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a24      	ldr	r2, [pc, #144]	; (8007afc <TIM_Base_SetConfig+0x138>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a23      	ldr	r2, [pc, #140]	; (8007b00 <TIM_Base_SetConfig+0x13c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a0a      	ldr	r2, [pc, #40]	; (8007ad8 <TIM_Base_SetConfig+0x114>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_Base_SetConfig+0xf8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d103      	bne.n	8007ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	615a      	str	r2, [r3, #20]
}
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40010000 	.word	0x40010000
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	40010400 	.word	0x40010400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400
 8007af4:	40014800 	.word	0x40014800
 8007af8:	40001800 	.word	0x40001800
 8007afc:	40001c00 	.word	0x40001c00
 8007b00:	40002000 	.word	0x40002000

08007b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f023 0201 	bic.w	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f023 0302 	bic.w	r3, r3, #2
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <TIM_OC1_SetConfig+0xd8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_OC1_SetConfig+0x64>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <TIM_OC1_SetConfig+0xdc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d10c      	bne.n	8007b82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0308 	bic.w	r3, r3, #8
 8007b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f023 0304 	bic.w	r3, r3, #4
 8007b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <TIM_OC1_SetConfig+0xd8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d003      	beq.n	8007b92 <TIM_OC1_SetConfig+0x8e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <TIM_OC1_SetConfig+0xdc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d111      	bne.n	8007bb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	621a      	str	r2, [r3, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40010400 	.word	0x40010400

08007be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f023 0210 	bic.w	r2, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f023 0320 	bic.w	r3, r3, #32
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a22      	ldr	r2, [pc, #136]	; (8007cc8 <TIM_OC2_SetConfig+0xe4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d003      	beq.n	8007c4c <TIM_OC2_SetConfig+0x68>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a21      	ldr	r2, [pc, #132]	; (8007ccc <TIM_OC2_SetConfig+0xe8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d10d      	bne.n	8007c68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <TIM_OC2_SetConfig+0xe4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_OC2_SetConfig+0x94>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_OC2_SetConfig+0xe8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d113      	bne.n	8007ca0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40010400 	.word	0x40010400

08007cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <TIM_OC3_SetConfig+0xe0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <TIM_OC3_SetConfig+0x66>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a20      	ldr	r2, [pc, #128]	; (8007db4 <TIM_OC3_SetConfig+0xe4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <TIM_OC3_SetConfig+0xe0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC3_SetConfig+0x92>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <TIM_OC3_SetConfig+0xe4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d113      	bne.n	8007d8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	621a      	str	r2, [r3, #32]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40010400 	.word	0x40010400

08007db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	031b      	lsls	r3, r3, #12
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a12      	ldr	r2, [pc, #72]	; (8007e5c <TIM_OC4_SetConfig+0xa4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_OC4_SetConfig+0x68>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a11      	ldr	r2, [pc, #68]	; (8007e60 <TIM_OC4_SetConfig+0xa8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d109      	bne.n	8007e34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	019b      	lsls	r3, r3, #6
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40010400 	.word	0x40010400

08007e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f023 030a 	bic.w	r3, r3, #10
 8007ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b087      	sub	sp, #28
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f023 0210 	bic.w	r2, r3, #16
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	031b      	lsls	r3, r3, #12
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f043 0307 	orr.w	r3, r3, #7
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	609a      	str	r2, [r3, #8]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	021a      	lsls	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	609a      	str	r2, [r3, #8]
}
 8007f8c:	bf00      	nop
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 031f 	and.w	r3, r3, #31
 8007faa:	2201      	movs	r2, #1
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	401a      	ands	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	621a      	str	r2, [r3, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a1c      	ldr	r2, [pc, #112]	; (8008060 <TIM_ResetCallback+0x7c>)
 8007ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <TIM_ResetCallback+0x80>)
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a1a      	ldr	r2, [pc, #104]	; (8008068 <TIM_ResetCallback+0x84>)
 8008000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a19      	ldr	r2, [pc, #100]	; (800806c <TIM_ResetCallback+0x88>)
 8008008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a18      	ldr	r2, [pc, #96]	; (8008070 <TIM_ResetCallback+0x8c>)
 8008010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a17      	ldr	r2, [pc, #92]	; (8008074 <TIM_ResetCallback+0x90>)
 8008018:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a16      	ldr	r2, [pc, #88]	; (8008078 <TIM_ResetCallback+0x94>)
 8008020:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a15      	ldr	r2, [pc, #84]	; (800807c <TIM_ResetCallback+0x98>)
 8008028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a14      	ldr	r2, [pc, #80]	; (8008080 <TIM_ResetCallback+0x9c>)
 8008030:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a13      	ldr	r2, [pc, #76]	; (8008084 <TIM_ResetCallback+0xa0>)
 8008038:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a12      	ldr	r2, [pc, #72]	; (8008088 <TIM_ResetCallback+0xa4>)
 8008040:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a11      	ldr	r2, [pc, #68]	; (800808c <TIM_ResetCallback+0xa8>)
 8008048:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a10      	ldr	r2, [pc, #64]	; (8008090 <TIM_ResetCallback+0xac>)
 8008050:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	080023a5 	.word	0x080023a5
 8008064:	0800790f 	.word	0x0800790f
 8008068:	08007987 	.word	0x08007987
 800806c:	0800799b 	.word	0x0800799b
 8008070:	08007937 	.word	0x08007937
 8008074:	0800794b 	.word	0x0800794b
 8008078:	08007923 	.word	0x08007923
 800807c:	0800795f 	.word	0x0800795f
 8008080:	08007973 	.word	0x08007973
 8008084:	080079af 	.word	0x080079af
 8008088:	08008231 	.word	0x08008231
 800808c:	08008245 	.word	0x08008245
 8008090:	08008259 	.word	0x08008259

08008094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e05a      	b.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a21      	ldr	r2, [pc, #132]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d022      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d01d      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d018      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d013      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1a      	ldr	r2, [pc, #104]	; (800817c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00e      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a18      	ldr	r2, [pc, #96]	; (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d009      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a17      	ldr	r2, [pc, #92]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d004      	beq.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d10c      	bne.n	8008150 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	4313      	orrs	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40010000 	.word	0x40010000
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40010400 	.word	0x40010400
 8008184:	40014000 	.word	0x40014000
 8008188:	40001800 	.word	0x40001800

0800818c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e03d      	b.n	8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e04a      	b.n	8008314 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d111      	bne.n	80082ae <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f962 	bl	800855c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a1e      	ldr	r2, [pc, #120]	; (800831c <HAL_UART_Init+0xb0>)
 80082a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2224      	movs	r2, #36	; 0x24
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fc12 	bl	8008af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	0800262d 	.word	0x0800262d

08008320 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b20      	cmp	r3, #32
 800833e:	d17c      	bne.n	800843a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Transmit+0x2c>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e075      	b.n	800843c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_UART_Transmit+0x3e>
 800835a:	2302      	movs	r3, #2
 800835c:	e06e      	b.n	800843c <HAL_UART_Transmit+0x11c>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2221      	movs	r2, #33	; 0x21
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008374:	f7fd f86c 	bl	8005450 <HAL_GetTick>
 8008378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838e:	d108      	bne.n	80083a2 <HAL_UART_Transmit+0x82>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	e003      	b.n	80083aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083b2:	e02a      	b.n	800840a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2200      	movs	r2, #0
 80083bc:	2180      	movs	r1, #128	; 0x80
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa01 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e036      	b.n	800843c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	3302      	adds	r3, #2
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	e007      	b.n	80083fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	3301      	adds	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800840e:	b29b      	uxth	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1cf      	bne.n	80083b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2200      	movs	r2, #0
 800841c:	2140      	movs	r1, #64	; 0x40
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 f9d1 	bl	80087c6 <UART_WaitOnFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e006      	b.n	800843c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800843a:	2302      	movs	r3, #2
  }
}
 800843c:	4618      	mov	r0, r3
 800843e:	3720      	adds	r7, #32
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b20      	cmp	r3, #32
 800845c:	d11d      	bne.n	800849a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Receive_DMA+0x26>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e016      	b.n	800849c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Receive_DMA+0x38>
 8008478:	2302      	movs	r3, #2
 800847a:	e00f      	b.n	800849c <HAL_UART_Receive_DMA+0x58>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	461a      	mov	r2, r3
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fa07 	bl	80088a4 <UART_Start_Receive_DMA>
 8008496:	4603      	mov	r3, r0
 8008498:	e000      	b.n	800849c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a10      	ldr	r2, [pc, #64]	; (80085a8 <UART_InitCallbacksToDefault+0x4c>)
 8008568:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a0f      	ldr	r2, [pc, #60]	; (80085ac <UART_InitCallbacksToDefault+0x50>)
 800856e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <UART_InitCallbacksToDefault+0x54>)
 8008574:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a0e      	ldr	r2, [pc, #56]	; (80085b4 <UART_InitCallbacksToDefault+0x58>)
 800857a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a0e      	ldr	r2, [pc, #56]	; (80085b8 <UART_InitCallbacksToDefault+0x5c>)
 8008580:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <UART_InitCallbacksToDefault+0x60>)
 8008586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a0d      	ldr	r2, [pc, #52]	; (80085c0 <UART_InitCallbacksToDefault+0x64>)
 800858c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a0c      	ldr	r2, [pc, #48]	; (80085c4 <UART_InitCallbacksToDefault+0x68>)
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <UART_InitCallbacksToDefault+0x6c>)
 8008598:	669a      	str	r2, [r3, #104]	; 0x68

}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	080084b9 	.word	0x080084b9
 80085ac:	080084a5 	.word	0x080084a5
 80085b0:	080084e1 	.word	0x080084e1
 80085b4:	080084cd 	.word	0x080084cd
 80085b8:	080084f5 	.word	0x080084f5
 80085bc:	08008509 	.word	0x08008509
 80085c0:	0800851d 	.word	0x0800851d
 80085c4:	08008531 	.word	0x08008531
 80085c8:	08008545 	.word	0x08008545

080085cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b09c      	sub	sp, #112	; 0x70
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d172      	bne.n	80086ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	2200      	movs	r2, #0
 80085ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	330c      	adds	r3, #12
 80085f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008604:	66bb      	str	r3, [r7, #104]	; 0x68
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330c      	adds	r3, #12
 800860c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800860e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008610:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800861c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e5      	bne.n	80085ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3314      	adds	r3, #20
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	f023 0301 	bic.w	r3, r3, #1
 8008638:	667b      	str	r3, [r7, #100]	; 0x64
 800863a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3314      	adds	r3, #20
 8008640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008642:	647a      	str	r2, [r7, #68]	; 0x44
 8008644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e5      	bne.n	8008622 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	623b      	str	r3, [r7, #32]
   return(result);
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866c:	663b      	str	r3, [r7, #96]	; 0x60
 800866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3314      	adds	r3, #20
 8008674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008676:	633a      	str	r2, [r7, #48]	; 0x30
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800868a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868c:	2220      	movs	r2, #32
 800868e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	2b01      	cmp	r3, #1
 8008698:	d119      	bne.n	80086ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0310 	bic.w	r3, r3, #16
 80086b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086ba:	61fa      	str	r2, [r7, #28]
 80086bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	69b9      	ldr	r1, [r7, #24]
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	617b      	str	r3, [r7, #20]
   return(result);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d107      	bne.n	80086e6 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80086d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086dc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80086de:	4611      	mov	r1, r2
 80086e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086e2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086e4:	e003      	b.n	80086ee <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80086e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ec:	4798      	blx	r3
}
 80086ee:	bf00      	nop
 80086f0:	3770      	adds	r7, #112	; 0x70
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	2b01      	cmp	r3, #1
 800870a:	d109      	bne.n	8008720 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008714:	0852      	lsrs	r2, r2, #1
 8008716:	b292      	uxth	r2, r2
 8008718:	4611      	mov	r1, r2
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800871e:	e003      	b.n	8008728 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	4798      	blx	r3
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874c:	2b80      	cmp	r3, #128	; 0x80
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b21      	cmp	r3, #33	; 0x21
 8008762:	d108      	bne.n	8008776 <UART_DMAError+0x46>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2200      	movs	r2, #0
 800876e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008770:	68b8      	ldr	r0, [r7, #8]
 8008772:	f000 f931 	bl	80089d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	bf0c      	ite	eq
 8008784:	2301      	moveq	r3, #1
 8008786:	2300      	movne	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b22      	cmp	r3, #34	; 0x22
 8008796:	d108      	bne.n	80087aa <UART_DMAError+0x7a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80087a4:	68b8      	ldr	r0, [r7, #8]
 80087a6:	f000 f93f 	bl	8008a28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f043 0210 	orr.w	r2, r3, #16
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	68b8      	ldr	r0, [r7, #8]
 80087bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b090      	sub	sp, #64	; 0x40
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	603b      	str	r3, [r7, #0]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d6:	e050      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087de:	d04c      	beq.n	800887a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80087e6:	f7fc fe33 	bl	8005450 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d241      	bcs.n	800887a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008816:	637a      	str	r2, [r7, #52]	; 0x34
 8008818:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800881c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	613b      	str	r3, [r7, #16]
   return(result);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800884a:	623a      	str	r2, [r7, #32]
 800884c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	69f9      	ldr	r1, [r7, #28]
 8008850:	6a3a      	ldr	r2, [r7, #32]
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	61bb      	str	r3, [r7, #24]
   return(result);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e00f      	b.n	800889a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4013      	ands	r3, r2
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	bf0c      	ite	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	2300      	movne	r3, #0
 800888e:	b2db      	uxtb	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	429a      	cmp	r2, r3
 8008896:	d09f      	beq.n	80087d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3740      	adds	r7, #64	; 0x40
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b098      	sub	sp, #96	; 0x60
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2222      	movs	r2, #34	; 0x22
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	4a3e      	ldr	r2, [pc, #248]	; (80089cc <UART_Start_Receive_DMA+0x128>)
 80088d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	4a3d      	ldr	r2, [pc, #244]	; (80089d0 <UART_Start_Receive_DMA+0x12c>)
 80088da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	4a3c      	ldr	r2, [pc, #240]	; (80089d4 <UART_Start_Receive_DMA+0x130>)
 80088e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	2200      	movs	r2, #0
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	f7fc ffb2 	bl	800586c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	330c      	adds	r3, #12
 800892c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800893c:	65bb      	str	r3, [r7, #88]	; 0x58
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	330c      	adds	r3, #12
 8008944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008946:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008948:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800894c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e5      	bne.n	8008926 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	f043 0301 	orr.w	r3, r3, #1
 8008970:	657b      	str	r3, [r7, #84]	; 0x54
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800897a:	63ba      	str	r2, [r7, #56]	; 0x38
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3314      	adds	r3, #20
 8008994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	617b      	str	r3, [r7, #20]
   return(result);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a4:	653b      	str	r3, [r7, #80]	; 0x50
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3314      	adds	r3, #20
 80089ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ae:	627a      	str	r2, [r7, #36]	; 0x24
 80089b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6a39      	ldr	r1, [r7, #32]
 80089b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e5      	bne.n	800898e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3760      	adds	r7, #96	; 0x60
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	080085cd 	.word	0x080085cd
 80089d0:	080086f7 	.word	0x080086f7
 80089d4:	08008731 	.word	0x08008731

080089d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089d8:	b480      	push	{r7}
 80089da:	b089      	sub	sp, #36	; 0x24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	330c      	adds	r3, #12
 80089e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	61ba      	str	r2, [r7, #24]
 8008a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	6979      	ldr	r1, [r7, #20]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	e841 2300 	strex	r3, r2, [r1]
 8008a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e5      	bne.n	80089e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a1c:	bf00      	nop
 8008a1e:	3724      	adds	r7, #36	; 0x24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b095      	sub	sp, #84	; 0x54
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a50:	643a      	str	r2, [r7, #64]	; 0x40
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e5      	bne.n	8008a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3314      	adds	r3, #20
 8008a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f023 0301 	bic.w	r3, r3, #1
 8008a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e5      	bne.n	8008a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d119      	bne.n	8008ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ac0:	61ba      	str	r2, [r7, #24]
 8008ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6979      	ldr	r1, [r7, #20]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e5      	bne.n	8008aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ae2:	bf00      	nop
 8008ae4:	3754      	adds	r7, #84	; 0x54
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	b09f      	sub	sp, #124	; 0x7c
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b06:	68d9      	ldr	r1, [r3, #12]
 8008b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	ea40 0301 	orr.w	r3, r0, r1
 8008b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b34:	f021 010c 	bic.w	r1, r1, #12
 8008b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4e:	6999      	ldr	r1, [r3, #24]
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	ea40 0301 	orr.w	r3, r0, r1
 8008b58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4bc5      	ldr	r3, [pc, #788]	; (8008e74 <UART_SetConfig+0x384>)
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d004      	beq.n	8008b6e <UART_SetConfig+0x7e>
 8008b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	4bc3      	ldr	r3, [pc, #780]	; (8008e78 <UART_SetConfig+0x388>)
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d103      	bne.n	8008b76 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b6e:	f7fd fc25 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 8008b72:	6778      	str	r0, [r7, #116]	; 0x74
 8008b74:	e002      	b.n	8008b7c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b76:	f7fd fc0d 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8008b7a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b84:	f040 80b6 	bne.w	8008cf4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	f04f 0500 	mov.w	r5, #0
 8008b90:	4622      	mov	r2, r4
 8008b92:	462b      	mov	r3, r5
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	6439      	str	r1, [r7, #64]	; 0x40
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ba0:	1912      	adds	r2, r2, r4
 8008ba2:	eb45 0303 	adc.w	r3, r5, r3
 8008ba6:	f04f 0000 	mov.w	r0, #0
 8008baa:	f04f 0100 	mov.w	r1, #0
 8008bae:	00d9      	lsls	r1, r3, #3
 8008bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bb4:	00d0      	lsls	r0, r2, #3
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	1911      	adds	r1, r2, r4
 8008bbc:	6639      	str	r1, [r7, #96]	; 0x60
 8008bbe:	416b      	adcs	r3, r5
 8008bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8008bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	1891      	adds	r1, r2, r2
 8008bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bd0:	415b      	adcs	r3, r3
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008bdc:	f7f8 f874 	bl	8000cc8 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4ba5      	ldr	r3, [pc, #660]	; (8008e7c <UART_SetConfig+0x38c>)
 8008be6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	011e      	lsls	r6, r3, #4
 8008bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf0:	461c      	mov	r4, r3
 8008bf2:	f04f 0500 	mov.w	r5, #0
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	1891      	adds	r1, r2, r2
 8008bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8008bfe:	415b      	adcs	r3, r3
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34
 8008c02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c06:	1912      	adds	r2, r2, r4
 8008c08:	eb45 0303 	adc.w	r3, r5, r3
 8008c0c:	f04f 0000 	mov.w	r0, #0
 8008c10:	f04f 0100 	mov.w	r1, #0
 8008c14:	00d9      	lsls	r1, r3, #3
 8008c16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c1a:	00d0      	lsls	r0, r2, #3
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	1911      	adds	r1, r2, r4
 8008c22:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c24:	416b      	adcs	r3, r5
 8008c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	1891      	adds	r1, r2, r2
 8008c34:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c36:	415b      	adcs	r3, r3
 8008c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c42:	f7f8 f841 	bl	8000cc8 <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4b8c      	ldr	r3, [pc, #560]	; (8008e7c <UART_SetConfig+0x38c>)
 8008c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	2164      	movs	r1, #100	; 0x64
 8008c54:	fb01 f303 	mul.w	r3, r1, r3
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	3332      	adds	r3, #50	; 0x32
 8008c5e:	4a87      	ldr	r2, [pc, #540]	; (8008e7c <UART_SetConfig+0x38c>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c6c:	441e      	add	r6, r3
 8008c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c70:	4618      	mov	r0, r3
 8008c72:	f04f 0100 	mov.w	r1, #0
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	1894      	adds	r4, r2, r2
 8008c7c:	623c      	str	r4, [r7, #32]
 8008c7e:	415b      	adcs	r3, r3
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
 8008c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c86:	1812      	adds	r2, r2, r0
 8008c88:	eb41 0303 	adc.w	r3, r1, r3
 8008c8c:	f04f 0400 	mov.w	r4, #0
 8008c90:	f04f 0500 	mov.w	r5, #0
 8008c94:	00dd      	lsls	r5, r3, #3
 8008c96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c9a:	00d4      	lsls	r4, r2, #3
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	1814      	adds	r4, r2, r0
 8008ca2:	653c      	str	r4, [r7, #80]	; 0x50
 8008ca4:	414b      	adcs	r3, r1
 8008ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	461a      	mov	r2, r3
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	1891      	adds	r1, r2, r2
 8008cb4:	61b9      	str	r1, [r7, #24]
 8008cb6:	415b      	adcs	r3, r3
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008cc2:	f7f8 f801 	bl	8000cc8 <__aeabi_uldivmod>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4b6c      	ldr	r3, [pc, #432]	; (8008e7c <UART_SetConfig+0x38c>)
 8008ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	2164      	movs	r1, #100	; 0x64
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	3332      	adds	r3, #50	; 0x32
 8008cde:	4a67      	ldr	r2, [pc, #412]	; (8008e7c <UART_SetConfig+0x38c>)
 8008ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce4:	095b      	lsrs	r3, r3, #5
 8008ce6:	f003 0207 	and.w	r2, r3, #7
 8008cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4432      	add	r2, r6
 8008cf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cf2:	e0b9      	b.n	8008e68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	f04f 0500 	mov.w	r5, #0
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	1891      	adds	r1, r2, r2
 8008d02:	6139      	str	r1, [r7, #16]
 8008d04:	415b      	adcs	r3, r3
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d0c:	1912      	adds	r2, r2, r4
 8008d0e:	eb45 0303 	adc.w	r3, r5, r3
 8008d12:	f04f 0000 	mov.w	r0, #0
 8008d16:	f04f 0100 	mov.w	r1, #0
 8008d1a:	00d9      	lsls	r1, r3, #3
 8008d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d20:	00d0      	lsls	r0, r2, #3
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	eb12 0804 	adds.w	r8, r2, r4
 8008d2a:	eb43 0905 	adc.w	r9, r3, r5
 8008d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f04f 0100 	mov.w	r1, #0
 8008d38:	f04f 0200 	mov.w	r2, #0
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	008b      	lsls	r3, r1, #2
 8008d42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d46:	0082      	lsls	r2, r0, #2
 8008d48:	4640      	mov	r0, r8
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	f7f7 ffbc 	bl	8000cc8 <__aeabi_uldivmod>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4b49      	ldr	r3, [pc, #292]	; (8008e7c <UART_SetConfig+0x38c>)
 8008d56:	fba3 2302 	umull	r2, r3, r3, r2
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	011e      	lsls	r6, r3, #4
 8008d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d60:	4618      	mov	r0, r3
 8008d62:	f04f 0100 	mov.w	r1, #0
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	1894      	adds	r4, r2, r2
 8008d6c:	60bc      	str	r4, [r7, #8]
 8008d6e:	415b      	adcs	r3, r3
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d76:	1812      	adds	r2, r2, r0
 8008d78:	eb41 0303 	adc.w	r3, r1, r3
 8008d7c:	f04f 0400 	mov.w	r4, #0
 8008d80:	f04f 0500 	mov.w	r5, #0
 8008d84:	00dd      	lsls	r5, r3, #3
 8008d86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d8a:	00d4      	lsls	r4, r2, #3
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	1814      	adds	r4, r2, r0
 8008d92:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d94:	414b      	adcs	r3, r1
 8008d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f04f 0100 	mov.w	r1, #0
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	008b      	lsls	r3, r1, #2
 8008dac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008db0:	0082      	lsls	r2, r0, #2
 8008db2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008db6:	f7f7 ff87 	bl	8000cc8 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <UART_SetConfig+0x38c>)
 8008dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	2164      	movs	r1, #100	; 0x64
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	3332      	adds	r3, #50	; 0x32
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <UART_SetConfig+0x38c>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dde:	441e      	add	r6, r3
 8008de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008de2:	4618      	mov	r0, r3
 8008de4:	f04f 0100 	mov.w	r1, #0
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	1894      	adds	r4, r2, r2
 8008dee:	603c      	str	r4, [r7, #0]
 8008df0:	415b      	adcs	r3, r3
 8008df2:	607b      	str	r3, [r7, #4]
 8008df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df8:	1812      	adds	r2, r2, r0
 8008dfa:	eb41 0303 	adc.w	r3, r1, r3
 8008dfe:	f04f 0400 	mov.w	r4, #0
 8008e02:	f04f 0500 	mov.w	r5, #0
 8008e06:	00dd      	lsls	r5, r3, #3
 8008e08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e0c:	00d4      	lsls	r4, r2, #3
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	eb12 0a00 	adds.w	sl, r2, r0
 8008e16:	eb43 0b01 	adc.w	fp, r3, r1
 8008e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f04f 0100 	mov.w	r1, #0
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	008b      	lsls	r3, r1, #2
 8008e2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e32:	0082      	lsls	r2, r0, #2
 8008e34:	4650      	mov	r0, sl
 8008e36:	4659      	mov	r1, fp
 8008e38:	f7f7 ff46 	bl	8000cc8 <__aeabi_uldivmod>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <UART_SetConfig+0x38c>)
 8008e42:	fba3 1302 	umull	r1, r3, r3, r2
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	2164      	movs	r1, #100	; 0x64
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	3332      	adds	r3, #50	; 0x32
 8008e54:	4a09      	ldr	r2, [pc, #36]	; (8008e7c <UART_SetConfig+0x38c>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	f003 020f 	and.w	r2, r3, #15
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4432      	add	r2, r6
 8008e66:	609a      	str	r2, [r3, #8]
}
 8008e68:	bf00      	nop
 8008e6a:	377c      	adds	r7, #124	; 0x7c
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	bf00      	nop
 8008e74:	40011000 	.word	0x40011000
 8008e78:	40011400 	.word	0x40011400
 8008e7c:	51eb851f 	.word	0x51eb851f

08008e80 <__NVIC_SetPriority>:
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	db0a      	blt.n	8008eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	490c      	ldr	r1, [pc, #48]	; (8008ecc <__NVIC_SetPriority+0x4c>)
 8008e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e9e:	0112      	lsls	r2, r2, #4
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	440b      	add	r3, r1
 8008ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ea8:	e00a      	b.n	8008ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4908      	ldr	r1, [pc, #32]	; (8008ed0 <__NVIC_SetPriority+0x50>)
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	3b04      	subs	r3, #4
 8008eb8:	0112      	lsls	r2, r2, #4
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	761a      	strb	r2, [r3, #24]
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	e000e100 	.word	0xe000e100
 8008ed0:	e000ed00 	.word	0xe000ed00

08008ed4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <SysTick_Handler+0x1c>)
 8008eda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008edc:	f002 fad8 	bl	800b490 <xTaskGetSchedulerState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d001      	beq.n	8008eea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008ee6:	f003 f9bf 	bl	800c268 <xPortSysTickHandler>
  }
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	e000e010 	.word	0xe000e010

08008ef4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	f06f 0004 	mvn.w	r0, #4
 8008efe:	f7ff ffbf 	bl	8008e80 <__NVIC_SetPriority>
#endif
}
 8008f02:	bf00      	nop
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f0e:	f3ef 8305 	mrs	r3, IPSR
 8008f12:	603b      	str	r3, [r7, #0]
  return(result);
 8008f14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f1a:	f06f 0305 	mvn.w	r3, #5
 8008f1e:	607b      	str	r3, [r7, #4]
 8008f20:	e00c      	b.n	8008f3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f22:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <osKernelInitialize+0x44>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d105      	bne.n	8008f36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f2a:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <osKernelInitialize+0x44>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e002      	b.n	8008f3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f3c:	687b      	ldr	r3, [r7, #4]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000224 	.word	0x20000224

08008f50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f56:	f3ef 8305 	mrs	r3, IPSR
 8008f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f62:	f06f 0305 	mvn.w	r3, #5
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e010      	b.n	8008f8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <osKernelStart+0x48>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d109      	bne.n	8008f86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f72:	f7ff ffbf 	bl	8008ef4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <osKernelStart+0x48>)
 8008f78:	2202      	movs	r2, #2
 8008f7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f7c:	f001 fe1a 	bl	800abb4 <vTaskStartScheduler>
      stat = osOK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	e002      	b.n	8008f8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f8c:	687b      	ldr	r3, [r7, #4]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000224 	.word	0x20000224

08008f9c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa2:	f3ef 8305 	mrs	r3, IPSR
 8008fa6:	603b      	str	r3, [r7, #0]
  return(result);
 8008fa8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008fae:	f001 ff2d 	bl	800ae0c <xTaskGetTickCountFromISR>
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	e002      	b.n	8008fbc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008fb6:	f001 ff19 	bl	800adec <xTaskGetTickCount>
 8008fba:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008fbc:	687b      	ldr	r3, [r7, #4]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b08e      	sub	sp, #56	; 0x38
 8008fca:	af04      	add	r7, sp, #16
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd6:	f3ef 8305 	mrs	r3, IPSR
 8008fda:	617b      	str	r3, [r7, #20]
  return(result);
 8008fdc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d17e      	bne.n	80090e0 <osThreadNew+0x11a>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d07b      	beq.n	80090e0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fec:	2318      	movs	r3, #24
 8008fee:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ff8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d045      	beq.n	800908c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <osThreadNew+0x48>
        name = attr->name;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d008      	beq.n	8009034 <osThreadNew+0x6e>
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2b38      	cmp	r3, #56	; 0x38
 8009026:	d805      	bhi.n	8009034 <osThreadNew+0x6e>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <osThreadNew+0x72>
        return (NULL);
 8009034:	2300      	movs	r3, #0
 8009036:	e054      	b.n	80090e2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	089b      	lsrs	r3, r3, #2
 8009046:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00e      	beq.n	800906e <osThreadNew+0xa8>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2bbb      	cmp	r3, #187	; 0xbb
 8009056:	d90a      	bls.n	800906e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <osThreadNew+0xa8>
        mem = 1;
 8009068:	2301      	movs	r3, #1
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e010      	b.n	8009090 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <osThreadNew+0xca>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d108      	bne.n	8009090 <osThreadNew+0xca>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d104      	bne.n	8009090 <osThreadNew+0xca>
          mem = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e001      	b.n	8009090 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d110      	bne.n	80090b8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800909e:	9202      	str	r2, [sp, #8]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6a3a      	ldr	r2, [r7, #32]
 80090aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f001 fa8f 	bl	800a5d0 <xTaskCreateStatic>
 80090b2:	4603      	mov	r3, r0
 80090b4:	613b      	str	r3, [r7, #16]
 80090b6:	e013      	b.n	80090e0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d110      	bne.n	80090e0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	f107 0310 	add.w	r3, r7, #16
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f001 fada 	bl	800a68a <xTaskCreate>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d001      	beq.n	80090e0 <osThreadNew+0x11a>
            hTask = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090e0:	693b      	ldr	r3, [r7, #16]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3728      	adds	r7, #40	; 0x28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f6:	f3ef 8305 	mrs	r3, IPSR
 80090fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80090fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <osThreadSuspend+0x20>
    stat = osErrorISR;
 8009102:	f06f 0305 	mvn.w	r3, #5
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e00b      	b.n	8009122 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8009110:	f06f 0303 	mvn.w	r3, #3
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	e004      	b.n	8009122 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800911c:	6938      	ldr	r0, [r7, #16]
 800911e:	f001 fc43 	bl	800a9a8 <vTaskSuspend>
  }

  return (stat);
 8009122:	697b      	ldr	r3, [r7, #20]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009138:	f3ef 8305 	mrs	r3, IPSR
 800913c:	60fb      	str	r3, [r7, #12]
  return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <osThreadResume+0x20>
    stat = osErrorISR;
 8009144:	f06f 0305 	mvn.w	r3, #5
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e00b      	b.n	8009164 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <osThreadResume+0x2e>
    stat = osErrorParameter;
 8009152:	f06f 0303 	mvn.w	r3, #3
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e004      	b.n	8009164 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800915a:	2300      	movs	r3, #0
 800915c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800915e:	6938      	ldr	r0, [r7, #16]
 8009160:	f001 fcca 	bl	800aaf8 <vTaskResume>
  }

  return (stat);
 8009164:	697b      	ldr	r3, [r7, #20]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009176:	f3ef 8305 	mrs	r3, IPSR
 800917a:	60bb      	str	r3, [r7, #8]
  return(result);
 800917c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <osDelay+0x1c>
    stat = osErrorISR;
 8009182:	f06f 0305 	mvn.w	r3, #5
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e007      	b.n	800919a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 fbd3 	bl	800a940 <vTaskDelay>
    }
  }

  return (stat);
 800919a:	68fb      	ldr	r3, [r7, #12]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091b4:	f3ef 8305 	mrs	r3, IPSR
 80091b8:	613b      	str	r3, [r7, #16]
  return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d175      	bne.n	80092ac <osSemaphoreNew+0x108>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d072      	beq.n	80092ac <osSemaphoreNew+0x108>
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d86e      	bhi.n	80092ac <osSemaphoreNew+0x108>
    mem = -1;
 80091ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d015      	beq.n	8009206 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <osSemaphoreNew+0x4c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	2b4f      	cmp	r3, #79	; 0x4f
 80091e8:	d902      	bls.n	80091f0 <osSemaphoreNew+0x4c>
        mem = 1;
 80091ea:	2301      	movs	r3, #1
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	e00c      	b.n	800920a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <osSemaphoreNew+0x66>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <osSemaphoreNew+0x66>
          mem = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	e001      	b.n	800920a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009210:	d04c      	beq.n	80092ac <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d128      	bne.n	800926a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10a      	bne.n	8009234 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2203      	movs	r2, #3
 8009224:	9200      	str	r2, [sp, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	2100      	movs	r1, #0
 800922a:	2001      	movs	r0, #1
 800922c:	f000 fa2a 	bl	8009684 <xQueueGenericCreateStatic>
 8009230:	61f8      	str	r0, [r7, #28]
 8009232:	e005      	b.n	8009240 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009234:	2203      	movs	r2, #3
 8009236:	2100      	movs	r1, #0
 8009238:	2001      	movs	r0, #1
 800923a:	f000 fa9b 	bl	8009774 <xQueueGenericCreate>
 800923e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d022      	beq.n	800928c <osSemaphoreNew+0xe8>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01f      	beq.n	800928c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800924c:	2300      	movs	r3, #0
 800924e:	2200      	movs	r2, #0
 8009250:	2100      	movs	r1, #0
 8009252:	69f8      	ldr	r0, [r7, #28]
 8009254:	f000 fb56 	bl	8009904 <xQueueGenericSend>
 8009258:	4603      	mov	r3, r0
 800925a:	2b01      	cmp	r3, #1
 800925c:	d016      	beq.n	800928c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800925e:	69f8      	ldr	r0, [r7, #28]
 8009260:	f000 ffe2 	bl	800a228 <vQueueDelete>
            hSemaphore = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	e010      	b.n	800928c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d108      	bne.n	8009282 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	461a      	mov	r2, r3
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fad8 	bl	800982e <xQueueCreateCountingSemaphoreStatic>
 800927e:	61f8      	str	r0, [r7, #28]
 8009280:	e004      	b.n	800928c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 fb09 	bl	800989c <xQueueCreateCountingSemaphore>
 800928a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00c      	beq.n	80092ac <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	e001      	b.n	80092a4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80092a4:	6979      	ldr	r1, [r7, #20]
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f001 f90a 	bl	800a4c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80092ac:	69fb      	ldr	r3, [r7, #28]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80092d0:	f06f 0303 	mvn.w	r3, #3
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e039      	b.n	800934c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d8:	f3ef 8305 	mrs	r3, IPSR
 80092dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80092de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d022      	beq.n	800932a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80092ea:	f06f 0303 	mvn.w	r3, #3
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e02c      	b.n	800934c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80092f6:	f107 0308 	add.w	r3, r7, #8
 80092fa:	461a      	mov	r2, r3
 80092fc:	2100      	movs	r1, #0
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 ff12 	bl	800a128 <xQueueReceiveFromISR>
 8009304:	4603      	mov	r3, r0
 8009306:	2b01      	cmp	r3, #1
 8009308:	d003      	beq.n	8009312 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800930a:	f06f 0302 	mvn.w	r3, #2
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	e01c      	b.n	800934c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d019      	beq.n	800934c <osSemaphoreAcquire+0x94>
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <osSemaphoreAcquire+0xa0>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	e010      	b.n	800934c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6938      	ldr	r0, [r7, #16]
 800932e:	f000 fdef 	bl	8009f10 <xQueueSemaphoreTake>
 8009332:	4603      	mov	r3, r0
 8009334:	2b01      	cmp	r3, #1
 8009336:	d009      	beq.n	800934c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800933e:	f06f 0301 	mvn.w	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e002      	b.n	800934c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009346:	f06f 0302 	mvn.w	r3, #2
 800934a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800934c:	697b      	ldr	r3, [r7, #20]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009372:	f06f 0303 	mvn.w	r3, #3
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e02c      	b.n	80093d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800937a:	f3ef 8305 	mrs	r3, IPSR
 800937e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009380:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01a      	beq.n	80093bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009386:	2300      	movs	r3, #0
 8009388:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4619      	mov	r1, r3
 8009390:	6938      	ldr	r0, [r7, #16]
 8009392:	f000 fc50 	bl	8009c36 <xQueueGiveFromISR>
 8009396:	4603      	mov	r3, r0
 8009398:	2b01      	cmp	r3, #1
 800939a:	d003      	beq.n	80093a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800939c:	f06f 0302 	mvn.w	r3, #2
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	e017      	b.n	80093d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d014      	beq.n	80093d4 <osSemaphoreRelease+0x78>
 80093aa:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <osSemaphoreRelease+0x84>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	e00b      	b.n	80093d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80093bc:	2300      	movs	r3, #0
 80093be:	2200      	movs	r2, #0
 80093c0:	2100      	movs	r1, #0
 80093c2:	6938      	ldr	r0, [r7, #16]
 80093c4:	f000 fa9e 	bl	8009904 <xQueueGenericSend>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d002      	beq.n	80093d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80093ce:	f06f 0302 	mvn.w	r3, #2
 80093d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80093d4:	697b      	ldr	r3, [r7, #20]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a07      	ldr	r2, [pc, #28]	; (8009410 <vApplicationGetIdleTaskMemory+0x2c>)
 80093f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a06      	ldr	r2, [pc, #24]	; (8009414 <vApplicationGetIdleTaskMemory+0x30>)
 80093fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2280      	movs	r2, #128	; 0x80
 8009400:	601a      	str	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20000228 	.word	0x20000228
 8009414:	200002e4 	.word	0x200002e4

08009418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a07      	ldr	r2, [pc, #28]	; (8009444 <vApplicationGetTimerTaskMemory+0x2c>)
 8009428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	4a06      	ldr	r2, [pc, #24]	; (8009448 <vApplicationGetTimerTaskMemory+0x30>)
 800942e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009436:	601a      	str	r2, [r3, #0]
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	200004e4 	.word	0x200004e4
 8009448:	200005a0 	.word	0x200005a0

0800944c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f103 0208 	add.w	r2, r3, #8
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f103 0208 	add.w	r2, r3, #8
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f103 0208 	add.w	r2, r3, #8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009504:	d103      	bne.n	800950e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e00c      	b.n	8009528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3308      	adds	r3, #8
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <vListInsert+0x2e>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	d2f6      	bcs.n	8009516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6892      	ldr	r2, [r2, #8]
 8009576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6852      	ldr	r2, [r2, #4]
 8009580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d103      	bne.n	8009594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	1e5a      	subs	r2, r3, #1
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095de:	f002 fdb1 	bl	800c144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095ee:	fb01 f303 	mul.w	r3, r1, r3
 80095f2:	441a      	add	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960e:	3b01      	subs	r3, #1
 8009610:	68f9      	ldr	r1, [r7, #12]
 8009612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	441a      	add	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	22ff      	movs	r2, #255	; 0xff
 8009622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	22ff      	movs	r2, #255	; 0xff
 800962a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d114      	bne.n	800965e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01a      	beq.n	8009672 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3310      	adds	r3, #16
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fd63 	bl	800b10c <xTaskRemoveFromEventList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d012      	beq.n	8009672 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <xQueueGenericReset+0xcc>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	e009      	b.n	8009672 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3310      	adds	r3, #16
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff fef2 	bl	800944c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3324      	adds	r3, #36	; 0x24
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff feed 	bl	800944c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009672:	f002 fd97 	bl	800c1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009676:	2301      	movs	r3, #1
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08e      	sub	sp, #56	; 0x38
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <xQueueGenericCreateStatic+0x52>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <xQueueGenericCreateStatic+0x56>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e000      	b.n	80096dc <xQueueGenericCreateStatic+0x58>
 80096da:	2300      	movs	r3, #0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	623b      	str	r3, [r7, #32]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <xQueueGenericCreateStatic+0x7e>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <xQueueGenericCreateStatic+0x82>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueGenericCreateStatic+0x84>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	61fb      	str	r3, [r7, #28]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009722:	2350      	movs	r3, #80	; 0x50
 8009724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b50      	cmp	r3, #80	; 0x50
 800972a:	d00a      	beq.n	8009742 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	61bb      	str	r3, [r7, #24]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009742:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00d      	beq.n	800976a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009756:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4613      	mov	r3, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f83f 	bl	80097e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800976c:	4618      	mov	r0, r3
 800976e:	3730      	adds	r7, #48	; 0x30
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10a      	bne.n	800979e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	613b      	str	r3, [r7, #16]
}
 800979a:	bf00      	nop
 800979c:	e7fe      	b.n	800979c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
 80097a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	3350      	adds	r3, #80	; 0x50
 80097ac:	4618      	mov	r0, r3
 80097ae:	f002 fdeb 	bl	800c388 <pvPortMalloc>
 80097b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d011      	beq.n	80097de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	3350      	adds	r3, #80	; 0x50
 80097c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097cc:	79fa      	ldrb	r2, [r7, #7]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4613      	mov	r3, r2
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f805 	bl	80097e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097de:	69bb      	ldr	r3, [r7, #24]
	}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d103      	bne.n	8009804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e002      	b.n	800980a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009816:	2101      	movs	r1, #1
 8009818:	69b8      	ldr	r0, [r7, #24]
 800981a:	f7ff fecb 	bl	80095b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	78fa      	ldrb	r2, [r7, #3]
 8009822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800982e:	b580      	push	{r7, lr}
 8009830:	b08a      	sub	sp, #40	; 0x28
 8009832:	af02      	add	r7, sp, #8
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	61bb      	str	r3, [r7, #24]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	429a      	cmp	r2, r3
 800985c:	d90a      	bls.n	8009874 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	617b      	str	r3, [r7, #20]
}
 8009870:	bf00      	nop
 8009872:	e7fe      	b.n	8009872 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009874:	2302      	movs	r3, #2
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff ff00 	bl	8009684 <xQueueGenericCreateStatic>
 8009884:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009892:	69fb      	ldr	r3, [r7, #28]
	}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	613b      	str	r3, [r7, #16]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d90a      	bls.n	80098e0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	60fb      	str	r3, [r7, #12]
}
 80098dc:	bf00      	nop
 80098de:	e7fe      	b.n	80098de <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80098e0:	2202      	movs	r2, #2
 80098e2:	2100      	movs	r1, #0
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff ff45 	bl	8009774 <xQueueGenericCreate>
 80098ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80098f8:	697b      	ldr	r3, [r7, #20]
	}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08e      	sub	sp, #56	; 0x38
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueGenericSend+0x32>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <xQueueGenericSend+0x40>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <xQueueGenericSend+0x44>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <xQueueGenericSend+0x46>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <xQueueGenericSend+0x60>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d103      	bne.n	8009972 <xQueueGenericSend+0x6e>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <xQueueGenericSend+0x72>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSend+0x74>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericSend+0x8e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009992:	f001 fd7d 	bl	800b490 <xTaskGetSchedulerState>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <xQueueGenericSend+0x9e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericSend+0xa2>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericSend+0xa4>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	61fb      	str	r3, [r7, #28]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c2:	f002 fbbf 	bl	800c144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <xQueueGenericSend+0xd4>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d129      	bne.n	8009a2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f000 fc5e 	bl	800a29e <prvCopyDataToQueue>
 80099e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d010      	beq.n	8009a0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 fb8b 	bl	800b10c <xTaskRemoveFromEventList>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099fc:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <xQueueGenericSend+0x1f8>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	e00a      	b.n	8009a24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a14:	4b39      	ldr	r3, [pc, #228]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a24:	f002 fbbe 	bl	800c1a4 <vPortExitCritical>
				return pdPASS;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e063      	b.n	8009af4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a32:	f002 fbb7 	bl	800c1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	e05c      	b.n	8009af4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 fbc5 	bl	800b1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a4e:	f002 fba9 	bl	800c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a52:	f001 f91f 	bl	800ac94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a56:	f002 fb75 	bl	800c144 <vPortEnterCritical>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a66:	d103      	bne.n	8009a70 <xQueueGenericSend+0x16c>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a76:	b25b      	sxtb	r3, r3
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a7c:	d103      	bne.n	8009a86 <xQueueGenericSend+0x182>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a86:	f002 fb8d 	bl	800c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a8a:	1d3a      	adds	r2, r7, #4
 8009a8c:	f107 0314 	add.w	r3, r7, #20
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fbb4 	bl	800b200 <xTaskCheckForTimeOut>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d124      	bne.n	8009ae8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aa0:	f000 fcf5 	bl	800a48e <prvIsQueueFull>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	3310      	adds	r3, #16
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 fada 	bl	800b06c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aba:	f000 fc80 	bl	800a3be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009abe:	f001 f8f7 	bl	800acb0 <xTaskResumeAll>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f af7c 	bne.w	80099c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	e772      	b.n	80099c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ade:	f000 fc6e 	bl	800a3be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ae2:	f001 f8e5 	bl	800acb0 <xTaskResumeAll>
 8009ae6:	e76c      	b.n	80099c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aea:	f000 fc68 	bl	800a3be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aee:	f001 f8df 	bl	800acb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009af2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3738      	adds	r7, #56	; 0x38
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b090      	sub	sp, #64	; 0x40
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <xQueueGenericSendFromISR+0x3c>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <xQueueGenericSendFromISR+0x40>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <xQueueGenericSendFromISR+0x42>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d103      	bne.n	8009b6a <xQueueGenericSendFromISR+0x6a>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericSendFromISR+0x6e>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericSendFromISR+0x70>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	623b      	str	r3, [r7, #32]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b8a:	f002 fbbd 	bl	800c308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61fa      	str	r2, [r7, #28]
 8009ba4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <xQueueGenericSendFromISR+0xbc>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d12f      	bne.n	8009c1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bd2:	f000 fb64 	bl	800a29e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bde:	d112      	bne.n	8009c06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d016      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	3324      	adds	r3, #36	; 0x24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fa8d 	bl	800b10c <xTaskRemoveFromEventList>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00e      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e007      	b.n	8009c16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	b25a      	sxtb	r2, r3
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c16:	2301      	movs	r3, #1
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009c1a:	e001      	b.n	8009c20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3740      	adds	r7, #64	; 0x40
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b08e      	sub	sp, #56	; 0x38
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	623b      	str	r3, [r7, #32]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	61fb      	str	r3, [r7, #28]
}
 8009c7a:	bf00      	nop
 8009c7c:	e7fe      	b.n	8009c7c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <xQueueGiveFromISR+0x58>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <xQueueGiveFromISR+0x5c>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <xQueueGiveFromISR+0x5e>
 8009c92:	2300      	movs	r3, #0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGiveFromISR+0x78>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	61bb      	str	r3, [r7, #24]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cae:	f002 fb2b 	bl	800c308 <vPortValidateInterruptPriority>
	__asm volatile
 8009cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	617a      	str	r2, [r7, #20]
 8009cc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009cca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d22b      	bcs.n	8009d36 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf8:	d112      	bne.n	8009d20 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d016      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 fa00 	bl	800b10c <xTaskRemoveFromEventList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00b      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e007      	b.n	8009d30 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d24:	3301      	adds	r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	b25a      	sxtb	r2, r3
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d30:	2301      	movs	r3, #1
 8009d32:	637b      	str	r3, [r7, #52]	; 0x34
 8009d34:	e001      	b.n	8009d3a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f383 8811 	msr	BASEPRI, r3
}
 8009d44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3738      	adds	r7, #56	; 0x38
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08c      	sub	sp, #48	; 0x30
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <xQueueReceive+0x30>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	623b      	str	r3, [r7, #32]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <xQueueReceive+0x3e>
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <xQueueReceive+0x42>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <xQueueReceive+0x44>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <xQueueReceive+0x5e>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	61fb      	str	r3, [r7, #28]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dae:	f001 fb6f 	bl	800b490 <xTaskGetSchedulerState>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <xQueueReceive+0x6e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <xQueueReceive+0x72>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <xQueueReceive+0x74>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueReceive+0x8e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61bb      	str	r3, [r7, #24]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dde:	f002 f9b1 	bl	800c144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01f      	beq.n	8009e2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df2:	f000 fabe 	bl	800a372 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	1e5a      	subs	r2, r3, #1
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00f      	beq.n	8009e26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	3310      	adds	r3, #16
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 f97e 	bl	800b10c <xTaskRemoveFromEventList>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e16:	4b3d      	ldr	r3, [pc, #244]	; (8009f0c <xQueueReceive+0x1bc>)
 8009e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e26:	f002 f9bd 	bl	800c1a4 <vPortExitCritical>
				return pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e069      	b.n	8009f02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d103      	bne.n	8009e3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e34:	f002 f9b6 	bl	800c1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e062      	b.n	8009f02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e42:	f107 0310 	add.w	r3, r7, #16
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 f9c4 	bl	800b1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e50:	f002 f9a8 	bl	800c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e54:	f000 ff1e 	bl	800ac94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e58:	f002 f974 	bl	800c144 <vPortEnterCritical>
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e68:	d103      	bne.n	8009e72 <xQueueReceive+0x122>
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e78:	b25b      	sxtb	r3, r3
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e7e:	d103      	bne.n	8009e88 <xQueueReceive+0x138>
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e88:	f002 f98c 	bl	800c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e8c:	1d3a      	adds	r2, r7, #4
 8009e8e:	f107 0310 	add.w	r3, r7, #16
 8009e92:	4611      	mov	r1, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 f9b3 	bl	800b200 <xTaskCheckForTimeOut>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d123      	bne.n	8009ee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea2:	f000 fade 	bl	800a462 <prvIsQueueEmpty>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f8d9 	bl	800b06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	f000 fa7f 	bl	800a3be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ec0:	f000 fef6 	bl	800acb0 <xTaskResumeAll>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d189      	bne.n	8009dde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009eca:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <xQueueReceive+0x1bc>)
 8009ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	e780      	b.n	8009dde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ede:	f000 fa6e 	bl	800a3be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ee2:	f000 fee5 	bl	800acb0 <xTaskResumeAll>
 8009ee6:	e77a      	b.n	8009dde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eea:	f000 fa68 	bl	800a3be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eee:	f000 fedf 	bl	800acb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef4:	f000 fab5 	bl	800a462 <prvIsQueueEmpty>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f43f af6f 	beq.w	8009dde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3730      	adds	r7, #48	; 0x30
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	; 0x38
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f22:	2300      	movs	r3, #0
 8009f24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	61fb      	str	r3, [r7, #28]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f60:	f001 fa96 	bl	800b490 <xTaskGetSchedulerState>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <xQueueSemaphoreTake+0x60>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <xQueueSemaphoreTake+0x64>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <xQueueSemaphoreTake+0x66>
 8009f74:	2300      	movs	r3, #0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61bb      	str	r3, [r7, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f90:	f002 f8d8 	bl	800c144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d024      	beq.n	8009fea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	1e5a      	subs	r2, r3, #1
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009fb0:	f001 fbe4 	bl	800b77c <pvTaskIncrementMutexHeldCount>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00f      	beq.n	8009fe2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 f8a0 	bl	800b10c <xTaskRemoveFromEventList>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fd2:	4b54      	ldr	r3, [pc, #336]	; (800a124 <xQueueSemaphoreTake+0x214>)
 8009fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fe2:	f002 f8df 	bl	800c1a4 <vPortExitCritical>
				return pdPASS;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e097      	b.n	800a11a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d111      	bne.n	800a014 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	617b      	str	r3, [r7, #20]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a00c:	f002 f8ca 	bl	800c1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a010:	2300      	movs	r3, #0
 800a012:	e082      	b.n	800a11a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 f8d8 	bl	800b1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a024:	2301      	movs	r3, #1
 800a026:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a028:	f002 f8bc 	bl	800c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02c:	f000 fe32 	bl	800ac94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a030:	f002 f888 	bl	800c144 <vPortEnterCritical>
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a040:	d103      	bne.n	800a04a <xQueueSemaphoreTake+0x13a>
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a050:	b25b      	sxtb	r3, r3
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a056:	d103      	bne.n	800a060 <xQueueSemaphoreTake+0x150>
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a060:	f002 f8a0 	bl	800c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a064:	463a      	mov	r2, r7
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f001 f8c7 	bl	800b200 <xTaskCheckForTimeOut>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d132      	bne.n	800a0de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a07a:	f000 f9f2 	bl	800a462 <prvIsQueueEmpty>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d026      	beq.n	800a0d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a08c:	f002 f85a 	bl	800c144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fa19 	bl	800b4cc <xTaskPriorityInherit>
 800a09a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a09c:	f002 f882 	bl	800c1a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	3324      	adds	r3, #36	; 0x24
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 ffdf 	bl	800b06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0b0:	f000 f985 	bl	800a3be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0b4:	f000 fdfc 	bl	800acb0 <xTaskResumeAll>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f af68 	bne.w	8009f90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a0c0:	4b18      	ldr	r3, [pc, #96]	; (800a124 <xQueueSemaphoreTake+0x214>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	e75e      	b.n	8009f90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a0d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0d4:	f000 f973 	bl	800a3be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0d8:	f000 fdea 	bl	800acb0 <xTaskResumeAll>
 800a0dc:	e758      	b.n	8009f90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a0de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e0:	f000 f96d 	bl	800a3be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0e4:	f000 fde4 	bl	800acb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0ea:	f000 f9ba 	bl	800a462 <prvIsQueueEmpty>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f43f af4d 	beq.w	8009f90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00d      	beq.n	800a118 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a0fc:	f002 f822 	bl	800c144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a102:	f000 f8b4 	bl	800a26e <prvGetDisinheritPriorityAfterTimeout>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 fab2 	bl	800b678 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a114:	f002 f846 	bl	800c1a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3738      	adds	r7, #56	; 0x38
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08e      	sub	sp, #56	; 0x38
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	623b      	str	r3, [r7, #32]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <xQueueReceiveFromISR+0x3a>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <xQueueReceiveFromISR+0x3e>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueReceiveFromISR+0x40>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	61fb      	str	r3, [r7, #28]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a182:	f002 f8c1 	bl	800c308 <vPortValidateInterruptPriority>
	__asm volatile
 800a186:	f3ef 8211 	mrs	r2, BASEPRI
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61ba      	str	r2, [r7, #24]
 800a19c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a19e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d02f      	beq.n	800a20e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1bc:	f000 f8d9 	bl	800a372 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	1e5a      	subs	r2, r3, #1
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1d0:	d112      	bne.n	800a1f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d016      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	3310      	adds	r3, #16
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 ff94 	bl	800b10c <xTaskRemoveFromEventList>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e007      	b.n	800a208 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	b25a      	sxtb	r2, r3
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a208:	2301      	movs	r3, #1
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
 800a20c:	e001      	b.n	800a212 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a20e:	2300      	movs	r3, #0
 800a210:	637b      	str	r3, [r7, #52]	; 0x34
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f383 8811 	msr	BASEPRI, r3
}
 800a21c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a220:	4618      	mov	r0, r3
 800a222:	3738      	adds	r7, #56	; 0x38
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <vQueueDelete+0x28>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	60bb      	str	r3, [r7, #8]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f95f 	bl	800a514 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f002 f95d 	bl	800c520 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a266:	bf00      	nop
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a26e:	b480      	push	{r7}
 800a270:	b085      	sub	sp, #20
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d006      	beq.n	800a28c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	e001      	b.n	800a290 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a290:	68fb      	ldr	r3, [r7, #12]
	}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10d      	bne.n	800a2d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d14d      	bne.n	800a360 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 f967 	bl	800b59c <xTaskPriorityDisinherit>
 800a2ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	609a      	str	r2, [r3, #8]
 800a2d6:	e043      	b.n	800a360 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d119      	bne.n	800a312 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6858      	ldr	r0, [r3, #4]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	68b9      	ldr	r1, [r7, #8]
 800a2ea:	f002 fb6f 	bl	800c9cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	441a      	add	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	429a      	cmp	r2, r3
 800a306:	d32b      	bcc.n	800a360 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	605a      	str	r2, [r3, #4]
 800a310:	e026      	b.n	800a360 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68d8      	ldr	r0, [r3, #12]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	461a      	mov	r2, r3
 800a31c:	68b9      	ldr	r1, [r7, #8]
 800a31e:	f002 fb55 	bl	800c9cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	425b      	negs	r3, r3
 800a32c:	441a      	add	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d207      	bcs.n	800a34e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	425b      	negs	r3, r3
 800a348:	441a      	add	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d105      	bne.n	800a360 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a368:	697b      	ldr	r3, [r7, #20]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a380:	2b00      	cmp	r3, #0
 800a382:	d018      	beq.n	800a3b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38c:	441a      	add	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d303      	bcc.n	800a3a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68d9      	ldr	r1, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6838      	ldr	r0, [r7, #0]
 800a3b2:	f002 fb0b 	bl	800c9cc <memcpy>
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3c6:	f001 febd 	bl	800c144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3d2:	e011      	b.n	800a3f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d012      	beq.n	800a402 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3324      	adds	r3, #36	; 0x24
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fe93 	bl	800b10c <xTaskRemoveFromEventList>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3ec:	f000 ff6a 	bl	800b2c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dce9      	bgt.n	800a3d4 <prvUnlockQueue+0x16>
 800a400:	e000      	b.n	800a404 <prvUnlockQueue+0x46>
					break;
 800a402:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	22ff      	movs	r2, #255	; 0xff
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a40c:	f001 feca 	bl	800c1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a410:	f001 fe98 	bl	800c144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a41a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a41c:	e011      	b.n	800a442 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d012      	beq.n	800a44c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3310      	adds	r3, #16
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fe6e 	bl	800b10c <xTaskRemoveFromEventList>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a436:	f000 ff45 	bl	800b2c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a446:	2b00      	cmp	r3, #0
 800a448:	dce9      	bgt.n	800a41e <prvUnlockQueue+0x60>
 800a44a:	e000      	b.n	800a44e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a44c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	22ff      	movs	r2, #255	; 0xff
 800a452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a456:	f001 fea5 	bl	800c1a4 <vPortExitCritical>
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a46a:	f001 fe6b 	bl	800c144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	e001      	b.n	800a480 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a480:	f001 fe90 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800a484:	68fb      	ldr	r3, [r7, #12]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a496:	f001 fe55 	bl	800c144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d102      	bne.n	800a4ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	e001      	b.n	800a4b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4b0:	f001 fe78 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e014      	b.n	800a4fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4d0:	4a0f      	ldr	r2, [pc, #60]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10b      	bne.n	800a4f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4dc:	490c      	ldr	r1, [pc, #48]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4e6:	4a0a      	ldr	r2, [pc, #40]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4f2:	e006      	b.n	800a502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b07      	cmp	r3, #7
 800a4fe:	d9e7      	bls.n	800a4d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	200054bc 	.word	0x200054bc

0800a514 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e016      	b.n	800a550 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a522:	4a10      	ldr	r2, [pc, #64]	; (800a564 <vQueueUnregisterQueue+0x50>)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	4413      	add	r3, r2
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d10b      	bne.n	800a54a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a532:	4a0c      	ldr	r2, [pc, #48]	; (800a564 <vQueueUnregisterQueue+0x50>)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2100      	movs	r1, #0
 800a538:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a53c:	4a09      	ldr	r2, [pc, #36]	; (800a564 <vQueueUnregisterQueue+0x50>)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4413      	add	r3, r2
 800a544:	2200      	movs	r2, #0
 800a546:	605a      	str	r2, [r3, #4]
				break;
 800a548:	e006      	b.n	800a558 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b07      	cmp	r3, #7
 800a554:	d9e5      	bls.n	800a522 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	200054bc 	.word	0x200054bc

0800a568 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a578:	f001 fde4 	bl	800c144 <vPortEnterCritical>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a582:	b25b      	sxtb	r3, r3
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a588:	d103      	bne.n	800a592 <vQueueWaitForMessageRestricted+0x2a>
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59e:	d103      	bne.n	800a5a8 <vQueueWaitForMessageRestricted+0x40>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5a8:	f001 fdfc 	bl	800c1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d106      	bne.n	800a5c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	68b9      	ldr	r1, [r7, #8]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fd79 	bl	800b0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5c2:	6978      	ldr	r0, [r7, #20]
 800a5c4:	f7ff fefb 	bl	800a3be <prvUnlockQueue>
	}
 800a5c8:	bf00      	nop
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08e      	sub	sp, #56	; 0x38
 800a5d4:	af04      	add	r7, sp, #16
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	623b      	str	r3, [r7, #32]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xTaskCreateStatic+0x46>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	61fb      	str	r3, [r7, #28]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a616:	23bc      	movs	r3, #188	; 0xbc
 800a618:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2bbc      	cmp	r3, #188	; 0xbc
 800a61e:	d00a      	beq.n	800a636 <xTaskCreateStatic+0x66>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	61bb      	str	r3, [r7, #24]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a636:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d01e      	beq.n	800a67c <xTaskCreateStatic+0xac>
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01b      	beq.n	800a67c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a64c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	2202      	movs	r2, #2
 800a652:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a656:	2300      	movs	r3, #0
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	f107 0314 	add.w	r3, r7, #20
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f850 	bl	800a714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a676:	f000 f8f3 	bl	800a860 <prvAddNewTaskToReadyList>
 800a67a:	e001      	b.n	800a680 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a680:	697b      	ldr	r3, [r7, #20]
	}
 800a682:	4618      	mov	r0, r3
 800a684:	3728      	adds	r7, #40	; 0x28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b08c      	sub	sp, #48	; 0x30
 800a68e:	af04      	add	r7, sp, #16
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	603b      	str	r3, [r7, #0]
 800a696:	4613      	mov	r3, r2
 800a698:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fe72 	bl	800c388 <pvPortMalloc>
 800a6a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00e      	beq.n	800a6ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6ac:	20bc      	movs	r0, #188	; 0xbc
 800a6ae:	f001 fe6b 	bl	800c388 <pvPortMalloc>
 800a6b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30
 800a6c0:	e005      	b.n	800a6ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f001 ff2c 	bl	800c520 <vPortFree>
 800a6c8:	e001      	b.n	800a6ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d017      	beq.n	800a704 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6dc:	88fa      	ldrh	r2, [r7, #6]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	9302      	str	r3, [sp, #8]
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 f80e 	bl	800a714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f8:	69f8      	ldr	r0, [r7, #28]
 800a6fa:	f000 f8b1 	bl	800a860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6fe:	2301      	movs	r3, #1
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	e002      	b.n	800a70a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a70a:	69bb      	ldr	r3, [r7, #24]
	}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3720      	adds	r7, #32
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	461a      	mov	r2, r3
 800a72c:	21a5      	movs	r1, #165	; 0xa5
 800a72e:	f002 f95b 	bl	800c9e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a73c:	3b01      	subs	r3, #1
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	f023 0307 	bic.w	r3, r3, #7
 800a74a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	617b      	str	r3, [r7, #20]
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01f      	beq.n	800a7b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a772:	2300      	movs	r3, #0
 800a774:	61fb      	str	r3, [r7, #28]
 800a776:	e012      	b.n	800a79e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	7819      	ldrb	r1, [r3, #0]
 800a780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	3334      	adds	r3, #52	; 0x34
 800a788:	460a      	mov	r2, r1
 800a78a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	4413      	add	r3, r2
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d006      	beq.n	800a7a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	3301      	adds	r3, #1
 800a79c:	61fb      	str	r3, [r7, #28]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	2b0f      	cmp	r3, #15
 800a7a2:	d9e9      	bls.n	800a778 <prvInitialiseNewTask+0x64>
 800a7a4:	e000      	b.n	800a7a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a7a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7b0:	e003      	b.n	800a7ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	2b37      	cmp	r3, #55	; 0x37
 800a7be:	d901      	bls.n	800a7c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7c0:	2337      	movs	r3, #55	; 0x37
 800a7c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fe56 	bl	800948c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	3318      	adds	r3, #24
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe fe51 	bl	800948c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	3354      	adds	r3, #84	; 0x54
 800a814:	2260      	movs	r2, #96	; 0x60
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f002 f8e5 	bl	800c9e8 <memset>
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <prvInitialiseNewTask+0x140>)
 800a822:	659a      	str	r2, [r3, #88]	; 0x58
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	4a0c      	ldr	r2, [pc, #48]	; (800a858 <prvInitialiseNewTask+0x144>)
 800a828:	65da      	str	r2, [r3, #92]	; 0x5c
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	4a0b      	ldr	r2, [pc, #44]	; (800a85c <prvInitialiseNewTask+0x148>)
 800a82e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	69b8      	ldr	r0, [r7, #24]
 800a836:	f001 fb57 	bl	800bee8 <pxPortInitialiseStack>
 800a83a:	4602      	mov	r2, r0
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a84c:	bf00      	nop
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	080116cc 	.word	0x080116cc
 800a858:	080116ec 	.word	0x080116ec
 800a85c:	080116ac 	.word	0x080116ac

0800a860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a868:	f001 fc6c 	bl	800c144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a86c:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <prvAddNewTaskToReadyList+0xc4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	4a2c      	ldr	r2, [pc, #176]	; (800a924 <prvAddNewTaskToReadyList+0xc4>)
 800a874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a876:	4b2c      	ldr	r3, [pc, #176]	; (800a928 <prvAddNewTaskToReadyList+0xc8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a87e:	4a2a      	ldr	r2, [pc, #168]	; (800a928 <prvAddNewTaskToReadyList+0xc8>)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a884:	4b27      	ldr	r3, [pc, #156]	; (800a924 <prvAddNewTaskToReadyList+0xc4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d110      	bne.n	800a8ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a88c:	f000 fd3e 	bl	800b30c <prvInitialiseTaskLists>
 800a890:	e00d      	b.n	800a8ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a892:	4b26      	ldr	r3, [pc, #152]	; (800a92c <prvAddNewTaskToReadyList+0xcc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d109      	bne.n	800a8ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a89a:	4b23      	ldr	r3, [pc, #140]	; (800a928 <prvAddNewTaskToReadyList+0xc8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d802      	bhi.n	800a8ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8a8:	4a1f      	ldr	r2, [pc, #124]	; (800a928 <prvAddNewTaskToReadyList+0xc8>)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8ae:	4b20      	ldr	r3, [pc, #128]	; (800a930 <prvAddNewTaskToReadyList+0xd0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	4a1e      	ldr	r2, [pc, #120]	; (800a930 <prvAddNewTaskToReadyList+0xd0>)
 800a8b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8b8:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <prvAddNewTaskToReadyList+0xd0>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c4:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <prvAddNewTaskToReadyList+0xd4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d903      	bls.n	800a8d4 <prvAddNewTaskToReadyList+0x74>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	4a18      	ldr	r2, [pc, #96]	; (800a934 <prvAddNewTaskToReadyList+0xd4>)
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	4613      	mov	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4a15      	ldr	r2, [pc, #84]	; (800a938 <prvAddNewTaskToReadyList+0xd8>)
 800a8e2:	441a      	add	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	f7fe fddb 	bl	80094a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8f0:	f001 fc58 	bl	800c1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <prvAddNewTaskToReadyList+0xcc>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <prvAddNewTaskToReadyList+0xc8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	429a      	cmp	r2, r3
 800a908:	d207      	bcs.n	800a91a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <prvAddNewTaskToReadyList+0xdc>)
 800a90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000e74 	.word	0x20000e74
 800a928:	200009a0 	.word	0x200009a0
 800a92c:	20000e80 	.word	0x20000e80
 800a930:	20000e90 	.word	0x20000e90
 800a934:	20000e7c 	.word	0x20000e7c
 800a938:	200009a4 	.word	0x200009a4
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d017      	beq.n	800a982 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a952:	4b13      	ldr	r3, [pc, #76]	; (800a9a0 <vTaskDelay+0x60>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <vTaskDelay+0x30>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	60bb      	str	r3, [r7, #8]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a970:	f000 f990 	bl	800ac94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a974:	2100      	movs	r1, #0
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 ff14 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a97c:	f000 f998 	bl	800acb0 <xTaskResumeAll>
 800a980:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d107      	bne.n	800a998 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <vTaskDelay+0x64>)
 800a98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20000e9c 	.word	0x20000e9c
 800a9a4:	e000ed04 	.word	0xe000ed04

0800a9a8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a9b0:	f001 fbc8 	bl	800c144 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d102      	bne.n	800a9c0 <vTaskSuspend+0x18>
 800a9ba:	4b30      	ldr	r3, [pc, #192]	; (800aa7c <vTaskSuspend+0xd4>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	e000      	b.n	800a9c2 <vTaskSuspend+0x1a>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe fdc9 	bl	8009560 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3318      	adds	r3, #24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fdc0 	bl	8009560 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4826      	ldr	r0, [pc, #152]	; (800aa80 <vTaskSuspend+0xd8>)
 800a9e8:	f7fe fd5d 	bl	80094a6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d103      	bne.n	800aa00 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800aa00:	f001 fbd0 	bl	800c1a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800aa04:	4b1f      	ldr	r3, [pc, #124]	; (800aa84 <vTaskSuspend+0xdc>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800aa0c:	f001 fb9a 	bl	800c144 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800aa10:	f000 fd1e 	bl	800b450 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800aa14:	f001 fbc6 	bl	800c1a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800aa18:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <vTaskSuspend+0xd4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d127      	bne.n	800aa72 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800aa22:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <vTaskSuspend+0xdc>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d017      	beq.n	800aa5a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800aa2a:	4b17      	ldr	r3, [pc, #92]	; (800aa88 <vTaskSuspend+0xe0>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <vTaskSuspend+0xa0>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	60bb      	str	r3, [r7, #8]
}
 800aa44:	bf00      	nop
 800aa46:	e7fe      	b.n	800aa46 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800aa48:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <vTaskSuspend+0xe4>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa58:	e00b      	b.n	800aa72 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <vTaskSuspend+0xd8>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <vTaskSuspend+0xe8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d103      	bne.n	800aa6e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <vTaskSuspend+0xd4>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
	}
 800aa6c:	e001      	b.n	800aa72 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800aa6e:	f000 fa99 	bl	800afa4 <vTaskSwitchContext>
	}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	200009a0 	.word	0x200009a0
 800aa80:	20000e60 	.word	0x20000e60
 800aa84:	20000e80 	.word	0x20000e80
 800aa88:	20000e9c 	.word	0x20000e9c
 800aa8c:	e000ed04 	.word	0xe000ed04
 800aa90:	20000e74 	.word	0x20000e74

0800aa94 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	60fb      	str	r3, [r7, #12]
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	4a0a      	ldr	r2, [pc, #40]	; (800aaf0 <prvTaskIsTaskSuspended+0x5c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10a      	bne.n	800aae0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	4a09      	ldr	r2, [pc, #36]	; (800aaf4 <prvTaskIsTaskSuspended+0x60>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d005      	beq.n	800aae0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800aadc:	2301      	movs	r3, #1
 800aade:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aae0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800aae2:	4618      	mov	r0, r3
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	20000e60 	.word	0x20000e60
 800aaf4:	20000e34 	.word	0x20000e34

0800aaf8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10a      	bne.n	800ab20 <vTaskResume+0x28>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	60bb      	str	r3, [r7, #8]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ab20:	4b20      	ldr	r3, [pc, #128]	; (800aba4 <vTaskResume+0xac>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d038      	beq.n	800ab9c <vTaskResume+0xa4>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d035      	beq.n	800ab9c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ab30:	f001 fb08 	bl	800c144 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff ffad 	bl	800aa94 <prvTaskIsTaskSuspended>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d02b      	beq.n	800ab98 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fd0b 	bl	8009560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <vTaskResume+0xb0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d903      	bls.n	800ab5e <vTaskResume+0x66>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <vTaskResume+0xb0>)
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4a10      	ldr	r2, [pc, #64]	; (800abac <vTaskResume+0xb4>)
 800ab6c:	441a      	add	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3304      	adds	r3, #4
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f7fe fc96 	bl	80094a6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <vTaskResume+0xac>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d307      	bcc.n	800ab98 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ab88:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <vTaskResume+0xb8>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ab98:	f001 fb04 	bl	800c1a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab9c:	bf00      	nop
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200009a0 	.word	0x200009a0
 800aba8:	20000e7c 	.word	0x20000e7c
 800abac:	200009a4 	.word	0x200009a4
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08a      	sub	sp, #40	; 0x28
 800abb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abc2:	463a      	mov	r2, r7
 800abc4:	1d39      	adds	r1, r7, #4
 800abc6:	f107 0308 	add.w	r3, r7, #8
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fc0a 	bl	80093e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	9202      	str	r2, [sp, #8]
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2300      	movs	r3, #0
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	460a      	mov	r2, r1
 800abe2:	4924      	ldr	r1, [pc, #144]	; (800ac74 <vTaskStartScheduler+0xc0>)
 800abe4:	4824      	ldr	r0, [pc, #144]	; (800ac78 <vTaskStartScheduler+0xc4>)
 800abe6:	f7ff fcf3 	bl	800a5d0 <xTaskCreateStatic>
 800abea:	4603      	mov	r3, r0
 800abec:	4a23      	ldr	r2, [pc, #140]	; (800ac7c <vTaskStartScheduler+0xc8>)
 800abee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800abf0:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <vTaskStartScheduler+0xc8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800abf8:	2301      	movs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
 800abfc:	e001      	b.n	800ac02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d102      	bne.n	800ac0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac08:	f000 fe20 	bl	800b84c <xTimerCreateTimerTask>
 800ac0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d11b      	bne.n	800ac4c <vTaskStartScheduler+0x98>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	613b      	str	r3, [r7, #16]
}
 800ac26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac28:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <vTaskStartScheduler+0xcc>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3354      	adds	r3, #84	; 0x54
 800ac2e:	4a15      	ldr	r2, [pc, #84]	; (800ac84 <vTaskStartScheduler+0xd0>)
 800ac30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <vTaskStartScheduler+0xd4>)
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <vTaskStartScheduler+0xd8>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <vTaskStartScheduler+0xdc>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac46:	f001 f9db 	bl	800c000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac4a:	e00e      	b.n	800ac6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac52:	d10a      	bne.n	800ac6a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
}
 800ac66:	bf00      	nop
 800ac68:	e7fe      	b.n	800ac68 <vTaskStartScheduler+0xb4>
}
 800ac6a:	bf00      	nop
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	080115d4 	.word	0x080115d4
 800ac78:	0800b2dd 	.word	0x0800b2dd
 800ac7c:	20000e98 	.word	0x20000e98
 800ac80:	200009a0 	.word	0x200009a0
 800ac84:	20000014 	.word	0x20000014
 800ac88:	20000e94 	.word	0x20000e94
 800ac8c:	20000e80 	.word	0x20000e80
 800ac90:	20000e78 	.word	0x20000e78

0800ac94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <vTaskSuspendAll+0x18>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	4a03      	ldr	r2, [pc, #12]	; (800acac <vTaskSuspendAll+0x18>)
 800aca0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aca2:	bf00      	nop
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	20000e9c 	.word	0x20000e9c

0800acb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acba:	2300      	movs	r3, #0
 800acbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acbe:	4b42      	ldr	r3, [pc, #264]	; (800adc8 <xTaskResumeAll+0x118>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <xTaskResumeAll+0x2c>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	603b      	str	r3, [r7, #0]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acdc:	f001 fa32 	bl	800c144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ace0:	4b39      	ldr	r3, [pc, #228]	; (800adc8 <xTaskResumeAll+0x118>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	4a38      	ldr	r2, [pc, #224]	; (800adc8 <xTaskResumeAll+0x118>)
 800ace8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acea:	4b37      	ldr	r3, [pc, #220]	; (800adc8 <xTaskResumeAll+0x118>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d162      	bne.n	800adb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acf2:	4b36      	ldr	r3, [pc, #216]	; (800adcc <xTaskResumeAll+0x11c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d05e      	beq.n	800adb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acfa:	e02f      	b.n	800ad5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfc:	4b34      	ldr	r3, [pc, #208]	; (800add0 <xTaskResumeAll+0x120>)
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3318      	adds	r3, #24
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fc29 	bl	8009560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3304      	adds	r3, #4
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fc24 	bl	8009560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	4b2d      	ldr	r3, [pc, #180]	; (800add4 <xTaskResumeAll+0x124>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d903      	bls.n	800ad2c <xTaskResumeAll+0x7c>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	4a2a      	ldr	r2, [pc, #168]	; (800add4 <xTaskResumeAll+0x124>)
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4a27      	ldr	r2, [pc, #156]	; (800add8 <xTaskResumeAll+0x128>)
 800ad3a:	441a      	add	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f7fe fbaf 	bl	80094a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4c:	4b23      	ldr	r3, [pc, #140]	; (800addc <xTaskResumeAll+0x12c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d302      	bcc.n	800ad5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad56:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <xTaskResumeAll+0x130>)
 800ad58:	2201      	movs	r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad5c:	4b1c      	ldr	r3, [pc, #112]	; (800add0 <xTaskResumeAll+0x120>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1cb      	bne.n	800acfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad6a:	f000 fb71 	bl	800b450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <xTaskResumeAll+0x134>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d010      	beq.n	800ad9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad7a:	f000 f859 	bl	800ae30 <xTaskIncrementTick>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad84:	4b16      	ldr	r3, [pc, #88]	; (800ade0 <xTaskResumeAll+0x130>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f1      	bne.n	800ad7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ad96:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <xTaskResumeAll+0x134>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad9c:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <xTaskResumeAll+0x130>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ada8:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <xTaskResumeAll+0x138>)
 800adaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adb8:	f001 f9f4 	bl	800c1a4 <vPortExitCritical>

	return xAlreadyYielded;
 800adbc:	68bb      	ldr	r3, [r7, #8]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000e9c 	.word	0x20000e9c
 800adcc:	20000e74 	.word	0x20000e74
 800add0:	20000e34 	.word	0x20000e34
 800add4:	20000e7c 	.word	0x20000e7c
 800add8:	200009a4 	.word	0x200009a4
 800addc:	200009a0 	.word	0x200009a0
 800ade0:	20000e88 	.word	0x20000e88
 800ade4:	20000e84 	.word	0x20000e84
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <xTaskGetTickCount+0x1c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800adf8:	687b      	ldr	r3, [r7, #4]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20000e78 	.word	0x20000e78

0800ae0c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae12:	f001 fa79 	bl	800c308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <xTaskGetTickCountFromISR+0x20>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae20:	683b      	ldr	r3, [r7, #0]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000e78 	.word	0x20000e78

0800ae30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae36:	2300      	movs	r3, #0
 800ae38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae3a:	4b4f      	ldr	r3, [pc, #316]	; (800af78 <xTaskIncrementTick+0x148>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f040 808f 	bne.w	800af62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae44:	4b4d      	ldr	r3, [pc, #308]	; (800af7c <xTaskIncrementTick+0x14c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae4c:	4a4b      	ldr	r2, [pc, #300]	; (800af7c <xTaskIncrementTick+0x14c>)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d120      	bne.n	800ae9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae58:	4b49      	ldr	r3, [pc, #292]	; (800af80 <xTaskIncrementTick+0x150>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	603b      	str	r3, [r7, #0]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xTaskIncrementTick+0x46>
 800ae78:	4b41      	ldr	r3, [pc, #260]	; (800af80 <xTaskIncrementTick+0x150>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	4b41      	ldr	r3, [pc, #260]	; (800af84 <xTaskIncrementTick+0x154>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a3f      	ldr	r2, [pc, #252]	; (800af80 <xTaskIncrementTick+0x150>)
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	4a3f      	ldr	r2, [pc, #252]	; (800af84 <xTaskIncrementTick+0x154>)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	4b3e      	ldr	r3, [pc, #248]	; (800af88 <xTaskIncrementTick+0x158>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	4a3d      	ldr	r2, [pc, #244]	; (800af88 <xTaskIncrementTick+0x158>)
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	f000 fadb 	bl	800b450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae9a:	4b3c      	ldr	r3, [pc, #240]	; (800af8c <xTaskIncrementTick+0x15c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d349      	bcc.n	800af38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aea4:	4b36      	ldr	r3, [pc, #216]	; (800af80 <xTaskIncrementTick+0x150>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeae:	4b37      	ldr	r3, [pc, #220]	; (800af8c <xTaskIncrementTick+0x15c>)
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeb4:	601a      	str	r2, [r3, #0]
					break;
 800aeb6:	e03f      	b.n	800af38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb8:	4b31      	ldr	r3, [pc, #196]	; (800af80 <xTaskIncrementTick+0x150>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d203      	bcs.n	800aed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aed0:	4a2e      	ldr	r2, [pc, #184]	; (800af8c <xTaskIncrementTick+0x15c>)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aed6:	e02f      	b.n	800af38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe fb3f 	bl	8009560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	3318      	adds	r3, #24
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe fb36 	bl	8009560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef8:	4b25      	ldr	r3, [pc, #148]	; (800af90 <xTaskIncrementTick+0x160>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d903      	bls.n	800af08 <xTaskIncrementTick+0xd8>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	4a22      	ldr	r2, [pc, #136]	; (800af90 <xTaskIncrementTick+0x160>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4a1f      	ldr	r2, [pc, #124]	; (800af94 <xTaskIncrementTick+0x164>)
 800af16:	441a      	add	r2, r3
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4610      	mov	r0, r2
 800af20:	f7fe fac1 	bl	80094a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <xTaskIncrementTick+0x168>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	429a      	cmp	r2, r3
 800af30:	d3b8      	bcc.n	800aea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af32:	2301      	movs	r3, #1
 800af34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af36:	e7b5      	b.n	800aea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af38:	4b17      	ldr	r3, [pc, #92]	; (800af98 <xTaskIncrementTick+0x168>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3e:	4915      	ldr	r1, [pc, #84]	; (800af94 <xTaskIncrementTick+0x164>)
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d901      	bls.n	800af54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <xTaskIncrementTick+0x16c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e004      	b.n	800af6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af62:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <xTaskIncrementTick+0x170>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3301      	adds	r3, #1
 800af68:	4a0d      	ldr	r2, [pc, #52]	; (800afa0 <xTaskIncrementTick+0x170>)
 800af6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af6c:	697b      	ldr	r3, [r7, #20]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000e9c 	.word	0x20000e9c
 800af7c:	20000e78 	.word	0x20000e78
 800af80:	20000e2c 	.word	0x20000e2c
 800af84:	20000e30 	.word	0x20000e30
 800af88:	20000e8c 	.word	0x20000e8c
 800af8c:	20000e94 	.word	0x20000e94
 800af90:	20000e7c 	.word	0x20000e7c
 800af94:	200009a4 	.word	0x200009a4
 800af98:	200009a0 	.word	0x200009a0
 800af9c:	20000e88 	.word	0x20000e88
 800afa0:	20000e84 	.word	0x20000e84

0800afa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afaa:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <vTaskSwitchContext+0xb0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afb2:	4b29      	ldr	r3, [pc, #164]	; (800b058 <vTaskSwitchContext+0xb4>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afb8:	e046      	b.n	800b048 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800afba:	4b27      	ldr	r3, [pc, #156]	; (800b058 <vTaskSwitchContext+0xb4>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc0:	4b26      	ldr	r3, [pc, #152]	; (800b05c <vTaskSwitchContext+0xb8>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	e010      	b.n	800afea <vTaskSwitchContext+0x46>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <vTaskSwitchContext+0x40>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	607b      	str	r3, [r7, #4]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vTaskSwitchContext+0x3e>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	491d      	ldr	r1, [pc, #116]	; (800b060 <vTaskSwitchContext+0xbc>)
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	440b      	add	r3, r1
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0e4      	beq.n	800afc8 <vTaskSwitchContext+0x24>
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4a15      	ldr	r2, [pc, #84]	; (800b060 <vTaskSwitchContext+0xbc>)
 800b00a:	4413      	add	r3, r2
 800b00c:	60bb      	str	r3, [r7, #8]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	605a      	str	r2, [r3, #4]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	3308      	adds	r3, #8
 800b020:	429a      	cmp	r2, r3
 800b022:	d104      	bne.n	800b02e <vTaskSwitchContext+0x8a>
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	605a      	str	r2, [r3, #4]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <vTaskSwitchContext+0xc0>)
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	4a08      	ldr	r2, [pc, #32]	; (800b05c <vTaskSwitchContext+0xb8>)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <vTaskSwitchContext+0xc0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3354      	adds	r3, #84	; 0x54
 800b044:	4a08      	ldr	r2, [pc, #32]	; (800b068 <vTaskSwitchContext+0xc4>)
 800b046:	6013      	str	r3, [r2, #0]
}
 800b048:	bf00      	nop
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20000e9c 	.word	0x20000e9c
 800b058:	20000e88 	.word	0x20000e88
 800b05c:	20000e7c 	.word	0x20000e7c
 800b060:	200009a4 	.word	0x200009a4
 800b064:	200009a0 	.word	0x200009a0
 800b068:	20000014 	.word	0x20000014

0800b06c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	60fb      	str	r3, [r7, #12]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b092:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <vTaskPlaceOnEventList+0x44>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3318      	adds	r3, #24
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7fe fa27 	bl	80094ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	6838      	ldr	r0, [r7, #0]
 800b0a4:	f000 fb7e 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
}
 800b0a8:	bf00      	nop
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200009a0 	.word	0x200009a0

0800b0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10a      	bne.n	800b0dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	617b      	str	r3, [r7, #20]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <vTaskPlaceOnEventListRestricted+0x54>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3318      	adds	r3, #24
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7fe f9de 	bl	80094a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b0f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	68b8      	ldr	r0, [r7, #8]
 800b0fa:	f000 fb53 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
	}
 800b0fe:	bf00      	nop
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	200009a0 	.word	0x200009a0

0800b10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	60fb      	str	r3, [r7, #12]
}
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3318      	adds	r3, #24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fe fa0f 	bl	8009560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b142:	4b1e      	ldr	r3, [pc, #120]	; (800b1bc <xTaskRemoveFromEventList+0xb0>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d11d      	bne.n	800b186 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fa06 	bl	8009560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b158:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <xTaskRemoveFromEventList+0xb4>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d903      	bls.n	800b168 <xTaskRemoveFromEventList+0x5c>
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <xTaskRemoveFromEventList+0xb4>)
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4a13      	ldr	r2, [pc, #76]	; (800b1c4 <xTaskRemoveFromEventList+0xb8>)
 800b176:	441a      	add	r2, r3
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f7fe f991 	bl	80094a6 <vListInsertEnd>
 800b184:	e005      	b.n	800b192 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3318      	adds	r3, #24
 800b18a:	4619      	mov	r1, r3
 800b18c:	480e      	ldr	r0, [pc, #56]	; (800b1c8 <xTaskRemoveFromEventList+0xbc>)
 800b18e:	f7fe f98a 	bl	80094a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b196:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <xTaskRemoveFromEventList+0xc0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d905      	bls.n	800b1ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1a4:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <xTaskRemoveFromEventList+0xc4>)
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	e001      	b.n	800b1b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1b0:	697b      	ldr	r3, [r7, #20]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000e9c 	.word	0x20000e9c
 800b1c0:	20000e7c 	.word	0x20000e7c
 800b1c4:	200009a4 	.word	0x200009a4
 800b1c8:	20000e34 	.word	0x20000e34
 800b1cc:	200009a0 	.word	0x200009a0
 800b1d0:	20000e88 	.word	0x20000e88

0800b1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <vTaskInternalSetTimeOutState+0x24>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <vTaskInternalSetTimeOutState+0x28>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	605a      	str	r2, [r3, #4]
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	20000e8c 	.word	0x20000e8c
 800b1fc:	20000e78 	.word	0x20000e78

0800b200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10a      	bne.n	800b226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	613b      	str	r3, [r7, #16]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10a      	bne.n	800b242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	60fb      	str	r3, [r7, #12]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b242:	f000 ff7f 	bl	800c144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b246:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <xTaskCheckForTimeOut+0xbc>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b25e:	d102      	bne.n	800b266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]
 800b264:	e023      	b.n	800b2ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <xTaskCheckForTimeOut+0xc0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d007      	beq.n	800b282 <xTaskCheckForTimeOut+0x82>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d302      	bcc.n	800b282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b27c:	2301      	movs	r3, #1
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	e015      	b.n	800b2ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d20b      	bcs.n	800b2a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff ff9b 	bl	800b1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	61fb      	str	r3, [r7, #28]
 800b2a2:	e004      	b.n	800b2ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2ae:	f000 ff79 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3720      	adds	r7, #32
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20000e78 	.word	0x20000e78
 800b2c0:	20000e8c 	.word	0x20000e8c

0800b2c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2c8:	4b03      	ldr	r3, [pc, #12]	; (800b2d8 <vTaskMissedYield+0x14>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20000e88 	.word	0x20000e88

0800b2dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b2e4:	f000 f852 	bl	800b38c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <prvIdleTask+0x28>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d9f9      	bls.n	800b2e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <prvIdleTask+0x2c>)
 800b2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b300:	e7f0      	b.n	800b2e4 <prvIdleTask+0x8>
 800b302:	bf00      	nop
 800b304:	200009a4 	.word	0x200009a4
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b312:	2300      	movs	r3, #0
 800b314:	607b      	str	r3, [r7, #4]
 800b316:	e00c      	b.n	800b332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4a12      	ldr	r2, [pc, #72]	; (800b36c <prvInitialiseTaskLists+0x60>)
 800b324:	4413      	add	r3, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f7fe f890 	bl	800944c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3301      	adds	r3, #1
 800b330:	607b      	str	r3, [r7, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b37      	cmp	r3, #55	; 0x37
 800b336:	d9ef      	bls.n	800b318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b338:	480d      	ldr	r0, [pc, #52]	; (800b370 <prvInitialiseTaskLists+0x64>)
 800b33a:	f7fe f887 	bl	800944c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b33e:	480d      	ldr	r0, [pc, #52]	; (800b374 <prvInitialiseTaskLists+0x68>)
 800b340:	f7fe f884 	bl	800944c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b344:	480c      	ldr	r0, [pc, #48]	; (800b378 <prvInitialiseTaskLists+0x6c>)
 800b346:	f7fe f881 	bl	800944c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b34a:	480c      	ldr	r0, [pc, #48]	; (800b37c <prvInitialiseTaskLists+0x70>)
 800b34c:	f7fe f87e 	bl	800944c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b350:	480b      	ldr	r0, [pc, #44]	; (800b380 <prvInitialiseTaskLists+0x74>)
 800b352:	f7fe f87b 	bl	800944c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <prvInitialiseTaskLists+0x78>)
 800b358:	4a05      	ldr	r2, [pc, #20]	; (800b370 <prvInitialiseTaskLists+0x64>)
 800b35a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <prvInitialiseTaskLists+0x7c>)
 800b35e:	4a05      	ldr	r2, [pc, #20]	; (800b374 <prvInitialiseTaskLists+0x68>)
 800b360:	601a      	str	r2, [r3, #0]
}
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	200009a4 	.word	0x200009a4
 800b370:	20000e04 	.word	0x20000e04
 800b374:	20000e18 	.word	0x20000e18
 800b378:	20000e34 	.word	0x20000e34
 800b37c:	20000e48 	.word	0x20000e48
 800b380:	20000e60 	.word	0x20000e60
 800b384:	20000e2c 	.word	0x20000e2c
 800b388:	20000e30 	.word	0x20000e30

0800b38c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b392:	e019      	b.n	800b3c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b394:	f000 fed6 	bl	800c144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b398:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <prvCheckTasksWaitingTermination+0x50>)
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe f8db 	bl	8009560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <prvCheckTasksWaitingTermination+0x54>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	4a0b      	ldr	r2, [pc, #44]	; (800b3e0 <prvCheckTasksWaitingTermination+0x54>)
 800b3b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3b4:	4b0b      	ldr	r3, [pc, #44]	; (800b3e4 <prvCheckTasksWaitingTermination+0x58>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	4a0a      	ldr	r2, [pc, #40]	; (800b3e4 <prvCheckTasksWaitingTermination+0x58>)
 800b3bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3be:	f000 fef1 	bl	800c1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f810 	bl	800b3e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <prvCheckTasksWaitingTermination+0x58>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e1      	bne.n	800b394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000e48 	.word	0x20000e48
 800b3e0:	20000e74 	.word	0x20000e74
 800b3e4:	20000e5c 	.word	0x20000e5c

0800b3e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3354      	adds	r3, #84	; 0x54
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 fbcf 	bl	800cb98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b400:	2b00      	cmp	r3, #0
 800b402:	d108      	bne.n	800b416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b408:	4618      	mov	r0, r3
 800b40a:	f001 f889 	bl	800c520 <vPortFree>
				vPortFree( pxTCB );
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 f886 	bl	800c520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b414:	e018      	b.n	800b448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d103      	bne.n	800b428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 f87d 	bl	800c520 <vPortFree>
	}
 800b426:	e00f      	b.n	800b448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d00a      	beq.n	800b448 <prvDeleteTCB+0x60>
	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	60fb      	str	r3, [r7, #12]
}
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <prvDeleteTCB+0x5e>
	}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <prvResetNextTaskUnblockTime+0x38>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b460:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <prvResetNextTaskUnblockTime+0x3c>)
 800b462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b468:	e008      	b.n	800b47c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46a:	4b07      	ldr	r3, [pc, #28]	; (800b488 <prvResetNextTaskUnblockTime+0x38>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4a04      	ldr	r2, [pc, #16]	; (800b48c <prvResetNextTaskUnblockTime+0x3c>)
 800b47a:	6013      	str	r3, [r2, #0]
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	20000e2c 	.word	0x20000e2c
 800b48c:	20000e94 	.word	0x20000e94

0800b490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <xTaskGetSchedulerState+0x34>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	607b      	str	r3, [r7, #4]
 800b4a2:	e008      	b.n	800b4b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4a4:	4b08      	ldr	r3, [pc, #32]	; (800b4c8 <xTaskGetSchedulerState+0x38>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	e001      	b.n	800b4b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4b6:	687b      	ldr	r3, [r7, #4]
	}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	20000e80 	.word	0x20000e80
 800b4c8:	20000e9c 	.word	0x20000e9c

0800b4cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d051      	beq.n	800b586 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <xTaskPriorityInherit+0xc4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d241      	bcs.n	800b574 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	db06      	blt.n	800b506 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f8:	4b25      	ldr	r3, [pc, #148]	; (800b590 <xTaskPriorityInherit+0xc4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6959      	ldr	r1, [r3, #20]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4a1f      	ldr	r2, [pc, #124]	; (800b594 <xTaskPriorityInherit+0xc8>)
 800b518:	4413      	add	r3, r2
 800b51a:	4299      	cmp	r1, r3
 800b51c:	d122      	bne.n	800b564 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	3304      	adds	r3, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe f81c 	bl	8009560 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b528:	4b19      	ldr	r3, [pc, #100]	; (800b590 <xTaskPriorityInherit+0xc4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b536:	4b18      	ldr	r3, [pc, #96]	; (800b598 <xTaskPriorityInherit+0xcc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d903      	bls.n	800b546 <xTaskPriorityInherit+0x7a>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	4a15      	ldr	r2, [pc, #84]	; (800b598 <xTaskPriorityInherit+0xcc>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a10      	ldr	r2, [pc, #64]	; (800b594 <xTaskPriorityInherit+0xc8>)
 800b554:	441a      	add	r2, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fd ffa2 	bl	80094a6 <vListInsertEnd>
 800b562:	e004      	b.n	800b56e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <xTaskPriorityInherit+0xc4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b56e:	2301      	movs	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	e008      	b.n	800b586 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b578:	4b05      	ldr	r3, [pc, #20]	; (800b590 <xTaskPriorityInherit+0xc4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	429a      	cmp	r2, r3
 800b580:	d201      	bcs.n	800b586 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b582:	2301      	movs	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b586:	68fb      	ldr	r3, [r7, #12]
	}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	200009a0 	.word	0x200009a0
 800b594:	200009a4 	.word	0x200009a4
 800b598:	20000e7c 	.word	0x20000e7c

0800b59c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d056      	beq.n	800b660 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5b2:	4b2e      	ldr	r3, [pc, #184]	; (800b66c <xTaskPriorityDisinherit+0xd0>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d00a      	beq.n	800b5d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	60fb      	str	r3, [r7, #12]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10a      	bne.n	800b5f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	60bb      	str	r3, [r7, #8]
}
 800b5ec:	bf00      	nop
 800b5ee:	e7fe      	b.n	800b5ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f4:	1e5a      	subs	r2, r3, #1
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b602:	429a      	cmp	r2, r3
 800b604:	d02c      	beq.n	800b660 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d128      	bne.n	800b660 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	3304      	adds	r3, #4
 800b612:	4618      	mov	r0, r3
 800b614:	f7fd ffa4 	bl	8009560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b630:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <xTaskPriorityDisinherit+0xd4>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d903      	bls.n	800b640 <xTaskPriorityDisinherit+0xa4>
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	4a0c      	ldr	r2, [pc, #48]	; (800b670 <xTaskPriorityDisinherit+0xd4>)
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4a09      	ldr	r2, [pc, #36]	; (800b674 <xTaskPriorityDisinherit+0xd8>)
 800b64e:	441a      	add	r2, r3
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	3304      	adds	r3, #4
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7fd ff25 	bl	80094a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b660:	697b      	ldr	r3, [r7, #20]
	}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	200009a0 	.word	0x200009a0
 800b670:	20000e7c 	.word	0x20000e7c
 800b674:	200009a4 	.word	0x200009a4

0800b678 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b686:	2301      	movs	r3, #1
 800b688:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d06a      	beq.n	800b766 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	60fb      	str	r3, [r7, #12]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d902      	bls.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	61fb      	str	r3, [r7, #28]
 800b6bc:	e002      	b.n	800b6c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d04b      	beq.n	800b766 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d146      	bne.n	800b766 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d10a      	bne.n	800b6f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	60bb      	str	r3, [r7, #8]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	69fa      	ldr	r2, [r7, #28]
 800b702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	db04      	blt.n	800b716 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	6959      	ldr	r1, [r3, #20]
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4a13      	ldr	r2, [pc, #76]	; (800b774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b726:	4413      	add	r3, r2
 800b728:	4299      	cmp	r1, r3
 800b72a:	d11c      	bne.n	800b766 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	3304      	adds	r3, #4
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd ff15 	bl	8009560 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73a:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d903      	bls.n	800b74a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	4a0c      	ldr	r2, [pc, #48]	; (800b778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4a07      	ldr	r2, [pc, #28]	; (800b774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b758:	441a      	add	r2, r3
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fd fea0 	bl	80094a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b766:	bf00      	nop
 800b768:	3720      	adds	r7, #32
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200009a0 	.word	0x200009a0
 800b774:	200009a4 	.word	0x200009a4
 800b778:	20000e7c 	.word	0x20000e7c

0800b77c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b780:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b78e:	3201      	adds	r2, #1
 800b790:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b792:	4b03      	ldr	r3, [pc, #12]	; (800b7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b794:	681b      	ldr	r3, [r3, #0]
	}
 800b796:	4618      	mov	r0, r3
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	200009a0 	.word	0x200009a0

0800b7a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7b4:	4b20      	ldr	r3, [pc, #128]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fd fed0 	bl	8009560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7c6:	d10a      	bne.n	800b7de <prvAddCurrentTaskToDelayedList+0x3a>
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ce:	4b1a      	ldr	r3, [pc, #104]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4819      	ldr	r0, [pc, #100]	; (800b83c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7d8:	f7fd fe65 	bl	80094a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7dc:	e026      	b.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7e6:	4b14      	ldr	r3, [pc, #80]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d209      	bcs.n	800b80a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7f6:	4b12      	ldr	r3, [pc, #72]	; (800b840 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3304      	adds	r3, #4
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f7fd fe73 	bl	80094ee <vListInsert>
}
 800b808:	e010      	b.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7fd fe69 	bl	80094ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b81c:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	429a      	cmp	r2, r3
 800b824:	d202      	bcs.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b826:	4a08      	ldr	r2, [pc, #32]	; (800b848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6013      	str	r3, [r2, #0]
}
 800b82c:	bf00      	nop
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	20000e78 	.word	0x20000e78
 800b838:	200009a0 	.word	0x200009a0
 800b83c:	20000e60 	.word	0x20000e60
 800b840:	20000e30 	.word	0x20000e30
 800b844:	20000e2c 	.word	0x20000e2c
 800b848:	20000e94 	.word	0x20000e94

0800b84c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b856:	f000 fb07 	bl	800be68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b85a:	4b1c      	ldr	r3, [pc, #112]	; (800b8cc <xTimerCreateTimerTask+0x80>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d021      	beq.n	800b8a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b86a:	1d3a      	adds	r2, r7, #4
 800b86c:	f107 0108 	add.w	r1, r7, #8
 800b870:	f107 030c 	add.w	r3, r7, #12
 800b874:	4618      	mov	r0, r3
 800b876:	f7fd fdcf 	bl	8009418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	9202      	str	r2, [sp, #8]
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	2302      	movs	r3, #2
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2300      	movs	r3, #0
 800b88a:	460a      	mov	r2, r1
 800b88c:	4910      	ldr	r1, [pc, #64]	; (800b8d0 <xTimerCreateTimerTask+0x84>)
 800b88e:	4811      	ldr	r0, [pc, #68]	; (800b8d4 <xTimerCreateTimerTask+0x88>)
 800b890:	f7fe fe9e 	bl	800a5d0 <xTaskCreateStatic>
 800b894:	4603      	mov	r3, r0
 800b896:	4a10      	ldr	r2, [pc, #64]	; (800b8d8 <xTimerCreateTimerTask+0x8c>)
 800b898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <xTimerCreateTimerTask+0x8c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	613b      	str	r3, [r7, #16]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8c2:	697b      	ldr	r3, [r7, #20]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20000ed0 	.word	0x20000ed0
 800b8d0:	080115dc 	.word	0x080115dc
 800b8d4:	0800ba11 	.word	0x0800ba11
 800b8d8:	20000ed4 	.word	0x20000ed4

0800b8dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b90a:	4b1a      	ldr	r3, [pc, #104]	; (800b974 <xTimerGenericCommand+0x98>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d02a      	beq.n	800b968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b05      	cmp	r3, #5
 800b922:	dc18      	bgt.n	800b956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b924:	f7ff fdb4 	bl	800b490 <xTaskGetSchedulerState>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d109      	bne.n	800b942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b92e:	4b11      	ldr	r3, [pc, #68]	; (800b974 <xTimerGenericCommand+0x98>)
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	f107 0110 	add.w	r1, r7, #16
 800b936:	2300      	movs	r3, #0
 800b938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93a:	f7fd ffe3 	bl	8009904 <xQueueGenericSend>
 800b93e:	6278      	str	r0, [r7, #36]	; 0x24
 800b940:	e012      	b.n	800b968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b942:	4b0c      	ldr	r3, [pc, #48]	; (800b974 <xTimerGenericCommand+0x98>)
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	f107 0110 	add.w	r1, r7, #16
 800b94a:	2300      	movs	r3, #0
 800b94c:	2200      	movs	r2, #0
 800b94e:	f7fd ffd9 	bl	8009904 <xQueueGenericSend>
 800b952:	6278      	str	r0, [r7, #36]	; 0x24
 800b954:	e008      	b.n	800b968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b956:	4b07      	ldr	r3, [pc, #28]	; (800b974 <xTimerGenericCommand+0x98>)
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	2300      	movs	r3, #0
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	f7fe f8cd 	bl	8009b00 <xQueueGenericSendFromISR>
 800b966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3728      	adds	r7, #40	; 0x28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20000ed0 	.word	0x20000ed0

0800b978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b982:	4b22      	ldr	r3, [pc, #136]	; (800ba0c <prvProcessExpiredTimer+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	3304      	adds	r3, #4
 800b990:	4618      	mov	r0, r3
 800b992:	f7fd fde5 	bl	8009560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d022      	beq.n	800b9ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	699a      	ldr	r2, [r3, #24]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	18d1      	adds	r1, r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	6978      	ldr	r0, [r7, #20]
 800b9b2:	f000 f8d1 	bl	800bb58 <prvInsertTimerInActiveList>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01f      	beq.n	800b9fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6978      	ldr	r0, [r7, #20]
 800b9c8:	f7ff ff88 	bl	800b8dc <xTimerGenericCommand>
 800b9cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d113      	bne.n	800b9fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	60fb      	str	r3, [r7, #12]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	6978      	ldr	r0, [r7, #20]
 800ba02:	4798      	blx	r3
}
 800ba04:	bf00      	nop
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000ec8 	.word	0x20000ec8

0800ba10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba18:	f107 0308 	add.w	r3, r7, #8
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f857 	bl	800bad0 <prvGetNextExpireTime>
 800ba22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4619      	mov	r1, r3
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 f803 	bl	800ba34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba2e:	f000 f8d5 	bl	800bbdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba32:	e7f1      	b.n	800ba18 <prvTimerTask+0x8>

0800ba34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba3e:	f7ff f929 	bl	800ac94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba42:	f107 0308 	add.w	r3, r7, #8
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f866 	bl	800bb18 <prvSampleTimeNow>
 800ba4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d130      	bne.n	800bab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <prvProcessTimerOrBlockTask+0x3c>
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d806      	bhi.n	800ba70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba62:	f7ff f925 	bl	800acb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba66:	68f9      	ldr	r1, [r7, #12]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff ff85 	bl	800b978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba6e:	e024      	b.n	800baba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d008      	beq.n	800ba88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba76:	4b13      	ldr	r3, [pc, #76]	; (800bac4 <prvProcessTimerOrBlockTask+0x90>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <prvProcessTimerOrBlockTask+0x50>
 800ba80:	2301      	movs	r3, #1
 800ba82:	e000      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x52>
 800ba84:	2300      	movs	r3, #0
 800ba86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <prvProcessTimerOrBlockTask+0x94>)
 800ba8a:	6818      	ldr	r0, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4619      	mov	r1, r3
 800ba96:	f7fe fd67 	bl	800a568 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba9a:	f7ff f909 	bl	800acb0 <xTaskResumeAll>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <prvProcessTimerOrBlockTask+0x98>)
 800baa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	f3bf 8f6f 	isb	sy
}
 800bab4:	e001      	b.n	800baba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bab6:	f7ff f8fb 	bl	800acb0 <xTaskResumeAll>
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20000ecc 	.word	0x20000ecc
 800bac8:	20000ed0 	.word	0x20000ed0
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bad8:	4b0e      	ldr	r3, [pc, #56]	; (800bb14 <prvGetNextExpireTime+0x44>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <prvGetNextExpireTime+0x16>
 800bae2:	2201      	movs	r2, #1
 800bae4:	e000      	b.n	800bae8 <prvGetNextExpireTime+0x18>
 800bae6:	2200      	movs	r2, #0
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d105      	bne.n	800bb00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baf4:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <prvGetNextExpireTime+0x44>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	60fb      	str	r3, [r7, #12]
 800bafe:	e001      	b.n	800bb04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb04:	68fb      	ldr	r3, [r7, #12]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000ec8 	.word	0x20000ec8

0800bb18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb20:	f7ff f964 	bl	800adec <xTaskGetTickCount>
 800bb24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb26:	4b0b      	ldr	r3, [pc, #44]	; (800bb54 <prvSampleTimeNow+0x3c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d205      	bcs.n	800bb3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb30:	f000 f936 	bl	800bda0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	e002      	b.n	800bb42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb42:	4a04      	ldr	r2, [pc, #16]	; (800bb54 <prvSampleTimeNow+0x3c>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb48:	68fb      	ldr	r3, [r7, #12]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000ed8 	.word	0x20000ed8

0800bb58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d812      	bhi.n	800bba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d302      	bcc.n	800bb92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e01b      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb92:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <prvInsertTimerInActiveList+0x7c>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fd fca6 	bl	80094ee <vListInsert>
 800bba2:	e012      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d206      	bcs.n	800bbba <prvInsertTimerInActiveList+0x62>
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e007      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbba:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <prvInsertTimerInActiveList+0x80>)
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fd fc92 	bl	80094ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbca:	697b      	ldr	r3, [r7, #20]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20000ecc 	.word	0x20000ecc
 800bbd8:	20000ec8 	.word	0x20000ec8

0800bbdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbe2:	e0ca      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da18      	bge.n	800bc1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	3304      	adds	r3, #4
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	61fb      	str	r3, [r7, #28]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc12:	6850      	ldr	r0, [r2, #4]
 800bc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc16:	6892      	ldr	r2, [r2, #8]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f2c0 80aa 	blt.w	800bd78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	3304      	adds	r3, #4
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fd fc93 	bl	8009560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ff6b 	bl	800bb18 <prvSampleTimeNow>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b09      	cmp	r3, #9
 800bc48:	f200 8097 	bhi.w	800bd7a <prvProcessReceivedCommands+0x19e>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <prvProcessReceivedCommands+0x78>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc7d 	.word	0x0800bc7d
 800bc58:	0800bc7d 	.word	0x0800bc7d
 800bc5c:	0800bc7d 	.word	0x0800bc7d
 800bc60:	0800bcf1 	.word	0x0800bcf1
 800bc64:	0800bd05 	.word	0x0800bd05
 800bc68:	0800bd4f 	.word	0x0800bd4f
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc7d 	.word	0x0800bc7d
 800bc74:	0800bcf1 	.word	0x0800bcf1
 800bc78:	0800bd05 	.word	0x0800bd05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	18d1      	adds	r1, r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc9c:	f7ff ff5c 	bl	800bb58 <prvInsertTimerInActiveList>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d069      	beq.n	800bd7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d05e      	beq.n	800bd7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	441a      	add	r2, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f7ff fe05 	bl	800b8dc <xTimerGenericCommand>
 800bcd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d14f      	bne.n	800bd7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	61bb      	str	r3, [r7, #24]
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf6:	f023 0301 	bic.w	r3, r3, #1
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd02:	e03a      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0a:	f043 0301 	orr.w	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	617b      	str	r3, [r7, #20]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	699a      	ldr	r2, [r3, #24]
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	18d1      	adds	r1, r2, r3
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd48:	f7ff ff06 	bl	800bb58 <prvInsertTimerInActiveList>
					break;
 800bd4c:	e015      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5e:	f000 fbdf 	bl	800c520 <vPortFree>
 800bd62:	e00a      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd6a:	f023 0301 	bic.w	r3, r3, #1
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd76:	e000      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd7a:	4b08      	ldr	r3, [pc, #32]	; (800bd9c <prvProcessReceivedCommands+0x1c0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	1d39      	adds	r1, r7, #4
 800bd80:	2200      	movs	r2, #0
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fd ffe4 	bl	8009d50 <xQueueReceive>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f47f af2a 	bne.w	800bbe4 <prvProcessReceivedCommands+0x8>
	}
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	3730      	adds	r7, #48	; 0x30
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20000ed0 	.word	0x20000ed0

0800bda0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bda6:	e048      	b.n	800be3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda8:	4b2d      	ldr	r3, [pc, #180]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb2:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fd fbcd 	bl	8009560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d02e      	beq.n	800be3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4413      	add	r3, r2
 800bde4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d90e      	bls.n	800be0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdfa:	4b19      	ldr	r3, [pc, #100]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3304      	adds	r3, #4
 800be02:	4619      	mov	r1, r3
 800be04:	4610      	mov	r0, r2
 800be06:	f7fd fb72 	bl	80094ee <vListInsert>
 800be0a:	e016      	b.n	800be3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be0c:	2300      	movs	r3, #0
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	2100      	movs	r1, #0
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fd60 	bl	800b8dc <xTimerGenericCommand>
 800be1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	603b      	str	r3, [r7, #0]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be3a:	4b09      	ldr	r3, [pc, #36]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1b1      	bne.n	800bda8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be44:	4b06      	ldr	r3, [pc, #24]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be4a:	4b06      	ldr	r3, [pc, #24]	; (800be64 <prvSwitchTimerLists+0xc4>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a04      	ldr	r2, [pc, #16]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be52:	4a04      	ldr	r2, [pc, #16]	; (800be64 <prvSwitchTimerLists+0xc4>)
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6013      	str	r3, [r2, #0]
}
 800be58:	bf00      	nop
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20000ec8 	.word	0x20000ec8
 800be64:	20000ecc 	.word	0x20000ecc

0800be68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be6e:	f000 f969 	bl	800c144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d120      	bne.n	800bebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be7a:	4814      	ldr	r0, [pc, #80]	; (800becc <prvCheckForValidListAndQueue+0x64>)
 800be7c:	f7fd fae6 	bl	800944c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be80:	4813      	ldr	r0, [pc, #76]	; (800bed0 <prvCheckForValidListAndQueue+0x68>)
 800be82:	f7fd fae3 	bl	800944c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be86:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <prvCheckForValidListAndQueue+0x6c>)
 800be88:	4a10      	ldr	r2, [pc, #64]	; (800becc <prvCheckForValidListAndQueue+0x64>)
 800be8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be8c:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <prvCheckForValidListAndQueue+0x70>)
 800be8e:	4a10      	ldr	r2, [pc, #64]	; (800bed0 <prvCheckForValidListAndQueue+0x68>)
 800be90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be92:	2300      	movs	r3, #0
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <prvCheckForValidListAndQueue+0x74>)
 800be98:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <prvCheckForValidListAndQueue+0x78>)
 800be9a:	2110      	movs	r1, #16
 800be9c:	200a      	movs	r0, #10
 800be9e:	f7fd fbf1 	bl	8009684 <xQueueGenericCreateStatic>
 800bea2:	4603      	mov	r3, r0
 800bea4:	4a08      	ldr	r2, [pc, #32]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800bea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bea8:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800beb0:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	490b      	ldr	r1, [pc, #44]	; (800bee4 <prvCheckForValidListAndQueue+0x7c>)
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fb02 	bl	800a4c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bebc:	f000 f972 	bl	800c1a4 <vPortExitCritical>
}
 800bec0:	bf00      	nop
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20000ed0 	.word	0x20000ed0
 800becc:	20000ea0 	.word	0x20000ea0
 800bed0:	20000eb4 	.word	0x20000eb4
 800bed4:	20000ec8 	.word	0x20000ec8
 800bed8:	20000ecc 	.word	0x20000ecc
 800bedc:	20000f7c 	.word	0x20000f7c
 800bee0:	20000edc 	.word	0x20000edc
 800bee4:	080115e4 	.word	0x080115e4

0800bee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3b04      	subs	r3, #4
 800bef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3b04      	subs	r3, #4
 800bf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f023 0201 	bic.w	r2, r3, #1
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3b04      	subs	r3, #4
 800bf16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf18:	4a0c      	ldr	r2, [pc, #48]	; (800bf4c <pxPortInitialiseStack+0x64>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3b14      	subs	r3, #20
 800bf22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f06f 0202 	mvn.w	r2, #2
 800bf36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3b20      	subs	r3, #32
 800bf3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	0800bf51 	.word	0x0800bf51

0800bf50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf5a:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <prvTaskExitError+0x54>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf62:	d00a      	beq.n	800bf7a <prvTaskExitError+0x2a>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <prvTaskExitError+0x28>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	60bb      	str	r3, [r7, #8]
}
 800bf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf8e:	bf00      	nop
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0fc      	beq.n	800bf90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20000010 	.word	0x20000010
	...

0800bfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <pxCurrentTCBConst2>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f380 8809 	msr	PSP, r0
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst2>:
 800bfd0:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfd8:	4808      	ldr	r0, [pc, #32]	; (800bffc <prvPortStartFirstTask+0x24>)
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f380 8808 	msr	MSP, r0
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8814 	msr	CONTROL, r0
 800bfea:	b662      	cpsie	i
 800bfec:	b661      	cpsie	f
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	df00      	svc	0
 800bff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bffa:	bf00      	nop
 800bffc:	e000ed08 	.word	0xe000ed08

0800c000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c006:	4b46      	ldr	r3, [pc, #280]	; (800c120 <xPortStartScheduler+0x120>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a46      	ldr	r2, [pc, #280]	; (800c124 <xPortStartScheduler+0x124>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10a      	bne.n	800c026 <xPortStartScheduler+0x26>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c026:	4b3e      	ldr	r3, [pc, #248]	; (800c120 <xPortStartScheduler+0x120>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a3f      	ldr	r2, [pc, #252]	; (800c128 <xPortStartScheduler+0x128>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10a      	bne.n	800c046 <xPortStartScheduler+0x46>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c046:	4b39      	ldr	r3, [pc, #228]	; (800c12c <xPortStartScheduler+0x12c>)
 800c048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	22ff      	movs	r2, #255	; 0xff
 800c056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	4b31      	ldr	r3, [pc, #196]	; (800c130 <xPortStartScheduler+0x130>)
 800c06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c06e:	4b31      	ldr	r3, [pc, #196]	; (800c134 <xPortStartScheduler+0x134>)
 800c070:	2207      	movs	r2, #7
 800c072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c074:	e009      	b.n	800c08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c076:	4b2f      	ldr	r3, [pc, #188]	; (800c134 <xPortStartScheduler+0x134>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	4a2d      	ldr	r2, [pc, #180]	; (800c134 <xPortStartScheduler+0x134>)
 800c07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c092:	2b80      	cmp	r3, #128	; 0x80
 800c094:	d0ef      	beq.n	800c076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c096:	4b27      	ldr	r3, [pc, #156]	; (800c134 <xPortStartScheduler+0x134>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f1c3 0307 	rsb	r3, r3, #7
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d00a      	beq.n	800c0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	60bb      	str	r3, [r7, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0b8:	4b1e      	ldr	r3, [pc, #120]	; (800c134 <xPortStartScheduler+0x134>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	4a1d      	ldr	r2, [pc, #116]	; (800c134 <xPortStartScheduler+0x134>)
 800c0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <xPortStartScheduler+0x134>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ca:	4a1a      	ldr	r2, [pc, #104]	; (800c134 <xPortStartScheduler+0x134>)
 800c0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0d6:	4b18      	ldr	r3, [pc, #96]	; (800c138 <xPortStartScheduler+0x138>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a17      	ldr	r2, [pc, #92]	; (800c138 <xPortStartScheduler+0x138>)
 800c0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0e2:	4b15      	ldr	r3, [pc, #84]	; (800c138 <xPortStartScheduler+0x138>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a14      	ldr	r2, [pc, #80]	; (800c138 <xPortStartScheduler+0x138>)
 800c0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0ee:	f000 f8dd 	bl	800c2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0f2:	4b12      	ldr	r3, [pc, #72]	; (800c13c <xPortStartScheduler+0x13c>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0f8:	f000 f8fc 	bl	800c2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0fc:	4b10      	ldr	r3, [pc, #64]	; (800c140 <xPortStartScheduler+0x140>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a0f      	ldr	r2, [pc, #60]	; (800c140 <xPortStartScheduler+0x140>)
 800c102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c108:	f7ff ff66 	bl	800bfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c10c:	f7fe ff4a 	bl	800afa4 <vTaskSwitchContext>
	prvTaskExitError();
 800c110:	f7ff ff1e 	bl	800bf50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	e000ed00 	.word	0xe000ed00
 800c124:	410fc271 	.word	0x410fc271
 800c128:	410fc270 	.word	0x410fc270
 800c12c:	e000e400 	.word	0xe000e400
 800c130:	20000fcc 	.word	0x20000fcc
 800c134:	20000fd0 	.word	0x20000fd0
 800c138:	e000ed20 	.word	0xe000ed20
 800c13c:	20000010 	.word	0x20000010
 800c140:	e000ef34 	.word	0xe000ef34

0800c144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	607b      	str	r3, [r7, #4]
}
 800c15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c15e:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <vPortEnterCritical+0x58>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3301      	adds	r3, #1
 800c164:	4a0d      	ldr	r2, [pc, #52]	; (800c19c <vPortEnterCritical+0x58>)
 800c166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c168:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <vPortEnterCritical+0x58>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d10f      	bne.n	800c190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c170:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <vPortEnterCritical+0x5c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <vPortEnterCritical+0x4c>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	603b      	str	r3, [r7, #0]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <vPortEnterCritical+0x4a>
	}
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	20000010 	.word	0x20000010
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1aa:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <vPortExitCritical+0x24>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	607b      	str	r3, [r7, #4]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1c8:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	4a09      	ldr	r2, [pc, #36]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1d2:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d105      	bne.n	800c1e6 <vPortExitCritical+0x42>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	f383 8811 	msr	BASEPRI, r3
}
 800c1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	20000010 	.word	0x20000010
	...

0800c200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c200:	f3ef 8009 	mrs	r0, PSP
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	4b15      	ldr	r3, [pc, #84]	; (800c260 <pxCurrentTCBConst>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	f01e 0f10 	tst.w	lr, #16
 800c210:	bf08      	it	eq
 800c212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	6010      	str	r0, [r2, #0]
 800c21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c224:	f380 8811 	msr	BASEPRI, r0
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f7fe feb8 	bl	800afa4 <vTaskSwitchContext>
 800c234:	f04f 0000 	mov.w	r0, #0
 800c238:	f380 8811 	msr	BASEPRI, r0
 800c23c:	bc09      	pop	{r0, r3}
 800c23e:	6819      	ldr	r1, [r3, #0]
 800c240:	6808      	ldr	r0, [r1, #0]
 800c242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c246:	f01e 0f10 	tst.w	lr, #16
 800c24a:	bf08      	it	eq
 800c24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c250:	f380 8809 	msr	PSP, r0
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst>:
 800c260:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	607b      	str	r3, [r7, #4]
}
 800c280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c282:	f7fe fdd5 	bl	800ae30 <xTaskIncrementTick>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c28c:	4b06      	ldr	r3, [pc, #24]	; (800c2a8 <xPortSysTickHandler+0x40>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f383 8811 	msr	BASEPRI, r3
}
 800c29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <vPortSetupTimerInterrupt+0x38>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <vPortSetupTimerInterrupt+0x3c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a0a      	ldr	r2, [pc, #40]	; (800c2ec <vPortSetupTimerInterrupt+0x40>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	099b      	lsrs	r3, r3, #6
 800c2c8:	4a09      	ldr	r2, [pc, #36]	; (800c2f0 <vPortSetupTimerInterrupt+0x44>)
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ce:	4b04      	ldr	r3, [pc, #16]	; (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	e000e010 	.word	0xe000e010
 800c2e4:	e000e018 	.word	0xe000e018
 800c2e8:	20000004 	.word	0x20000004
 800c2ec:	10624dd3 	.word	0x10624dd3
 800c2f0:	e000e014 	.word	0xe000e014

0800c2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c304 <vPortEnableVFP+0x10>
 800c2f8:	6801      	ldr	r1, [r0, #0]
 800c2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2fe:	6001      	str	r1, [r0, #0]
 800c300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c302:	bf00      	nop
 800c304:	e000ed88 	.word	0xe000ed88

0800c308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c30e:	f3ef 8305 	mrs	r3, IPSR
 800c312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	d914      	bls.n	800c344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c31a:	4a17      	ldr	r2, [pc, #92]	; (800c378 <vPortValidateInterruptPriority+0x70>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c324:	4b15      	ldr	r3, [pc, #84]	; (800c37c <vPortValidateInterruptPriority+0x74>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	7afa      	ldrb	r2, [r7, #11]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d20a      	bcs.n	800c344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	607b      	str	r3, [r7, #4]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c344:	4b0e      	ldr	r3, [pc, #56]	; (800c380 <vPortValidateInterruptPriority+0x78>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c34c:	4b0d      	ldr	r3, [pc, #52]	; (800c384 <vPortValidateInterruptPriority+0x7c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d90a      	bls.n	800c36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	603b      	str	r3, [r7, #0]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <vPortValidateInterruptPriority+0x60>
	}
 800c36a:	bf00      	nop
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	e000e3f0 	.word	0xe000e3f0
 800c37c:	20000fcc 	.word	0x20000fcc
 800c380:	e000ed0c 	.word	0xe000ed0c
 800c384:	20000fd0 	.word	0x20000fd0

0800c388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c390:	2300      	movs	r3, #0
 800c392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c394:	f7fe fc7e 	bl	800ac94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c398:	4b5b      	ldr	r3, [pc, #364]	; (800c508 <pvPortMalloc+0x180>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3a0:	f000 f920 	bl	800c5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3a4:	4b59      	ldr	r3, [pc, #356]	; (800c50c <pvPortMalloc+0x184>)
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 8093 	bne.w	800c4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01d      	beq.n	800c3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d014      	beq.n	800c3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f023 0307 	bic.w	r3, r3, #7
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00a      	beq.n	800c3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	617b      	str	r3, [r7, #20]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d06e      	beq.n	800c4d8 <pvPortMalloc+0x150>
 800c3fa:	4b45      	ldr	r3, [pc, #276]	; (800c510 <pvPortMalloc+0x188>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d869      	bhi.n	800c4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c404:	4b43      	ldr	r3, [pc, #268]	; (800c514 <pvPortMalloc+0x18c>)
 800c406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c408:	4b42      	ldr	r3, [pc, #264]	; (800c514 <pvPortMalloc+0x18c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c40e:	e004      	b.n	800c41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	429a      	cmp	r2, r3
 800c422:	d903      	bls.n	800c42c <pvPortMalloc+0xa4>
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1f1      	bne.n	800c410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c42c:	4b36      	ldr	r3, [pc, #216]	; (800c508 <pvPortMalloc+0x180>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c432:	429a      	cmp	r2, r3
 800c434:	d050      	beq.n	800c4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2208      	movs	r2, #8
 800c43c:	4413      	add	r3, r2
 800c43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	2308      	movs	r3, #8
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	429a      	cmp	r2, r3
 800c456:	d91f      	bls.n	800c498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4413      	add	r3, r2
 800c45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <pvPortMalloc+0xf8>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	613b      	str	r3, [r7, #16]
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	1ad2      	subs	r2, r2, r3
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c492:	69b8      	ldr	r0, [r7, #24]
 800c494:	f000 f908 	bl	800c6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c498:	4b1d      	ldr	r3, [pc, #116]	; (800c510 <pvPortMalloc+0x188>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	4a1b      	ldr	r2, [pc, #108]	; (800c510 <pvPortMalloc+0x188>)
 800c4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4a6:	4b1a      	ldr	r3, [pc, #104]	; (800c510 <pvPortMalloc+0x188>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	; (800c518 <pvPortMalloc+0x190>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d203      	bcs.n	800c4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4b2:	4b17      	ldr	r3, [pc, #92]	; (800c510 <pvPortMalloc+0x188>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a18      	ldr	r2, [pc, #96]	; (800c518 <pvPortMalloc+0x190>)
 800c4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	4b13      	ldr	r3, [pc, #76]	; (800c50c <pvPortMalloc+0x184>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <pvPortMalloc+0x194>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a11      	ldr	r2, [pc, #68]	; (800c51c <pvPortMalloc+0x194>)
 800c4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4d8:	f7fe fbea 	bl	800acb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00a      	beq.n	800c4fc <pvPortMalloc+0x174>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	60fb      	str	r3, [r7, #12]
}
 800c4f8:	bf00      	nop
 800c4fa:	e7fe      	b.n	800c4fa <pvPortMalloc+0x172>
	return pvReturn;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3728      	adds	r7, #40	; 0x28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20004bdc 	.word	0x20004bdc
 800c50c:	20004bf0 	.word	0x20004bf0
 800c510:	20004be0 	.word	0x20004be0
 800c514:	20004bd4 	.word	0x20004bd4
 800c518:	20004be4 	.word	0x20004be4
 800c51c:	20004be8 	.word	0x20004be8

0800c520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d04d      	beq.n	800c5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c532:	2308      	movs	r3, #8
 800c534:	425b      	negs	r3, r3
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	4413      	add	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <vPortFree+0xb8>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10a      	bne.n	800c564 <vPortFree+0x44>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	60fb      	str	r3, [r7, #12]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <vPortFree+0x62>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	60bb      	str	r3, [r7, #8]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	4b14      	ldr	r3, [pc, #80]	; (800c5d8 <vPortFree+0xb8>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d01e      	beq.n	800c5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d11a      	bne.n	800c5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <vPortFree+0xb8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	401a      	ands	r2, r3
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5a8:	f7fe fb74 	bl	800ac94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <vPortFree+0xbc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <vPortFree+0xbc>)
 800c5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5ba:	6938      	ldr	r0, [r7, #16]
 800c5bc:	f000 f874 	bl	800c6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5c0:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <vPortFree+0xc0>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	4a06      	ldr	r2, [pc, #24]	; (800c5e0 <vPortFree+0xc0>)
 800c5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5ca:	f7fe fb71 	bl	800acb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ce:	bf00      	nop
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20004bf0 	.word	0x20004bf0
 800c5dc:	20004be0 	.word	0x20004be0
 800c5e0:	20004bec 	.word	0x20004bec

0800c5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5f0:	4b27      	ldr	r3, [pc, #156]	; (800c690 <prvHeapInit+0xac>)
 800c5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00c      	beq.n	800c618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3307      	adds	r3, #7
 800c602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f023 0307 	bic.w	r3, r3, #7
 800c60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <prvHeapInit+0xac>)
 800c614:	4413      	add	r3, r2
 800c616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c61c:	4a1d      	ldr	r2, [pc, #116]	; (800c694 <prvHeapInit+0xb0>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c622:	4b1c      	ldr	r3, [pc, #112]	; (800c694 <prvHeapInit+0xb0>)
 800c624:	2200      	movs	r2, #0
 800c626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	4413      	add	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c630:	2208      	movs	r2, #8
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4a15      	ldr	r2, [pc, #84]	; (800c698 <prvHeapInit+0xb4>)
 800c644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c646:	4b14      	ldr	r3, [pc, #80]	; (800c698 <prvHeapInit+0xb4>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2200      	movs	r2, #0
 800c64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c64e:	4b12      	ldr	r3, [pc, #72]	; (800c698 <prvHeapInit+0xb4>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c664:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <prvHeapInit+0xb4>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <prvHeapInit+0xb8>)
 800c672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a09      	ldr	r2, [pc, #36]	; (800c6a0 <prvHeapInit+0xbc>)
 800c67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <prvHeapInit+0xc0>)
 800c67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c682:	601a      	str	r2, [r3, #0]
}
 800c684:	bf00      	nop
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	20000fd4 	.word	0x20000fd4
 800c694:	20004bd4 	.word	0x20004bd4
 800c698:	20004bdc 	.word	0x20004bdc
 800c69c:	20004be4 	.word	0x20004be4
 800c6a0:	20004be0 	.word	0x20004be0
 800c6a4:	20004bf0 	.word	0x20004bf0

0800c6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6b0:	4b28      	ldr	r3, [pc, #160]	; (800c754 <prvInsertBlockIntoFreeList+0xac>)
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	e002      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x14>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d8f7      	bhi.n	800c6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d108      	bne.n	800c6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	441a      	add	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	441a      	add	r2, r3
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d118      	bne.n	800c730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	4b15      	ldr	r3, [pc, #84]	; (800c758 <prvInsertBlockIntoFreeList+0xb0>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d00d      	beq.n	800c726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	441a      	add	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	e008      	b.n	800c738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c726:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <prvInsertBlockIntoFreeList+0xb0>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	e003      	b.n	800c738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d002      	beq.n	800c746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20004bd4 	.word	0x20004bd4
 800c758:	20004bdc 	.word	0x20004bdc

0800c75c <atof>:
 800c75c:	2100      	movs	r1, #0
 800c75e:	f001 b8f1 	b.w	800d944 <strtod>
	...

0800c764 <calloc>:
 800c764:	4b02      	ldr	r3, [pc, #8]	; (800c770 <calloc+0xc>)
 800c766:	460a      	mov	r2, r1
 800c768:	4601      	mov	r1, r0
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	f000 b944 	b.w	800c9f8 <_calloc_r>
 800c770:	20000014 	.word	0x20000014

0800c774 <__errno>:
 800c774:	4b01      	ldr	r3, [pc, #4]	; (800c77c <__errno+0x8>)
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	20000014 	.word	0x20000014

0800c780 <std>:
 800c780:	2300      	movs	r3, #0
 800c782:	b510      	push	{r4, lr}
 800c784:	4604      	mov	r4, r0
 800c786:	e9c0 3300 	strd	r3, r3, [r0]
 800c78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c78e:	6083      	str	r3, [r0, #8]
 800c790:	8181      	strh	r1, [r0, #12]
 800c792:	6643      	str	r3, [r0, #100]	; 0x64
 800c794:	81c2      	strh	r2, [r0, #14]
 800c796:	6183      	str	r3, [r0, #24]
 800c798:	4619      	mov	r1, r3
 800c79a:	2208      	movs	r2, #8
 800c79c:	305c      	adds	r0, #92	; 0x5c
 800c79e:	f000 f923 	bl	800c9e8 <memset>
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <std+0x38>)
 800c7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800c7a6:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <std+0x3c>)
 800c7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7aa:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <std+0x40>)
 800c7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <std+0x44>)
 800c7b0:	6224      	str	r4, [r4, #32]
 800c7b2:	6323      	str	r3, [r4, #48]	; 0x30
 800c7b4:	bd10      	pop	{r4, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0800cc71 	.word	0x0800cc71
 800c7bc:	0800cc93 	.word	0x0800cc93
 800c7c0:	0800cccb 	.word	0x0800cccb
 800c7c4:	0800ccef 	.word	0x0800ccef

0800c7c8 <_cleanup_r>:
 800c7c8:	4901      	ldr	r1, [pc, #4]	; (800c7d0 <_cleanup_r+0x8>)
 800c7ca:	f000 b8af 	b.w	800c92c <_fwalk_reent>
 800c7ce:	bf00      	nop
 800c7d0:	0800daad 	.word	0x0800daad

0800c7d4 <__sfmoreglue>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	1e4a      	subs	r2, r1, #1
 800c7d8:	2568      	movs	r5, #104	; 0x68
 800c7da:	4355      	muls	r5, r2
 800c7dc:	460e      	mov	r6, r1
 800c7de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7e2:	f000 f969 	bl	800cab8 <_malloc_r>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	b140      	cbz	r0, 800c7fc <__sfmoreglue+0x28>
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	e9c0 1600 	strd	r1, r6, [r0]
 800c7f0:	300c      	adds	r0, #12
 800c7f2:	60a0      	str	r0, [r4, #8]
 800c7f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7f8:	f000 f8f6 	bl	800c9e8 <memset>
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}

0800c800 <__sfp_lock_acquire>:
 800c800:	4801      	ldr	r0, [pc, #4]	; (800c808 <__sfp_lock_acquire+0x8>)
 800c802:	f000 b8d8 	b.w	800c9b6 <__retarget_lock_acquire_recursive>
 800c806:	bf00      	nop
 800c808:	20005504 	.word	0x20005504

0800c80c <__sfp_lock_release>:
 800c80c:	4801      	ldr	r0, [pc, #4]	; (800c814 <__sfp_lock_release+0x8>)
 800c80e:	f000 b8d3 	b.w	800c9b8 <__retarget_lock_release_recursive>
 800c812:	bf00      	nop
 800c814:	20005504 	.word	0x20005504

0800c818 <__sinit_lock_acquire>:
 800c818:	4801      	ldr	r0, [pc, #4]	; (800c820 <__sinit_lock_acquire+0x8>)
 800c81a:	f000 b8cc 	b.w	800c9b6 <__retarget_lock_acquire_recursive>
 800c81e:	bf00      	nop
 800c820:	200054ff 	.word	0x200054ff

0800c824 <__sinit_lock_release>:
 800c824:	4801      	ldr	r0, [pc, #4]	; (800c82c <__sinit_lock_release+0x8>)
 800c826:	f000 b8c7 	b.w	800c9b8 <__retarget_lock_release_recursive>
 800c82a:	bf00      	nop
 800c82c:	200054ff 	.word	0x200054ff

0800c830 <__sinit>:
 800c830:	b510      	push	{r4, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	f7ff fff0 	bl	800c818 <__sinit_lock_acquire>
 800c838:	69a3      	ldr	r3, [r4, #24]
 800c83a:	b11b      	cbz	r3, 800c844 <__sinit+0x14>
 800c83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c840:	f7ff bff0 	b.w	800c824 <__sinit_lock_release>
 800c844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c848:	6523      	str	r3, [r4, #80]	; 0x50
 800c84a:	4b13      	ldr	r3, [pc, #76]	; (800c898 <__sinit+0x68>)
 800c84c:	4a13      	ldr	r2, [pc, #76]	; (800c89c <__sinit+0x6c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	62a2      	str	r2, [r4, #40]	; 0x28
 800c852:	42a3      	cmp	r3, r4
 800c854:	bf04      	itt	eq
 800c856:	2301      	moveq	r3, #1
 800c858:	61a3      	streq	r3, [r4, #24]
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f820 	bl	800c8a0 <__sfp>
 800c860:	6060      	str	r0, [r4, #4]
 800c862:	4620      	mov	r0, r4
 800c864:	f000 f81c 	bl	800c8a0 <__sfp>
 800c868:	60a0      	str	r0, [r4, #8]
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 f818 	bl	800c8a0 <__sfp>
 800c870:	2200      	movs	r2, #0
 800c872:	60e0      	str	r0, [r4, #12]
 800c874:	2104      	movs	r1, #4
 800c876:	6860      	ldr	r0, [r4, #4]
 800c878:	f7ff ff82 	bl	800c780 <std>
 800c87c:	68a0      	ldr	r0, [r4, #8]
 800c87e:	2201      	movs	r2, #1
 800c880:	2109      	movs	r1, #9
 800c882:	f7ff ff7d 	bl	800c780 <std>
 800c886:	68e0      	ldr	r0, [r4, #12]
 800c888:	2202      	movs	r2, #2
 800c88a:	2112      	movs	r1, #18
 800c88c:	f7ff ff78 	bl	800c780 <std>
 800c890:	2301      	movs	r3, #1
 800c892:	61a3      	str	r3, [r4, #24]
 800c894:	e7d2      	b.n	800c83c <__sinit+0xc>
 800c896:	bf00      	nop
 800c898:	0801170c 	.word	0x0801170c
 800c89c:	0800c7c9 	.word	0x0800c7c9

0800c8a0 <__sfp>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	f7ff ffac 	bl	800c800 <__sfp_lock_acquire>
 800c8a8:	4b1e      	ldr	r3, [pc, #120]	; (800c924 <__sfp+0x84>)
 800c8aa:	681e      	ldr	r6, [r3, #0]
 800c8ac:	69b3      	ldr	r3, [r6, #24]
 800c8ae:	b913      	cbnz	r3, 800c8b6 <__sfp+0x16>
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff ffbd 	bl	800c830 <__sinit>
 800c8b6:	3648      	adds	r6, #72	; 0x48
 800c8b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	d503      	bpl.n	800c8c8 <__sfp+0x28>
 800c8c0:	6833      	ldr	r3, [r6, #0]
 800c8c2:	b30b      	cbz	r3, 800c908 <__sfp+0x68>
 800c8c4:	6836      	ldr	r6, [r6, #0]
 800c8c6:	e7f7      	b.n	800c8b8 <__sfp+0x18>
 800c8c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8cc:	b9d5      	cbnz	r5, 800c904 <__sfp+0x64>
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <__sfp+0x88>)
 800c8d0:	60e3      	str	r3, [r4, #12]
 800c8d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8d6:	6665      	str	r5, [r4, #100]	; 0x64
 800c8d8:	f000 f86c 	bl	800c9b4 <__retarget_lock_init_recursive>
 800c8dc:	f7ff ff96 	bl	800c80c <__sfp_lock_release>
 800c8e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8e8:	6025      	str	r5, [r4, #0]
 800c8ea:	61a5      	str	r5, [r4, #24]
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8f4:	f000 f878 	bl	800c9e8 <memset>
 800c8f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c900:	4620      	mov	r0, r4
 800c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c904:	3468      	adds	r4, #104	; 0x68
 800c906:	e7d9      	b.n	800c8bc <__sfp+0x1c>
 800c908:	2104      	movs	r1, #4
 800c90a:	4638      	mov	r0, r7
 800c90c:	f7ff ff62 	bl	800c7d4 <__sfmoreglue>
 800c910:	4604      	mov	r4, r0
 800c912:	6030      	str	r0, [r6, #0]
 800c914:	2800      	cmp	r0, #0
 800c916:	d1d5      	bne.n	800c8c4 <__sfp+0x24>
 800c918:	f7ff ff78 	bl	800c80c <__sfp_lock_release>
 800c91c:	230c      	movs	r3, #12
 800c91e:	603b      	str	r3, [r7, #0]
 800c920:	e7ee      	b.n	800c900 <__sfp+0x60>
 800c922:	bf00      	nop
 800c924:	0801170c 	.word	0x0801170c
 800c928:	ffff0001 	.word	0xffff0001

0800c92c <_fwalk_reent>:
 800c92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c930:	4606      	mov	r6, r0
 800c932:	4688      	mov	r8, r1
 800c934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c938:	2700      	movs	r7, #0
 800c93a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c93e:	f1b9 0901 	subs.w	r9, r9, #1
 800c942:	d505      	bpl.n	800c950 <_fwalk_reent+0x24>
 800c944:	6824      	ldr	r4, [r4, #0]
 800c946:	2c00      	cmp	r4, #0
 800c948:	d1f7      	bne.n	800c93a <_fwalk_reent+0xe>
 800c94a:	4638      	mov	r0, r7
 800c94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c950:	89ab      	ldrh	r3, [r5, #12]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d907      	bls.n	800c966 <_fwalk_reent+0x3a>
 800c956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c95a:	3301      	adds	r3, #1
 800c95c:	d003      	beq.n	800c966 <_fwalk_reent+0x3a>
 800c95e:	4629      	mov	r1, r5
 800c960:	4630      	mov	r0, r6
 800c962:	47c0      	blx	r8
 800c964:	4307      	orrs	r7, r0
 800c966:	3568      	adds	r5, #104	; 0x68
 800c968:	e7e9      	b.n	800c93e <_fwalk_reent+0x12>
	...

0800c96c <__libc_init_array>:
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	4d0d      	ldr	r5, [pc, #52]	; (800c9a4 <__libc_init_array+0x38>)
 800c970:	4c0d      	ldr	r4, [pc, #52]	; (800c9a8 <__libc_init_array+0x3c>)
 800c972:	1b64      	subs	r4, r4, r5
 800c974:	10a4      	asrs	r4, r4, #2
 800c976:	2600      	movs	r6, #0
 800c978:	42a6      	cmp	r6, r4
 800c97a:	d109      	bne.n	800c990 <__libc_init_array+0x24>
 800c97c:	4d0b      	ldr	r5, [pc, #44]	; (800c9ac <__libc_init_array+0x40>)
 800c97e:	4c0c      	ldr	r4, [pc, #48]	; (800c9b0 <__libc_init_array+0x44>)
 800c980:	f004 fdec 	bl	801155c <_init>
 800c984:	1b64      	subs	r4, r4, r5
 800c986:	10a4      	asrs	r4, r4, #2
 800c988:	2600      	movs	r6, #0
 800c98a:	42a6      	cmp	r6, r4
 800c98c:	d105      	bne.n	800c99a <__libc_init_array+0x2e>
 800c98e:	bd70      	pop	{r4, r5, r6, pc}
 800c990:	f855 3b04 	ldr.w	r3, [r5], #4
 800c994:	4798      	blx	r3
 800c996:	3601      	adds	r6, #1
 800c998:	e7ee      	b.n	800c978 <__libc_init_array+0xc>
 800c99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c99e:	4798      	blx	r3
 800c9a0:	3601      	adds	r6, #1
 800c9a2:	e7f2      	b.n	800c98a <__libc_init_array+0x1e>
 800c9a4:	08011d08 	.word	0x08011d08
 800c9a8:	08011d08 	.word	0x08011d08
 800c9ac:	08011d08 	.word	0x08011d08
 800c9b0:	08011d0c 	.word	0x08011d0c

0800c9b4 <__retarget_lock_init_recursive>:
 800c9b4:	4770      	bx	lr

0800c9b6 <__retarget_lock_acquire_recursive>:
 800c9b6:	4770      	bx	lr

0800c9b8 <__retarget_lock_release_recursive>:
 800c9b8:	4770      	bx	lr
	...

0800c9bc <malloc>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	; (800c9c8 <malloc+0xc>)
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f000 b879 	b.w	800cab8 <_malloc_r>
 800c9c6:	bf00      	nop
 800c9c8:	20000014 	.word	0x20000014

0800c9cc <memcpy>:
 800c9cc:	440a      	add	r2, r1
 800c9ce:	4291      	cmp	r1, r2
 800c9d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c9d4:	d100      	bne.n	800c9d8 <memcpy+0xc>
 800c9d6:	4770      	bx	lr
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9e2:	4291      	cmp	r1, r2
 800c9e4:	d1f9      	bne.n	800c9da <memcpy+0xe>
 800c9e6:	bd10      	pop	{r4, pc}

0800c9e8 <memset>:
 800c9e8:	4402      	add	r2, r0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d100      	bne.n	800c9f2 <memset+0xa>
 800c9f0:	4770      	bx	lr
 800c9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9f6:	e7f9      	b.n	800c9ec <memset+0x4>

0800c9f8 <_calloc_r>:
 800c9f8:	b513      	push	{r0, r1, r4, lr}
 800c9fa:	434a      	muls	r2, r1
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	9201      	str	r2, [sp, #4]
 800ca00:	f000 f85a 	bl	800cab8 <_malloc_r>
 800ca04:	4604      	mov	r4, r0
 800ca06:	b118      	cbz	r0, 800ca10 <_calloc_r+0x18>
 800ca08:	9a01      	ldr	r2, [sp, #4]
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f7ff ffec 	bl	800c9e8 <memset>
 800ca10:	4620      	mov	r0, r4
 800ca12:	b002      	add	sp, #8
 800ca14:	bd10      	pop	{r4, pc}
	...

0800ca18 <_free_r>:
 800ca18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca1a:	2900      	cmp	r1, #0
 800ca1c:	d048      	beq.n	800cab0 <_free_r+0x98>
 800ca1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca22:	9001      	str	r0, [sp, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f1a1 0404 	sub.w	r4, r1, #4
 800ca2a:	bfb8      	it	lt
 800ca2c:	18e4      	addlt	r4, r4, r3
 800ca2e:	f001 fc0d 	bl	800e24c <__malloc_lock>
 800ca32:	4a20      	ldr	r2, [pc, #128]	; (800cab4 <_free_r+0x9c>)
 800ca34:	9801      	ldr	r0, [sp, #4]
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	4615      	mov	r5, r2
 800ca3a:	b933      	cbnz	r3, 800ca4a <_free_r+0x32>
 800ca3c:	6063      	str	r3, [r4, #4]
 800ca3e:	6014      	str	r4, [r2, #0]
 800ca40:	b003      	add	sp, #12
 800ca42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca46:	f001 bc07 	b.w	800e258 <__malloc_unlock>
 800ca4a:	42a3      	cmp	r3, r4
 800ca4c:	d90b      	bls.n	800ca66 <_free_r+0x4e>
 800ca4e:	6821      	ldr	r1, [r4, #0]
 800ca50:	1862      	adds	r2, r4, r1
 800ca52:	4293      	cmp	r3, r2
 800ca54:	bf04      	itt	eq
 800ca56:	681a      	ldreq	r2, [r3, #0]
 800ca58:	685b      	ldreq	r3, [r3, #4]
 800ca5a:	6063      	str	r3, [r4, #4]
 800ca5c:	bf04      	itt	eq
 800ca5e:	1852      	addeq	r2, r2, r1
 800ca60:	6022      	streq	r2, [r4, #0]
 800ca62:	602c      	str	r4, [r5, #0]
 800ca64:	e7ec      	b.n	800ca40 <_free_r+0x28>
 800ca66:	461a      	mov	r2, r3
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	b10b      	cbz	r3, 800ca70 <_free_r+0x58>
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d9fa      	bls.n	800ca66 <_free_r+0x4e>
 800ca70:	6811      	ldr	r1, [r2, #0]
 800ca72:	1855      	adds	r5, r2, r1
 800ca74:	42a5      	cmp	r5, r4
 800ca76:	d10b      	bne.n	800ca90 <_free_r+0x78>
 800ca78:	6824      	ldr	r4, [r4, #0]
 800ca7a:	4421      	add	r1, r4
 800ca7c:	1854      	adds	r4, r2, r1
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	6011      	str	r1, [r2, #0]
 800ca82:	d1dd      	bne.n	800ca40 <_free_r+0x28>
 800ca84:	681c      	ldr	r4, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	6053      	str	r3, [r2, #4]
 800ca8a:	4421      	add	r1, r4
 800ca8c:	6011      	str	r1, [r2, #0]
 800ca8e:	e7d7      	b.n	800ca40 <_free_r+0x28>
 800ca90:	d902      	bls.n	800ca98 <_free_r+0x80>
 800ca92:	230c      	movs	r3, #12
 800ca94:	6003      	str	r3, [r0, #0]
 800ca96:	e7d3      	b.n	800ca40 <_free_r+0x28>
 800ca98:	6825      	ldr	r5, [r4, #0]
 800ca9a:	1961      	adds	r1, r4, r5
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	bf04      	itt	eq
 800caa0:	6819      	ldreq	r1, [r3, #0]
 800caa2:	685b      	ldreq	r3, [r3, #4]
 800caa4:	6063      	str	r3, [r4, #4]
 800caa6:	bf04      	itt	eq
 800caa8:	1949      	addeq	r1, r1, r5
 800caaa:	6021      	streq	r1, [r4, #0]
 800caac:	6054      	str	r4, [r2, #4]
 800caae:	e7c7      	b.n	800ca40 <_free_r+0x28>
 800cab0:	b003      	add	sp, #12
 800cab2:	bd30      	pop	{r4, r5, pc}
 800cab4:	20004bf4 	.word	0x20004bf4

0800cab8 <_malloc_r>:
 800cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caba:	1ccd      	adds	r5, r1, #3
 800cabc:	f025 0503 	bic.w	r5, r5, #3
 800cac0:	3508      	adds	r5, #8
 800cac2:	2d0c      	cmp	r5, #12
 800cac4:	bf38      	it	cc
 800cac6:	250c      	movcc	r5, #12
 800cac8:	2d00      	cmp	r5, #0
 800caca:	4606      	mov	r6, r0
 800cacc:	db01      	blt.n	800cad2 <_malloc_r+0x1a>
 800cace:	42a9      	cmp	r1, r5
 800cad0:	d903      	bls.n	800cada <_malloc_r+0x22>
 800cad2:	230c      	movs	r3, #12
 800cad4:	6033      	str	r3, [r6, #0]
 800cad6:	2000      	movs	r0, #0
 800cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cada:	f001 fbb7 	bl	800e24c <__malloc_lock>
 800cade:	4921      	ldr	r1, [pc, #132]	; (800cb64 <_malloc_r+0xac>)
 800cae0:	680a      	ldr	r2, [r1, #0]
 800cae2:	4614      	mov	r4, r2
 800cae4:	b99c      	cbnz	r4, 800cb0e <_malloc_r+0x56>
 800cae6:	4f20      	ldr	r7, [pc, #128]	; (800cb68 <_malloc_r+0xb0>)
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	b923      	cbnz	r3, 800caf6 <_malloc_r+0x3e>
 800caec:	4621      	mov	r1, r4
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 f8ae 	bl	800cc50 <_sbrk_r>
 800caf4:	6038      	str	r0, [r7, #0]
 800caf6:	4629      	mov	r1, r5
 800caf8:	4630      	mov	r0, r6
 800cafa:	f000 f8a9 	bl	800cc50 <_sbrk_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	d123      	bne.n	800cb4a <_malloc_r+0x92>
 800cb02:	230c      	movs	r3, #12
 800cb04:	6033      	str	r3, [r6, #0]
 800cb06:	4630      	mov	r0, r6
 800cb08:	f001 fba6 	bl	800e258 <__malloc_unlock>
 800cb0c:	e7e3      	b.n	800cad6 <_malloc_r+0x1e>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	1b5b      	subs	r3, r3, r5
 800cb12:	d417      	bmi.n	800cb44 <_malloc_r+0x8c>
 800cb14:	2b0b      	cmp	r3, #11
 800cb16:	d903      	bls.n	800cb20 <_malloc_r+0x68>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	441c      	add	r4, r3
 800cb1c:	6025      	str	r5, [r4, #0]
 800cb1e:	e004      	b.n	800cb2a <_malloc_r+0x72>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	42a2      	cmp	r2, r4
 800cb24:	bf0c      	ite	eq
 800cb26:	600b      	streq	r3, [r1, #0]
 800cb28:	6053      	strne	r3, [r2, #4]
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f001 fb94 	bl	800e258 <__malloc_unlock>
 800cb30:	f104 000b 	add.w	r0, r4, #11
 800cb34:	1d23      	adds	r3, r4, #4
 800cb36:	f020 0007 	bic.w	r0, r0, #7
 800cb3a:	1ac2      	subs	r2, r0, r3
 800cb3c:	d0cc      	beq.n	800cad8 <_malloc_r+0x20>
 800cb3e:	1a1b      	subs	r3, r3, r0
 800cb40:	50a3      	str	r3, [r4, r2]
 800cb42:	e7c9      	b.n	800cad8 <_malloc_r+0x20>
 800cb44:	4622      	mov	r2, r4
 800cb46:	6864      	ldr	r4, [r4, #4]
 800cb48:	e7cc      	b.n	800cae4 <_malloc_r+0x2c>
 800cb4a:	1cc4      	adds	r4, r0, #3
 800cb4c:	f024 0403 	bic.w	r4, r4, #3
 800cb50:	42a0      	cmp	r0, r4
 800cb52:	d0e3      	beq.n	800cb1c <_malloc_r+0x64>
 800cb54:	1a21      	subs	r1, r4, r0
 800cb56:	4630      	mov	r0, r6
 800cb58:	f000 f87a 	bl	800cc50 <_sbrk_r>
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d1dd      	bne.n	800cb1c <_malloc_r+0x64>
 800cb60:	e7cf      	b.n	800cb02 <_malloc_r+0x4a>
 800cb62:	bf00      	nop
 800cb64:	20004bf4 	.word	0x20004bf4
 800cb68:	20004bf8 	.word	0x20004bf8

0800cb6c <realloc>:
 800cb6c:	4b02      	ldr	r3, [pc, #8]	; (800cb78 <realloc+0xc>)
 800cb6e:	460a      	mov	r2, r1
 800cb70:	4601      	mov	r1, r0
 800cb72:	6818      	ldr	r0, [r3, #0]
 800cb74:	f002 b831 	b.w	800ebda <_realloc_r>
 800cb78:	20000014 	.word	0x20000014

0800cb7c <cleanup_glue>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	460c      	mov	r4, r1
 800cb80:	6809      	ldr	r1, [r1, #0]
 800cb82:	4605      	mov	r5, r0
 800cb84:	b109      	cbz	r1, 800cb8a <cleanup_glue+0xe>
 800cb86:	f7ff fff9 	bl	800cb7c <cleanup_glue>
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb92:	f7ff bf41 	b.w	800ca18 <_free_r>
	...

0800cb98 <_reclaim_reent>:
 800cb98:	4b2c      	ldr	r3, [pc, #176]	; (800cc4c <_reclaim_reent+0xb4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4283      	cmp	r3, r0
 800cb9e:	b570      	push	{r4, r5, r6, lr}
 800cba0:	4604      	mov	r4, r0
 800cba2:	d051      	beq.n	800cc48 <_reclaim_reent+0xb0>
 800cba4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cba6:	b143      	cbz	r3, 800cbba <_reclaim_reent+0x22>
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d14a      	bne.n	800cc44 <_reclaim_reent+0xac>
 800cbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb0:	6819      	ldr	r1, [r3, #0]
 800cbb2:	b111      	cbz	r1, 800cbba <_reclaim_reent+0x22>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f7ff ff2f 	bl	800ca18 <_free_r>
 800cbba:	6961      	ldr	r1, [r4, #20]
 800cbbc:	b111      	cbz	r1, 800cbc4 <_reclaim_reent+0x2c>
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f7ff ff2a 	bl	800ca18 <_free_r>
 800cbc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbc6:	b111      	cbz	r1, 800cbce <_reclaim_reent+0x36>
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff ff25 	bl	800ca18 <_free_r>
 800cbce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cbd0:	b111      	cbz	r1, 800cbd8 <_reclaim_reent+0x40>
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7ff ff20 	bl	800ca18 <_free_r>
 800cbd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cbda:	b111      	cbz	r1, 800cbe2 <_reclaim_reent+0x4a>
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f7ff ff1b 	bl	800ca18 <_free_r>
 800cbe2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbe4:	b111      	cbz	r1, 800cbec <_reclaim_reent+0x54>
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7ff ff16 	bl	800ca18 <_free_r>
 800cbec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cbee:	b111      	cbz	r1, 800cbf6 <_reclaim_reent+0x5e>
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f7ff ff11 	bl	800ca18 <_free_r>
 800cbf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cbf8:	b111      	cbz	r1, 800cc00 <_reclaim_reent+0x68>
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7ff ff0c 	bl	800ca18 <_free_r>
 800cc00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc02:	b111      	cbz	r1, 800cc0a <_reclaim_reent+0x72>
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7ff ff07 	bl	800ca18 <_free_r>
 800cc0a:	69a3      	ldr	r3, [r4, #24]
 800cc0c:	b1e3      	cbz	r3, 800cc48 <_reclaim_reent+0xb0>
 800cc0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc10:	4620      	mov	r0, r4
 800cc12:	4798      	blx	r3
 800cc14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cc16:	b1b9      	cbz	r1, 800cc48 <_reclaim_reent+0xb0>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc1e:	f7ff bfad 	b.w	800cb7c <cleanup_glue>
 800cc22:	5949      	ldr	r1, [r1, r5]
 800cc24:	b941      	cbnz	r1, 800cc38 <_reclaim_reent+0xa0>
 800cc26:	3504      	adds	r5, #4
 800cc28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc2a:	2d80      	cmp	r5, #128	; 0x80
 800cc2c:	68d9      	ldr	r1, [r3, #12]
 800cc2e:	d1f8      	bne.n	800cc22 <_reclaim_reent+0x8a>
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7ff fef1 	bl	800ca18 <_free_r>
 800cc36:	e7ba      	b.n	800cbae <_reclaim_reent+0x16>
 800cc38:	680e      	ldr	r6, [r1, #0]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7ff feec 	bl	800ca18 <_free_r>
 800cc40:	4631      	mov	r1, r6
 800cc42:	e7ef      	b.n	800cc24 <_reclaim_reent+0x8c>
 800cc44:	2500      	movs	r5, #0
 800cc46:	e7ef      	b.n	800cc28 <_reclaim_reent+0x90>
 800cc48:	bd70      	pop	{r4, r5, r6, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000014 	.word	0x20000014

0800cc50 <_sbrk_r>:
 800cc50:	b538      	push	{r3, r4, r5, lr}
 800cc52:	4d06      	ldr	r5, [pc, #24]	; (800cc6c <_sbrk_r+0x1c>)
 800cc54:	2300      	movs	r3, #0
 800cc56:	4604      	mov	r4, r0
 800cc58:	4608      	mov	r0, r1
 800cc5a:	602b      	str	r3, [r5, #0]
 800cc5c:	f7f5 fea0 	bl	80029a0 <_sbrk>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d102      	bne.n	800cc6a <_sbrk_r+0x1a>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <_sbrk_r+0x1a>
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
 800cc6c:	20005508 	.word	0x20005508

0800cc70 <__sread>:
 800cc70:	b510      	push	{r4, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc78:	f001 ffd6 	bl	800ec28 <_read_r>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	bfab      	itete	ge
 800cc80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc82:	89a3      	ldrhlt	r3, [r4, #12]
 800cc84:	181b      	addge	r3, r3, r0
 800cc86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc8a:	bfac      	ite	ge
 800cc8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc8e:	81a3      	strhlt	r3, [r4, #12]
 800cc90:	bd10      	pop	{r4, pc}

0800cc92 <__swrite>:
 800cc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc96:	461f      	mov	r7, r3
 800cc98:	898b      	ldrh	r3, [r1, #12]
 800cc9a:	05db      	lsls	r3, r3, #23
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4616      	mov	r6, r2
 800cca2:	d505      	bpl.n	800ccb0 <__swrite+0x1e>
 800cca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca8:	2302      	movs	r3, #2
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f001 faaa 	bl	800e204 <_lseek_r>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	463b      	mov	r3, r7
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	f000 be49 	b.w	800d95c <_write_r>

0800ccca <__sseek>:
 800ccca:	b510      	push	{r4, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd2:	f001 fa97 	bl	800e204 <_lseek_r>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	bf15      	itete	ne
 800ccdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cce6:	81a3      	strheq	r3, [r4, #12]
 800cce8:	bf18      	it	ne
 800ccea:	81a3      	strhne	r3, [r4, #12]
 800ccec:	bd10      	pop	{r4, pc}

0800ccee <__sclose>:
 800ccee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf2:	f000 be45 	b.w	800d980 <_close_r>

0800ccf6 <sulp>:
 800ccf6:	b570      	push	{r4, r5, r6, lr}
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	460d      	mov	r5, r1
 800ccfc:	ec45 4b10 	vmov	d0, r4, r5
 800cd00:	4616      	mov	r6, r2
 800cd02:	f001 fe1b 	bl	800e93c <__ulp>
 800cd06:	ec51 0b10 	vmov	r0, r1, d0
 800cd0a:	b17e      	cbz	r6, 800cd2c <sulp+0x36>
 800cd0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dd09      	ble.n	800cd2c <sulp+0x36>
 800cd18:	051b      	lsls	r3, r3, #20
 800cd1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd1e:	2400      	movs	r4, #0
 800cd20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd24:	4622      	mov	r2, r4
 800cd26:	462b      	mov	r3, r5
 800cd28:	f7f3 fc86 	bl	8000638 <__aeabi_dmul>
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd30 <_strtod_l>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	b0a3      	sub	sp, #140	; 0x8c
 800cd36:	461f      	mov	r7, r3
 800cd38:	2300      	movs	r3, #0
 800cd3a:	931e      	str	r3, [sp, #120]	; 0x78
 800cd3c:	4ba4      	ldr	r3, [pc, #656]	; (800cfd0 <_strtod_l+0x2a0>)
 800cd3e:	9219      	str	r2, [sp, #100]	; 0x64
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	9307      	str	r3, [sp, #28]
 800cd44:	4604      	mov	r4, r0
 800cd46:	4618      	mov	r0, r3
 800cd48:	4688      	mov	r8, r1
 800cd4a:	f7f3 fa61 	bl	8000210 <strlen>
 800cd4e:	f04f 0a00 	mov.w	sl, #0
 800cd52:	4605      	mov	r5, r0
 800cd54:	f04f 0b00 	mov.w	fp, #0
 800cd58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cd5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd5e:	781a      	ldrb	r2, [r3, #0]
 800cd60:	2a2b      	cmp	r2, #43	; 0x2b
 800cd62:	d04c      	beq.n	800cdfe <_strtod_l+0xce>
 800cd64:	d839      	bhi.n	800cdda <_strtod_l+0xaa>
 800cd66:	2a0d      	cmp	r2, #13
 800cd68:	d832      	bhi.n	800cdd0 <_strtod_l+0xa0>
 800cd6a:	2a08      	cmp	r2, #8
 800cd6c:	d832      	bhi.n	800cdd4 <_strtod_l+0xa4>
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	d03c      	beq.n	800cdec <_strtod_l+0xbc>
 800cd72:	2300      	movs	r3, #0
 800cd74:	930e      	str	r3, [sp, #56]	; 0x38
 800cd76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cd78:	7833      	ldrb	r3, [r6, #0]
 800cd7a:	2b30      	cmp	r3, #48	; 0x30
 800cd7c:	f040 80b4 	bne.w	800cee8 <_strtod_l+0x1b8>
 800cd80:	7873      	ldrb	r3, [r6, #1]
 800cd82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd86:	2b58      	cmp	r3, #88	; 0x58
 800cd88:	d16c      	bne.n	800ce64 <_strtod_l+0x134>
 800cd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd8c:	9301      	str	r3, [sp, #4]
 800cd8e:	ab1e      	add	r3, sp, #120	; 0x78
 800cd90:	9702      	str	r7, [sp, #8]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4a8f      	ldr	r2, [pc, #572]	; (800cfd4 <_strtod_l+0x2a4>)
 800cd96:	ab1f      	add	r3, sp, #124	; 0x7c
 800cd98:	a91d      	add	r1, sp, #116	; 0x74
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 ff2a 	bl	800dbf4 <__gethex>
 800cda0:	f010 0707 	ands.w	r7, r0, #7
 800cda4:	4605      	mov	r5, r0
 800cda6:	d005      	beq.n	800cdb4 <_strtod_l+0x84>
 800cda8:	2f06      	cmp	r7, #6
 800cdaa:	d12a      	bne.n	800ce02 <_strtod_l+0xd2>
 800cdac:	3601      	adds	r6, #1
 800cdae:	2300      	movs	r3, #0
 800cdb0:	961d      	str	r6, [sp, #116]	; 0x74
 800cdb2:	930e      	str	r3, [sp, #56]	; 0x38
 800cdb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f040 8596 	bne.w	800d8e8 <_strtod_l+0xbb8>
 800cdbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdbe:	b1db      	cbz	r3, 800cdf8 <_strtod_l+0xc8>
 800cdc0:	4652      	mov	r2, sl
 800cdc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cdc6:	ec43 2b10 	vmov	d0, r2, r3
 800cdca:	b023      	add	sp, #140	; 0x8c
 800cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd0:	2a20      	cmp	r2, #32
 800cdd2:	d1ce      	bne.n	800cd72 <_strtod_l+0x42>
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	931d      	str	r3, [sp, #116]	; 0x74
 800cdd8:	e7c0      	b.n	800cd5c <_strtod_l+0x2c>
 800cdda:	2a2d      	cmp	r2, #45	; 0x2d
 800cddc:	d1c9      	bne.n	800cd72 <_strtod_l+0x42>
 800cdde:	2201      	movs	r2, #1
 800cde0:	920e      	str	r2, [sp, #56]	; 0x38
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	921d      	str	r2, [sp, #116]	; 0x74
 800cde6:	785b      	ldrb	r3, [r3, #1]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1c4      	bne.n	800cd76 <_strtod_l+0x46>
 800cdec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f040 8576 	bne.w	800d8e4 <_strtod_l+0xbb4>
 800cdf8:	4652      	mov	r2, sl
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	e7e3      	b.n	800cdc6 <_strtod_l+0x96>
 800cdfe:	2200      	movs	r2, #0
 800ce00:	e7ee      	b.n	800cde0 <_strtod_l+0xb0>
 800ce02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce04:	b13a      	cbz	r2, 800ce16 <_strtod_l+0xe6>
 800ce06:	2135      	movs	r1, #53	; 0x35
 800ce08:	a820      	add	r0, sp, #128	; 0x80
 800ce0a:	f001 fea2 	bl	800eb52 <__copybits>
 800ce0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ce10:	4620      	mov	r0, r4
 800ce12:	f001 fa67 	bl	800e2e4 <_Bfree>
 800ce16:	3f01      	subs	r7, #1
 800ce18:	2f05      	cmp	r7, #5
 800ce1a:	d807      	bhi.n	800ce2c <_strtod_l+0xfc>
 800ce1c:	e8df f007 	tbb	[pc, r7]
 800ce20:	1d180b0e 	.word	0x1d180b0e
 800ce24:	030e      	.short	0x030e
 800ce26:	f04f 0b00 	mov.w	fp, #0
 800ce2a:	46da      	mov	sl, fp
 800ce2c:	0728      	lsls	r0, r5, #28
 800ce2e:	d5c1      	bpl.n	800cdb4 <_strtod_l+0x84>
 800ce30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ce34:	e7be      	b.n	800cdb4 <_strtod_l+0x84>
 800ce36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ce3a:	e7f7      	b.n	800ce2c <_strtod_l+0xfc>
 800ce3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ce40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ce42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce4e:	e7ed      	b.n	800ce2c <_strtod_l+0xfc>
 800ce50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800cfd8 <_strtod_l+0x2a8>
 800ce54:	f04f 0a00 	mov.w	sl, #0
 800ce58:	e7e8      	b.n	800ce2c <_strtod_l+0xfc>
 800ce5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ce5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ce62:	e7e3      	b.n	800ce2c <_strtod_l+0xfc>
 800ce64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	921d      	str	r2, [sp, #116]	; 0x74
 800ce6a:	785b      	ldrb	r3, [r3, #1]
 800ce6c:	2b30      	cmp	r3, #48	; 0x30
 800ce6e:	d0f9      	beq.n	800ce64 <_strtod_l+0x134>
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d09f      	beq.n	800cdb4 <_strtod_l+0x84>
 800ce74:	2301      	movs	r3, #1
 800ce76:	f04f 0900 	mov.w	r9, #0
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ce84:	464f      	mov	r7, r9
 800ce86:	220a      	movs	r2, #10
 800ce88:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ce8a:	7806      	ldrb	r6, [r0, #0]
 800ce8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce90:	b2d9      	uxtb	r1, r3
 800ce92:	2909      	cmp	r1, #9
 800ce94:	d92a      	bls.n	800ceec <_strtod_l+0x1bc>
 800ce96:	9907      	ldr	r1, [sp, #28]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	f001 fee1 	bl	800ec60 <strncmp>
 800ce9e:	b398      	cbz	r0, 800cf08 <_strtod_l+0x1d8>
 800cea0:	2000      	movs	r0, #0
 800cea2:	4633      	mov	r3, r6
 800cea4:	463d      	mov	r5, r7
 800cea6:	9007      	str	r0, [sp, #28]
 800cea8:	4602      	mov	r2, r0
 800ceaa:	2b65      	cmp	r3, #101	; 0x65
 800ceac:	d001      	beq.n	800ceb2 <_strtod_l+0x182>
 800ceae:	2b45      	cmp	r3, #69	; 0x45
 800ceb0:	d118      	bne.n	800cee4 <_strtod_l+0x1b4>
 800ceb2:	b91d      	cbnz	r5, 800cebc <_strtod_l+0x18c>
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	4303      	orrs	r3, r0
 800ceb8:	d098      	beq.n	800cdec <_strtod_l+0xbc>
 800ceba:	2500      	movs	r5, #0
 800cebc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800cec0:	f108 0301 	add.w	r3, r8, #1
 800cec4:	931d      	str	r3, [sp, #116]	; 0x74
 800cec6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ceca:	2b2b      	cmp	r3, #43	; 0x2b
 800cecc:	d075      	beq.n	800cfba <_strtod_l+0x28a>
 800cece:	2b2d      	cmp	r3, #45	; 0x2d
 800ced0:	d07b      	beq.n	800cfca <_strtod_l+0x29a>
 800ced2:	f04f 0c00 	mov.w	ip, #0
 800ced6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ceda:	2909      	cmp	r1, #9
 800cedc:	f240 8082 	bls.w	800cfe4 <_strtod_l+0x2b4>
 800cee0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cee4:	2600      	movs	r6, #0
 800cee6:	e09d      	b.n	800d024 <_strtod_l+0x2f4>
 800cee8:	2300      	movs	r3, #0
 800ceea:	e7c4      	b.n	800ce76 <_strtod_l+0x146>
 800ceec:	2f08      	cmp	r7, #8
 800ceee:	bfd8      	it	le
 800cef0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cef2:	f100 0001 	add.w	r0, r0, #1
 800cef6:	bfda      	itte	le
 800cef8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cefc:	9309      	strle	r3, [sp, #36]	; 0x24
 800cefe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cf02:	3701      	adds	r7, #1
 800cf04:	901d      	str	r0, [sp, #116]	; 0x74
 800cf06:	e7bf      	b.n	800ce88 <_strtod_l+0x158>
 800cf08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf0a:	195a      	adds	r2, r3, r5
 800cf0c:	921d      	str	r2, [sp, #116]	; 0x74
 800cf0e:	5d5b      	ldrb	r3, [r3, r5]
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	d037      	beq.n	800cf84 <_strtod_l+0x254>
 800cf14:	9007      	str	r0, [sp, #28]
 800cf16:	463d      	mov	r5, r7
 800cf18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cf1c:	2a09      	cmp	r2, #9
 800cf1e:	d912      	bls.n	800cf46 <_strtod_l+0x216>
 800cf20:	2201      	movs	r2, #1
 800cf22:	e7c2      	b.n	800ceaa <_strtod_l+0x17a>
 800cf24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf26:	1c5a      	adds	r2, r3, #1
 800cf28:	921d      	str	r2, [sp, #116]	; 0x74
 800cf2a:	785b      	ldrb	r3, [r3, #1]
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	2b30      	cmp	r3, #48	; 0x30
 800cf30:	d0f8      	beq.n	800cf24 <_strtod_l+0x1f4>
 800cf32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cf36:	2a08      	cmp	r2, #8
 800cf38:	f200 84db 	bhi.w	800d8f2 <_strtod_l+0xbc2>
 800cf3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf3e:	9007      	str	r0, [sp, #28]
 800cf40:	2000      	movs	r0, #0
 800cf42:	920a      	str	r2, [sp, #40]	; 0x28
 800cf44:	4605      	mov	r5, r0
 800cf46:	3b30      	subs	r3, #48	; 0x30
 800cf48:	f100 0201 	add.w	r2, r0, #1
 800cf4c:	d014      	beq.n	800cf78 <_strtod_l+0x248>
 800cf4e:	9907      	ldr	r1, [sp, #28]
 800cf50:	4411      	add	r1, r2
 800cf52:	9107      	str	r1, [sp, #28]
 800cf54:	462a      	mov	r2, r5
 800cf56:	eb00 0e05 	add.w	lr, r0, r5
 800cf5a:	210a      	movs	r1, #10
 800cf5c:	4572      	cmp	r2, lr
 800cf5e:	d113      	bne.n	800cf88 <_strtod_l+0x258>
 800cf60:	182a      	adds	r2, r5, r0
 800cf62:	2a08      	cmp	r2, #8
 800cf64:	f105 0501 	add.w	r5, r5, #1
 800cf68:	4405      	add	r5, r0
 800cf6a:	dc1c      	bgt.n	800cfa6 <_strtod_l+0x276>
 800cf6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf6e:	220a      	movs	r2, #10
 800cf70:	fb02 3301 	mla	r3, r2, r1, r3
 800cf74:	9309      	str	r3, [sp, #36]	; 0x24
 800cf76:	2200      	movs	r2, #0
 800cf78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf7a:	1c59      	adds	r1, r3, #1
 800cf7c:	911d      	str	r1, [sp, #116]	; 0x74
 800cf7e:	785b      	ldrb	r3, [r3, #1]
 800cf80:	4610      	mov	r0, r2
 800cf82:	e7c9      	b.n	800cf18 <_strtod_l+0x1e8>
 800cf84:	4638      	mov	r0, r7
 800cf86:	e7d2      	b.n	800cf2e <_strtod_l+0x1fe>
 800cf88:	2a08      	cmp	r2, #8
 800cf8a:	dc04      	bgt.n	800cf96 <_strtod_l+0x266>
 800cf8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cf8e:	434e      	muls	r6, r1
 800cf90:	9609      	str	r6, [sp, #36]	; 0x24
 800cf92:	3201      	adds	r2, #1
 800cf94:	e7e2      	b.n	800cf5c <_strtod_l+0x22c>
 800cf96:	f102 0c01 	add.w	ip, r2, #1
 800cf9a:	f1bc 0f10 	cmp.w	ip, #16
 800cf9e:	bfd8      	it	le
 800cfa0:	fb01 f909 	mulle.w	r9, r1, r9
 800cfa4:	e7f5      	b.n	800cf92 <_strtod_l+0x262>
 800cfa6:	2d10      	cmp	r5, #16
 800cfa8:	bfdc      	itt	le
 800cfaa:	220a      	movle	r2, #10
 800cfac:	fb02 3909 	mlale	r9, r2, r9, r3
 800cfb0:	e7e1      	b.n	800cf76 <_strtod_l+0x246>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	9307      	str	r3, [sp, #28]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	e77c      	b.n	800ceb4 <_strtod_l+0x184>
 800cfba:	f04f 0c00 	mov.w	ip, #0
 800cfbe:	f108 0302 	add.w	r3, r8, #2
 800cfc2:	931d      	str	r3, [sp, #116]	; 0x74
 800cfc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cfc8:	e785      	b.n	800ced6 <_strtod_l+0x1a6>
 800cfca:	f04f 0c01 	mov.w	ip, #1
 800cfce:	e7f6      	b.n	800cfbe <_strtod_l+0x28e>
 800cfd0:	080117ec 	.word	0x080117ec
 800cfd4:	0801171c 	.word	0x0801171c
 800cfd8:	7ff00000 	.word	0x7ff00000
 800cfdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfde:	1c59      	adds	r1, r3, #1
 800cfe0:	911d      	str	r1, [sp, #116]	; 0x74
 800cfe2:	785b      	ldrb	r3, [r3, #1]
 800cfe4:	2b30      	cmp	r3, #48	; 0x30
 800cfe6:	d0f9      	beq.n	800cfdc <_strtod_l+0x2ac>
 800cfe8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800cfec:	2908      	cmp	r1, #8
 800cfee:	f63f af79 	bhi.w	800cee4 <_strtod_l+0x1b4>
 800cff2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cff6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cff8:	9308      	str	r3, [sp, #32]
 800cffa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cffc:	1c59      	adds	r1, r3, #1
 800cffe:	911d      	str	r1, [sp, #116]	; 0x74
 800d000:	785b      	ldrb	r3, [r3, #1]
 800d002:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d006:	2e09      	cmp	r6, #9
 800d008:	d937      	bls.n	800d07a <_strtod_l+0x34a>
 800d00a:	9e08      	ldr	r6, [sp, #32]
 800d00c:	1b89      	subs	r1, r1, r6
 800d00e:	2908      	cmp	r1, #8
 800d010:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d014:	dc02      	bgt.n	800d01c <_strtod_l+0x2ec>
 800d016:	4576      	cmp	r6, lr
 800d018:	bfa8      	it	ge
 800d01a:	4676      	movge	r6, lr
 800d01c:	f1bc 0f00 	cmp.w	ip, #0
 800d020:	d000      	beq.n	800d024 <_strtod_l+0x2f4>
 800d022:	4276      	negs	r6, r6
 800d024:	2d00      	cmp	r5, #0
 800d026:	d14f      	bne.n	800d0c8 <_strtod_l+0x398>
 800d028:	9904      	ldr	r1, [sp, #16]
 800d02a:	4301      	orrs	r1, r0
 800d02c:	f47f aec2 	bne.w	800cdb4 <_strtod_l+0x84>
 800d030:	2a00      	cmp	r2, #0
 800d032:	f47f aedb 	bne.w	800cdec <_strtod_l+0xbc>
 800d036:	2b69      	cmp	r3, #105	; 0x69
 800d038:	d027      	beq.n	800d08a <_strtod_l+0x35a>
 800d03a:	dc24      	bgt.n	800d086 <_strtod_l+0x356>
 800d03c:	2b49      	cmp	r3, #73	; 0x49
 800d03e:	d024      	beq.n	800d08a <_strtod_l+0x35a>
 800d040:	2b4e      	cmp	r3, #78	; 0x4e
 800d042:	f47f aed3 	bne.w	800cdec <_strtod_l+0xbc>
 800d046:	499e      	ldr	r1, [pc, #632]	; (800d2c0 <_strtod_l+0x590>)
 800d048:	a81d      	add	r0, sp, #116	; 0x74
 800d04a:	f001 f82b 	bl	800e0a4 <__match>
 800d04e:	2800      	cmp	r0, #0
 800d050:	f43f aecc 	beq.w	800cdec <_strtod_l+0xbc>
 800d054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b28      	cmp	r3, #40	; 0x28
 800d05a:	d12d      	bne.n	800d0b8 <_strtod_l+0x388>
 800d05c:	4999      	ldr	r1, [pc, #612]	; (800d2c4 <_strtod_l+0x594>)
 800d05e:	aa20      	add	r2, sp, #128	; 0x80
 800d060:	a81d      	add	r0, sp, #116	; 0x74
 800d062:	f001 f833 	bl	800e0cc <__hexnan>
 800d066:	2805      	cmp	r0, #5
 800d068:	d126      	bne.n	800d0b8 <_strtod_l+0x388>
 800d06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d06c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d070:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d074:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d078:	e69c      	b.n	800cdb4 <_strtod_l+0x84>
 800d07a:	210a      	movs	r1, #10
 800d07c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d080:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d084:	e7b9      	b.n	800cffa <_strtod_l+0x2ca>
 800d086:	2b6e      	cmp	r3, #110	; 0x6e
 800d088:	e7db      	b.n	800d042 <_strtod_l+0x312>
 800d08a:	498f      	ldr	r1, [pc, #572]	; (800d2c8 <_strtod_l+0x598>)
 800d08c:	a81d      	add	r0, sp, #116	; 0x74
 800d08e:	f001 f809 	bl	800e0a4 <__match>
 800d092:	2800      	cmp	r0, #0
 800d094:	f43f aeaa 	beq.w	800cdec <_strtod_l+0xbc>
 800d098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d09a:	498c      	ldr	r1, [pc, #560]	; (800d2cc <_strtod_l+0x59c>)
 800d09c:	3b01      	subs	r3, #1
 800d09e:	a81d      	add	r0, sp, #116	; 0x74
 800d0a0:	931d      	str	r3, [sp, #116]	; 0x74
 800d0a2:	f000 ffff 	bl	800e0a4 <__match>
 800d0a6:	b910      	cbnz	r0, 800d0ae <_strtod_l+0x37e>
 800d0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	931d      	str	r3, [sp, #116]	; 0x74
 800d0ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d2dc <_strtod_l+0x5ac>
 800d0b2:	f04f 0a00 	mov.w	sl, #0
 800d0b6:	e67d      	b.n	800cdb4 <_strtod_l+0x84>
 800d0b8:	4885      	ldr	r0, [pc, #532]	; (800d2d0 <_strtod_l+0x5a0>)
 800d0ba:	f001 fdc9 	bl	800ec50 <nan>
 800d0be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d0c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d0c6:	e675      	b.n	800cdb4 <_strtod_l+0x84>
 800d0c8:	9b07      	ldr	r3, [sp, #28]
 800d0ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0cc:	1af3      	subs	r3, r6, r3
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	bf08      	it	eq
 800d0d2:	462f      	moveq	r7, r5
 800d0d4:	2d10      	cmp	r5, #16
 800d0d6:	9308      	str	r3, [sp, #32]
 800d0d8:	46a8      	mov	r8, r5
 800d0da:	bfa8      	it	ge
 800d0dc:	f04f 0810 	movge.w	r8, #16
 800d0e0:	f7f3 fa30 	bl	8000544 <__aeabi_ui2d>
 800d0e4:	2d09      	cmp	r5, #9
 800d0e6:	4682      	mov	sl, r0
 800d0e8:	468b      	mov	fp, r1
 800d0ea:	dd13      	ble.n	800d114 <_strtod_l+0x3e4>
 800d0ec:	4b79      	ldr	r3, [pc, #484]	; (800d2d4 <_strtod_l+0x5a4>)
 800d0ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d0f6:	f7f3 fa9f 	bl	8000638 <__aeabi_dmul>
 800d0fa:	4682      	mov	sl, r0
 800d0fc:	4648      	mov	r0, r9
 800d0fe:	468b      	mov	fp, r1
 800d100:	f7f3 fa20 	bl	8000544 <__aeabi_ui2d>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4650      	mov	r0, sl
 800d10a:	4659      	mov	r1, fp
 800d10c:	f7f3 f8de 	bl	80002cc <__adddf3>
 800d110:	4682      	mov	sl, r0
 800d112:	468b      	mov	fp, r1
 800d114:	2d0f      	cmp	r5, #15
 800d116:	dc38      	bgt.n	800d18a <_strtod_l+0x45a>
 800d118:	9b08      	ldr	r3, [sp, #32]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f43f ae4a 	beq.w	800cdb4 <_strtod_l+0x84>
 800d120:	dd24      	ble.n	800d16c <_strtod_l+0x43c>
 800d122:	2b16      	cmp	r3, #22
 800d124:	dc0b      	bgt.n	800d13e <_strtod_l+0x40e>
 800d126:	4d6b      	ldr	r5, [pc, #428]	; (800d2d4 <_strtod_l+0x5a4>)
 800d128:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d12c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d130:	4652      	mov	r2, sl
 800d132:	465b      	mov	r3, fp
 800d134:	f7f3 fa80 	bl	8000638 <__aeabi_dmul>
 800d138:	4682      	mov	sl, r0
 800d13a:	468b      	mov	fp, r1
 800d13c:	e63a      	b.n	800cdb4 <_strtod_l+0x84>
 800d13e:	9a08      	ldr	r2, [sp, #32]
 800d140:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d144:	4293      	cmp	r3, r2
 800d146:	db20      	blt.n	800d18a <_strtod_l+0x45a>
 800d148:	4c62      	ldr	r4, [pc, #392]	; (800d2d4 <_strtod_l+0x5a4>)
 800d14a:	f1c5 050f 	rsb	r5, r5, #15
 800d14e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d152:	4652      	mov	r2, sl
 800d154:	465b      	mov	r3, fp
 800d156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d15a:	f7f3 fa6d 	bl	8000638 <__aeabi_dmul>
 800d15e:	9b08      	ldr	r3, [sp, #32]
 800d160:	1b5d      	subs	r5, r3, r5
 800d162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d16a:	e7e3      	b.n	800d134 <_strtod_l+0x404>
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	3316      	adds	r3, #22
 800d170:	db0b      	blt.n	800d18a <_strtod_l+0x45a>
 800d172:	9b07      	ldr	r3, [sp, #28]
 800d174:	4a57      	ldr	r2, [pc, #348]	; (800d2d4 <_strtod_l+0x5a4>)
 800d176:	1b9e      	subs	r6, r3, r6
 800d178:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d17c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	f7f3 fb82 	bl	800088c <__aeabi_ddiv>
 800d188:	e7d6      	b.n	800d138 <_strtod_l+0x408>
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	eba5 0808 	sub.w	r8, r5, r8
 800d190:	4498      	add	r8, r3
 800d192:	f1b8 0f00 	cmp.w	r8, #0
 800d196:	dd71      	ble.n	800d27c <_strtod_l+0x54c>
 800d198:	f018 030f 	ands.w	r3, r8, #15
 800d19c:	d00a      	beq.n	800d1b4 <_strtod_l+0x484>
 800d19e:	494d      	ldr	r1, [pc, #308]	; (800d2d4 <_strtod_l+0x5a4>)
 800d1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1a4:	4652      	mov	r2, sl
 800d1a6:	465b      	mov	r3, fp
 800d1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ac:	f7f3 fa44 	bl	8000638 <__aeabi_dmul>
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	468b      	mov	fp, r1
 800d1b4:	f038 080f 	bics.w	r8, r8, #15
 800d1b8:	d04d      	beq.n	800d256 <_strtod_l+0x526>
 800d1ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d1be:	dd22      	ble.n	800d206 <_strtod_l+0x4d6>
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	462e      	mov	r6, r5
 800d1c4:	9509      	str	r5, [sp, #36]	; 0x24
 800d1c6:	9507      	str	r5, [sp, #28]
 800d1c8:	2322      	movs	r3, #34	; 0x22
 800d1ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d2dc <_strtod_l+0x5ac>
 800d1ce:	6023      	str	r3, [r4, #0]
 800d1d0:	f04f 0a00 	mov.w	sl, #0
 800d1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f43f adec 	beq.w	800cdb4 <_strtod_l+0x84>
 800d1dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f001 f880 	bl	800e2e4 <_Bfree>
 800d1e4:	9907      	ldr	r1, [sp, #28]
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f001 f87c 	bl	800e2e4 <_Bfree>
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f001 f878 	bl	800e2e4 <_Bfree>
 800d1f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f001 f874 	bl	800e2e4 <_Bfree>
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4620      	mov	r0, r4
 800d200:	f001 f870 	bl	800e2e4 <_Bfree>
 800d204:	e5d6      	b.n	800cdb4 <_strtod_l+0x84>
 800d206:	2300      	movs	r3, #0
 800d208:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d20c:	4650      	mov	r0, sl
 800d20e:	4659      	mov	r1, fp
 800d210:	4699      	mov	r9, r3
 800d212:	f1b8 0f01 	cmp.w	r8, #1
 800d216:	dc21      	bgt.n	800d25c <_strtod_l+0x52c>
 800d218:	b10b      	cbz	r3, 800d21e <_strtod_l+0x4ee>
 800d21a:	4682      	mov	sl, r0
 800d21c:	468b      	mov	fp, r1
 800d21e:	4b2e      	ldr	r3, [pc, #184]	; (800d2d8 <_strtod_l+0x5a8>)
 800d220:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d224:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d228:	4652      	mov	r2, sl
 800d22a:	465b      	mov	r3, fp
 800d22c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d230:	f7f3 fa02 	bl	8000638 <__aeabi_dmul>
 800d234:	4b29      	ldr	r3, [pc, #164]	; (800d2dc <_strtod_l+0x5ac>)
 800d236:	460a      	mov	r2, r1
 800d238:	400b      	ands	r3, r1
 800d23a:	4929      	ldr	r1, [pc, #164]	; (800d2e0 <_strtod_l+0x5b0>)
 800d23c:	428b      	cmp	r3, r1
 800d23e:	4682      	mov	sl, r0
 800d240:	d8be      	bhi.n	800d1c0 <_strtod_l+0x490>
 800d242:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d246:	428b      	cmp	r3, r1
 800d248:	bf86      	itte	hi
 800d24a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d2e4 <_strtod_l+0x5b4>
 800d24e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800d252:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d256:	2300      	movs	r3, #0
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	e081      	b.n	800d360 <_strtod_l+0x630>
 800d25c:	f018 0f01 	tst.w	r8, #1
 800d260:	d007      	beq.n	800d272 <_strtod_l+0x542>
 800d262:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <_strtod_l+0x5a8>)
 800d264:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f9e4 	bl	8000638 <__aeabi_dmul>
 800d270:	2301      	movs	r3, #1
 800d272:	f109 0901 	add.w	r9, r9, #1
 800d276:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d27a:	e7ca      	b.n	800d212 <_strtod_l+0x4e2>
 800d27c:	d0eb      	beq.n	800d256 <_strtod_l+0x526>
 800d27e:	f1c8 0800 	rsb	r8, r8, #0
 800d282:	f018 020f 	ands.w	r2, r8, #15
 800d286:	d00a      	beq.n	800d29e <_strtod_l+0x56e>
 800d288:	4b12      	ldr	r3, [pc, #72]	; (800d2d4 <_strtod_l+0x5a4>)
 800d28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d28e:	4650      	mov	r0, sl
 800d290:	4659      	mov	r1, fp
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f3 faf9 	bl	800088c <__aeabi_ddiv>
 800d29a:	4682      	mov	sl, r0
 800d29c:	468b      	mov	fp, r1
 800d29e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d2a2:	d0d8      	beq.n	800d256 <_strtod_l+0x526>
 800d2a4:	f1b8 0f1f 	cmp.w	r8, #31
 800d2a8:	dd1e      	ble.n	800d2e8 <_strtod_l+0x5b8>
 800d2aa:	2500      	movs	r5, #0
 800d2ac:	462e      	mov	r6, r5
 800d2ae:	9509      	str	r5, [sp, #36]	; 0x24
 800d2b0:	9507      	str	r5, [sp, #28]
 800d2b2:	2322      	movs	r3, #34	; 0x22
 800d2b4:	f04f 0a00 	mov.w	sl, #0
 800d2b8:	f04f 0b00 	mov.w	fp, #0
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	e789      	b.n	800d1d4 <_strtod_l+0x4a4>
 800d2c0:	08011719 	.word	0x08011719
 800d2c4:	08011730 	.word	0x08011730
 800d2c8:	08011710 	.word	0x08011710
 800d2cc:	08011713 	.word	0x08011713
 800d2d0:	080119af 	.word	0x080119af
 800d2d4:	080118a0 	.word	0x080118a0
 800d2d8:	08011878 	.word	0x08011878
 800d2dc:	7ff00000 	.word	0x7ff00000
 800d2e0:	7ca00000 	.word	0x7ca00000
 800d2e4:	7fefffff 	.word	0x7fefffff
 800d2e8:	f018 0310 	ands.w	r3, r8, #16
 800d2ec:	bf18      	it	ne
 800d2ee:	236a      	movne	r3, #106	; 0x6a
 800d2f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d6a8 <_strtod_l+0x978>
 800d2f4:	9304      	str	r3, [sp, #16]
 800d2f6:	4650      	mov	r0, sl
 800d2f8:	4659      	mov	r1, fp
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f018 0f01 	tst.w	r8, #1
 800d300:	d004      	beq.n	800d30c <_strtod_l+0x5dc>
 800d302:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d306:	f7f3 f997 	bl	8000638 <__aeabi_dmul>
 800d30a:	2301      	movs	r3, #1
 800d30c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d310:	f109 0908 	add.w	r9, r9, #8
 800d314:	d1f2      	bne.n	800d2fc <_strtod_l+0x5cc>
 800d316:	b10b      	cbz	r3, 800d31c <_strtod_l+0x5ec>
 800d318:	4682      	mov	sl, r0
 800d31a:	468b      	mov	fp, r1
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	b1bb      	cbz	r3, 800d350 <_strtod_l+0x620>
 800d320:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d324:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d328:	2b00      	cmp	r3, #0
 800d32a:	4659      	mov	r1, fp
 800d32c:	dd10      	ble.n	800d350 <_strtod_l+0x620>
 800d32e:	2b1f      	cmp	r3, #31
 800d330:	f340 8128 	ble.w	800d584 <_strtod_l+0x854>
 800d334:	2b34      	cmp	r3, #52	; 0x34
 800d336:	bfde      	ittt	le
 800d338:	3b20      	suble	r3, #32
 800d33a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800d33e:	fa02 f303 	lslle.w	r3, r2, r3
 800d342:	f04f 0a00 	mov.w	sl, #0
 800d346:	bfcc      	ite	gt
 800d348:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d34c:	ea03 0b01 	andle.w	fp, r3, r1
 800d350:	2200      	movs	r2, #0
 800d352:	2300      	movs	r3, #0
 800d354:	4650      	mov	r0, sl
 800d356:	4659      	mov	r1, fp
 800d358:	f7f3 fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d1a4      	bne.n	800d2aa <_strtod_l+0x57a>
 800d360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d366:	462b      	mov	r3, r5
 800d368:	463a      	mov	r2, r7
 800d36a:	4620      	mov	r0, r4
 800d36c:	f001 f826 	bl	800e3bc <__s2b>
 800d370:	9009      	str	r0, [sp, #36]	; 0x24
 800d372:	2800      	cmp	r0, #0
 800d374:	f43f af24 	beq.w	800d1c0 <_strtod_l+0x490>
 800d378:	9b07      	ldr	r3, [sp, #28]
 800d37a:	1b9e      	subs	r6, r3, r6
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	bfb4      	ite	lt
 800d382:	4633      	movlt	r3, r6
 800d384:	2300      	movge	r3, #0
 800d386:	9310      	str	r3, [sp, #64]	; 0x40
 800d388:	9b08      	ldr	r3, [sp, #32]
 800d38a:	2500      	movs	r5, #0
 800d38c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d390:	9318      	str	r3, [sp, #96]	; 0x60
 800d392:	462e      	mov	r6, r5
 800d394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d396:	4620      	mov	r0, r4
 800d398:	6859      	ldr	r1, [r3, #4]
 800d39a:	f000 ff63 	bl	800e264 <_Balloc>
 800d39e:	9007      	str	r0, [sp, #28]
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	f43f af11 	beq.w	800d1c8 <_strtod_l+0x498>
 800d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a8:	691a      	ldr	r2, [r3, #16]
 800d3aa:	3202      	adds	r2, #2
 800d3ac:	f103 010c 	add.w	r1, r3, #12
 800d3b0:	0092      	lsls	r2, r2, #2
 800d3b2:	300c      	adds	r0, #12
 800d3b4:	f7ff fb0a 	bl	800c9cc <memcpy>
 800d3b8:	ec4b ab10 	vmov	d0, sl, fp
 800d3bc:	aa20      	add	r2, sp, #128	; 0x80
 800d3be:	a91f      	add	r1, sp, #124	; 0x7c
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d3c6:	f001 fb35 	bl	800ea34 <__d2b>
 800d3ca:	901e      	str	r0, [sp, #120]	; 0x78
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f43f aefb 	beq.w	800d1c8 <_strtod_l+0x498>
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f001 f88b 	bl	800e4f0 <__i2b>
 800d3da:	4606      	mov	r6, r0
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	f43f aef3 	beq.w	800d1c8 <_strtod_l+0x498>
 800d3e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3e4:	9904      	ldr	r1, [sp, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bfab      	itete	ge
 800d3ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d3ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d3ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d3f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d3f4:	bfac      	ite	ge
 800d3f6:	eb03 0902 	addge.w	r9, r3, r2
 800d3fa:	1ad7      	sublt	r7, r2, r3
 800d3fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d3fe:	eba3 0801 	sub.w	r8, r3, r1
 800d402:	4490      	add	r8, r2
 800d404:	4ba3      	ldr	r3, [pc, #652]	; (800d694 <_strtod_l+0x964>)
 800d406:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d40a:	4598      	cmp	r8, r3
 800d40c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d410:	f280 80cc 	bge.w	800d5ac <_strtod_l+0x87c>
 800d414:	eba3 0308 	sub.w	r3, r3, r8
 800d418:	2b1f      	cmp	r3, #31
 800d41a:	eba2 0203 	sub.w	r2, r2, r3
 800d41e:	f04f 0101 	mov.w	r1, #1
 800d422:	f300 80b6 	bgt.w	800d592 <_strtod_l+0x862>
 800d426:	fa01 f303 	lsl.w	r3, r1, r3
 800d42a:	9311      	str	r3, [sp, #68]	; 0x44
 800d42c:	2300      	movs	r3, #0
 800d42e:	930c      	str	r3, [sp, #48]	; 0x30
 800d430:	eb09 0802 	add.w	r8, r9, r2
 800d434:	9b04      	ldr	r3, [sp, #16]
 800d436:	45c1      	cmp	r9, r8
 800d438:	4417      	add	r7, r2
 800d43a:	441f      	add	r7, r3
 800d43c:	464b      	mov	r3, r9
 800d43e:	bfa8      	it	ge
 800d440:	4643      	movge	r3, r8
 800d442:	42bb      	cmp	r3, r7
 800d444:	bfa8      	it	ge
 800d446:	463b      	movge	r3, r7
 800d448:	2b00      	cmp	r3, #0
 800d44a:	bfc2      	ittt	gt
 800d44c:	eba8 0803 	subgt.w	r8, r8, r3
 800d450:	1aff      	subgt	r7, r7, r3
 800d452:	eba9 0903 	subgt.w	r9, r9, r3
 800d456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dd17      	ble.n	800d48c <_strtod_l+0x75c>
 800d45c:	4631      	mov	r1, r6
 800d45e:	461a      	mov	r2, r3
 800d460:	4620      	mov	r0, r4
 800d462:	f001 f901 	bl	800e668 <__pow5mult>
 800d466:	4606      	mov	r6, r0
 800d468:	2800      	cmp	r0, #0
 800d46a:	f43f aead 	beq.w	800d1c8 <_strtod_l+0x498>
 800d46e:	4601      	mov	r1, r0
 800d470:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d472:	4620      	mov	r0, r4
 800d474:	f001 f852 	bl	800e51c <__multiply>
 800d478:	900f      	str	r0, [sp, #60]	; 0x3c
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f43f aea4 	beq.w	800d1c8 <_strtod_l+0x498>
 800d480:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d482:	4620      	mov	r0, r4
 800d484:	f000 ff2e 	bl	800e2e4 <_Bfree>
 800d488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d48a:	931e      	str	r3, [sp, #120]	; 0x78
 800d48c:	f1b8 0f00 	cmp.w	r8, #0
 800d490:	f300 8091 	bgt.w	800d5b6 <_strtod_l+0x886>
 800d494:	9b08      	ldr	r3, [sp, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	dd08      	ble.n	800d4ac <_strtod_l+0x77c>
 800d49a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d49c:	9907      	ldr	r1, [sp, #28]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f001 f8e2 	bl	800e668 <__pow5mult>
 800d4a4:	9007      	str	r0, [sp, #28]
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f43f ae8e 	beq.w	800d1c8 <_strtod_l+0x498>
 800d4ac:	2f00      	cmp	r7, #0
 800d4ae:	dd08      	ble.n	800d4c2 <_strtod_l+0x792>
 800d4b0:	9907      	ldr	r1, [sp, #28]
 800d4b2:	463a      	mov	r2, r7
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f001 f931 	bl	800e71c <__lshift>
 800d4ba:	9007      	str	r0, [sp, #28]
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f43f ae83 	beq.w	800d1c8 <_strtod_l+0x498>
 800d4c2:	f1b9 0f00 	cmp.w	r9, #0
 800d4c6:	dd08      	ble.n	800d4da <_strtod_l+0x7aa>
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	464a      	mov	r2, r9
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f001 f925 	bl	800e71c <__lshift>
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f43f ae77 	beq.w	800d1c8 <_strtod_l+0x498>
 800d4da:	9a07      	ldr	r2, [sp, #28]
 800d4dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f001 f9a4 	bl	800e82c <__mdiff>
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f43f ae6e 	beq.w	800d1c8 <_strtod_l+0x498>
 800d4ec:	68c3      	ldr	r3, [r0, #12]
 800d4ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60c3      	str	r3, [r0, #12]
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	f001 f97d 	bl	800e7f4 <__mcmp>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	da65      	bge.n	800d5ca <_strtod_l+0x89a>
 800d4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d500:	ea53 030a 	orrs.w	r3, r3, sl
 800d504:	f040 8087 	bne.w	800d616 <_strtod_l+0x8e6>
 800d508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8082 	bne.w	800d616 <_strtod_l+0x8e6>
 800d512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d516:	0d1b      	lsrs	r3, r3, #20
 800d518:	051b      	lsls	r3, r3, #20
 800d51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d51e:	d97a      	bls.n	800d616 <_strtod_l+0x8e6>
 800d520:	696b      	ldr	r3, [r5, #20]
 800d522:	b913      	cbnz	r3, 800d52a <_strtod_l+0x7fa>
 800d524:	692b      	ldr	r3, [r5, #16]
 800d526:	2b01      	cmp	r3, #1
 800d528:	dd75      	ble.n	800d616 <_strtod_l+0x8e6>
 800d52a:	4629      	mov	r1, r5
 800d52c:	2201      	movs	r2, #1
 800d52e:	4620      	mov	r0, r4
 800d530:	f001 f8f4 	bl	800e71c <__lshift>
 800d534:	4631      	mov	r1, r6
 800d536:	4605      	mov	r5, r0
 800d538:	f001 f95c 	bl	800e7f4 <__mcmp>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	dd6a      	ble.n	800d616 <_strtod_l+0x8e6>
 800d540:	9904      	ldr	r1, [sp, #16]
 800d542:	4a55      	ldr	r2, [pc, #340]	; (800d698 <_strtod_l+0x968>)
 800d544:	465b      	mov	r3, fp
 800d546:	2900      	cmp	r1, #0
 800d548:	f000 8085 	beq.w	800d656 <_strtod_l+0x926>
 800d54c:	ea02 010b 	and.w	r1, r2, fp
 800d550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d554:	dc7f      	bgt.n	800d656 <_strtod_l+0x926>
 800d556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d55a:	f77f aeaa 	ble.w	800d2b2 <_strtod_l+0x582>
 800d55e:	4a4f      	ldr	r2, [pc, #316]	; (800d69c <_strtod_l+0x96c>)
 800d560:	2300      	movs	r3, #0
 800d562:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d566:	4650      	mov	r0, sl
 800d568:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d56c:	4659      	mov	r1, fp
 800d56e:	f7f3 f863 	bl	8000638 <__aeabi_dmul>
 800d572:	460b      	mov	r3, r1
 800d574:	4303      	orrs	r3, r0
 800d576:	bf08      	it	eq
 800d578:	2322      	moveq	r3, #34	; 0x22
 800d57a:	4682      	mov	sl, r0
 800d57c:	468b      	mov	fp, r1
 800d57e:	bf08      	it	eq
 800d580:	6023      	streq	r3, [r4, #0]
 800d582:	e62b      	b.n	800d1dc <_strtod_l+0x4ac>
 800d584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	ea03 0a0a 	and.w	sl, r3, sl
 800d590:	e6de      	b.n	800d350 <_strtod_l+0x620>
 800d592:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d596:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d59a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d59e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d5a2:	fa01 f308 	lsl.w	r3, r1, r8
 800d5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800d5a8:	9111      	str	r1, [sp, #68]	; 0x44
 800d5aa:	e741      	b.n	800d430 <_strtod_l+0x700>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	9311      	str	r3, [sp, #68]	; 0x44
 800d5b4:	e73c      	b.n	800d430 <_strtod_l+0x700>
 800d5b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f001 f8ae 	bl	800e71c <__lshift>
 800d5c0:	901e      	str	r0, [sp, #120]	; 0x78
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	f47f af66 	bne.w	800d494 <_strtod_l+0x764>
 800d5c8:	e5fe      	b.n	800d1c8 <_strtod_l+0x498>
 800d5ca:	465f      	mov	r7, fp
 800d5cc:	d16e      	bne.n	800d6ac <_strtod_l+0x97c>
 800d5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5d4:	b342      	cbz	r2, 800d628 <_strtod_l+0x8f8>
 800d5d6:	4a32      	ldr	r2, [pc, #200]	; (800d6a0 <_strtod_l+0x970>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d128      	bne.n	800d62e <_strtod_l+0x8fe>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	4650      	mov	r0, sl
 800d5e0:	b1eb      	cbz	r3, 800d61e <_strtod_l+0x8ee>
 800d5e2:	4a2d      	ldr	r2, [pc, #180]	; (800d698 <_strtod_l+0x968>)
 800d5e4:	403a      	ands	r2, r7
 800d5e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d5ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d5ee:	d819      	bhi.n	800d624 <_strtod_l+0x8f4>
 800d5f0:	0d12      	lsrs	r2, r2, #20
 800d5f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5fa:	4298      	cmp	r0, r3
 800d5fc:	d117      	bne.n	800d62e <_strtod_l+0x8fe>
 800d5fe:	4b29      	ldr	r3, [pc, #164]	; (800d6a4 <_strtod_l+0x974>)
 800d600:	429f      	cmp	r7, r3
 800d602:	d102      	bne.n	800d60a <_strtod_l+0x8da>
 800d604:	3001      	adds	r0, #1
 800d606:	f43f addf 	beq.w	800d1c8 <_strtod_l+0x498>
 800d60a:	4b23      	ldr	r3, [pc, #140]	; (800d698 <_strtod_l+0x968>)
 800d60c:	403b      	ands	r3, r7
 800d60e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d612:	f04f 0a00 	mov.w	sl, #0
 800d616:	9b04      	ldr	r3, [sp, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1a0      	bne.n	800d55e <_strtod_l+0x82e>
 800d61c:	e5de      	b.n	800d1dc <_strtod_l+0x4ac>
 800d61e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d622:	e7ea      	b.n	800d5fa <_strtod_l+0x8ca>
 800d624:	460b      	mov	r3, r1
 800d626:	e7e8      	b.n	800d5fa <_strtod_l+0x8ca>
 800d628:	ea53 030a 	orrs.w	r3, r3, sl
 800d62c:	d088      	beq.n	800d540 <_strtod_l+0x810>
 800d62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d630:	b1db      	cbz	r3, 800d66a <_strtod_l+0x93a>
 800d632:	423b      	tst	r3, r7
 800d634:	d0ef      	beq.n	800d616 <_strtod_l+0x8e6>
 800d636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d638:	9a04      	ldr	r2, [sp, #16]
 800d63a:	4650      	mov	r0, sl
 800d63c:	4659      	mov	r1, fp
 800d63e:	b1c3      	cbz	r3, 800d672 <_strtod_l+0x942>
 800d640:	f7ff fb59 	bl	800ccf6 <sulp>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d64c:	f7f2 fe3e 	bl	80002cc <__adddf3>
 800d650:	4682      	mov	sl, r0
 800d652:	468b      	mov	fp, r1
 800d654:	e7df      	b.n	800d616 <_strtod_l+0x8e6>
 800d656:	4013      	ands	r3, r2
 800d658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d65c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d660:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d664:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d668:	e7d5      	b.n	800d616 <_strtod_l+0x8e6>
 800d66a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d66c:	ea13 0f0a 	tst.w	r3, sl
 800d670:	e7e0      	b.n	800d634 <_strtod_l+0x904>
 800d672:	f7ff fb40 	bl	800ccf6 <sulp>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d67e:	f7f2 fe23 	bl	80002c8 <__aeabi_dsub>
 800d682:	2200      	movs	r2, #0
 800d684:	2300      	movs	r3, #0
 800d686:	4682      	mov	sl, r0
 800d688:	468b      	mov	fp, r1
 800d68a:	f7f3 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0c1      	beq.n	800d616 <_strtod_l+0x8e6>
 800d692:	e60e      	b.n	800d2b2 <_strtod_l+0x582>
 800d694:	fffffc02 	.word	0xfffffc02
 800d698:	7ff00000 	.word	0x7ff00000
 800d69c:	39500000 	.word	0x39500000
 800d6a0:	000fffff 	.word	0x000fffff
 800d6a4:	7fefffff 	.word	0x7fefffff
 800d6a8:	08011748 	.word	0x08011748
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f001 fa1c 	bl	800eaec <__ratio>
 800d6b4:	ec59 8b10 	vmov	r8, r9, d0
 800d6b8:	ee10 0a10 	vmov	r0, s0
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	f7f3 fa34 	bl	8000b30 <__aeabi_dcmple>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d07c      	beq.n	800d7c6 <_strtod_l+0xa96>
 800d6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d04c      	beq.n	800d76c <_strtod_l+0xa3c>
 800d6d2:	4b95      	ldr	r3, [pc, #596]	; (800d928 <_strtod_l+0xbf8>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d6da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d928 <_strtod_l+0xbf8>
 800d6de:	f04f 0800 	mov.w	r8, #0
 800d6e2:	4b92      	ldr	r3, [pc, #584]	; (800d92c <_strtod_l+0xbfc>)
 800d6e4:	403b      	ands	r3, r7
 800d6e6:	9311      	str	r3, [sp, #68]	; 0x44
 800d6e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6ea:	4b91      	ldr	r3, [pc, #580]	; (800d930 <_strtod_l+0xc00>)
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	f040 80b2 	bne.w	800d856 <_strtod_l+0xb26>
 800d6f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d6fe:	ec4b ab10 	vmov	d0, sl, fp
 800d702:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d706:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d70a:	f001 f917 	bl	800e93c <__ulp>
 800d70e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d712:	ec53 2b10 	vmov	r2, r3, d0
 800d716:	f7f2 ff8f 	bl	8000638 <__aeabi_dmul>
 800d71a:	4652      	mov	r2, sl
 800d71c:	465b      	mov	r3, fp
 800d71e:	f7f2 fdd5 	bl	80002cc <__adddf3>
 800d722:	460b      	mov	r3, r1
 800d724:	4981      	ldr	r1, [pc, #516]	; (800d92c <_strtod_l+0xbfc>)
 800d726:	4a83      	ldr	r2, [pc, #524]	; (800d934 <_strtod_l+0xc04>)
 800d728:	4019      	ands	r1, r3
 800d72a:	4291      	cmp	r1, r2
 800d72c:	4682      	mov	sl, r0
 800d72e:	d95e      	bls.n	800d7ee <_strtod_l+0xabe>
 800d730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d732:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d736:	4293      	cmp	r3, r2
 800d738:	d103      	bne.n	800d742 <_strtod_l+0xa12>
 800d73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d73c:	3301      	adds	r3, #1
 800d73e:	f43f ad43 	beq.w	800d1c8 <_strtod_l+0x498>
 800d742:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d940 <_strtod_l+0xc10>
 800d746:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d74a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 fdc9 	bl	800e2e4 <_Bfree>
 800d752:	9907      	ldr	r1, [sp, #28]
 800d754:	4620      	mov	r0, r4
 800d756:	f000 fdc5 	bl	800e2e4 <_Bfree>
 800d75a:	4631      	mov	r1, r6
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 fdc1 	bl	800e2e4 <_Bfree>
 800d762:	4629      	mov	r1, r5
 800d764:	4620      	mov	r0, r4
 800d766:	f000 fdbd 	bl	800e2e4 <_Bfree>
 800d76a:	e613      	b.n	800d394 <_strtod_l+0x664>
 800d76c:	f1ba 0f00 	cmp.w	sl, #0
 800d770:	d11b      	bne.n	800d7aa <_strtod_l+0xa7a>
 800d772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d776:	b9f3      	cbnz	r3, 800d7b6 <_strtod_l+0xa86>
 800d778:	4b6b      	ldr	r3, [pc, #428]	; (800d928 <_strtod_l+0xbf8>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	4640      	mov	r0, r8
 800d77e:	4649      	mov	r1, r9
 800d780:	f7f3 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 800d784:	b9d0      	cbnz	r0, 800d7bc <_strtod_l+0xa8c>
 800d786:	4640      	mov	r0, r8
 800d788:	4649      	mov	r1, r9
 800d78a:	4b6b      	ldr	r3, [pc, #428]	; (800d938 <_strtod_l+0xc08>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	f7f2 ff53 	bl	8000638 <__aeabi_dmul>
 800d792:	4680      	mov	r8, r0
 800d794:	4689      	mov	r9, r1
 800d796:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d79a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d79e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d7a8:	e79b      	b.n	800d6e2 <_strtod_l+0x9b2>
 800d7aa:	f1ba 0f01 	cmp.w	sl, #1
 800d7ae:	d102      	bne.n	800d7b6 <_strtod_l+0xa86>
 800d7b0:	2f00      	cmp	r7, #0
 800d7b2:	f43f ad7e 	beq.w	800d2b2 <_strtod_l+0x582>
 800d7b6:	4b61      	ldr	r3, [pc, #388]	; (800d93c <_strtod_l+0xc0c>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	e78c      	b.n	800d6d6 <_strtod_l+0x9a6>
 800d7bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d938 <_strtod_l+0xc08>
 800d7c0:	f04f 0800 	mov.w	r8, #0
 800d7c4:	e7e7      	b.n	800d796 <_strtod_l+0xa66>
 800d7c6:	4b5c      	ldr	r3, [pc, #368]	; (800d938 <_strtod_l+0xc08>)
 800d7c8:	4640      	mov	r0, r8
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f7f2 ff33 	bl	8000638 <__aeabi_dmul>
 800d7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	4689      	mov	r9, r1
 800d7d8:	b933      	cbnz	r3, 800d7e8 <_strtod_l+0xab8>
 800d7da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7de:	9012      	str	r0, [sp, #72]	; 0x48
 800d7e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d7e6:	e7dd      	b.n	800d7a4 <_strtod_l+0xa74>
 800d7e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d7ec:	e7f9      	b.n	800d7e2 <_strtod_l+0xab2>
 800d7ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d7f2:	9b04      	ldr	r3, [sp, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1a8      	bne.n	800d74a <_strtod_l+0xa1a>
 800d7f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7fe:	0d1b      	lsrs	r3, r3, #20
 800d800:	051b      	lsls	r3, r3, #20
 800d802:	429a      	cmp	r2, r3
 800d804:	d1a1      	bne.n	800d74a <_strtod_l+0xa1a>
 800d806:	4640      	mov	r0, r8
 800d808:	4649      	mov	r1, r9
 800d80a:	f7f3 fa75 	bl	8000cf8 <__aeabi_d2lz>
 800d80e:	f7f2 fee5 	bl	80005dc <__aeabi_l2d>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4640      	mov	r0, r8
 800d818:	4649      	mov	r1, r9
 800d81a:	f7f2 fd55 	bl	80002c8 <__aeabi_dsub>
 800d81e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d824:	ea43 030a 	orr.w	r3, r3, sl
 800d828:	4313      	orrs	r3, r2
 800d82a:	4680      	mov	r8, r0
 800d82c:	4689      	mov	r9, r1
 800d82e:	d053      	beq.n	800d8d8 <_strtod_l+0xba8>
 800d830:	a335      	add	r3, pc, #212	; (adr r3, 800d908 <_strtod_l+0xbd8>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f3 f971 	bl	8000b1c <__aeabi_dcmplt>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	f47f acce 	bne.w	800d1dc <_strtod_l+0x4ac>
 800d840:	a333      	add	r3, pc, #204	; (adr r3, 800d910 <_strtod_l+0xbe0>)
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7f3 f985 	bl	8000b58 <__aeabi_dcmpgt>
 800d84e:	2800      	cmp	r0, #0
 800d850:	f43f af7b 	beq.w	800d74a <_strtod_l+0xa1a>
 800d854:	e4c2      	b.n	800d1dc <_strtod_l+0x4ac>
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	b333      	cbz	r3, 800d8a8 <_strtod_l+0xb78>
 800d85a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d85c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d860:	d822      	bhi.n	800d8a8 <_strtod_l+0xb78>
 800d862:	a32d      	add	r3, pc, #180	; (adr r3, 800d918 <_strtod_l+0xbe8>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	4640      	mov	r0, r8
 800d86a:	4649      	mov	r1, r9
 800d86c:	f7f3 f960 	bl	8000b30 <__aeabi_dcmple>
 800d870:	b1a0      	cbz	r0, 800d89c <_strtod_l+0xb6c>
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	f7f3 f9b7 	bl	8000be8 <__aeabi_d2uiz>
 800d87a:	2801      	cmp	r0, #1
 800d87c:	bf38      	it	cc
 800d87e:	2001      	movcc	r0, #1
 800d880:	f7f2 fe60 	bl	8000544 <__aeabi_ui2d>
 800d884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d886:	4680      	mov	r8, r0
 800d888:	4689      	mov	r9, r1
 800d88a:	bb13      	cbnz	r3, 800d8d2 <_strtod_l+0xba2>
 800d88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d890:	9014      	str	r0, [sp, #80]	; 0x50
 800d892:	9315      	str	r3, [sp, #84]	; 0x54
 800d894:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d898:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d89e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d8a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d8a4:	1a9b      	subs	r3, r3, r2
 800d8a6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d8b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d8b4:	f001 f842 	bl	800e93c <__ulp>
 800d8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8bc:	ec53 2b10 	vmov	r2, r3, d0
 800d8c0:	f7f2 feba 	bl	8000638 <__aeabi_dmul>
 800d8c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d8c8:	f7f2 fd00 	bl	80002cc <__adddf3>
 800d8cc:	4682      	mov	sl, r0
 800d8ce:	468b      	mov	fp, r1
 800d8d0:	e78f      	b.n	800d7f2 <_strtod_l+0xac2>
 800d8d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d8d6:	e7dd      	b.n	800d894 <_strtod_l+0xb64>
 800d8d8:	a311      	add	r3, pc, #68	; (adr r3, 800d920 <_strtod_l+0xbf0>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f3 f91d 	bl	8000b1c <__aeabi_dcmplt>
 800d8e2:	e7b4      	b.n	800d84e <_strtod_l+0xb1e>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	930e      	str	r3, [sp, #56]	; 0x38
 800d8e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d8ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	f7ff ba65 	b.w	800cdbc <_strtod_l+0x8c>
 800d8f2:	2b65      	cmp	r3, #101	; 0x65
 800d8f4:	f43f ab5d 	beq.w	800cfb2 <_strtod_l+0x282>
 800d8f8:	2b45      	cmp	r3, #69	; 0x45
 800d8fa:	f43f ab5a 	beq.w	800cfb2 <_strtod_l+0x282>
 800d8fe:	2201      	movs	r2, #1
 800d900:	f7ff bb92 	b.w	800d028 <_strtod_l+0x2f8>
 800d904:	f3af 8000 	nop.w
 800d908:	94a03595 	.word	0x94a03595
 800d90c:	3fdfffff 	.word	0x3fdfffff
 800d910:	35afe535 	.word	0x35afe535
 800d914:	3fe00000 	.word	0x3fe00000
 800d918:	ffc00000 	.word	0xffc00000
 800d91c:	41dfffff 	.word	0x41dfffff
 800d920:	94a03595 	.word	0x94a03595
 800d924:	3fcfffff 	.word	0x3fcfffff
 800d928:	3ff00000 	.word	0x3ff00000
 800d92c:	7ff00000 	.word	0x7ff00000
 800d930:	7fe00000 	.word	0x7fe00000
 800d934:	7c9fffff 	.word	0x7c9fffff
 800d938:	3fe00000 	.word	0x3fe00000
 800d93c:	bff00000 	.word	0xbff00000
 800d940:	7fefffff 	.word	0x7fefffff

0800d944 <strtod>:
 800d944:	460a      	mov	r2, r1
 800d946:	4601      	mov	r1, r0
 800d948:	4802      	ldr	r0, [pc, #8]	; (800d954 <strtod+0x10>)
 800d94a:	4b03      	ldr	r3, [pc, #12]	; (800d958 <strtod+0x14>)
 800d94c:	6800      	ldr	r0, [r0, #0]
 800d94e:	f7ff b9ef 	b.w	800cd30 <_strtod_l>
 800d952:	bf00      	nop
 800d954:	20000014 	.word	0x20000014
 800d958:	2000007c 	.word	0x2000007c

0800d95c <_write_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d07      	ldr	r5, [pc, #28]	; (800d97c <_write_r+0x20>)
 800d960:	4604      	mov	r4, r0
 800d962:	4608      	mov	r0, r1
 800d964:	4611      	mov	r1, r2
 800d966:	2200      	movs	r2, #0
 800d968:	602a      	str	r2, [r5, #0]
 800d96a:	461a      	mov	r2, r3
 800d96c:	f7f4 ffc7 	bl	80028fe <_write>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d102      	bne.n	800d97a <_write_r+0x1e>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	b103      	cbz	r3, 800d97a <_write_r+0x1e>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	20005508 	.word	0x20005508

0800d980 <_close_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d06      	ldr	r5, [pc, #24]	; (800d99c <_close_r+0x1c>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f4 ffd3 	bl	8002936 <_close>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_close_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_close_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	20005508 	.word	0x20005508

0800d9a0 <__sflush_r>:
 800d9a0:	898a      	ldrh	r2, [r1, #12]
 800d9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	0710      	lsls	r0, r2, #28
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	d458      	bmi.n	800da60 <__sflush_r+0xc0>
 800d9ae:	684b      	ldr	r3, [r1, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	dc05      	bgt.n	800d9c0 <__sflush_r+0x20>
 800d9b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	dc02      	bgt.n	800d9c0 <__sflush_r+0x20>
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9c2:	2e00      	cmp	r6, #0
 800d9c4:	d0f9      	beq.n	800d9ba <__sflush_r+0x1a>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9cc:	682f      	ldr	r7, [r5, #0]
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	d032      	beq.n	800da38 <__sflush_r+0x98>
 800d9d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9d4:	89a3      	ldrh	r3, [r4, #12]
 800d9d6:	075a      	lsls	r2, r3, #29
 800d9d8:	d505      	bpl.n	800d9e6 <__sflush_r+0x46>
 800d9da:	6863      	ldr	r3, [r4, #4]
 800d9dc:	1ac0      	subs	r0, r0, r3
 800d9de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9e0:	b10b      	cbz	r3, 800d9e6 <__sflush_r+0x46>
 800d9e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9e4:	1ac0      	subs	r0, r0, r3
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ec:	6a21      	ldr	r1, [r4, #32]
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	47b0      	blx	r6
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	d106      	bne.n	800da06 <__sflush_r+0x66>
 800d9f8:	6829      	ldr	r1, [r5, #0]
 800d9fa:	291d      	cmp	r1, #29
 800d9fc:	d82c      	bhi.n	800da58 <__sflush_r+0xb8>
 800d9fe:	4a2a      	ldr	r2, [pc, #168]	; (800daa8 <__sflush_r+0x108>)
 800da00:	40ca      	lsrs	r2, r1
 800da02:	07d6      	lsls	r6, r2, #31
 800da04:	d528      	bpl.n	800da58 <__sflush_r+0xb8>
 800da06:	2200      	movs	r2, #0
 800da08:	6062      	str	r2, [r4, #4]
 800da0a:	04d9      	lsls	r1, r3, #19
 800da0c:	6922      	ldr	r2, [r4, #16]
 800da0e:	6022      	str	r2, [r4, #0]
 800da10:	d504      	bpl.n	800da1c <__sflush_r+0x7c>
 800da12:	1c42      	adds	r2, r0, #1
 800da14:	d101      	bne.n	800da1a <__sflush_r+0x7a>
 800da16:	682b      	ldr	r3, [r5, #0]
 800da18:	b903      	cbnz	r3, 800da1c <__sflush_r+0x7c>
 800da1a:	6560      	str	r0, [r4, #84]	; 0x54
 800da1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da1e:	602f      	str	r7, [r5, #0]
 800da20:	2900      	cmp	r1, #0
 800da22:	d0ca      	beq.n	800d9ba <__sflush_r+0x1a>
 800da24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da28:	4299      	cmp	r1, r3
 800da2a:	d002      	beq.n	800da32 <__sflush_r+0x92>
 800da2c:	4628      	mov	r0, r5
 800da2e:	f7fe fff3 	bl	800ca18 <_free_r>
 800da32:	2000      	movs	r0, #0
 800da34:	6360      	str	r0, [r4, #52]	; 0x34
 800da36:	e7c1      	b.n	800d9bc <__sflush_r+0x1c>
 800da38:	6a21      	ldr	r1, [r4, #32]
 800da3a:	2301      	movs	r3, #1
 800da3c:	4628      	mov	r0, r5
 800da3e:	47b0      	blx	r6
 800da40:	1c41      	adds	r1, r0, #1
 800da42:	d1c7      	bne.n	800d9d4 <__sflush_r+0x34>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d0c4      	beq.n	800d9d4 <__sflush_r+0x34>
 800da4a:	2b1d      	cmp	r3, #29
 800da4c:	d001      	beq.n	800da52 <__sflush_r+0xb2>
 800da4e:	2b16      	cmp	r3, #22
 800da50:	d101      	bne.n	800da56 <__sflush_r+0xb6>
 800da52:	602f      	str	r7, [r5, #0]
 800da54:	e7b1      	b.n	800d9ba <__sflush_r+0x1a>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da5c:	81a3      	strh	r3, [r4, #12]
 800da5e:	e7ad      	b.n	800d9bc <__sflush_r+0x1c>
 800da60:	690f      	ldr	r7, [r1, #16]
 800da62:	2f00      	cmp	r7, #0
 800da64:	d0a9      	beq.n	800d9ba <__sflush_r+0x1a>
 800da66:	0793      	lsls	r3, r2, #30
 800da68:	680e      	ldr	r6, [r1, #0]
 800da6a:	bf08      	it	eq
 800da6c:	694b      	ldreq	r3, [r1, #20]
 800da6e:	600f      	str	r7, [r1, #0]
 800da70:	bf18      	it	ne
 800da72:	2300      	movne	r3, #0
 800da74:	eba6 0807 	sub.w	r8, r6, r7
 800da78:	608b      	str	r3, [r1, #8]
 800da7a:	f1b8 0f00 	cmp.w	r8, #0
 800da7e:	dd9c      	ble.n	800d9ba <__sflush_r+0x1a>
 800da80:	6a21      	ldr	r1, [r4, #32]
 800da82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da84:	4643      	mov	r3, r8
 800da86:	463a      	mov	r2, r7
 800da88:	4628      	mov	r0, r5
 800da8a:	47b0      	blx	r6
 800da8c:	2800      	cmp	r0, #0
 800da8e:	dc06      	bgt.n	800da9e <__sflush_r+0xfe>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da9c:	e78e      	b.n	800d9bc <__sflush_r+0x1c>
 800da9e:	4407      	add	r7, r0
 800daa0:	eba8 0800 	sub.w	r8, r8, r0
 800daa4:	e7e9      	b.n	800da7a <__sflush_r+0xda>
 800daa6:	bf00      	nop
 800daa8:	20400001 	.word	0x20400001

0800daac <_fflush_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	690b      	ldr	r3, [r1, #16]
 800dab0:	4605      	mov	r5, r0
 800dab2:	460c      	mov	r4, r1
 800dab4:	b913      	cbnz	r3, 800dabc <_fflush_r+0x10>
 800dab6:	2500      	movs	r5, #0
 800dab8:	4628      	mov	r0, r5
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	b118      	cbz	r0, 800dac6 <_fflush_r+0x1a>
 800dabe:	6983      	ldr	r3, [r0, #24]
 800dac0:	b90b      	cbnz	r3, 800dac6 <_fflush_r+0x1a>
 800dac2:	f7fe feb5 	bl	800c830 <__sinit>
 800dac6:	4b14      	ldr	r3, [pc, #80]	; (800db18 <_fflush_r+0x6c>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	d11b      	bne.n	800db04 <_fflush_r+0x58>
 800dacc:	686c      	ldr	r4, [r5, #4]
 800dace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0ef      	beq.n	800dab6 <_fflush_r+0xa>
 800dad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dad8:	07d0      	lsls	r0, r2, #31
 800dada:	d404      	bmi.n	800dae6 <_fflush_r+0x3a>
 800dadc:	0599      	lsls	r1, r3, #22
 800dade:	d402      	bmi.n	800dae6 <_fflush_r+0x3a>
 800dae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dae2:	f7fe ff68 	bl	800c9b6 <__retarget_lock_acquire_recursive>
 800dae6:	4628      	mov	r0, r5
 800dae8:	4621      	mov	r1, r4
 800daea:	f7ff ff59 	bl	800d9a0 <__sflush_r>
 800daee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daf0:	07da      	lsls	r2, r3, #31
 800daf2:	4605      	mov	r5, r0
 800daf4:	d4e0      	bmi.n	800dab8 <_fflush_r+0xc>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	059b      	lsls	r3, r3, #22
 800dafa:	d4dd      	bmi.n	800dab8 <_fflush_r+0xc>
 800dafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dafe:	f7fe ff5b 	bl	800c9b8 <__retarget_lock_release_recursive>
 800db02:	e7d9      	b.n	800dab8 <_fflush_r+0xc>
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <_fflush_r+0x70>)
 800db06:	429c      	cmp	r4, r3
 800db08:	d101      	bne.n	800db0e <_fflush_r+0x62>
 800db0a:	68ac      	ldr	r4, [r5, #8]
 800db0c:	e7df      	b.n	800dace <_fflush_r+0x22>
 800db0e:	4b04      	ldr	r3, [pc, #16]	; (800db20 <_fflush_r+0x74>)
 800db10:	429c      	cmp	r4, r3
 800db12:	bf08      	it	eq
 800db14:	68ec      	ldreq	r4, [r5, #12]
 800db16:	e7da      	b.n	800dace <_fflush_r+0x22>
 800db18:	080116cc 	.word	0x080116cc
 800db1c:	080116ec 	.word	0x080116ec
 800db20:	080116ac 	.word	0x080116ac

0800db24 <rshift>:
 800db24:	6903      	ldr	r3, [r0, #16]
 800db26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db32:	f100 0414 	add.w	r4, r0, #20
 800db36:	dd45      	ble.n	800dbc4 <rshift+0xa0>
 800db38:	f011 011f 	ands.w	r1, r1, #31
 800db3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db44:	d10c      	bne.n	800db60 <rshift+0x3c>
 800db46:	f100 0710 	add.w	r7, r0, #16
 800db4a:	4629      	mov	r1, r5
 800db4c:	42b1      	cmp	r1, r6
 800db4e:	d334      	bcc.n	800dbba <rshift+0x96>
 800db50:	1a9b      	subs	r3, r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	1eea      	subs	r2, r5, #3
 800db56:	4296      	cmp	r6, r2
 800db58:	bf38      	it	cc
 800db5a:	2300      	movcc	r3, #0
 800db5c:	4423      	add	r3, r4
 800db5e:	e015      	b.n	800db8c <rshift+0x68>
 800db60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db64:	f1c1 0820 	rsb	r8, r1, #32
 800db68:	40cf      	lsrs	r7, r1
 800db6a:	f105 0e04 	add.w	lr, r5, #4
 800db6e:	46a1      	mov	r9, r4
 800db70:	4576      	cmp	r6, lr
 800db72:	46f4      	mov	ip, lr
 800db74:	d815      	bhi.n	800dba2 <rshift+0x7e>
 800db76:	1a9b      	subs	r3, r3, r2
 800db78:	009a      	lsls	r2, r3, #2
 800db7a:	3a04      	subs	r2, #4
 800db7c:	3501      	adds	r5, #1
 800db7e:	42ae      	cmp	r6, r5
 800db80:	bf38      	it	cc
 800db82:	2200      	movcc	r2, #0
 800db84:	18a3      	adds	r3, r4, r2
 800db86:	50a7      	str	r7, [r4, r2]
 800db88:	b107      	cbz	r7, 800db8c <rshift+0x68>
 800db8a:	3304      	adds	r3, #4
 800db8c:	1b1a      	subs	r2, r3, r4
 800db8e:	42a3      	cmp	r3, r4
 800db90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db94:	bf08      	it	eq
 800db96:	2300      	moveq	r3, #0
 800db98:	6102      	str	r2, [r0, #16]
 800db9a:	bf08      	it	eq
 800db9c:	6143      	streq	r3, [r0, #20]
 800db9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba2:	f8dc c000 	ldr.w	ip, [ip]
 800dba6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dbaa:	ea4c 0707 	orr.w	r7, ip, r7
 800dbae:	f849 7b04 	str.w	r7, [r9], #4
 800dbb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbb6:	40cf      	lsrs	r7, r1
 800dbb8:	e7da      	b.n	800db70 <rshift+0x4c>
 800dbba:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbbe:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbc2:	e7c3      	b.n	800db4c <rshift+0x28>
 800dbc4:	4623      	mov	r3, r4
 800dbc6:	e7e1      	b.n	800db8c <rshift+0x68>

0800dbc8 <__hexdig_fun>:
 800dbc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dbcc:	2b09      	cmp	r3, #9
 800dbce:	d802      	bhi.n	800dbd6 <__hexdig_fun+0xe>
 800dbd0:	3820      	subs	r0, #32
 800dbd2:	b2c0      	uxtb	r0, r0
 800dbd4:	4770      	bx	lr
 800dbd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dbda:	2b05      	cmp	r3, #5
 800dbdc:	d801      	bhi.n	800dbe2 <__hexdig_fun+0x1a>
 800dbde:	3847      	subs	r0, #71	; 0x47
 800dbe0:	e7f7      	b.n	800dbd2 <__hexdig_fun+0xa>
 800dbe2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dbe6:	2b05      	cmp	r3, #5
 800dbe8:	d801      	bhi.n	800dbee <__hexdig_fun+0x26>
 800dbea:	3827      	subs	r0, #39	; 0x27
 800dbec:	e7f1      	b.n	800dbd2 <__hexdig_fun+0xa>
 800dbee:	2000      	movs	r0, #0
 800dbf0:	4770      	bx	lr
	...

0800dbf4 <__gethex>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	ed2d 8b02 	vpush	{d8}
 800dbfc:	b089      	sub	sp, #36	; 0x24
 800dbfe:	ee08 0a10 	vmov	s16, r0
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	4bbc      	ldr	r3, [pc, #752]	; (800def8 <__gethex+0x304>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	4690      	mov	r8, r2
 800dc10:	f7f2 fafe 	bl	8000210 <strlen>
 800dc14:	9b01      	ldr	r3, [sp, #4]
 800dc16:	f8db 2000 	ldr.w	r2, [fp]
 800dc1a:	4403      	add	r3, r0
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dc22:	9305      	str	r3, [sp, #20]
 800dc24:	1c93      	adds	r3, r2, #2
 800dc26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dc2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dc2e:	32fe      	adds	r2, #254	; 0xfe
 800dc30:	18d1      	adds	r1, r2, r3
 800dc32:	461f      	mov	r7, r3
 800dc34:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc38:	9100      	str	r1, [sp, #0]
 800dc3a:	2830      	cmp	r0, #48	; 0x30
 800dc3c:	d0f8      	beq.n	800dc30 <__gethex+0x3c>
 800dc3e:	f7ff ffc3 	bl	800dbc8 <__hexdig_fun>
 800dc42:	4604      	mov	r4, r0
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d13a      	bne.n	800dcbe <__gethex+0xca>
 800dc48:	9901      	ldr	r1, [sp, #4]
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	4638      	mov	r0, r7
 800dc4e:	f001 f807 	bl	800ec60 <strncmp>
 800dc52:	4605      	mov	r5, r0
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d168      	bne.n	800dd2a <__gethex+0x136>
 800dc58:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dc5c:	eb07 060a 	add.w	r6, r7, sl
 800dc60:	f7ff ffb2 	bl	800dbc8 <__hexdig_fun>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d062      	beq.n	800dd2e <__gethex+0x13a>
 800dc68:	4633      	mov	r3, r6
 800dc6a:	7818      	ldrb	r0, [r3, #0]
 800dc6c:	2830      	cmp	r0, #48	; 0x30
 800dc6e:	461f      	mov	r7, r3
 800dc70:	f103 0301 	add.w	r3, r3, #1
 800dc74:	d0f9      	beq.n	800dc6a <__gethex+0x76>
 800dc76:	f7ff ffa7 	bl	800dbc8 <__hexdig_fun>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	fab0 f480 	clz	r4, r0
 800dc80:	0964      	lsrs	r4, r4, #5
 800dc82:	4635      	mov	r5, r6
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	463a      	mov	r2, r7
 800dc88:	4616      	mov	r6, r2
 800dc8a:	3201      	adds	r2, #1
 800dc8c:	7830      	ldrb	r0, [r6, #0]
 800dc8e:	f7ff ff9b 	bl	800dbc8 <__hexdig_fun>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d1f8      	bne.n	800dc88 <__gethex+0x94>
 800dc96:	9901      	ldr	r1, [sp, #4]
 800dc98:	4652      	mov	r2, sl
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f000 ffe0 	bl	800ec60 <strncmp>
 800dca0:	b980      	cbnz	r0, 800dcc4 <__gethex+0xd0>
 800dca2:	b94d      	cbnz	r5, 800dcb8 <__gethex+0xc4>
 800dca4:	eb06 050a 	add.w	r5, r6, sl
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4616      	mov	r6, r2
 800dcac:	3201      	adds	r2, #1
 800dcae:	7830      	ldrb	r0, [r6, #0]
 800dcb0:	f7ff ff8a 	bl	800dbc8 <__hexdig_fun>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	d1f8      	bne.n	800dcaa <__gethex+0xb6>
 800dcb8:	1bad      	subs	r5, r5, r6
 800dcba:	00ad      	lsls	r5, r5, #2
 800dcbc:	e004      	b.n	800dcc8 <__gethex+0xd4>
 800dcbe:	2400      	movs	r4, #0
 800dcc0:	4625      	mov	r5, r4
 800dcc2:	e7e0      	b.n	800dc86 <__gethex+0x92>
 800dcc4:	2d00      	cmp	r5, #0
 800dcc6:	d1f7      	bne.n	800dcb8 <__gethex+0xc4>
 800dcc8:	7833      	ldrb	r3, [r6, #0]
 800dcca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dcce:	2b50      	cmp	r3, #80	; 0x50
 800dcd0:	d13b      	bne.n	800dd4a <__gethex+0x156>
 800dcd2:	7873      	ldrb	r3, [r6, #1]
 800dcd4:	2b2b      	cmp	r3, #43	; 0x2b
 800dcd6:	d02c      	beq.n	800dd32 <__gethex+0x13e>
 800dcd8:	2b2d      	cmp	r3, #45	; 0x2d
 800dcda:	d02e      	beq.n	800dd3a <__gethex+0x146>
 800dcdc:	1c71      	adds	r1, r6, #1
 800dcde:	f04f 0900 	mov.w	r9, #0
 800dce2:	7808      	ldrb	r0, [r1, #0]
 800dce4:	f7ff ff70 	bl	800dbc8 <__hexdig_fun>
 800dce8:	1e43      	subs	r3, r0, #1
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b18      	cmp	r3, #24
 800dcee:	d82c      	bhi.n	800dd4a <__gethex+0x156>
 800dcf0:	f1a0 0210 	sub.w	r2, r0, #16
 800dcf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dcf8:	f7ff ff66 	bl	800dbc8 <__hexdig_fun>
 800dcfc:	1e43      	subs	r3, r0, #1
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b18      	cmp	r3, #24
 800dd02:	d91d      	bls.n	800dd40 <__gethex+0x14c>
 800dd04:	f1b9 0f00 	cmp.w	r9, #0
 800dd08:	d000      	beq.n	800dd0c <__gethex+0x118>
 800dd0a:	4252      	negs	r2, r2
 800dd0c:	4415      	add	r5, r2
 800dd0e:	f8cb 1000 	str.w	r1, [fp]
 800dd12:	b1e4      	cbz	r4, 800dd4e <__gethex+0x15a>
 800dd14:	9b00      	ldr	r3, [sp, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bf14      	ite	ne
 800dd1a:	2700      	movne	r7, #0
 800dd1c:	2706      	moveq	r7, #6
 800dd1e:	4638      	mov	r0, r7
 800dd20:	b009      	add	sp, #36	; 0x24
 800dd22:	ecbd 8b02 	vpop	{d8}
 800dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2a:	463e      	mov	r6, r7
 800dd2c:	4625      	mov	r5, r4
 800dd2e:	2401      	movs	r4, #1
 800dd30:	e7ca      	b.n	800dcc8 <__gethex+0xd4>
 800dd32:	f04f 0900 	mov.w	r9, #0
 800dd36:	1cb1      	adds	r1, r6, #2
 800dd38:	e7d3      	b.n	800dce2 <__gethex+0xee>
 800dd3a:	f04f 0901 	mov.w	r9, #1
 800dd3e:	e7fa      	b.n	800dd36 <__gethex+0x142>
 800dd40:	230a      	movs	r3, #10
 800dd42:	fb03 0202 	mla	r2, r3, r2, r0
 800dd46:	3a10      	subs	r2, #16
 800dd48:	e7d4      	b.n	800dcf4 <__gethex+0x100>
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	e7df      	b.n	800dd0e <__gethex+0x11a>
 800dd4e:	1bf3      	subs	r3, r6, r7
 800dd50:	3b01      	subs	r3, #1
 800dd52:	4621      	mov	r1, r4
 800dd54:	2b07      	cmp	r3, #7
 800dd56:	dc0b      	bgt.n	800dd70 <__gethex+0x17c>
 800dd58:	ee18 0a10 	vmov	r0, s16
 800dd5c:	f000 fa82 	bl	800e264 <_Balloc>
 800dd60:	4604      	mov	r4, r0
 800dd62:	b940      	cbnz	r0, 800dd76 <__gethex+0x182>
 800dd64:	4b65      	ldr	r3, [pc, #404]	; (800defc <__gethex+0x308>)
 800dd66:	4602      	mov	r2, r0
 800dd68:	21de      	movs	r1, #222	; 0xde
 800dd6a:	4865      	ldr	r0, [pc, #404]	; (800df00 <__gethex+0x30c>)
 800dd6c:	f000 ff98 	bl	800eca0 <__assert_func>
 800dd70:	3101      	adds	r1, #1
 800dd72:	105b      	asrs	r3, r3, #1
 800dd74:	e7ee      	b.n	800dd54 <__gethex+0x160>
 800dd76:	f100 0914 	add.w	r9, r0, #20
 800dd7a:	f04f 0b00 	mov.w	fp, #0
 800dd7e:	f1ca 0301 	rsb	r3, sl, #1
 800dd82:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd86:	f8cd b000 	str.w	fp, [sp]
 800dd8a:	9306      	str	r3, [sp, #24]
 800dd8c:	42b7      	cmp	r7, r6
 800dd8e:	d340      	bcc.n	800de12 <__gethex+0x21e>
 800dd90:	9802      	ldr	r0, [sp, #8]
 800dd92:	9b00      	ldr	r3, [sp, #0]
 800dd94:	f840 3b04 	str.w	r3, [r0], #4
 800dd98:	eba0 0009 	sub.w	r0, r0, r9
 800dd9c:	1080      	asrs	r0, r0, #2
 800dd9e:	0146      	lsls	r6, r0, #5
 800dda0:	6120      	str	r0, [r4, #16]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 fb54 	bl	800e450 <__hi0bits>
 800dda8:	1a30      	subs	r0, r6, r0
 800ddaa:	f8d8 6000 	ldr.w	r6, [r8]
 800ddae:	42b0      	cmp	r0, r6
 800ddb0:	dd63      	ble.n	800de7a <__gethex+0x286>
 800ddb2:	1b87      	subs	r7, r0, r6
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 feee 	bl	800eb98 <__any_on>
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	b1a8      	cbz	r0, 800ddec <__gethex+0x1f8>
 800ddc0:	1e7b      	subs	r3, r7, #1
 800ddc2:	1159      	asrs	r1, r3, #5
 800ddc4:	f003 021f 	and.w	r2, r3, #31
 800ddc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ddcc:	f04f 0a01 	mov.w	sl, #1
 800ddd0:	fa0a f202 	lsl.w	r2, sl, r2
 800ddd4:	420a      	tst	r2, r1
 800ddd6:	d009      	beq.n	800ddec <__gethex+0x1f8>
 800ddd8:	4553      	cmp	r3, sl
 800ddda:	dd05      	ble.n	800dde8 <__gethex+0x1f4>
 800dddc:	1eb9      	subs	r1, r7, #2
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 feda 	bl	800eb98 <__any_on>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d145      	bne.n	800de74 <__gethex+0x280>
 800dde8:	f04f 0a02 	mov.w	sl, #2
 800ddec:	4639      	mov	r1, r7
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f7ff fe98 	bl	800db24 <rshift>
 800ddf4:	443d      	add	r5, r7
 800ddf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddfa:	42ab      	cmp	r3, r5
 800ddfc:	da4c      	bge.n	800de98 <__gethex+0x2a4>
 800ddfe:	ee18 0a10 	vmov	r0, s16
 800de02:	4621      	mov	r1, r4
 800de04:	f000 fa6e 	bl	800e2e4 <_Bfree>
 800de08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de0a:	2300      	movs	r3, #0
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	27a3      	movs	r7, #163	; 0xa3
 800de10:	e785      	b.n	800dd1e <__gethex+0x12a>
 800de12:	1e73      	subs	r3, r6, #1
 800de14:	9a05      	ldr	r2, [sp, #20]
 800de16:	9303      	str	r3, [sp, #12]
 800de18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d019      	beq.n	800de54 <__gethex+0x260>
 800de20:	f1bb 0f20 	cmp.w	fp, #32
 800de24:	d107      	bne.n	800de36 <__gethex+0x242>
 800de26:	9b02      	ldr	r3, [sp, #8]
 800de28:	9a00      	ldr	r2, [sp, #0]
 800de2a:	f843 2b04 	str.w	r2, [r3], #4
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	2300      	movs	r3, #0
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	469b      	mov	fp, r3
 800de36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800de3a:	f7ff fec5 	bl	800dbc8 <__hexdig_fun>
 800de3e:	9b00      	ldr	r3, [sp, #0]
 800de40:	f000 000f 	and.w	r0, r0, #15
 800de44:	fa00 f00b 	lsl.w	r0, r0, fp
 800de48:	4303      	orrs	r3, r0
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	f10b 0b04 	add.w	fp, fp, #4
 800de50:	9b03      	ldr	r3, [sp, #12]
 800de52:	e00d      	b.n	800de70 <__gethex+0x27c>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	9a06      	ldr	r2, [sp, #24]
 800de58:	4413      	add	r3, r2
 800de5a:	42bb      	cmp	r3, r7
 800de5c:	d3e0      	bcc.n	800de20 <__gethex+0x22c>
 800de5e:	4618      	mov	r0, r3
 800de60:	9901      	ldr	r1, [sp, #4]
 800de62:	9307      	str	r3, [sp, #28]
 800de64:	4652      	mov	r2, sl
 800de66:	f000 fefb 	bl	800ec60 <strncmp>
 800de6a:	9b07      	ldr	r3, [sp, #28]
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d1d7      	bne.n	800de20 <__gethex+0x22c>
 800de70:	461e      	mov	r6, r3
 800de72:	e78b      	b.n	800dd8c <__gethex+0x198>
 800de74:	f04f 0a03 	mov.w	sl, #3
 800de78:	e7b8      	b.n	800ddec <__gethex+0x1f8>
 800de7a:	da0a      	bge.n	800de92 <__gethex+0x29e>
 800de7c:	1a37      	subs	r7, r6, r0
 800de7e:	4621      	mov	r1, r4
 800de80:	ee18 0a10 	vmov	r0, s16
 800de84:	463a      	mov	r2, r7
 800de86:	f000 fc49 	bl	800e71c <__lshift>
 800de8a:	1bed      	subs	r5, r5, r7
 800de8c:	4604      	mov	r4, r0
 800de8e:	f100 0914 	add.w	r9, r0, #20
 800de92:	f04f 0a00 	mov.w	sl, #0
 800de96:	e7ae      	b.n	800ddf6 <__gethex+0x202>
 800de98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800de9c:	42a8      	cmp	r0, r5
 800de9e:	dd72      	ble.n	800df86 <__gethex+0x392>
 800dea0:	1b45      	subs	r5, r0, r5
 800dea2:	42ae      	cmp	r6, r5
 800dea4:	dc36      	bgt.n	800df14 <__gethex+0x320>
 800dea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d02a      	beq.n	800df04 <__gethex+0x310>
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d02c      	beq.n	800df0c <__gethex+0x318>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d115      	bne.n	800dee2 <__gethex+0x2ee>
 800deb6:	42ae      	cmp	r6, r5
 800deb8:	d113      	bne.n	800dee2 <__gethex+0x2ee>
 800deba:	2e01      	cmp	r6, #1
 800debc:	d10b      	bne.n	800ded6 <__gethex+0x2e2>
 800debe:	9a04      	ldr	r2, [sp, #16]
 800dec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dec4:	6013      	str	r3, [r2, #0]
 800dec6:	2301      	movs	r3, #1
 800dec8:	6123      	str	r3, [r4, #16]
 800deca:	f8c9 3000 	str.w	r3, [r9]
 800dece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ded0:	2762      	movs	r7, #98	; 0x62
 800ded2:	601c      	str	r4, [r3, #0]
 800ded4:	e723      	b.n	800dd1e <__gethex+0x12a>
 800ded6:	1e71      	subs	r1, r6, #1
 800ded8:	4620      	mov	r0, r4
 800deda:	f000 fe5d 	bl	800eb98 <__any_on>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d1ed      	bne.n	800debe <__gethex+0x2ca>
 800dee2:	ee18 0a10 	vmov	r0, s16
 800dee6:	4621      	mov	r1, r4
 800dee8:	f000 f9fc 	bl	800e2e4 <_Bfree>
 800deec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800deee:	2300      	movs	r3, #0
 800def0:	6013      	str	r3, [r2, #0]
 800def2:	2750      	movs	r7, #80	; 0x50
 800def4:	e713      	b.n	800dd1e <__gethex+0x12a>
 800def6:	bf00      	nop
 800def8:	080117ec 	.word	0x080117ec
 800defc:	08011770 	.word	0x08011770
 800df00:	08011781 	.word	0x08011781
 800df04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1eb      	bne.n	800dee2 <__gethex+0x2ee>
 800df0a:	e7d8      	b.n	800debe <__gethex+0x2ca>
 800df0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1d5      	bne.n	800debe <__gethex+0x2ca>
 800df12:	e7e6      	b.n	800dee2 <__gethex+0x2ee>
 800df14:	1e6f      	subs	r7, r5, #1
 800df16:	f1ba 0f00 	cmp.w	sl, #0
 800df1a:	d131      	bne.n	800df80 <__gethex+0x38c>
 800df1c:	b127      	cbz	r7, 800df28 <__gethex+0x334>
 800df1e:	4639      	mov	r1, r7
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fe39 	bl	800eb98 <__any_on>
 800df26:	4682      	mov	sl, r0
 800df28:	117b      	asrs	r3, r7, #5
 800df2a:	2101      	movs	r1, #1
 800df2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800df30:	f007 071f 	and.w	r7, r7, #31
 800df34:	fa01 f707 	lsl.w	r7, r1, r7
 800df38:	421f      	tst	r7, r3
 800df3a:	4629      	mov	r1, r5
 800df3c:	4620      	mov	r0, r4
 800df3e:	bf18      	it	ne
 800df40:	f04a 0a02 	orrne.w	sl, sl, #2
 800df44:	1b76      	subs	r6, r6, r5
 800df46:	f7ff fded 	bl	800db24 <rshift>
 800df4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df4e:	2702      	movs	r7, #2
 800df50:	f1ba 0f00 	cmp.w	sl, #0
 800df54:	d048      	beq.n	800dfe8 <__gethex+0x3f4>
 800df56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d015      	beq.n	800df8a <__gethex+0x396>
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d017      	beq.n	800df92 <__gethex+0x39e>
 800df62:	2b01      	cmp	r3, #1
 800df64:	d109      	bne.n	800df7a <__gethex+0x386>
 800df66:	f01a 0f02 	tst.w	sl, #2
 800df6a:	d006      	beq.n	800df7a <__gethex+0x386>
 800df6c:	f8d9 0000 	ldr.w	r0, [r9]
 800df70:	ea4a 0a00 	orr.w	sl, sl, r0
 800df74:	f01a 0f01 	tst.w	sl, #1
 800df78:	d10e      	bne.n	800df98 <__gethex+0x3a4>
 800df7a:	f047 0710 	orr.w	r7, r7, #16
 800df7e:	e033      	b.n	800dfe8 <__gethex+0x3f4>
 800df80:	f04f 0a01 	mov.w	sl, #1
 800df84:	e7d0      	b.n	800df28 <__gethex+0x334>
 800df86:	2701      	movs	r7, #1
 800df88:	e7e2      	b.n	800df50 <__gethex+0x35c>
 800df8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df8c:	f1c3 0301 	rsb	r3, r3, #1
 800df90:	9315      	str	r3, [sp, #84]	; 0x54
 800df92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df94:	2b00      	cmp	r3, #0
 800df96:	d0f0      	beq.n	800df7a <__gethex+0x386>
 800df98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df9c:	f104 0314 	add.w	r3, r4, #20
 800dfa0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfa4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfa8:	f04f 0c00 	mov.w	ip, #0
 800dfac:	4618      	mov	r0, r3
 800dfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dfb6:	d01c      	beq.n	800dff2 <__gethex+0x3fe>
 800dfb8:	3201      	adds	r2, #1
 800dfba:	6002      	str	r2, [r0, #0]
 800dfbc:	2f02      	cmp	r7, #2
 800dfbe:	f104 0314 	add.w	r3, r4, #20
 800dfc2:	d13f      	bne.n	800e044 <__gethex+0x450>
 800dfc4:	f8d8 2000 	ldr.w	r2, [r8]
 800dfc8:	3a01      	subs	r2, #1
 800dfca:	42b2      	cmp	r2, r6
 800dfcc:	d10a      	bne.n	800dfe4 <__gethex+0x3f0>
 800dfce:	1171      	asrs	r1, r6, #5
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd6:	f006 061f 	and.w	r6, r6, #31
 800dfda:	fa02 f606 	lsl.w	r6, r2, r6
 800dfde:	421e      	tst	r6, r3
 800dfe0:	bf18      	it	ne
 800dfe2:	4617      	movne	r7, r2
 800dfe4:	f047 0720 	orr.w	r7, r7, #32
 800dfe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfea:	601c      	str	r4, [r3, #0]
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	601d      	str	r5, [r3, #0]
 800dff0:	e695      	b.n	800dd1e <__gethex+0x12a>
 800dff2:	4299      	cmp	r1, r3
 800dff4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dff8:	d8d8      	bhi.n	800dfac <__gethex+0x3b8>
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	459b      	cmp	fp, r3
 800dffe:	db19      	blt.n	800e034 <__gethex+0x440>
 800e000:	6861      	ldr	r1, [r4, #4]
 800e002:	ee18 0a10 	vmov	r0, s16
 800e006:	3101      	adds	r1, #1
 800e008:	f000 f92c 	bl	800e264 <_Balloc>
 800e00c:	4681      	mov	r9, r0
 800e00e:	b918      	cbnz	r0, 800e018 <__gethex+0x424>
 800e010:	4b1a      	ldr	r3, [pc, #104]	; (800e07c <__gethex+0x488>)
 800e012:	4602      	mov	r2, r0
 800e014:	2184      	movs	r1, #132	; 0x84
 800e016:	e6a8      	b.n	800dd6a <__gethex+0x176>
 800e018:	6922      	ldr	r2, [r4, #16]
 800e01a:	3202      	adds	r2, #2
 800e01c:	f104 010c 	add.w	r1, r4, #12
 800e020:	0092      	lsls	r2, r2, #2
 800e022:	300c      	adds	r0, #12
 800e024:	f7fe fcd2 	bl	800c9cc <memcpy>
 800e028:	4621      	mov	r1, r4
 800e02a:	ee18 0a10 	vmov	r0, s16
 800e02e:	f000 f959 	bl	800e2e4 <_Bfree>
 800e032:	464c      	mov	r4, r9
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e03c:	6122      	str	r2, [r4, #16]
 800e03e:	2201      	movs	r2, #1
 800e040:	615a      	str	r2, [r3, #20]
 800e042:	e7bb      	b.n	800dfbc <__gethex+0x3c8>
 800e044:	6922      	ldr	r2, [r4, #16]
 800e046:	455a      	cmp	r2, fp
 800e048:	dd0b      	ble.n	800e062 <__gethex+0x46e>
 800e04a:	2101      	movs	r1, #1
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7ff fd69 	bl	800db24 <rshift>
 800e052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e056:	3501      	adds	r5, #1
 800e058:	42ab      	cmp	r3, r5
 800e05a:	f6ff aed0 	blt.w	800ddfe <__gethex+0x20a>
 800e05e:	2701      	movs	r7, #1
 800e060:	e7c0      	b.n	800dfe4 <__gethex+0x3f0>
 800e062:	f016 061f 	ands.w	r6, r6, #31
 800e066:	d0fa      	beq.n	800e05e <__gethex+0x46a>
 800e068:	449a      	add	sl, r3
 800e06a:	f1c6 0620 	rsb	r6, r6, #32
 800e06e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e072:	f000 f9ed 	bl	800e450 <__hi0bits>
 800e076:	42b0      	cmp	r0, r6
 800e078:	dbe7      	blt.n	800e04a <__gethex+0x456>
 800e07a:	e7f0      	b.n	800e05e <__gethex+0x46a>
 800e07c:	08011770 	.word	0x08011770

0800e080 <L_shift>:
 800e080:	f1c2 0208 	rsb	r2, r2, #8
 800e084:	0092      	lsls	r2, r2, #2
 800e086:	b570      	push	{r4, r5, r6, lr}
 800e088:	f1c2 0620 	rsb	r6, r2, #32
 800e08c:	6843      	ldr	r3, [r0, #4]
 800e08e:	6804      	ldr	r4, [r0, #0]
 800e090:	fa03 f506 	lsl.w	r5, r3, r6
 800e094:	432c      	orrs	r4, r5
 800e096:	40d3      	lsrs	r3, r2
 800e098:	6004      	str	r4, [r0, #0]
 800e09a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e09e:	4288      	cmp	r0, r1
 800e0a0:	d3f4      	bcc.n	800e08c <L_shift+0xc>
 800e0a2:	bd70      	pop	{r4, r5, r6, pc}

0800e0a4 <__match>:
 800e0a4:	b530      	push	{r4, r5, lr}
 800e0a6:	6803      	ldr	r3, [r0, #0]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0ae:	b914      	cbnz	r4, 800e0b6 <__match+0x12>
 800e0b0:	6003      	str	r3, [r0, #0]
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	bd30      	pop	{r4, r5, pc}
 800e0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e0be:	2d19      	cmp	r5, #25
 800e0c0:	bf98      	it	ls
 800e0c2:	3220      	addls	r2, #32
 800e0c4:	42a2      	cmp	r2, r4
 800e0c6:	d0f0      	beq.n	800e0aa <__match+0x6>
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	e7f3      	b.n	800e0b4 <__match+0x10>

0800e0cc <__hexnan>:
 800e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d0:	680b      	ldr	r3, [r1, #0]
 800e0d2:	6801      	ldr	r1, [r0, #0]
 800e0d4:	115e      	asrs	r6, r3, #5
 800e0d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e0da:	f013 031f 	ands.w	r3, r3, #31
 800e0de:	b087      	sub	sp, #28
 800e0e0:	bf18      	it	ne
 800e0e2:	3604      	addne	r6, #4
 800e0e4:	2500      	movs	r5, #0
 800e0e6:	1f37      	subs	r7, r6, #4
 800e0e8:	4682      	mov	sl, r0
 800e0ea:	4690      	mov	r8, r2
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0f2:	46b9      	mov	r9, r7
 800e0f4:	463c      	mov	r4, r7
 800e0f6:	9502      	str	r5, [sp, #8]
 800e0f8:	46ab      	mov	fp, r5
 800e0fa:	784a      	ldrb	r2, [r1, #1]
 800e0fc:	1c4b      	adds	r3, r1, #1
 800e0fe:	9303      	str	r3, [sp, #12]
 800e100:	b342      	cbz	r2, 800e154 <__hexnan+0x88>
 800e102:	4610      	mov	r0, r2
 800e104:	9105      	str	r1, [sp, #20]
 800e106:	9204      	str	r2, [sp, #16]
 800e108:	f7ff fd5e 	bl	800dbc8 <__hexdig_fun>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d14f      	bne.n	800e1b0 <__hexnan+0xe4>
 800e110:	9a04      	ldr	r2, [sp, #16]
 800e112:	9905      	ldr	r1, [sp, #20]
 800e114:	2a20      	cmp	r2, #32
 800e116:	d818      	bhi.n	800e14a <__hexnan+0x7e>
 800e118:	9b02      	ldr	r3, [sp, #8]
 800e11a:	459b      	cmp	fp, r3
 800e11c:	dd13      	ble.n	800e146 <__hexnan+0x7a>
 800e11e:	454c      	cmp	r4, r9
 800e120:	d206      	bcs.n	800e130 <__hexnan+0x64>
 800e122:	2d07      	cmp	r5, #7
 800e124:	dc04      	bgt.n	800e130 <__hexnan+0x64>
 800e126:	462a      	mov	r2, r5
 800e128:	4649      	mov	r1, r9
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff ffa8 	bl	800e080 <L_shift>
 800e130:	4544      	cmp	r4, r8
 800e132:	d950      	bls.n	800e1d6 <__hexnan+0x10a>
 800e134:	2300      	movs	r3, #0
 800e136:	f1a4 0904 	sub.w	r9, r4, #4
 800e13a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e13e:	f8cd b008 	str.w	fp, [sp, #8]
 800e142:	464c      	mov	r4, r9
 800e144:	461d      	mov	r5, r3
 800e146:	9903      	ldr	r1, [sp, #12]
 800e148:	e7d7      	b.n	800e0fa <__hexnan+0x2e>
 800e14a:	2a29      	cmp	r2, #41	; 0x29
 800e14c:	d156      	bne.n	800e1fc <__hexnan+0x130>
 800e14e:	3102      	adds	r1, #2
 800e150:	f8ca 1000 	str.w	r1, [sl]
 800e154:	f1bb 0f00 	cmp.w	fp, #0
 800e158:	d050      	beq.n	800e1fc <__hexnan+0x130>
 800e15a:	454c      	cmp	r4, r9
 800e15c:	d206      	bcs.n	800e16c <__hexnan+0xa0>
 800e15e:	2d07      	cmp	r5, #7
 800e160:	dc04      	bgt.n	800e16c <__hexnan+0xa0>
 800e162:	462a      	mov	r2, r5
 800e164:	4649      	mov	r1, r9
 800e166:	4620      	mov	r0, r4
 800e168:	f7ff ff8a 	bl	800e080 <L_shift>
 800e16c:	4544      	cmp	r4, r8
 800e16e:	d934      	bls.n	800e1da <__hexnan+0x10e>
 800e170:	f1a8 0204 	sub.w	r2, r8, #4
 800e174:	4623      	mov	r3, r4
 800e176:	f853 1b04 	ldr.w	r1, [r3], #4
 800e17a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e17e:	429f      	cmp	r7, r3
 800e180:	d2f9      	bcs.n	800e176 <__hexnan+0xaa>
 800e182:	1b3b      	subs	r3, r7, r4
 800e184:	f023 0303 	bic.w	r3, r3, #3
 800e188:	3304      	adds	r3, #4
 800e18a:	3401      	adds	r4, #1
 800e18c:	3e03      	subs	r6, #3
 800e18e:	42b4      	cmp	r4, r6
 800e190:	bf88      	it	hi
 800e192:	2304      	movhi	r3, #4
 800e194:	4443      	add	r3, r8
 800e196:	2200      	movs	r2, #0
 800e198:	f843 2b04 	str.w	r2, [r3], #4
 800e19c:	429f      	cmp	r7, r3
 800e19e:	d2fb      	bcs.n	800e198 <__hexnan+0xcc>
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	b91b      	cbnz	r3, 800e1ac <__hexnan+0xe0>
 800e1a4:	4547      	cmp	r7, r8
 800e1a6:	d127      	bne.n	800e1f8 <__hexnan+0x12c>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	2005      	movs	r0, #5
 800e1ae:	e026      	b.n	800e1fe <__hexnan+0x132>
 800e1b0:	3501      	adds	r5, #1
 800e1b2:	2d08      	cmp	r5, #8
 800e1b4:	f10b 0b01 	add.w	fp, fp, #1
 800e1b8:	dd06      	ble.n	800e1c8 <__hexnan+0xfc>
 800e1ba:	4544      	cmp	r4, r8
 800e1bc:	d9c3      	bls.n	800e146 <__hexnan+0x7a>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1c4:	2501      	movs	r5, #1
 800e1c6:	3c04      	subs	r4, #4
 800e1c8:	6822      	ldr	r2, [r4, #0]
 800e1ca:	f000 000f 	and.w	r0, r0, #15
 800e1ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e1d2:	6022      	str	r2, [r4, #0]
 800e1d4:	e7b7      	b.n	800e146 <__hexnan+0x7a>
 800e1d6:	2508      	movs	r5, #8
 800e1d8:	e7b5      	b.n	800e146 <__hexnan+0x7a>
 800e1da:	9b01      	ldr	r3, [sp, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0df      	beq.n	800e1a0 <__hexnan+0xd4>
 800e1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1e4:	f1c3 0320 	rsb	r3, r3, #32
 800e1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1f0:	401a      	ands	r2, r3
 800e1f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e1f6:	e7d3      	b.n	800e1a0 <__hexnan+0xd4>
 800e1f8:	3f04      	subs	r7, #4
 800e1fa:	e7d1      	b.n	800e1a0 <__hexnan+0xd4>
 800e1fc:	2004      	movs	r0, #4
 800e1fe:	b007      	add	sp, #28
 800e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e204 <_lseek_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	; (800e224 <_lseek_r+0x20>)
 800e208:	4604      	mov	r4, r0
 800e20a:	4608      	mov	r0, r1
 800e20c:	4611      	mov	r1, r2
 800e20e:	2200      	movs	r2, #0
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f7f4 fbb6 	bl	8002984 <_lseek>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_lseek_r+0x1e>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_lseek_r+0x1e>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20005508 	.word	0x20005508

0800e228 <__ascii_mbtowc>:
 800e228:	b082      	sub	sp, #8
 800e22a:	b901      	cbnz	r1, 800e22e <__ascii_mbtowc+0x6>
 800e22c:	a901      	add	r1, sp, #4
 800e22e:	b142      	cbz	r2, 800e242 <__ascii_mbtowc+0x1a>
 800e230:	b14b      	cbz	r3, 800e246 <__ascii_mbtowc+0x1e>
 800e232:	7813      	ldrb	r3, [r2, #0]
 800e234:	600b      	str	r3, [r1, #0]
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	1e10      	subs	r0, r2, #0
 800e23a:	bf18      	it	ne
 800e23c:	2001      	movne	r0, #1
 800e23e:	b002      	add	sp, #8
 800e240:	4770      	bx	lr
 800e242:	4610      	mov	r0, r2
 800e244:	e7fb      	b.n	800e23e <__ascii_mbtowc+0x16>
 800e246:	f06f 0001 	mvn.w	r0, #1
 800e24a:	e7f8      	b.n	800e23e <__ascii_mbtowc+0x16>

0800e24c <__malloc_lock>:
 800e24c:	4801      	ldr	r0, [pc, #4]	; (800e254 <__malloc_lock+0x8>)
 800e24e:	f7fe bbb2 	b.w	800c9b6 <__retarget_lock_acquire_recursive>
 800e252:	bf00      	nop
 800e254:	20005500 	.word	0x20005500

0800e258 <__malloc_unlock>:
 800e258:	4801      	ldr	r0, [pc, #4]	; (800e260 <__malloc_unlock+0x8>)
 800e25a:	f7fe bbad 	b.w	800c9b8 <__retarget_lock_release_recursive>
 800e25e:	bf00      	nop
 800e260:	20005500 	.word	0x20005500

0800e264 <_Balloc>:
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e268:	4604      	mov	r4, r0
 800e26a:	460d      	mov	r5, r1
 800e26c:	b976      	cbnz	r6, 800e28c <_Balloc+0x28>
 800e26e:	2010      	movs	r0, #16
 800e270:	f7fe fba4 	bl	800c9bc <malloc>
 800e274:	4602      	mov	r2, r0
 800e276:	6260      	str	r0, [r4, #36]	; 0x24
 800e278:	b920      	cbnz	r0, 800e284 <_Balloc+0x20>
 800e27a:	4b18      	ldr	r3, [pc, #96]	; (800e2dc <_Balloc+0x78>)
 800e27c:	4818      	ldr	r0, [pc, #96]	; (800e2e0 <_Balloc+0x7c>)
 800e27e:	2166      	movs	r1, #102	; 0x66
 800e280:	f000 fd0e 	bl	800eca0 <__assert_func>
 800e284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e288:	6006      	str	r6, [r0, #0]
 800e28a:	60c6      	str	r6, [r0, #12]
 800e28c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e28e:	68f3      	ldr	r3, [r6, #12]
 800e290:	b183      	cbz	r3, 800e2b4 <_Balloc+0x50>
 800e292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e29a:	b9b8      	cbnz	r0, 800e2cc <_Balloc+0x68>
 800e29c:	2101      	movs	r1, #1
 800e29e:	fa01 f605 	lsl.w	r6, r1, r5
 800e2a2:	1d72      	adds	r2, r6, #5
 800e2a4:	0092      	lsls	r2, r2, #2
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f7fe fba6 	bl	800c9f8 <_calloc_r>
 800e2ac:	b160      	cbz	r0, 800e2c8 <_Balloc+0x64>
 800e2ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2b2:	e00e      	b.n	800e2d2 <_Balloc+0x6e>
 800e2b4:	2221      	movs	r2, #33	; 0x21
 800e2b6:	2104      	movs	r1, #4
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7fe fb9d 	bl	800c9f8 <_calloc_r>
 800e2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c0:	60f0      	str	r0, [r6, #12]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1e4      	bne.n	800e292 <_Balloc+0x2e>
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	6802      	ldr	r2, [r0, #0]
 800e2ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2d8:	e7f7      	b.n	800e2ca <_Balloc+0x66>
 800e2da:	bf00      	nop
 800e2dc:	08011800 	.word	0x08011800
 800e2e0:	08011817 	.word	0x08011817

0800e2e4 <_Bfree>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	b976      	cbnz	r6, 800e30c <_Bfree+0x28>
 800e2ee:	2010      	movs	r0, #16
 800e2f0:	f7fe fb64 	bl	800c9bc <malloc>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	6268      	str	r0, [r5, #36]	; 0x24
 800e2f8:	b920      	cbnz	r0, 800e304 <_Bfree+0x20>
 800e2fa:	4b09      	ldr	r3, [pc, #36]	; (800e320 <_Bfree+0x3c>)
 800e2fc:	4809      	ldr	r0, [pc, #36]	; (800e324 <_Bfree+0x40>)
 800e2fe:	218a      	movs	r1, #138	; 0x8a
 800e300:	f000 fcce 	bl	800eca0 <__assert_func>
 800e304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e308:	6006      	str	r6, [r0, #0]
 800e30a:	60c6      	str	r6, [r0, #12]
 800e30c:	b13c      	cbz	r4, 800e31e <_Bfree+0x3a>
 800e30e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e310:	6862      	ldr	r2, [r4, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e318:	6021      	str	r1, [r4, #0]
 800e31a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	08011800 	.word	0x08011800
 800e324:	08011817 	.word	0x08011817

0800e328 <__multadd>:
 800e328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e32c:	690e      	ldr	r6, [r1, #16]
 800e32e:	4607      	mov	r7, r0
 800e330:	4698      	mov	r8, r3
 800e332:	460c      	mov	r4, r1
 800e334:	f101 0014 	add.w	r0, r1, #20
 800e338:	2300      	movs	r3, #0
 800e33a:	6805      	ldr	r5, [r0, #0]
 800e33c:	b2a9      	uxth	r1, r5
 800e33e:	fb02 8101 	mla	r1, r2, r1, r8
 800e342:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e346:	0c2d      	lsrs	r5, r5, #16
 800e348:	fb02 c505 	mla	r5, r2, r5, ip
 800e34c:	b289      	uxth	r1, r1
 800e34e:	3301      	adds	r3, #1
 800e350:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e354:	429e      	cmp	r6, r3
 800e356:	f840 1b04 	str.w	r1, [r0], #4
 800e35a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e35e:	dcec      	bgt.n	800e33a <__multadd+0x12>
 800e360:	f1b8 0f00 	cmp.w	r8, #0
 800e364:	d022      	beq.n	800e3ac <__multadd+0x84>
 800e366:	68a3      	ldr	r3, [r4, #8]
 800e368:	42b3      	cmp	r3, r6
 800e36a:	dc19      	bgt.n	800e3a0 <__multadd+0x78>
 800e36c:	6861      	ldr	r1, [r4, #4]
 800e36e:	4638      	mov	r0, r7
 800e370:	3101      	adds	r1, #1
 800e372:	f7ff ff77 	bl	800e264 <_Balloc>
 800e376:	4605      	mov	r5, r0
 800e378:	b928      	cbnz	r0, 800e386 <__multadd+0x5e>
 800e37a:	4602      	mov	r2, r0
 800e37c:	4b0d      	ldr	r3, [pc, #52]	; (800e3b4 <__multadd+0x8c>)
 800e37e:	480e      	ldr	r0, [pc, #56]	; (800e3b8 <__multadd+0x90>)
 800e380:	21b5      	movs	r1, #181	; 0xb5
 800e382:	f000 fc8d 	bl	800eca0 <__assert_func>
 800e386:	6922      	ldr	r2, [r4, #16]
 800e388:	3202      	adds	r2, #2
 800e38a:	f104 010c 	add.w	r1, r4, #12
 800e38e:	0092      	lsls	r2, r2, #2
 800e390:	300c      	adds	r0, #12
 800e392:	f7fe fb1b 	bl	800c9cc <memcpy>
 800e396:	4621      	mov	r1, r4
 800e398:	4638      	mov	r0, r7
 800e39a:	f7ff ffa3 	bl	800e2e4 <_Bfree>
 800e39e:	462c      	mov	r4, r5
 800e3a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e3a4:	3601      	adds	r6, #1
 800e3a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e3aa:	6126      	str	r6, [r4, #16]
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b2:	bf00      	nop
 800e3b4:	08011770 	.word	0x08011770
 800e3b8:	08011817 	.word	0x08011817

0800e3bc <__s2b>:
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	4615      	mov	r5, r2
 800e3c4:	461f      	mov	r7, r3
 800e3c6:	2209      	movs	r2, #9
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	db09      	blt.n	800e3ec <__s2b+0x30>
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f7ff ff43 	bl	800e264 <_Balloc>
 800e3de:	b940      	cbnz	r0, 800e3f2 <__s2b+0x36>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	4b19      	ldr	r3, [pc, #100]	; (800e448 <__s2b+0x8c>)
 800e3e4:	4819      	ldr	r0, [pc, #100]	; (800e44c <__s2b+0x90>)
 800e3e6:	21ce      	movs	r1, #206	; 0xce
 800e3e8:	f000 fc5a 	bl	800eca0 <__assert_func>
 800e3ec:	0052      	lsls	r2, r2, #1
 800e3ee:	3101      	adds	r1, #1
 800e3f0:	e7f0      	b.n	800e3d4 <__s2b+0x18>
 800e3f2:	9b08      	ldr	r3, [sp, #32]
 800e3f4:	6143      	str	r3, [r0, #20]
 800e3f6:	2d09      	cmp	r5, #9
 800e3f8:	f04f 0301 	mov.w	r3, #1
 800e3fc:	6103      	str	r3, [r0, #16]
 800e3fe:	dd16      	ble.n	800e42e <__s2b+0x72>
 800e400:	f104 0909 	add.w	r9, r4, #9
 800e404:	46c8      	mov	r8, r9
 800e406:	442c      	add	r4, r5
 800e408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e40c:	4601      	mov	r1, r0
 800e40e:	3b30      	subs	r3, #48	; 0x30
 800e410:	220a      	movs	r2, #10
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ff88 	bl	800e328 <__multadd>
 800e418:	45a0      	cmp	r8, r4
 800e41a:	d1f5      	bne.n	800e408 <__s2b+0x4c>
 800e41c:	f1a5 0408 	sub.w	r4, r5, #8
 800e420:	444c      	add	r4, r9
 800e422:	1b2d      	subs	r5, r5, r4
 800e424:	1963      	adds	r3, r4, r5
 800e426:	42bb      	cmp	r3, r7
 800e428:	db04      	blt.n	800e434 <__s2b+0x78>
 800e42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e42e:	340a      	adds	r4, #10
 800e430:	2509      	movs	r5, #9
 800e432:	e7f6      	b.n	800e422 <__s2b+0x66>
 800e434:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e438:	4601      	mov	r1, r0
 800e43a:	3b30      	subs	r3, #48	; 0x30
 800e43c:	220a      	movs	r2, #10
 800e43e:	4630      	mov	r0, r6
 800e440:	f7ff ff72 	bl	800e328 <__multadd>
 800e444:	e7ee      	b.n	800e424 <__s2b+0x68>
 800e446:	bf00      	nop
 800e448:	08011770 	.word	0x08011770
 800e44c:	08011817 	.word	0x08011817

0800e450 <__hi0bits>:
 800e450:	0c03      	lsrs	r3, r0, #16
 800e452:	041b      	lsls	r3, r3, #16
 800e454:	b9d3      	cbnz	r3, 800e48c <__hi0bits+0x3c>
 800e456:	0400      	lsls	r0, r0, #16
 800e458:	2310      	movs	r3, #16
 800e45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e45e:	bf04      	itt	eq
 800e460:	0200      	lsleq	r0, r0, #8
 800e462:	3308      	addeq	r3, #8
 800e464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e468:	bf04      	itt	eq
 800e46a:	0100      	lsleq	r0, r0, #4
 800e46c:	3304      	addeq	r3, #4
 800e46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e472:	bf04      	itt	eq
 800e474:	0080      	lsleq	r0, r0, #2
 800e476:	3302      	addeq	r3, #2
 800e478:	2800      	cmp	r0, #0
 800e47a:	db05      	blt.n	800e488 <__hi0bits+0x38>
 800e47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e480:	f103 0301 	add.w	r3, r3, #1
 800e484:	bf08      	it	eq
 800e486:	2320      	moveq	r3, #32
 800e488:	4618      	mov	r0, r3
 800e48a:	4770      	bx	lr
 800e48c:	2300      	movs	r3, #0
 800e48e:	e7e4      	b.n	800e45a <__hi0bits+0xa>

0800e490 <__lo0bits>:
 800e490:	6803      	ldr	r3, [r0, #0]
 800e492:	f013 0207 	ands.w	r2, r3, #7
 800e496:	4601      	mov	r1, r0
 800e498:	d00b      	beq.n	800e4b2 <__lo0bits+0x22>
 800e49a:	07da      	lsls	r2, r3, #31
 800e49c:	d424      	bmi.n	800e4e8 <__lo0bits+0x58>
 800e49e:	0798      	lsls	r0, r3, #30
 800e4a0:	bf49      	itett	mi
 800e4a2:	085b      	lsrmi	r3, r3, #1
 800e4a4:	089b      	lsrpl	r3, r3, #2
 800e4a6:	2001      	movmi	r0, #1
 800e4a8:	600b      	strmi	r3, [r1, #0]
 800e4aa:	bf5c      	itt	pl
 800e4ac:	600b      	strpl	r3, [r1, #0]
 800e4ae:	2002      	movpl	r0, #2
 800e4b0:	4770      	bx	lr
 800e4b2:	b298      	uxth	r0, r3
 800e4b4:	b9b0      	cbnz	r0, 800e4e4 <__lo0bits+0x54>
 800e4b6:	0c1b      	lsrs	r3, r3, #16
 800e4b8:	2010      	movs	r0, #16
 800e4ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e4be:	bf04      	itt	eq
 800e4c0:	0a1b      	lsreq	r3, r3, #8
 800e4c2:	3008      	addeq	r0, #8
 800e4c4:	071a      	lsls	r2, r3, #28
 800e4c6:	bf04      	itt	eq
 800e4c8:	091b      	lsreq	r3, r3, #4
 800e4ca:	3004      	addeq	r0, #4
 800e4cc:	079a      	lsls	r2, r3, #30
 800e4ce:	bf04      	itt	eq
 800e4d0:	089b      	lsreq	r3, r3, #2
 800e4d2:	3002      	addeq	r0, #2
 800e4d4:	07da      	lsls	r2, r3, #31
 800e4d6:	d403      	bmi.n	800e4e0 <__lo0bits+0x50>
 800e4d8:	085b      	lsrs	r3, r3, #1
 800e4da:	f100 0001 	add.w	r0, r0, #1
 800e4de:	d005      	beq.n	800e4ec <__lo0bits+0x5c>
 800e4e0:	600b      	str	r3, [r1, #0]
 800e4e2:	4770      	bx	lr
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	e7e8      	b.n	800e4ba <__lo0bits+0x2a>
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	4770      	bx	lr
 800e4ec:	2020      	movs	r0, #32
 800e4ee:	4770      	bx	lr

0800e4f0 <__i2b>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	f7ff feb5 	bl	800e264 <_Balloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	b928      	cbnz	r0, 800e50a <__i2b+0x1a>
 800e4fe:	4b05      	ldr	r3, [pc, #20]	; (800e514 <__i2b+0x24>)
 800e500:	4805      	ldr	r0, [pc, #20]	; (800e518 <__i2b+0x28>)
 800e502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e506:	f000 fbcb 	bl	800eca0 <__assert_func>
 800e50a:	2301      	movs	r3, #1
 800e50c:	6144      	str	r4, [r0, #20]
 800e50e:	6103      	str	r3, [r0, #16]
 800e510:	bd10      	pop	{r4, pc}
 800e512:	bf00      	nop
 800e514:	08011770 	.word	0x08011770
 800e518:	08011817 	.word	0x08011817

0800e51c <__multiply>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	4614      	mov	r4, r2
 800e522:	690a      	ldr	r2, [r1, #16]
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	429a      	cmp	r2, r3
 800e528:	bfb8      	it	lt
 800e52a:	460b      	movlt	r3, r1
 800e52c:	460d      	mov	r5, r1
 800e52e:	bfbc      	itt	lt
 800e530:	4625      	movlt	r5, r4
 800e532:	461c      	movlt	r4, r3
 800e534:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e538:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e53c:	68ab      	ldr	r3, [r5, #8]
 800e53e:	6869      	ldr	r1, [r5, #4]
 800e540:	eb0a 0709 	add.w	r7, sl, r9
 800e544:	42bb      	cmp	r3, r7
 800e546:	b085      	sub	sp, #20
 800e548:	bfb8      	it	lt
 800e54a:	3101      	addlt	r1, #1
 800e54c:	f7ff fe8a 	bl	800e264 <_Balloc>
 800e550:	b930      	cbnz	r0, 800e560 <__multiply+0x44>
 800e552:	4602      	mov	r2, r0
 800e554:	4b42      	ldr	r3, [pc, #264]	; (800e660 <__multiply+0x144>)
 800e556:	4843      	ldr	r0, [pc, #268]	; (800e664 <__multiply+0x148>)
 800e558:	f240 115d 	movw	r1, #349	; 0x15d
 800e55c:	f000 fba0 	bl	800eca0 <__assert_func>
 800e560:	f100 0614 	add.w	r6, r0, #20
 800e564:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e568:	4633      	mov	r3, r6
 800e56a:	2200      	movs	r2, #0
 800e56c:	4543      	cmp	r3, r8
 800e56e:	d31e      	bcc.n	800e5ae <__multiply+0x92>
 800e570:	f105 0c14 	add.w	ip, r5, #20
 800e574:	f104 0314 	add.w	r3, r4, #20
 800e578:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e57c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e580:	9202      	str	r2, [sp, #8]
 800e582:	ebac 0205 	sub.w	r2, ip, r5
 800e586:	3a15      	subs	r2, #21
 800e588:	f022 0203 	bic.w	r2, r2, #3
 800e58c:	3204      	adds	r2, #4
 800e58e:	f105 0115 	add.w	r1, r5, #21
 800e592:	458c      	cmp	ip, r1
 800e594:	bf38      	it	cc
 800e596:	2204      	movcc	r2, #4
 800e598:	9201      	str	r2, [sp, #4]
 800e59a:	9a02      	ldr	r2, [sp, #8]
 800e59c:	9303      	str	r3, [sp, #12]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d808      	bhi.n	800e5b4 <__multiply+0x98>
 800e5a2:	2f00      	cmp	r7, #0
 800e5a4:	dc55      	bgt.n	800e652 <__multiply+0x136>
 800e5a6:	6107      	str	r7, [r0, #16]
 800e5a8:	b005      	add	sp, #20
 800e5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ae:	f843 2b04 	str.w	r2, [r3], #4
 800e5b2:	e7db      	b.n	800e56c <__multiply+0x50>
 800e5b4:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5b8:	f1ba 0f00 	cmp.w	sl, #0
 800e5bc:	d020      	beq.n	800e600 <__multiply+0xe4>
 800e5be:	f105 0e14 	add.w	lr, r5, #20
 800e5c2:	46b1      	mov	r9, r6
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e5ca:	f8d9 b000 	ldr.w	fp, [r9]
 800e5ce:	b2a1      	uxth	r1, r4
 800e5d0:	fa1f fb8b 	uxth.w	fp, fp
 800e5d4:	fb0a b101 	mla	r1, sl, r1, fp
 800e5d8:	4411      	add	r1, r2
 800e5da:	f8d9 2000 	ldr.w	r2, [r9]
 800e5de:	0c24      	lsrs	r4, r4, #16
 800e5e0:	0c12      	lsrs	r2, r2, #16
 800e5e2:	fb0a 2404 	mla	r4, sl, r4, r2
 800e5e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e5ea:	b289      	uxth	r1, r1
 800e5ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e5f0:	45f4      	cmp	ip, lr
 800e5f2:	f849 1b04 	str.w	r1, [r9], #4
 800e5f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e5fa:	d8e4      	bhi.n	800e5c6 <__multiply+0xaa>
 800e5fc:	9901      	ldr	r1, [sp, #4]
 800e5fe:	5072      	str	r2, [r6, r1]
 800e600:	9a03      	ldr	r2, [sp, #12]
 800e602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e606:	3304      	adds	r3, #4
 800e608:	f1b9 0f00 	cmp.w	r9, #0
 800e60c:	d01f      	beq.n	800e64e <__multiply+0x132>
 800e60e:	6834      	ldr	r4, [r6, #0]
 800e610:	f105 0114 	add.w	r1, r5, #20
 800e614:	46b6      	mov	lr, r6
 800e616:	f04f 0a00 	mov.w	sl, #0
 800e61a:	880a      	ldrh	r2, [r1, #0]
 800e61c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e620:	fb09 b202 	mla	r2, r9, r2, fp
 800e624:	4492      	add	sl, r2
 800e626:	b2a4      	uxth	r4, r4
 800e628:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e62c:	f84e 4b04 	str.w	r4, [lr], #4
 800e630:	f851 4b04 	ldr.w	r4, [r1], #4
 800e634:	f8be 2000 	ldrh.w	r2, [lr]
 800e638:	0c24      	lsrs	r4, r4, #16
 800e63a:	fb09 2404 	mla	r4, r9, r4, r2
 800e63e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e642:	458c      	cmp	ip, r1
 800e644:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e648:	d8e7      	bhi.n	800e61a <__multiply+0xfe>
 800e64a:	9a01      	ldr	r2, [sp, #4]
 800e64c:	50b4      	str	r4, [r6, r2]
 800e64e:	3604      	adds	r6, #4
 800e650:	e7a3      	b.n	800e59a <__multiply+0x7e>
 800e652:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1a5      	bne.n	800e5a6 <__multiply+0x8a>
 800e65a:	3f01      	subs	r7, #1
 800e65c:	e7a1      	b.n	800e5a2 <__multiply+0x86>
 800e65e:	bf00      	nop
 800e660:	08011770 	.word	0x08011770
 800e664:	08011817 	.word	0x08011817

0800e668 <__pow5mult>:
 800e668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e66c:	4615      	mov	r5, r2
 800e66e:	f012 0203 	ands.w	r2, r2, #3
 800e672:	4606      	mov	r6, r0
 800e674:	460f      	mov	r7, r1
 800e676:	d007      	beq.n	800e688 <__pow5mult+0x20>
 800e678:	4c25      	ldr	r4, [pc, #148]	; (800e710 <__pow5mult+0xa8>)
 800e67a:	3a01      	subs	r2, #1
 800e67c:	2300      	movs	r3, #0
 800e67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e682:	f7ff fe51 	bl	800e328 <__multadd>
 800e686:	4607      	mov	r7, r0
 800e688:	10ad      	asrs	r5, r5, #2
 800e68a:	d03d      	beq.n	800e708 <__pow5mult+0xa0>
 800e68c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e68e:	b97c      	cbnz	r4, 800e6b0 <__pow5mult+0x48>
 800e690:	2010      	movs	r0, #16
 800e692:	f7fe f993 	bl	800c9bc <malloc>
 800e696:	4602      	mov	r2, r0
 800e698:	6270      	str	r0, [r6, #36]	; 0x24
 800e69a:	b928      	cbnz	r0, 800e6a8 <__pow5mult+0x40>
 800e69c:	4b1d      	ldr	r3, [pc, #116]	; (800e714 <__pow5mult+0xac>)
 800e69e:	481e      	ldr	r0, [pc, #120]	; (800e718 <__pow5mult+0xb0>)
 800e6a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6a4:	f000 fafc 	bl	800eca0 <__assert_func>
 800e6a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6ac:	6004      	str	r4, [r0, #0]
 800e6ae:	60c4      	str	r4, [r0, #12]
 800e6b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6b8:	b94c      	cbnz	r4, 800e6ce <__pow5mult+0x66>
 800e6ba:	f240 2171 	movw	r1, #625	; 0x271
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7ff ff16 	bl	800e4f0 <__i2b>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	f04f 0900 	mov.w	r9, #0
 800e6d2:	07eb      	lsls	r3, r5, #31
 800e6d4:	d50a      	bpl.n	800e6ec <__pow5mult+0x84>
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	4622      	mov	r2, r4
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f7ff ff1e 	bl	800e51c <__multiply>
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	4680      	mov	r8, r0
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	f7ff fdfd 	bl	800e2e4 <_Bfree>
 800e6ea:	4647      	mov	r7, r8
 800e6ec:	106d      	asrs	r5, r5, #1
 800e6ee:	d00b      	beq.n	800e708 <__pow5mult+0xa0>
 800e6f0:	6820      	ldr	r0, [r4, #0]
 800e6f2:	b938      	cbnz	r0, 800e704 <__pow5mult+0x9c>
 800e6f4:	4622      	mov	r2, r4
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7ff ff0f 	bl	800e51c <__multiply>
 800e6fe:	6020      	str	r0, [r4, #0]
 800e700:	f8c0 9000 	str.w	r9, [r0]
 800e704:	4604      	mov	r4, r0
 800e706:	e7e4      	b.n	800e6d2 <__pow5mult+0x6a>
 800e708:	4638      	mov	r0, r7
 800e70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70e:	bf00      	nop
 800e710:	08011968 	.word	0x08011968
 800e714:	08011800 	.word	0x08011800
 800e718:	08011817 	.word	0x08011817

0800e71c <__lshift>:
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	460c      	mov	r4, r1
 800e722:	6849      	ldr	r1, [r1, #4]
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	4607      	mov	r7, r0
 800e72e:	4691      	mov	r9, r2
 800e730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e734:	f108 0601 	add.w	r6, r8, #1
 800e738:	42b3      	cmp	r3, r6
 800e73a:	db0b      	blt.n	800e754 <__lshift+0x38>
 800e73c:	4638      	mov	r0, r7
 800e73e:	f7ff fd91 	bl	800e264 <_Balloc>
 800e742:	4605      	mov	r5, r0
 800e744:	b948      	cbnz	r0, 800e75a <__lshift+0x3e>
 800e746:	4602      	mov	r2, r0
 800e748:	4b28      	ldr	r3, [pc, #160]	; (800e7ec <__lshift+0xd0>)
 800e74a:	4829      	ldr	r0, [pc, #164]	; (800e7f0 <__lshift+0xd4>)
 800e74c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e750:	f000 faa6 	bl	800eca0 <__assert_func>
 800e754:	3101      	adds	r1, #1
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	e7ee      	b.n	800e738 <__lshift+0x1c>
 800e75a:	2300      	movs	r3, #0
 800e75c:	f100 0114 	add.w	r1, r0, #20
 800e760:	f100 0210 	add.w	r2, r0, #16
 800e764:	4618      	mov	r0, r3
 800e766:	4553      	cmp	r3, sl
 800e768:	db33      	blt.n	800e7d2 <__lshift+0xb6>
 800e76a:	6920      	ldr	r0, [r4, #16]
 800e76c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e770:	f104 0314 	add.w	r3, r4, #20
 800e774:	f019 091f 	ands.w	r9, r9, #31
 800e778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e77c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e780:	d02b      	beq.n	800e7da <__lshift+0xbe>
 800e782:	f1c9 0e20 	rsb	lr, r9, #32
 800e786:	468a      	mov	sl, r1
 800e788:	2200      	movs	r2, #0
 800e78a:	6818      	ldr	r0, [r3, #0]
 800e78c:	fa00 f009 	lsl.w	r0, r0, r9
 800e790:	4302      	orrs	r2, r0
 800e792:	f84a 2b04 	str.w	r2, [sl], #4
 800e796:	f853 2b04 	ldr.w	r2, [r3], #4
 800e79a:	459c      	cmp	ip, r3
 800e79c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e7a0:	d8f3      	bhi.n	800e78a <__lshift+0x6e>
 800e7a2:	ebac 0304 	sub.w	r3, ip, r4
 800e7a6:	3b15      	subs	r3, #21
 800e7a8:	f023 0303 	bic.w	r3, r3, #3
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	f104 0015 	add.w	r0, r4, #21
 800e7b2:	4584      	cmp	ip, r0
 800e7b4:	bf38      	it	cc
 800e7b6:	2304      	movcc	r3, #4
 800e7b8:	50ca      	str	r2, [r1, r3]
 800e7ba:	b10a      	cbz	r2, 800e7c0 <__lshift+0xa4>
 800e7bc:	f108 0602 	add.w	r6, r8, #2
 800e7c0:	3e01      	subs	r6, #1
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	612e      	str	r6, [r5, #16]
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	f7ff fd8c 	bl	800e2e4 <_Bfree>
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	e7c5      	b.n	800e766 <__lshift+0x4a>
 800e7da:	3904      	subs	r1, #4
 800e7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7e4:	459c      	cmp	ip, r3
 800e7e6:	d8f9      	bhi.n	800e7dc <__lshift+0xc0>
 800e7e8:	e7ea      	b.n	800e7c0 <__lshift+0xa4>
 800e7ea:	bf00      	nop
 800e7ec:	08011770 	.word	0x08011770
 800e7f0:	08011817 	.word	0x08011817

0800e7f4 <__mcmp>:
 800e7f4:	b530      	push	{r4, r5, lr}
 800e7f6:	6902      	ldr	r2, [r0, #16]
 800e7f8:	690c      	ldr	r4, [r1, #16]
 800e7fa:	1b12      	subs	r2, r2, r4
 800e7fc:	d10e      	bne.n	800e81c <__mcmp+0x28>
 800e7fe:	f100 0314 	add.w	r3, r0, #20
 800e802:	3114      	adds	r1, #20
 800e804:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e80c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e810:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e814:	42a5      	cmp	r5, r4
 800e816:	d003      	beq.n	800e820 <__mcmp+0x2c>
 800e818:	d305      	bcc.n	800e826 <__mcmp+0x32>
 800e81a:	2201      	movs	r2, #1
 800e81c:	4610      	mov	r0, r2
 800e81e:	bd30      	pop	{r4, r5, pc}
 800e820:	4283      	cmp	r3, r0
 800e822:	d3f3      	bcc.n	800e80c <__mcmp+0x18>
 800e824:	e7fa      	b.n	800e81c <__mcmp+0x28>
 800e826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e82a:	e7f7      	b.n	800e81c <__mcmp+0x28>

0800e82c <__mdiff>:
 800e82c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e830:	460c      	mov	r4, r1
 800e832:	4606      	mov	r6, r0
 800e834:	4611      	mov	r1, r2
 800e836:	4620      	mov	r0, r4
 800e838:	4617      	mov	r7, r2
 800e83a:	f7ff ffdb 	bl	800e7f4 <__mcmp>
 800e83e:	1e05      	subs	r5, r0, #0
 800e840:	d110      	bne.n	800e864 <__mdiff+0x38>
 800e842:	4629      	mov	r1, r5
 800e844:	4630      	mov	r0, r6
 800e846:	f7ff fd0d 	bl	800e264 <_Balloc>
 800e84a:	b930      	cbnz	r0, 800e85a <__mdiff+0x2e>
 800e84c:	4b39      	ldr	r3, [pc, #228]	; (800e934 <__mdiff+0x108>)
 800e84e:	4602      	mov	r2, r0
 800e850:	f240 2132 	movw	r1, #562	; 0x232
 800e854:	4838      	ldr	r0, [pc, #224]	; (800e938 <__mdiff+0x10c>)
 800e856:	f000 fa23 	bl	800eca0 <__assert_func>
 800e85a:	2301      	movs	r3, #1
 800e85c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e864:	bfa4      	itt	ge
 800e866:	463b      	movge	r3, r7
 800e868:	4627      	movge	r7, r4
 800e86a:	4630      	mov	r0, r6
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	bfa6      	itte	ge
 800e870:	461c      	movge	r4, r3
 800e872:	2500      	movge	r5, #0
 800e874:	2501      	movlt	r5, #1
 800e876:	f7ff fcf5 	bl	800e264 <_Balloc>
 800e87a:	b920      	cbnz	r0, 800e886 <__mdiff+0x5a>
 800e87c:	4b2d      	ldr	r3, [pc, #180]	; (800e934 <__mdiff+0x108>)
 800e87e:	4602      	mov	r2, r0
 800e880:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e884:	e7e6      	b.n	800e854 <__mdiff+0x28>
 800e886:	693e      	ldr	r6, [r7, #16]
 800e888:	60c5      	str	r5, [r0, #12]
 800e88a:	6925      	ldr	r5, [r4, #16]
 800e88c:	f107 0114 	add.w	r1, r7, #20
 800e890:	f104 0914 	add.w	r9, r4, #20
 800e894:	f100 0e14 	add.w	lr, r0, #20
 800e898:	f107 0210 	add.w	r2, r7, #16
 800e89c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e8a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e8a4:	46f2      	mov	sl, lr
 800e8a6:	2700      	movs	r7, #0
 800e8a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8b0:	fa1f f883 	uxth.w	r8, r3
 800e8b4:	fa17 f78b 	uxtah	r7, r7, fp
 800e8b8:	0c1b      	lsrs	r3, r3, #16
 800e8ba:	eba7 0808 	sub.w	r8, r7, r8
 800e8be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8c6:	fa1f f888 	uxth.w	r8, r8
 800e8ca:	141f      	asrs	r7, r3, #16
 800e8cc:	454d      	cmp	r5, r9
 800e8ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800e8d6:	d8e7      	bhi.n	800e8a8 <__mdiff+0x7c>
 800e8d8:	1b2b      	subs	r3, r5, r4
 800e8da:	3b15      	subs	r3, #21
 800e8dc:	f023 0303 	bic.w	r3, r3, #3
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	3415      	adds	r4, #21
 800e8e4:	42a5      	cmp	r5, r4
 800e8e6:	bf38      	it	cc
 800e8e8:	2304      	movcc	r3, #4
 800e8ea:	4419      	add	r1, r3
 800e8ec:	4473      	add	r3, lr
 800e8ee:	469e      	mov	lr, r3
 800e8f0:	460d      	mov	r5, r1
 800e8f2:	4565      	cmp	r5, ip
 800e8f4:	d30e      	bcc.n	800e914 <__mdiff+0xe8>
 800e8f6:	f10c 0203 	add.w	r2, ip, #3
 800e8fa:	1a52      	subs	r2, r2, r1
 800e8fc:	f022 0203 	bic.w	r2, r2, #3
 800e900:	3903      	subs	r1, #3
 800e902:	458c      	cmp	ip, r1
 800e904:	bf38      	it	cc
 800e906:	2200      	movcc	r2, #0
 800e908:	441a      	add	r2, r3
 800e90a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e90e:	b17b      	cbz	r3, 800e930 <__mdiff+0x104>
 800e910:	6106      	str	r6, [r0, #16]
 800e912:	e7a5      	b.n	800e860 <__mdiff+0x34>
 800e914:	f855 8b04 	ldr.w	r8, [r5], #4
 800e918:	fa17 f488 	uxtah	r4, r7, r8
 800e91c:	1422      	asrs	r2, r4, #16
 800e91e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e922:	b2a4      	uxth	r4, r4
 800e924:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e928:	f84e 4b04 	str.w	r4, [lr], #4
 800e92c:	1417      	asrs	r7, r2, #16
 800e92e:	e7e0      	b.n	800e8f2 <__mdiff+0xc6>
 800e930:	3e01      	subs	r6, #1
 800e932:	e7ea      	b.n	800e90a <__mdiff+0xde>
 800e934:	08011770 	.word	0x08011770
 800e938:	08011817 	.word	0x08011817

0800e93c <__ulp>:
 800e93c:	b082      	sub	sp, #8
 800e93e:	ed8d 0b00 	vstr	d0, [sp]
 800e942:	9b01      	ldr	r3, [sp, #4]
 800e944:	4912      	ldr	r1, [pc, #72]	; (800e990 <__ulp+0x54>)
 800e946:	4019      	ands	r1, r3
 800e948:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e94c:	2900      	cmp	r1, #0
 800e94e:	dd05      	ble.n	800e95c <__ulp+0x20>
 800e950:	2200      	movs	r2, #0
 800e952:	460b      	mov	r3, r1
 800e954:	ec43 2b10 	vmov	d0, r2, r3
 800e958:	b002      	add	sp, #8
 800e95a:	4770      	bx	lr
 800e95c:	4249      	negs	r1, r1
 800e95e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e962:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e966:	f04f 0200 	mov.w	r2, #0
 800e96a:	f04f 0300 	mov.w	r3, #0
 800e96e:	da04      	bge.n	800e97a <__ulp+0x3e>
 800e970:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e974:	fa41 f300 	asr.w	r3, r1, r0
 800e978:	e7ec      	b.n	800e954 <__ulp+0x18>
 800e97a:	f1a0 0114 	sub.w	r1, r0, #20
 800e97e:	291e      	cmp	r1, #30
 800e980:	bfda      	itte	le
 800e982:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e986:	fa20 f101 	lsrle.w	r1, r0, r1
 800e98a:	2101      	movgt	r1, #1
 800e98c:	460a      	mov	r2, r1
 800e98e:	e7e1      	b.n	800e954 <__ulp+0x18>
 800e990:	7ff00000 	.word	0x7ff00000

0800e994 <__b2d>:
 800e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e996:	6905      	ldr	r5, [r0, #16]
 800e998:	f100 0714 	add.w	r7, r0, #20
 800e99c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e9a0:	1f2e      	subs	r6, r5, #4
 800e9a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff fd52 	bl	800e450 <__hi0bits>
 800e9ac:	f1c0 0320 	rsb	r3, r0, #32
 800e9b0:	280a      	cmp	r0, #10
 800e9b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ea30 <__b2d+0x9c>
 800e9b6:	600b      	str	r3, [r1, #0]
 800e9b8:	dc14      	bgt.n	800e9e4 <__b2d+0x50>
 800e9ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800e9be:	fa24 f10e 	lsr.w	r1, r4, lr
 800e9c2:	42b7      	cmp	r7, r6
 800e9c4:	ea41 030c 	orr.w	r3, r1, ip
 800e9c8:	bf34      	ite	cc
 800e9ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9ce:	2100      	movcs	r1, #0
 800e9d0:	3015      	adds	r0, #21
 800e9d2:	fa04 f000 	lsl.w	r0, r4, r0
 800e9d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e9da:	ea40 0201 	orr.w	r2, r0, r1
 800e9de:	ec43 2b10 	vmov	d0, r2, r3
 800e9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e4:	42b7      	cmp	r7, r6
 800e9e6:	bf3a      	itte	cc
 800e9e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800e9f0:	2100      	movcs	r1, #0
 800e9f2:	380b      	subs	r0, #11
 800e9f4:	d017      	beq.n	800ea26 <__b2d+0x92>
 800e9f6:	f1c0 0c20 	rsb	ip, r0, #32
 800e9fa:	fa04 f500 	lsl.w	r5, r4, r0
 800e9fe:	42be      	cmp	r6, r7
 800ea00:	fa21 f40c 	lsr.w	r4, r1, ip
 800ea04:	ea45 0504 	orr.w	r5, r5, r4
 800ea08:	bf8c      	ite	hi
 800ea0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea0e:	2400      	movls	r4, #0
 800ea10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ea14:	fa01 f000 	lsl.w	r0, r1, r0
 800ea18:	fa24 f40c 	lsr.w	r4, r4, ip
 800ea1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea20:	ea40 0204 	orr.w	r2, r0, r4
 800ea24:	e7db      	b.n	800e9de <__b2d+0x4a>
 800ea26:	ea44 030c 	orr.w	r3, r4, ip
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	e7d7      	b.n	800e9de <__b2d+0x4a>
 800ea2e:	bf00      	nop
 800ea30:	3ff00000 	.word	0x3ff00000

0800ea34 <__d2b>:
 800ea34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	4689      	mov	r9, r1
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	ec57 6b10 	vmov	r6, r7, d0
 800ea40:	4690      	mov	r8, r2
 800ea42:	f7ff fc0f 	bl	800e264 <_Balloc>
 800ea46:	4604      	mov	r4, r0
 800ea48:	b930      	cbnz	r0, 800ea58 <__d2b+0x24>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	4b25      	ldr	r3, [pc, #148]	; (800eae4 <__d2b+0xb0>)
 800ea4e:	4826      	ldr	r0, [pc, #152]	; (800eae8 <__d2b+0xb4>)
 800ea50:	f240 310a 	movw	r1, #778	; 0x30a
 800ea54:	f000 f924 	bl	800eca0 <__assert_func>
 800ea58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea60:	bb35      	cbnz	r5, 800eab0 <__d2b+0x7c>
 800ea62:	2e00      	cmp	r6, #0
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	d028      	beq.n	800eaba <__d2b+0x86>
 800ea68:	4668      	mov	r0, sp
 800ea6a:	9600      	str	r6, [sp, #0]
 800ea6c:	f7ff fd10 	bl	800e490 <__lo0bits>
 800ea70:	9900      	ldr	r1, [sp, #0]
 800ea72:	b300      	cbz	r0, 800eab6 <__d2b+0x82>
 800ea74:	9a01      	ldr	r2, [sp, #4]
 800ea76:	f1c0 0320 	rsb	r3, r0, #32
 800ea7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	40c2      	lsrs	r2, r0
 800ea82:	6163      	str	r3, [r4, #20]
 800ea84:	9201      	str	r2, [sp, #4]
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	61a3      	str	r3, [r4, #24]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bf14      	ite	ne
 800ea8e:	2202      	movne	r2, #2
 800ea90:	2201      	moveq	r2, #1
 800ea92:	6122      	str	r2, [r4, #16]
 800ea94:	b1d5      	cbz	r5, 800eacc <__d2b+0x98>
 800ea96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea9a:	4405      	add	r5, r0
 800ea9c:	f8c9 5000 	str.w	r5, [r9]
 800eaa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaa4:	f8c8 0000 	str.w	r0, [r8]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	b003      	add	sp, #12
 800eaac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eab4:	e7d5      	b.n	800ea62 <__d2b+0x2e>
 800eab6:	6161      	str	r1, [r4, #20]
 800eab8:	e7e5      	b.n	800ea86 <__d2b+0x52>
 800eaba:	a801      	add	r0, sp, #4
 800eabc:	f7ff fce8 	bl	800e490 <__lo0bits>
 800eac0:	9b01      	ldr	r3, [sp, #4]
 800eac2:	6163      	str	r3, [r4, #20]
 800eac4:	2201      	movs	r2, #1
 800eac6:	6122      	str	r2, [r4, #16]
 800eac8:	3020      	adds	r0, #32
 800eaca:	e7e3      	b.n	800ea94 <__d2b+0x60>
 800eacc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ead0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ead4:	f8c9 0000 	str.w	r0, [r9]
 800ead8:	6918      	ldr	r0, [r3, #16]
 800eada:	f7ff fcb9 	bl	800e450 <__hi0bits>
 800eade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eae2:	e7df      	b.n	800eaa4 <__d2b+0x70>
 800eae4:	08011770 	.word	0x08011770
 800eae8:	08011817 	.word	0x08011817

0800eaec <__ratio>:
 800eaec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4688      	mov	r8, r1
 800eaf2:	4669      	mov	r1, sp
 800eaf4:	4681      	mov	r9, r0
 800eaf6:	f7ff ff4d 	bl	800e994 <__b2d>
 800eafa:	a901      	add	r1, sp, #4
 800eafc:	4640      	mov	r0, r8
 800eafe:	ec55 4b10 	vmov	r4, r5, d0
 800eb02:	f7ff ff47 	bl	800e994 <__b2d>
 800eb06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb0e:	eba3 0c02 	sub.w	ip, r3, r2
 800eb12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb16:	1a9b      	subs	r3, r3, r2
 800eb18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb1c:	ec51 0b10 	vmov	r0, r1, d0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfd6      	itet	le
 800eb24:	460a      	movle	r2, r1
 800eb26:	462a      	movgt	r2, r5
 800eb28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb2c:	468b      	mov	fp, r1
 800eb2e:	462f      	mov	r7, r5
 800eb30:	bfd4      	ite	le
 800eb32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	ee10 2a10 	vmov	r2, s0
 800eb40:	465b      	mov	r3, fp
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 fea2 	bl	800088c <__aeabi_ddiv>
 800eb48:	ec41 0b10 	vmov	d0, r0, r1
 800eb4c:	b003      	add	sp, #12
 800eb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb52 <__copybits>:
 800eb52:	3901      	subs	r1, #1
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	1149      	asrs	r1, r1, #5
 800eb58:	6914      	ldr	r4, [r2, #16]
 800eb5a:	3101      	adds	r1, #1
 800eb5c:	f102 0314 	add.w	r3, r2, #20
 800eb60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb68:	1f05      	subs	r5, r0, #4
 800eb6a:	42a3      	cmp	r3, r4
 800eb6c:	d30c      	bcc.n	800eb88 <__copybits+0x36>
 800eb6e:	1aa3      	subs	r3, r4, r2
 800eb70:	3b11      	subs	r3, #17
 800eb72:	f023 0303 	bic.w	r3, r3, #3
 800eb76:	3211      	adds	r2, #17
 800eb78:	42a2      	cmp	r2, r4
 800eb7a:	bf88      	it	hi
 800eb7c:	2300      	movhi	r3, #0
 800eb7e:	4418      	add	r0, r3
 800eb80:	2300      	movs	r3, #0
 800eb82:	4288      	cmp	r0, r1
 800eb84:	d305      	bcc.n	800eb92 <__copybits+0x40>
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb90:	e7eb      	b.n	800eb6a <__copybits+0x18>
 800eb92:	f840 3b04 	str.w	r3, [r0], #4
 800eb96:	e7f4      	b.n	800eb82 <__copybits+0x30>

0800eb98 <__any_on>:
 800eb98:	f100 0214 	add.w	r2, r0, #20
 800eb9c:	6900      	ldr	r0, [r0, #16]
 800eb9e:	114b      	asrs	r3, r1, #5
 800eba0:	4298      	cmp	r0, r3
 800eba2:	b510      	push	{r4, lr}
 800eba4:	db11      	blt.n	800ebca <__any_on+0x32>
 800eba6:	dd0a      	ble.n	800ebbe <__any_on+0x26>
 800eba8:	f011 011f 	ands.w	r1, r1, #31
 800ebac:	d007      	beq.n	800ebbe <__any_on+0x26>
 800ebae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebb2:	fa24 f001 	lsr.w	r0, r4, r1
 800ebb6:	fa00 f101 	lsl.w	r1, r0, r1
 800ebba:	428c      	cmp	r4, r1
 800ebbc:	d10b      	bne.n	800ebd6 <__any_on+0x3e>
 800ebbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d803      	bhi.n	800ebce <__any_on+0x36>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	4603      	mov	r3, r0
 800ebcc:	e7f7      	b.n	800ebbe <__any_on+0x26>
 800ebce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebd2:	2900      	cmp	r1, #0
 800ebd4:	d0f5      	beq.n	800ebc2 <__any_on+0x2a>
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	e7f6      	b.n	800ebc8 <__any_on+0x30>

0800ebda <_realloc_r>:
 800ebda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebdc:	4607      	mov	r7, r0
 800ebde:	4614      	mov	r4, r2
 800ebe0:	460e      	mov	r6, r1
 800ebe2:	b921      	cbnz	r1, 800ebee <_realloc_r+0x14>
 800ebe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebe8:	4611      	mov	r1, r2
 800ebea:	f7fd bf65 	b.w	800cab8 <_malloc_r>
 800ebee:	b922      	cbnz	r2, 800ebfa <_realloc_r+0x20>
 800ebf0:	f7fd ff12 	bl	800ca18 <_free_r>
 800ebf4:	4625      	mov	r5, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfa:	f000 f881 	bl	800ed00 <_malloc_usable_size_r>
 800ebfe:	42a0      	cmp	r0, r4
 800ec00:	d20f      	bcs.n	800ec22 <_realloc_r+0x48>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4638      	mov	r0, r7
 800ec06:	f7fd ff57 	bl	800cab8 <_malloc_r>
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d0f2      	beq.n	800ebf6 <_realloc_r+0x1c>
 800ec10:	4631      	mov	r1, r6
 800ec12:	4622      	mov	r2, r4
 800ec14:	f7fd feda 	bl	800c9cc <memcpy>
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	f7fd fefc 	bl	800ca18 <_free_r>
 800ec20:	e7e9      	b.n	800ebf6 <_realloc_r+0x1c>
 800ec22:	4635      	mov	r5, r6
 800ec24:	e7e7      	b.n	800ebf6 <_realloc_r+0x1c>
	...

0800ec28 <_read_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4d07      	ldr	r5, [pc, #28]	; (800ec48 <_read_r+0x20>)
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	4608      	mov	r0, r1
 800ec30:	4611      	mov	r1, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	602a      	str	r2, [r5, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	f7f3 fe44 	bl	80028c4 <_read>
 800ec3c:	1c43      	adds	r3, r0, #1
 800ec3e:	d102      	bne.n	800ec46 <_read_r+0x1e>
 800ec40:	682b      	ldr	r3, [r5, #0]
 800ec42:	b103      	cbz	r3, 800ec46 <_read_r+0x1e>
 800ec44:	6023      	str	r3, [r4, #0]
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	20005508 	.word	0x20005508
 800ec4c:	00000000 	.word	0x00000000

0800ec50 <nan>:
 800ec50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec58 <nan+0x8>
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	00000000 	.word	0x00000000
 800ec5c:	7ff80000 	.word	0x7ff80000

0800ec60 <strncmp>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	b16a      	cbz	r2, 800ec80 <strncmp+0x20>
 800ec64:	3901      	subs	r1, #1
 800ec66:	1884      	adds	r4, r0, r2
 800ec68:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d103      	bne.n	800ec7c <strncmp+0x1c>
 800ec74:	42a0      	cmp	r0, r4
 800ec76:	d001      	beq.n	800ec7c <strncmp+0x1c>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1f5      	bne.n	800ec68 <strncmp+0x8>
 800ec7c:	1a98      	subs	r0, r3, r2
 800ec7e:	bd10      	pop	{r4, pc}
 800ec80:	4610      	mov	r0, r2
 800ec82:	e7fc      	b.n	800ec7e <strncmp+0x1e>

0800ec84 <__ascii_wctomb>:
 800ec84:	b149      	cbz	r1, 800ec9a <__ascii_wctomb+0x16>
 800ec86:	2aff      	cmp	r2, #255	; 0xff
 800ec88:	bf85      	ittet	hi
 800ec8a:	238a      	movhi	r3, #138	; 0x8a
 800ec8c:	6003      	strhi	r3, [r0, #0]
 800ec8e:	700a      	strbls	r2, [r1, #0]
 800ec90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ec94:	bf98      	it	ls
 800ec96:	2001      	movls	r0, #1
 800ec98:	4770      	bx	lr
 800ec9a:	4608      	mov	r0, r1
 800ec9c:	4770      	bx	lr
	...

0800eca0 <__assert_func>:
 800eca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eca2:	4614      	mov	r4, r2
 800eca4:	461a      	mov	r2, r3
 800eca6:	4b09      	ldr	r3, [pc, #36]	; (800eccc <__assert_func+0x2c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4605      	mov	r5, r0
 800ecac:	68d8      	ldr	r0, [r3, #12]
 800ecae:	b14c      	cbz	r4, 800ecc4 <__assert_func+0x24>
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <__assert_func+0x30>)
 800ecb2:	9100      	str	r1, [sp, #0]
 800ecb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecb8:	4906      	ldr	r1, [pc, #24]	; (800ecd4 <__assert_func+0x34>)
 800ecba:	462b      	mov	r3, r5
 800ecbc:	f000 f80e 	bl	800ecdc <fiprintf>
 800ecc0:	f000 fbd4 	bl	800f46c <abort>
 800ecc4:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <__assert_func+0x38>)
 800ecc6:	461c      	mov	r4, r3
 800ecc8:	e7f3      	b.n	800ecb2 <__assert_func+0x12>
 800ecca:	bf00      	nop
 800eccc:	20000014 	.word	0x20000014
 800ecd0:	08011974 	.word	0x08011974
 800ecd4:	08011981 	.word	0x08011981
 800ecd8:	080119af 	.word	0x080119af

0800ecdc <fiprintf>:
 800ecdc:	b40e      	push	{r1, r2, r3}
 800ecde:	b503      	push	{r0, r1, lr}
 800ece0:	4601      	mov	r1, r0
 800ece2:	ab03      	add	r3, sp, #12
 800ece4:	4805      	ldr	r0, [pc, #20]	; (800ecfc <fiprintf+0x20>)
 800ece6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecea:	6800      	ldr	r0, [r0, #0]
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	f000 f839 	bl	800ed64 <_vfiprintf_r>
 800ecf2:	b002      	add	sp, #8
 800ecf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf8:	b003      	add	sp, #12
 800ecfa:	4770      	bx	lr
 800ecfc:	20000014 	.word	0x20000014

0800ed00 <_malloc_usable_size_r>:
 800ed00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed04:	1f18      	subs	r0, r3, #4
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	bfbc      	itt	lt
 800ed0a:	580b      	ldrlt	r3, [r1, r0]
 800ed0c:	18c0      	addlt	r0, r0, r3
 800ed0e:	4770      	bx	lr

0800ed10 <__sfputc_r>:
 800ed10:	6893      	ldr	r3, [r2, #8]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	b410      	push	{r4}
 800ed18:	6093      	str	r3, [r2, #8]
 800ed1a:	da08      	bge.n	800ed2e <__sfputc_r+0x1e>
 800ed1c:	6994      	ldr	r4, [r2, #24]
 800ed1e:	42a3      	cmp	r3, r4
 800ed20:	db01      	blt.n	800ed26 <__sfputc_r+0x16>
 800ed22:	290a      	cmp	r1, #10
 800ed24:	d103      	bne.n	800ed2e <__sfputc_r+0x1e>
 800ed26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed2a:	f000 badf 	b.w	800f2ec <__swbuf_r>
 800ed2e:	6813      	ldr	r3, [r2, #0]
 800ed30:	1c58      	adds	r0, r3, #1
 800ed32:	6010      	str	r0, [r2, #0]
 800ed34:	7019      	strb	r1, [r3, #0]
 800ed36:	4608      	mov	r0, r1
 800ed38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <__sfputs_r>:
 800ed3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed40:	4606      	mov	r6, r0
 800ed42:	460f      	mov	r7, r1
 800ed44:	4614      	mov	r4, r2
 800ed46:	18d5      	adds	r5, r2, r3
 800ed48:	42ac      	cmp	r4, r5
 800ed4a:	d101      	bne.n	800ed50 <__sfputs_r+0x12>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	e007      	b.n	800ed60 <__sfputs_r+0x22>
 800ed50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed54:	463a      	mov	r2, r7
 800ed56:	4630      	mov	r0, r6
 800ed58:	f7ff ffda 	bl	800ed10 <__sfputc_r>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d1f3      	bne.n	800ed48 <__sfputs_r+0xa>
 800ed60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed64 <_vfiprintf_r>:
 800ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	460d      	mov	r5, r1
 800ed6a:	b09d      	sub	sp, #116	; 0x74
 800ed6c:	4614      	mov	r4, r2
 800ed6e:	4698      	mov	r8, r3
 800ed70:	4606      	mov	r6, r0
 800ed72:	b118      	cbz	r0, 800ed7c <_vfiprintf_r+0x18>
 800ed74:	6983      	ldr	r3, [r0, #24]
 800ed76:	b90b      	cbnz	r3, 800ed7c <_vfiprintf_r+0x18>
 800ed78:	f7fd fd5a 	bl	800c830 <__sinit>
 800ed7c:	4b89      	ldr	r3, [pc, #548]	; (800efa4 <_vfiprintf_r+0x240>)
 800ed7e:	429d      	cmp	r5, r3
 800ed80:	d11b      	bne.n	800edba <_vfiprintf_r+0x56>
 800ed82:	6875      	ldr	r5, [r6, #4]
 800ed84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed86:	07d9      	lsls	r1, r3, #31
 800ed88:	d405      	bmi.n	800ed96 <_vfiprintf_r+0x32>
 800ed8a:	89ab      	ldrh	r3, [r5, #12]
 800ed8c:	059a      	lsls	r2, r3, #22
 800ed8e:	d402      	bmi.n	800ed96 <_vfiprintf_r+0x32>
 800ed90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed92:	f7fd fe10 	bl	800c9b6 <__retarget_lock_acquire_recursive>
 800ed96:	89ab      	ldrh	r3, [r5, #12]
 800ed98:	071b      	lsls	r3, r3, #28
 800ed9a:	d501      	bpl.n	800eda0 <_vfiprintf_r+0x3c>
 800ed9c:	692b      	ldr	r3, [r5, #16]
 800ed9e:	b9eb      	cbnz	r3, 800eddc <_vfiprintf_r+0x78>
 800eda0:	4629      	mov	r1, r5
 800eda2:	4630      	mov	r0, r6
 800eda4:	f000 faf4 	bl	800f390 <__swsetup_r>
 800eda8:	b1c0      	cbz	r0, 800eddc <_vfiprintf_r+0x78>
 800edaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edac:	07dc      	lsls	r4, r3, #31
 800edae:	d50e      	bpl.n	800edce <_vfiprintf_r+0x6a>
 800edb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edb4:	b01d      	add	sp, #116	; 0x74
 800edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edba:	4b7b      	ldr	r3, [pc, #492]	; (800efa8 <_vfiprintf_r+0x244>)
 800edbc:	429d      	cmp	r5, r3
 800edbe:	d101      	bne.n	800edc4 <_vfiprintf_r+0x60>
 800edc0:	68b5      	ldr	r5, [r6, #8]
 800edc2:	e7df      	b.n	800ed84 <_vfiprintf_r+0x20>
 800edc4:	4b79      	ldr	r3, [pc, #484]	; (800efac <_vfiprintf_r+0x248>)
 800edc6:	429d      	cmp	r5, r3
 800edc8:	bf08      	it	eq
 800edca:	68f5      	ldreq	r5, [r6, #12]
 800edcc:	e7da      	b.n	800ed84 <_vfiprintf_r+0x20>
 800edce:	89ab      	ldrh	r3, [r5, #12]
 800edd0:	0598      	lsls	r0, r3, #22
 800edd2:	d4ed      	bmi.n	800edb0 <_vfiprintf_r+0x4c>
 800edd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd6:	f7fd fdef 	bl	800c9b8 <__retarget_lock_release_recursive>
 800edda:	e7e9      	b.n	800edb0 <_vfiprintf_r+0x4c>
 800eddc:	2300      	movs	r3, #0
 800edde:	9309      	str	r3, [sp, #36]	; 0x24
 800ede0:	2320      	movs	r3, #32
 800ede2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ede6:	f8cd 800c 	str.w	r8, [sp, #12]
 800edea:	2330      	movs	r3, #48	; 0x30
 800edec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800efb0 <_vfiprintf_r+0x24c>
 800edf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edf4:	f04f 0901 	mov.w	r9, #1
 800edf8:	4623      	mov	r3, r4
 800edfa:	469a      	mov	sl, r3
 800edfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee00:	b10a      	cbz	r2, 800ee06 <_vfiprintf_r+0xa2>
 800ee02:	2a25      	cmp	r2, #37	; 0x25
 800ee04:	d1f9      	bne.n	800edfa <_vfiprintf_r+0x96>
 800ee06:	ebba 0b04 	subs.w	fp, sl, r4
 800ee0a:	d00b      	beq.n	800ee24 <_vfiprintf_r+0xc0>
 800ee0c:	465b      	mov	r3, fp
 800ee0e:	4622      	mov	r2, r4
 800ee10:	4629      	mov	r1, r5
 800ee12:	4630      	mov	r0, r6
 800ee14:	f7ff ff93 	bl	800ed3e <__sfputs_r>
 800ee18:	3001      	adds	r0, #1
 800ee1a:	f000 80aa 	beq.w	800ef72 <_vfiprintf_r+0x20e>
 800ee1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee20:	445a      	add	r2, fp
 800ee22:	9209      	str	r2, [sp, #36]	; 0x24
 800ee24:	f89a 3000 	ldrb.w	r3, [sl]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 80a2 	beq.w	800ef72 <_vfiprintf_r+0x20e>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee38:	f10a 0a01 	add.w	sl, sl, #1
 800ee3c:	9304      	str	r3, [sp, #16]
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee44:	931a      	str	r3, [sp, #104]	; 0x68
 800ee46:	4654      	mov	r4, sl
 800ee48:	2205      	movs	r2, #5
 800ee4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4e:	4858      	ldr	r0, [pc, #352]	; (800efb0 <_vfiprintf_r+0x24c>)
 800ee50:	f7f1 f9e6 	bl	8000220 <memchr>
 800ee54:	9a04      	ldr	r2, [sp, #16]
 800ee56:	b9d8      	cbnz	r0, 800ee90 <_vfiprintf_r+0x12c>
 800ee58:	06d1      	lsls	r1, r2, #27
 800ee5a:	bf44      	itt	mi
 800ee5c:	2320      	movmi	r3, #32
 800ee5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee62:	0713      	lsls	r3, r2, #28
 800ee64:	bf44      	itt	mi
 800ee66:	232b      	movmi	r3, #43	; 0x2b
 800ee68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee70:	2b2a      	cmp	r3, #42	; 0x2a
 800ee72:	d015      	beq.n	800eea0 <_vfiprintf_r+0x13c>
 800ee74:	9a07      	ldr	r2, [sp, #28]
 800ee76:	4654      	mov	r4, sl
 800ee78:	2000      	movs	r0, #0
 800ee7a:	f04f 0c0a 	mov.w	ip, #10
 800ee7e:	4621      	mov	r1, r4
 800ee80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee84:	3b30      	subs	r3, #48	; 0x30
 800ee86:	2b09      	cmp	r3, #9
 800ee88:	d94e      	bls.n	800ef28 <_vfiprintf_r+0x1c4>
 800ee8a:	b1b0      	cbz	r0, 800eeba <_vfiprintf_r+0x156>
 800ee8c:	9207      	str	r2, [sp, #28]
 800ee8e:	e014      	b.n	800eeba <_vfiprintf_r+0x156>
 800ee90:	eba0 0308 	sub.w	r3, r0, r8
 800ee94:	fa09 f303 	lsl.w	r3, r9, r3
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	9304      	str	r3, [sp, #16]
 800ee9c:	46a2      	mov	sl, r4
 800ee9e:	e7d2      	b.n	800ee46 <_vfiprintf_r+0xe2>
 800eea0:	9b03      	ldr	r3, [sp, #12]
 800eea2:	1d19      	adds	r1, r3, #4
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	9103      	str	r1, [sp, #12]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	bfbb      	ittet	lt
 800eeac:	425b      	neglt	r3, r3
 800eeae:	f042 0202 	orrlt.w	r2, r2, #2
 800eeb2:	9307      	strge	r3, [sp, #28]
 800eeb4:	9307      	strlt	r3, [sp, #28]
 800eeb6:	bfb8      	it	lt
 800eeb8:	9204      	strlt	r2, [sp, #16]
 800eeba:	7823      	ldrb	r3, [r4, #0]
 800eebc:	2b2e      	cmp	r3, #46	; 0x2e
 800eebe:	d10c      	bne.n	800eeda <_vfiprintf_r+0x176>
 800eec0:	7863      	ldrb	r3, [r4, #1]
 800eec2:	2b2a      	cmp	r3, #42	; 0x2a
 800eec4:	d135      	bne.n	800ef32 <_vfiprintf_r+0x1ce>
 800eec6:	9b03      	ldr	r3, [sp, #12]
 800eec8:	1d1a      	adds	r2, r3, #4
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	9203      	str	r2, [sp, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	bfb8      	it	lt
 800eed2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eed6:	3402      	adds	r4, #2
 800eed8:	9305      	str	r3, [sp, #20]
 800eeda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800efc0 <_vfiprintf_r+0x25c>
 800eede:	7821      	ldrb	r1, [r4, #0]
 800eee0:	2203      	movs	r2, #3
 800eee2:	4650      	mov	r0, sl
 800eee4:	f7f1 f99c 	bl	8000220 <memchr>
 800eee8:	b140      	cbz	r0, 800eefc <_vfiprintf_r+0x198>
 800eeea:	2340      	movs	r3, #64	; 0x40
 800eeec:	eba0 000a 	sub.w	r0, r0, sl
 800eef0:	fa03 f000 	lsl.w	r0, r3, r0
 800eef4:	9b04      	ldr	r3, [sp, #16]
 800eef6:	4303      	orrs	r3, r0
 800eef8:	3401      	adds	r4, #1
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef00:	482c      	ldr	r0, [pc, #176]	; (800efb4 <_vfiprintf_r+0x250>)
 800ef02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef06:	2206      	movs	r2, #6
 800ef08:	f7f1 f98a 	bl	8000220 <memchr>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d03f      	beq.n	800ef90 <_vfiprintf_r+0x22c>
 800ef10:	4b29      	ldr	r3, [pc, #164]	; (800efb8 <_vfiprintf_r+0x254>)
 800ef12:	bb1b      	cbnz	r3, 800ef5c <_vfiprintf_r+0x1f8>
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	3307      	adds	r3, #7
 800ef18:	f023 0307 	bic.w	r3, r3, #7
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	9303      	str	r3, [sp, #12]
 800ef20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef22:	443b      	add	r3, r7
 800ef24:	9309      	str	r3, [sp, #36]	; 0x24
 800ef26:	e767      	b.n	800edf8 <_vfiprintf_r+0x94>
 800ef28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	2001      	movs	r0, #1
 800ef30:	e7a5      	b.n	800ee7e <_vfiprintf_r+0x11a>
 800ef32:	2300      	movs	r3, #0
 800ef34:	3401      	adds	r4, #1
 800ef36:	9305      	str	r3, [sp, #20]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	f04f 0c0a 	mov.w	ip, #10
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef44:	3a30      	subs	r2, #48	; 0x30
 800ef46:	2a09      	cmp	r2, #9
 800ef48:	d903      	bls.n	800ef52 <_vfiprintf_r+0x1ee>
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0c5      	beq.n	800eeda <_vfiprintf_r+0x176>
 800ef4e:	9105      	str	r1, [sp, #20]
 800ef50:	e7c3      	b.n	800eeda <_vfiprintf_r+0x176>
 800ef52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef56:	4604      	mov	r4, r0
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e7f0      	b.n	800ef3e <_vfiprintf_r+0x1da>
 800ef5c:	ab03      	add	r3, sp, #12
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	462a      	mov	r2, r5
 800ef62:	4b16      	ldr	r3, [pc, #88]	; (800efbc <_vfiprintf_r+0x258>)
 800ef64:	a904      	add	r1, sp, #16
 800ef66:	4630      	mov	r0, r6
 800ef68:	f3af 8000 	nop.w
 800ef6c:	4607      	mov	r7, r0
 800ef6e:	1c78      	adds	r0, r7, #1
 800ef70:	d1d6      	bne.n	800ef20 <_vfiprintf_r+0x1bc>
 800ef72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef74:	07d9      	lsls	r1, r3, #31
 800ef76:	d405      	bmi.n	800ef84 <_vfiprintf_r+0x220>
 800ef78:	89ab      	ldrh	r3, [r5, #12]
 800ef7a:	059a      	lsls	r2, r3, #22
 800ef7c:	d402      	bmi.n	800ef84 <_vfiprintf_r+0x220>
 800ef7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef80:	f7fd fd1a 	bl	800c9b8 <__retarget_lock_release_recursive>
 800ef84:	89ab      	ldrh	r3, [r5, #12]
 800ef86:	065b      	lsls	r3, r3, #25
 800ef88:	f53f af12 	bmi.w	800edb0 <_vfiprintf_r+0x4c>
 800ef8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef8e:	e711      	b.n	800edb4 <_vfiprintf_r+0x50>
 800ef90:	ab03      	add	r3, sp, #12
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	462a      	mov	r2, r5
 800ef96:	4b09      	ldr	r3, [pc, #36]	; (800efbc <_vfiprintf_r+0x258>)
 800ef98:	a904      	add	r1, sp, #16
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f000 f880 	bl	800f0a0 <_printf_i>
 800efa0:	e7e4      	b.n	800ef6c <_vfiprintf_r+0x208>
 800efa2:	bf00      	nop
 800efa4:	080116cc 	.word	0x080116cc
 800efa8:	080116ec 	.word	0x080116ec
 800efac:	080116ac 	.word	0x080116ac
 800efb0:	08011ab1 	.word	0x08011ab1
 800efb4:	08011abb 	.word	0x08011abb
 800efb8:	00000000 	.word	0x00000000
 800efbc:	0800ed3f 	.word	0x0800ed3f
 800efc0:	08011ab7 	.word	0x08011ab7

0800efc4 <_printf_common>:
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	4616      	mov	r6, r2
 800efca:	4699      	mov	r9, r3
 800efcc:	688a      	ldr	r2, [r1, #8]
 800efce:	690b      	ldr	r3, [r1, #16]
 800efd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efd4:	4293      	cmp	r3, r2
 800efd6:	bfb8      	it	lt
 800efd8:	4613      	movlt	r3, r2
 800efda:	6033      	str	r3, [r6, #0]
 800efdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efe0:	4607      	mov	r7, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	b10a      	cbz	r2, 800efea <_printf_common+0x26>
 800efe6:	3301      	adds	r3, #1
 800efe8:	6033      	str	r3, [r6, #0]
 800efea:	6823      	ldr	r3, [r4, #0]
 800efec:	0699      	lsls	r1, r3, #26
 800efee:	bf42      	ittt	mi
 800eff0:	6833      	ldrmi	r3, [r6, #0]
 800eff2:	3302      	addmi	r3, #2
 800eff4:	6033      	strmi	r3, [r6, #0]
 800eff6:	6825      	ldr	r5, [r4, #0]
 800eff8:	f015 0506 	ands.w	r5, r5, #6
 800effc:	d106      	bne.n	800f00c <_printf_common+0x48>
 800effe:	f104 0a19 	add.w	sl, r4, #25
 800f002:	68e3      	ldr	r3, [r4, #12]
 800f004:	6832      	ldr	r2, [r6, #0]
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	42ab      	cmp	r3, r5
 800f00a:	dc26      	bgt.n	800f05a <_printf_common+0x96>
 800f00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f010:	1e13      	subs	r3, r2, #0
 800f012:	6822      	ldr	r2, [r4, #0]
 800f014:	bf18      	it	ne
 800f016:	2301      	movne	r3, #1
 800f018:	0692      	lsls	r2, r2, #26
 800f01a:	d42b      	bmi.n	800f074 <_printf_common+0xb0>
 800f01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f020:	4649      	mov	r1, r9
 800f022:	4638      	mov	r0, r7
 800f024:	47c0      	blx	r8
 800f026:	3001      	adds	r0, #1
 800f028:	d01e      	beq.n	800f068 <_printf_common+0xa4>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	68e5      	ldr	r5, [r4, #12]
 800f02e:	6832      	ldr	r2, [r6, #0]
 800f030:	f003 0306 	and.w	r3, r3, #6
 800f034:	2b04      	cmp	r3, #4
 800f036:	bf08      	it	eq
 800f038:	1aad      	subeq	r5, r5, r2
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	bf0c      	ite	eq
 800f040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f044:	2500      	movne	r5, #0
 800f046:	4293      	cmp	r3, r2
 800f048:	bfc4      	itt	gt
 800f04a:	1a9b      	subgt	r3, r3, r2
 800f04c:	18ed      	addgt	r5, r5, r3
 800f04e:	2600      	movs	r6, #0
 800f050:	341a      	adds	r4, #26
 800f052:	42b5      	cmp	r5, r6
 800f054:	d11a      	bne.n	800f08c <_printf_common+0xc8>
 800f056:	2000      	movs	r0, #0
 800f058:	e008      	b.n	800f06c <_printf_common+0xa8>
 800f05a:	2301      	movs	r3, #1
 800f05c:	4652      	mov	r2, sl
 800f05e:	4649      	mov	r1, r9
 800f060:	4638      	mov	r0, r7
 800f062:	47c0      	blx	r8
 800f064:	3001      	adds	r0, #1
 800f066:	d103      	bne.n	800f070 <_printf_common+0xac>
 800f068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f070:	3501      	adds	r5, #1
 800f072:	e7c6      	b.n	800f002 <_printf_common+0x3e>
 800f074:	18e1      	adds	r1, r4, r3
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	2030      	movs	r0, #48	; 0x30
 800f07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f07e:	4422      	add	r2, r4
 800f080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f088:	3302      	adds	r3, #2
 800f08a:	e7c7      	b.n	800f01c <_printf_common+0x58>
 800f08c:	2301      	movs	r3, #1
 800f08e:	4622      	mov	r2, r4
 800f090:	4649      	mov	r1, r9
 800f092:	4638      	mov	r0, r7
 800f094:	47c0      	blx	r8
 800f096:	3001      	adds	r0, #1
 800f098:	d0e6      	beq.n	800f068 <_printf_common+0xa4>
 800f09a:	3601      	adds	r6, #1
 800f09c:	e7d9      	b.n	800f052 <_printf_common+0x8e>
	...

0800f0a0 <_printf_i>:
 800f0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4691      	mov	r9, r2
 800f0a8:	7e27      	ldrb	r7, [r4, #24]
 800f0aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f0ac:	2f78      	cmp	r7, #120	; 0x78
 800f0ae:	4680      	mov	r8, r0
 800f0b0:	469a      	mov	sl, r3
 800f0b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0b6:	d807      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0b8:	2f62      	cmp	r7, #98	; 0x62
 800f0ba:	d80a      	bhi.n	800f0d2 <_printf_i+0x32>
 800f0bc:	2f00      	cmp	r7, #0
 800f0be:	f000 80d8 	beq.w	800f272 <_printf_i+0x1d2>
 800f0c2:	2f58      	cmp	r7, #88	; 0x58
 800f0c4:	f000 80a3 	beq.w	800f20e <_printf_i+0x16e>
 800f0c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0d0:	e03a      	b.n	800f148 <_printf_i+0xa8>
 800f0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0d6:	2b15      	cmp	r3, #21
 800f0d8:	d8f6      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0da:	a001      	add	r0, pc, #4	; (adr r0, 800f0e0 <_printf_i+0x40>)
 800f0dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0e0:	0800f139 	.word	0x0800f139
 800f0e4:	0800f14d 	.word	0x0800f14d
 800f0e8:	0800f0c9 	.word	0x0800f0c9
 800f0ec:	0800f0c9 	.word	0x0800f0c9
 800f0f0:	0800f0c9 	.word	0x0800f0c9
 800f0f4:	0800f0c9 	.word	0x0800f0c9
 800f0f8:	0800f14d 	.word	0x0800f14d
 800f0fc:	0800f0c9 	.word	0x0800f0c9
 800f100:	0800f0c9 	.word	0x0800f0c9
 800f104:	0800f0c9 	.word	0x0800f0c9
 800f108:	0800f0c9 	.word	0x0800f0c9
 800f10c:	0800f259 	.word	0x0800f259
 800f110:	0800f17d 	.word	0x0800f17d
 800f114:	0800f23b 	.word	0x0800f23b
 800f118:	0800f0c9 	.word	0x0800f0c9
 800f11c:	0800f0c9 	.word	0x0800f0c9
 800f120:	0800f27b 	.word	0x0800f27b
 800f124:	0800f0c9 	.word	0x0800f0c9
 800f128:	0800f17d 	.word	0x0800f17d
 800f12c:	0800f0c9 	.word	0x0800f0c9
 800f130:	0800f0c9 	.word	0x0800f0c9
 800f134:	0800f243 	.word	0x0800f243
 800f138:	680b      	ldr	r3, [r1, #0]
 800f13a:	1d1a      	adds	r2, r3, #4
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	600a      	str	r2, [r1, #0]
 800f140:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f148:	2301      	movs	r3, #1
 800f14a:	e0a3      	b.n	800f294 <_printf_i+0x1f4>
 800f14c:	6825      	ldr	r5, [r4, #0]
 800f14e:	6808      	ldr	r0, [r1, #0]
 800f150:	062e      	lsls	r6, r5, #24
 800f152:	f100 0304 	add.w	r3, r0, #4
 800f156:	d50a      	bpl.n	800f16e <_printf_i+0xce>
 800f158:	6805      	ldr	r5, [r0, #0]
 800f15a:	600b      	str	r3, [r1, #0]
 800f15c:	2d00      	cmp	r5, #0
 800f15e:	da03      	bge.n	800f168 <_printf_i+0xc8>
 800f160:	232d      	movs	r3, #45	; 0x2d
 800f162:	426d      	negs	r5, r5
 800f164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f168:	485e      	ldr	r0, [pc, #376]	; (800f2e4 <_printf_i+0x244>)
 800f16a:	230a      	movs	r3, #10
 800f16c:	e019      	b.n	800f1a2 <_printf_i+0x102>
 800f16e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f172:	6805      	ldr	r5, [r0, #0]
 800f174:	600b      	str	r3, [r1, #0]
 800f176:	bf18      	it	ne
 800f178:	b22d      	sxthne	r5, r5
 800f17a:	e7ef      	b.n	800f15c <_printf_i+0xbc>
 800f17c:	680b      	ldr	r3, [r1, #0]
 800f17e:	6825      	ldr	r5, [r4, #0]
 800f180:	1d18      	adds	r0, r3, #4
 800f182:	6008      	str	r0, [r1, #0]
 800f184:	0628      	lsls	r0, r5, #24
 800f186:	d501      	bpl.n	800f18c <_printf_i+0xec>
 800f188:	681d      	ldr	r5, [r3, #0]
 800f18a:	e002      	b.n	800f192 <_printf_i+0xf2>
 800f18c:	0669      	lsls	r1, r5, #25
 800f18e:	d5fb      	bpl.n	800f188 <_printf_i+0xe8>
 800f190:	881d      	ldrh	r5, [r3, #0]
 800f192:	4854      	ldr	r0, [pc, #336]	; (800f2e4 <_printf_i+0x244>)
 800f194:	2f6f      	cmp	r7, #111	; 0x6f
 800f196:	bf0c      	ite	eq
 800f198:	2308      	moveq	r3, #8
 800f19a:	230a      	movne	r3, #10
 800f19c:	2100      	movs	r1, #0
 800f19e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1a2:	6866      	ldr	r6, [r4, #4]
 800f1a4:	60a6      	str	r6, [r4, #8]
 800f1a6:	2e00      	cmp	r6, #0
 800f1a8:	bfa2      	ittt	ge
 800f1aa:	6821      	ldrge	r1, [r4, #0]
 800f1ac:	f021 0104 	bicge.w	r1, r1, #4
 800f1b0:	6021      	strge	r1, [r4, #0]
 800f1b2:	b90d      	cbnz	r5, 800f1b8 <_printf_i+0x118>
 800f1b4:	2e00      	cmp	r6, #0
 800f1b6:	d04d      	beq.n	800f254 <_printf_i+0x1b4>
 800f1b8:	4616      	mov	r6, r2
 800f1ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1be:	fb03 5711 	mls	r7, r3, r1, r5
 800f1c2:	5dc7      	ldrb	r7, [r0, r7]
 800f1c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1c8:	462f      	mov	r7, r5
 800f1ca:	42bb      	cmp	r3, r7
 800f1cc:	460d      	mov	r5, r1
 800f1ce:	d9f4      	bls.n	800f1ba <_printf_i+0x11a>
 800f1d0:	2b08      	cmp	r3, #8
 800f1d2:	d10b      	bne.n	800f1ec <_printf_i+0x14c>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	07df      	lsls	r7, r3, #31
 800f1d8:	d508      	bpl.n	800f1ec <_printf_i+0x14c>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	6861      	ldr	r1, [r4, #4]
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	bfde      	ittt	le
 800f1e2:	2330      	movle	r3, #48	; 0x30
 800f1e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1e8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f1ec:	1b92      	subs	r2, r2, r6
 800f1ee:	6122      	str	r2, [r4, #16]
 800f1f0:	f8cd a000 	str.w	sl, [sp]
 800f1f4:	464b      	mov	r3, r9
 800f1f6:	aa03      	add	r2, sp, #12
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	f7ff fee2 	bl	800efc4 <_printf_common>
 800f200:	3001      	adds	r0, #1
 800f202:	d14c      	bne.n	800f29e <_printf_i+0x1fe>
 800f204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f208:	b004      	add	sp, #16
 800f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20e:	4835      	ldr	r0, [pc, #212]	; (800f2e4 <_printf_i+0x244>)
 800f210:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	680e      	ldr	r6, [r1, #0]
 800f218:	061f      	lsls	r7, r3, #24
 800f21a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f21e:	600e      	str	r6, [r1, #0]
 800f220:	d514      	bpl.n	800f24c <_printf_i+0x1ac>
 800f222:	07d9      	lsls	r1, r3, #31
 800f224:	bf44      	itt	mi
 800f226:	f043 0320 	orrmi.w	r3, r3, #32
 800f22a:	6023      	strmi	r3, [r4, #0]
 800f22c:	b91d      	cbnz	r5, 800f236 <_printf_i+0x196>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f023 0320 	bic.w	r3, r3, #32
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	2310      	movs	r3, #16
 800f238:	e7b0      	b.n	800f19c <_printf_i+0xfc>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	f043 0320 	orr.w	r3, r3, #32
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	2378      	movs	r3, #120	; 0x78
 800f244:	4828      	ldr	r0, [pc, #160]	; (800f2e8 <_printf_i+0x248>)
 800f246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f24a:	e7e3      	b.n	800f214 <_printf_i+0x174>
 800f24c:	065e      	lsls	r6, r3, #25
 800f24e:	bf48      	it	mi
 800f250:	b2ad      	uxthmi	r5, r5
 800f252:	e7e6      	b.n	800f222 <_printf_i+0x182>
 800f254:	4616      	mov	r6, r2
 800f256:	e7bb      	b.n	800f1d0 <_printf_i+0x130>
 800f258:	680b      	ldr	r3, [r1, #0]
 800f25a:	6826      	ldr	r6, [r4, #0]
 800f25c:	6960      	ldr	r0, [r4, #20]
 800f25e:	1d1d      	adds	r5, r3, #4
 800f260:	600d      	str	r5, [r1, #0]
 800f262:	0635      	lsls	r5, r6, #24
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	d501      	bpl.n	800f26c <_printf_i+0x1cc>
 800f268:	6018      	str	r0, [r3, #0]
 800f26a:	e002      	b.n	800f272 <_printf_i+0x1d2>
 800f26c:	0671      	lsls	r1, r6, #25
 800f26e:	d5fb      	bpl.n	800f268 <_printf_i+0x1c8>
 800f270:	8018      	strh	r0, [r3, #0]
 800f272:	2300      	movs	r3, #0
 800f274:	6123      	str	r3, [r4, #16]
 800f276:	4616      	mov	r6, r2
 800f278:	e7ba      	b.n	800f1f0 <_printf_i+0x150>
 800f27a:	680b      	ldr	r3, [r1, #0]
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	600a      	str	r2, [r1, #0]
 800f280:	681e      	ldr	r6, [r3, #0]
 800f282:	6862      	ldr	r2, [r4, #4]
 800f284:	2100      	movs	r1, #0
 800f286:	4630      	mov	r0, r6
 800f288:	f7f0 ffca 	bl	8000220 <memchr>
 800f28c:	b108      	cbz	r0, 800f292 <_printf_i+0x1f2>
 800f28e:	1b80      	subs	r0, r0, r6
 800f290:	6060      	str	r0, [r4, #4]
 800f292:	6863      	ldr	r3, [r4, #4]
 800f294:	6123      	str	r3, [r4, #16]
 800f296:	2300      	movs	r3, #0
 800f298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29c:	e7a8      	b.n	800f1f0 <_printf_i+0x150>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	47d0      	blx	sl
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	d0ab      	beq.n	800f204 <_printf_i+0x164>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	079b      	lsls	r3, r3, #30
 800f2b0:	d413      	bmi.n	800f2da <_printf_i+0x23a>
 800f2b2:	68e0      	ldr	r0, [r4, #12]
 800f2b4:	9b03      	ldr	r3, [sp, #12]
 800f2b6:	4298      	cmp	r0, r3
 800f2b8:	bfb8      	it	lt
 800f2ba:	4618      	movlt	r0, r3
 800f2bc:	e7a4      	b.n	800f208 <_printf_i+0x168>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	47d0      	blx	sl
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d09b      	beq.n	800f204 <_printf_i+0x164>
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	9903      	ldr	r1, [sp, #12]
 800f2d2:	1a5b      	subs	r3, r3, r1
 800f2d4:	42ab      	cmp	r3, r5
 800f2d6:	dcf2      	bgt.n	800f2be <_printf_i+0x21e>
 800f2d8:	e7eb      	b.n	800f2b2 <_printf_i+0x212>
 800f2da:	2500      	movs	r5, #0
 800f2dc:	f104 0619 	add.w	r6, r4, #25
 800f2e0:	e7f5      	b.n	800f2ce <_printf_i+0x22e>
 800f2e2:	bf00      	nop
 800f2e4:	08011ac2 	.word	0x08011ac2
 800f2e8:	08011ad3 	.word	0x08011ad3

0800f2ec <__swbuf_r>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	460e      	mov	r6, r1
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	b118      	cbz	r0, 800f2fe <__swbuf_r+0x12>
 800f2f6:	6983      	ldr	r3, [r0, #24]
 800f2f8:	b90b      	cbnz	r3, 800f2fe <__swbuf_r+0x12>
 800f2fa:	f7fd fa99 	bl	800c830 <__sinit>
 800f2fe:	4b21      	ldr	r3, [pc, #132]	; (800f384 <__swbuf_r+0x98>)
 800f300:	429c      	cmp	r4, r3
 800f302:	d12b      	bne.n	800f35c <__swbuf_r+0x70>
 800f304:	686c      	ldr	r4, [r5, #4]
 800f306:	69a3      	ldr	r3, [r4, #24]
 800f308:	60a3      	str	r3, [r4, #8]
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	071a      	lsls	r2, r3, #28
 800f30e:	d52f      	bpl.n	800f370 <__swbuf_r+0x84>
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	b36b      	cbz	r3, 800f370 <__swbuf_r+0x84>
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	6820      	ldr	r0, [r4, #0]
 800f318:	1ac0      	subs	r0, r0, r3
 800f31a:	6963      	ldr	r3, [r4, #20]
 800f31c:	b2f6      	uxtb	r6, r6
 800f31e:	4283      	cmp	r3, r0
 800f320:	4637      	mov	r7, r6
 800f322:	dc04      	bgt.n	800f32e <__swbuf_r+0x42>
 800f324:	4621      	mov	r1, r4
 800f326:	4628      	mov	r0, r5
 800f328:	f7fe fbc0 	bl	800daac <_fflush_r>
 800f32c:	bb30      	cbnz	r0, 800f37c <__swbuf_r+0x90>
 800f32e:	68a3      	ldr	r3, [r4, #8]
 800f330:	3b01      	subs	r3, #1
 800f332:	60a3      	str	r3, [r4, #8]
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	6022      	str	r2, [r4, #0]
 800f33a:	701e      	strb	r6, [r3, #0]
 800f33c:	6963      	ldr	r3, [r4, #20]
 800f33e:	3001      	adds	r0, #1
 800f340:	4283      	cmp	r3, r0
 800f342:	d004      	beq.n	800f34e <__swbuf_r+0x62>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	07db      	lsls	r3, r3, #31
 800f348:	d506      	bpl.n	800f358 <__swbuf_r+0x6c>
 800f34a:	2e0a      	cmp	r6, #10
 800f34c:	d104      	bne.n	800f358 <__swbuf_r+0x6c>
 800f34e:	4621      	mov	r1, r4
 800f350:	4628      	mov	r0, r5
 800f352:	f7fe fbab 	bl	800daac <_fflush_r>
 800f356:	b988      	cbnz	r0, 800f37c <__swbuf_r+0x90>
 800f358:	4638      	mov	r0, r7
 800f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f35c:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <__swbuf_r+0x9c>)
 800f35e:	429c      	cmp	r4, r3
 800f360:	d101      	bne.n	800f366 <__swbuf_r+0x7a>
 800f362:	68ac      	ldr	r4, [r5, #8]
 800f364:	e7cf      	b.n	800f306 <__swbuf_r+0x1a>
 800f366:	4b09      	ldr	r3, [pc, #36]	; (800f38c <__swbuf_r+0xa0>)
 800f368:	429c      	cmp	r4, r3
 800f36a:	bf08      	it	eq
 800f36c:	68ec      	ldreq	r4, [r5, #12]
 800f36e:	e7ca      	b.n	800f306 <__swbuf_r+0x1a>
 800f370:	4621      	mov	r1, r4
 800f372:	4628      	mov	r0, r5
 800f374:	f000 f80c 	bl	800f390 <__swsetup_r>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d0cb      	beq.n	800f314 <__swbuf_r+0x28>
 800f37c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f380:	e7ea      	b.n	800f358 <__swbuf_r+0x6c>
 800f382:	bf00      	nop
 800f384:	080116cc 	.word	0x080116cc
 800f388:	080116ec 	.word	0x080116ec
 800f38c:	080116ac 	.word	0x080116ac

0800f390 <__swsetup_r>:
 800f390:	4b32      	ldr	r3, [pc, #200]	; (800f45c <__swsetup_r+0xcc>)
 800f392:	b570      	push	{r4, r5, r6, lr}
 800f394:	681d      	ldr	r5, [r3, #0]
 800f396:	4606      	mov	r6, r0
 800f398:	460c      	mov	r4, r1
 800f39a:	b125      	cbz	r5, 800f3a6 <__swsetup_r+0x16>
 800f39c:	69ab      	ldr	r3, [r5, #24]
 800f39e:	b913      	cbnz	r3, 800f3a6 <__swsetup_r+0x16>
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f7fd fa45 	bl	800c830 <__sinit>
 800f3a6:	4b2e      	ldr	r3, [pc, #184]	; (800f460 <__swsetup_r+0xd0>)
 800f3a8:	429c      	cmp	r4, r3
 800f3aa:	d10f      	bne.n	800f3cc <__swsetup_r+0x3c>
 800f3ac:	686c      	ldr	r4, [r5, #4]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3b4:	0719      	lsls	r1, r3, #28
 800f3b6:	d42c      	bmi.n	800f412 <__swsetup_r+0x82>
 800f3b8:	06dd      	lsls	r5, r3, #27
 800f3ba:	d411      	bmi.n	800f3e0 <__swsetup_r+0x50>
 800f3bc:	2309      	movs	r3, #9
 800f3be:	6033      	str	r3, [r6, #0]
 800f3c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3c4:	81a3      	strh	r3, [r4, #12]
 800f3c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3ca:	e03e      	b.n	800f44a <__swsetup_r+0xba>
 800f3cc:	4b25      	ldr	r3, [pc, #148]	; (800f464 <__swsetup_r+0xd4>)
 800f3ce:	429c      	cmp	r4, r3
 800f3d0:	d101      	bne.n	800f3d6 <__swsetup_r+0x46>
 800f3d2:	68ac      	ldr	r4, [r5, #8]
 800f3d4:	e7eb      	b.n	800f3ae <__swsetup_r+0x1e>
 800f3d6:	4b24      	ldr	r3, [pc, #144]	; (800f468 <__swsetup_r+0xd8>)
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	bf08      	it	eq
 800f3dc:	68ec      	ldreq	r4, [r5, #12]
 800f3de:	e7e6      	b.n	800f3ae <__swsetup_r+0x1e>
 800f3e0:	0758      	lsls	r0, r3, #29
 800f3e2:	d512      	bpl.n	800f40a <__swsetup_r+0x7a>
 800f3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3e6:	b141      	cbz	r1, 800f3fa <__swsetup_r+0x6a>
 800f3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3ec:	4299      	cmp	r1, r3
 800f3ee:	d002      	beq.n	800f3f6 <__swsetup_r+0x66>
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7fd fb11 	bl	800ca18 <_free_r>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	6363      	str	r3, [r4, #52]	; 0x34
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f400:	81a3      	strh	r3, [r4, #12]
 800f402:	2300      	movs	r3, #0
 800f404:	6063      	str	r3, [r4, #4]
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f043 0308 	orr.w	r3, r3, #8
 800f410:	81a3      	strh	r3, [r4, #12]
 800f412:	6923      	ldr	r3, [r4, #16]
 800f414:	b94b      	cbnz	r3, 800f42a <__swsetup_r+0x9a>
 800f416:	89a3      	ldrh	r3, [r4, #12]
 800f418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f420:	d003      	beq.n	800f42a <__swsetup_r+0x9a>
 800f422:	4621      	mov	r1, r4
 800f424:	4630      	mov	r0, r6
 800f426:	f000 f84d 	bl	800f4c4 <__smakebuf_r>
 800f42a:	89a0      	ldrh	r0, [r4, #12]
 800f42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f430:	f010 0301 	ands.w	r3, r0, #1
 800f434:	d00a      	beq.n	800f44c <__swsetup_r+0xbc>
 800f436:	2300      	movs	r3, #0
 800f438:	60a3      	str	r3, [r4, #8]
 800f43a:	6963      	ldr	r3, [r4, #20]
 800f43c:	425b      	negs	r3, r3
 800f43e:	61a3      	str	r3, [r4, #24]
 800f440:	6923      	ldr	r3, [r4, #16]
 800f442:	b943      	cbnz	r3, 800f456 <__swsetup_r+0xc6>
 800f444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f448:	d1ba      	bne.n	800f3c0 <__swsetup_r+0x30>
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
 800f44c:	0781      	lsls	r1, r0, #30
 800f44e:	bf58      	it	pl
 800f450:	6963      	ldrpl	r3, [r4, #20]
 800f452:	60a3      	str	r3, [r4, #8]
 800f454:	e7f4      	b.n	800f440 <__swsetup_r+0xb0>
 800f456:	2000      	movs	r0, #0
 800f458:	e7f7      	b.n	800f44a <__swsetup_r+0xba>
 800f45a:	bf00      	nop
 800f45c:	20000014 	.word	0x20000014
 800f460:	080116cc 	.word	0x080116cc
 800f464:	080116ec 	.word	0x080116ec
 800f468:	080116ac 	.word	0x080116ac

0800f46c <abort>:
 800f46c:	b508      	push	{r3, lr}
 800f46e:	2006      	movs	r0, #6
 800f470:	f000 f890 	bl	800f594 <raise>
 800f474:	2001      	movs	r0, #1
 800f476:	f7f3 fa1b 	bl	80028b0 <_exit>

0800f47a <__swhatbuf_r>:
 800f47a:	b570      	push	{r4, r5, r6, lr}
 800f47c:	460e      	mov	r6, r1
 800f47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f482:	2900      	cmp	r1, #0
 800f484:	b096      	sub	sp, #88	; 0x58
 800f486:	4614      	mov	r4, r2
 800f488:	461d      	mov	r5, r3
 800f48a:	da07      	bge.n	800f49c <__swhatbuf_r+0x22>
 800f48c:	2300      	movs	r3, #0
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	89b3      	ldrh	r3, [r6, #12]
 800f492:	061a      	lsls	r2, r3, #24
 800f494:	d410      	bmi.n	800f4b8 <__swhatbuf_r+0x3e>
 800f496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f49a:	e00e      	b.n	800f4ba <__swhatbuf_r+0x40>
 800f49c:	466a      	mov	r2, sp
 800f49e:	f000 f895 	bl	800f5cc <_fstat_r>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	dbf2      	blt.n	800f48c <__swhatbuf_r+0x12>
 800f4a6:	9a01      	ldr	r2, [sp, #4]
 800f4a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4b0:	425a      	negs	r2, r3
 800f4b2:	415a      	adcs	r2, r3
 800f4b4:	602a      	str	r2, [r5, #0]
 800f4b6:	e7ee      	b.n	800f496 <__swhatbuf_r+0x1c>
 800f4b8:	2340      	movs	r3, #64	; 0x40
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	b016      	add	sp, #88	; 0x58
 800f4c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f4c4 <__smakebuf_r>:
 800f4c4:	898b      	ldrh	r3, [r1, #12]
 800f4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4c8:	079d      	lsls	r5, r3, #30
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	d507      	bpl.n	800f4e0 <__smakebuf_r+0x1c>
 800f4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	2301      	movs	r3, #1
 800f4da:	6163      	str	r3, [r4, #20]
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	ab01      	add	r3, sp, #4
 800f4e2:	466a      	mov	r2, sp
 800f4e4:	f7ff ffc9 	bl	800f47a <__swhatbuf_r>
 800f4e8:	9900      	ldr	r1, [sp, #0]
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	f7fd fae3 	bl	800cab8 <_malloc_r>
 800f4f2:	b948      	cbnz	r0, 800f508 <__smakebuf_r+0x44>
 800f4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f8:	059a      	lsls	r2, r3, #22
 800f4fa:	d4ef      	bmi.n	800f4dc <__smakebuf_r+0x18>
 800f4fc:	f023 0303 	bic.w	r3, r3, #3
 800f500:	f043 0302 	orr.w	r3, r3, #2
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	e7e3      	b.n	800f4d0 <__smakebuf_r+0xc>
 800f508:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <__smakebuf_r+0x7c>)
 800f50a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	6020      	str	r0, [r4, #0]
 800f510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f514:	81a3      	strh	r3, [r4, #12]
 800f516:	9b00      	ldr	r3, [sp, #0]
 800f518:	6163      	str	r3, [r4, #20]
 800f51a:	9b01      	ldr	r3, [sp, #4]
 800f51c:	6120      	str	r0, [r4, #16]
 800f51e:	b15b      	cbz	r3, 800f538 <__smakebuf_r+0x74>
 800f520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f524:	4630      	mov	r0, r6
 800f526:	f000 f863 	bl	800f5f0 <_isatty_r>
 800f52a:	b128      	cbz	r0, 800f538 <__smakebuf_r+0x74>
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	f023 0303 	bic.w	r3, r3, #3
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	81a3      	strh	r3, [r4, #12]
 800f538:	89a0      	ldrh	r0, [r4, #12]
 800f53a:	4305      	orrs	r5, r0
 800f53c:	81a5      	strh	r5, [r4, #12]
 800f53e:	e7cd      	b.n	800f4dc <__smakebuf_r+0x18>
 800f540:	0800c7c9 	.word	0x0800c7c9

0800f544 <_raise_r>:
 800f544:	291f      	cmp	r1, #31
 800f546:	b538      	push	{r3, r4, r5, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	460d      	mov	r5, r1
 800f54c:	d904      	bls.n	800f558 <_raise_r+0x14>
 800f54e:	2316      	movs	r3, #22
 800f550:	6003      	str	r3, [r0, #0]
 800f552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f55a:	b112      	cbz	r2, 800f562 <_raise_r+0x1e>
 800f55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f560:	b94b      	cbnz	r3, 800f576 <_raise_r+0x32>
 800f562:	4620      	mov	r0, r4
 800f564:	f000 f830 	bl	800f5c8 <_getpid_r>
 800f568:	462a      	mov	r2, r5
 800f56a:	4601      	mov	r1, r0
 800f56c:	4620      	mov	r0, r4
 800f56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f572:	f000 b817 	b.w	800f5a4 <_kill_r>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d00a      	beq.n	800f590 <_raise_r+0x4c>
 800f57a:	1c59      	adds	r1, r3, #1
 800f57c:	d103      	bne.n	800f586 <_raise_r+0x42>
 800f57e:	2316      	movs	r3, #22
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	2001      	movs	r0, #1
 800f584:	e7e7      	b.n	800f556 <_raise_r+0x12>
 800f586:	2400      	movs	r4, #0
 800f588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f58c:	4628      	mov	r0, r5
 800f58e:	4798      	blx	r3
 800f590:	2000      	movs	r0, #0
 800f592:	e7e0      	b.n	800f556 <_raise_r+0x12>

0800f594 <raise>:
 800f594:	4b02      	ldr	r3, [pc, #8]	; (800f5a0 <raise+0xc>)
 800f596:	4601      	mov	r1, r0
 800f598:	6818      	ldr	r0, [r3, #0]
 800f59a:	f7ff bfd3 	b.w	800f544 <_raise_r>
 800f59e:	bf00      	nop
 800f5a0:	20000014 	.word	0x20000014

0800f5a4 <_kill_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	4d07      	ldr	r5, [pc, #28]	; (800f5c4 <_kill_r+0x20>)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	4608      	mov	r0, r1
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	602b      	str	r3, [r5, #0]
 800f5b2:	f7f3 f96d 	bl	8002890 <_kill>
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	d102      	bne.n	800f5c0 <_kill_r+0x1c>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	b103      	cbz	r3, 800f5c0 <_kill_r+0x1c>
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	bd38      	pop	{r3, r4, r5, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20005508 	.word	0x20005508

0800f5c8 <_getpid_r>:
 800f5c8:	f7f3 b95a 	b.w	8002880 <_getpid>

0800f5cc <_fstat_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	; (800f5ec <_fstat_r+0x20>)
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	602b      	str	r3, [r5, #0]
 800f5da:	f7f3 f9b8 	bl	800294e <_fstat>
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	d102      	bne.n	800f5e8 <_fstat_r+0x1c>
 800f5e2:	682b      	ldr	r3, [r5, #0]
 800f5e4:	b103      	cbz	r3, 800f5e8 <_fstat_r+0x1c>
 800f5e6:	6023      	str	r3, [r4, #0]
 800f5e8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20005508 	.word	0x20005508

0800f5f0 <_isatty_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d06      	ldr	r5, [pc, #24]	; (800f60c <_isatty_r+0x1c>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	602b      	str	r3, [r5, #0]
 800f5fc:	f7f3 f9b7 	bl	800296e <_isatty>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_isatty_r+0x1a>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_isatty_r+0x1a>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	20005508 	.word	0x20005508

0800f610 <cos>:
 800f610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f612:	ec53 2b10 	vmov	r2, r3, d0
 800f616:	4824      	ldr	r0, [pc, #144]	; (800f6a8 <cos+0x98>)
 800f618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f61c:	4281      	cmp	r1, r0
 800f61e:	dc06      	bgt.n	800f62e <cos+0x1e>
 800f620:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800f6a0 <cos+0x90>
 800f624:	f001 f92c 	bl	8010880 <__kernel_cos>
 800f628:	ec51 0b10 	vmov	r0, r1, d0
 800f62c:	e007      	b.n	800f63e <cos+0x2e>
 800f62e:	481f      	ldr	r0, [pc, #124]	; (800f6ac <cos+0x9c>)
 800f630:	4281      	cmp	r1, r0
 800f632:	dd09      	ble.n	800f648 <cos+0x38>
 800f634:	ee10 0a10 	vmov	r0, s0
 800f638:	4619      	mov	r1, r3
 800f63a:	f7f0 fe45 	bl	80002c8 <__aeabi_dsub>
 800f63e:	ec41 0b10 	vmov	d0, r0, r1
 800f642:	b005      	add	sp, #20
 800f644:	f85d fb04 	ldr.w	pc, [sp], #4
 800f648:	4668      	mov	r0, sp
 800f64a:	f000 fe59 	bl	8010300 <__ieee754_rem_pio2>
 800f64e:	f000 0003 	and.w	r0, r0, #3
 800f652:	2801      	cmp	r0, #1
 800f654:	d007      	beq.n	800f666 <cos+0x56>
 800f656:	2802      	cmp	r0, #2
 800f658:	d012      	beq.n	800f680 <cos+0x70>
 800f65a:	b9c0      	cbnz	r0, 800f68e <cos+0x7e>
 800f65c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f660:	ed9d 0b00 	vldr	d0, [sp]
 800f664:	e7de      	b.n	800f624 <cos+0x14>
 800f666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f66a:	ed9d 0b00 	vldr	d0, [sp]
 800f66e:	f001 fd0f 	bl	8011090 <__kernel_sin>
 800f672:	ec53 2b10 	vmov	r2, r3, d0
 800f676:	ee10 0a10 	vmov	r0, s0
 800f67a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f67e:	e7de      	b.n	800f63e <cos+0x2e>
 800f680:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f684:	ed9d 0b00 	vldr	d0, [sp]
 800f688:	f001 f8fa 	bl	8010880 <__kernel_cos>
 800f68c:	e7f1      	b.n	800f672 <cos+0x62>
 800f68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f692:	ed9d 0b00 	vldr	d0, [sp]
 800f696:	2001      	movs	r0, #1
 800f698:	f001 fcfa 	bl	8011090 <__kernel_sin>
 800f69c:	e7c4      	b.n	800f628 <cos+0x18>
 800f69e:	bf00      	nop
	...
 800f6a8:	3fe921fb 	.word	0x3fe921fb
 800f6ac:	7fefffff 	.word	0x7fefffff

0800f6b0 <sin>:
 800f6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6b2:	ec53 2b10 	vmov	r2, r3, d0
 800f6b6:	4826      	ldr	r0, [pc, #152]	; (800f750 <sin+0xa0>)
 800f6b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f6bc:	4281      	cmp	r1, r0
 800f6be:	dc07      	bgt.n	800f6d0 <sin+0x20>
 800f6c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f748 <sin+0x98>
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	f001 fce3 	bl	8011090 <__kernel_sin>
 800f6ca:	ec51 0b10 	vmov	r0, r1, d0
 800f6ce:	e007      	b.n	800f6e0 <sin+0x30>
 800f6d0:	4820      	ldr	r0, [pc, #128]	; (800f754 <sin+0xa4>)
 800f6d2:	4281      	cmp	r1, r0
 800f6d4:	dd09      	ble.n	800f6ea <sin+0x3a>
 800f6d6:	ee10 0a10 	vmov	r0, s0
 800f6da:	4619      	mov	r1, r3
 800f6dc:	f7f0 fdf4 	bl	80002c8 <__aeabi_dsub>
 800f6e0:	ec41 0b10 	vmov	d0, r0, r1
 800f6e4:	b005      	add	sp, #20
 800f6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6ea:	4668      	mov	r0, sp
 800f6ec:	f000 fe08 	bl	8010300 <__ieee754_rem_pio2>
 800f6f0:	f000 0003 	and.w	r0, r0, #3
 800f6f4:	2801      	cmp	r0, #1
 800f6f6:	d008      	beq.n	800f70a <sin+0x5a>
 800f6f8:	2802      	cmp	r0, #2
 800f6fa:	d00d      	beq.n	800f718 <sin+0x68>
 800f6fc:	b9d0      	cbnz	r0, 800f734 <sin+0x84>
 800f6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f702:	ed9d 0b00 	vldr	d0, [sp]
 800f706:	2001      	movs	r0, #1
 800f708:	e7dd      	b.n	800f6c6 <sin+0x16>
 800f70a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f70e:	ed9d 0b00 	vldr	d0, [sp]
 800f712:	f001 f8b5 	bl	8010880 <__kernel_cos>
 800f716:	e7d8      	b.n	800f6ca <sin+0x1a>
 800f718:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f71c:	ed9d 0b00 	vldr	d0, [sp]
 800f720:	2001      	movs	r0, #1
 800f722:	f001 fcb5 	bl	8011090 <__kernel_sin>
 800f726:	ec53 2b10 	vmov	r2, r3, d0
 800f72a:	ee10 0a10 	vmov	r0, s0
 800f72e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f732:	e7d5      	b.n	800f6e0 <sin+0x30>
 800f734:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f738:	ed9d 0b00 	vldr	d0, [sp]
 800f73c:	f001 f8a0 	bl	8010880 <__kernel_cos>
 800f740:	e7f1      	b.n	800f726 <sin+0x76>
 800f742:	bf00      	nop
 800f744:	f3af 8000 	nop.w
	...
 800f750:	3fe921fb 	.word	0x3fe921fb
 800f754:	7fefffff 	.word	0x7fefffff

0800f758 <pow>:
 800f758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f75c:	ec59 8b10 	vmov	r8, r9, d0
 800f760:	ec57 6b11 	vmov	r6, r7, d1
 800f764:	f000 f8a8 	bl	800f8b8 <__ieee754_pow>
 800f768:	4b4e      	ldr	r3, [pc, #312]	; (800f8a4 <pow+0x14c>)
 800f76a:	f993 3000 	ldrsb.w	r3, [r3]
 800f76e:	3301      	adds	r3, #1
 800f770:	ec55 4b10 	vmov	r4, r5, d0
 800f774:	d015      	beq.n	800f7a2 <pow+0x4a>
 800f776:	4632      	mov	r2, r6
 800f778:	463b      	mov	r3, r7
 800f77a:	4630      	mov	r0, r6
 800f77c:	4639      	mov	r1, r7
 800f77e:	f7f1 f9f5 	bl	8000b6c <__aeabi_dcmpun>
 800f782:	b970      	cbnz	r0, 800f7a2 <pow+0x4a>
 800f784:	4642      	mov	r2, r8
 800f786:	464b      	mov	r3, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	4649      	mov	r1, r9
 800f78c:	f7f1 f9ee 	bl	8000b6c <__aeabi_dcmpun>
 800f790:	2200      	movs	r2, #0
 800f792:	2300      	movs	r3, #0
 800f794:	b148      	cbz	r0, 800f7aa <pow+0x52>
 800f796:	4630      	mov	r0, r6
 800f798:	4639      	mov	r1, r7
 800f79a:	f7f1 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d17d      	bne.n	800f89e <pow+0x146>
 800f7a2:	ec45 4b10 	vmov	d0, r4, r5
 800f7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	f7f1 f9ab 	bl	8000b08 <__aeabi_dcmpeq>
 800f7b2:	b1e0      	cbz	r0, 800f7ee <pow+0x96>
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f1 f9a4 	bl	8000b08 <__aeabi_dcmpeq>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d16c      	bne.n	800f89e <pow+0x146>
 800f7c4:	ec47 6b10 	vmov	d0, r6, r7
 800f7c8:	f001 fd29 	bl	801121e <finite>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d0e8      	beq.n	800f7a2 <pow+0x4a>
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7f1 f9a0 	bl	8000b1c <__aeabi_dcmplt>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d0e0      	beq.n	800f7a2 <pow+0x4a>
 800f7e0:	f7fc ffc8 	bl	800c774 <__errno>
 800f7e4:	2321      	movs	r3, #33	; 0x21
 800f7e6:	6003      	str	r3, [r0, #0]
 800f7e8:	2400      	movs	r4, #0
 800f7ea:	4d2f      	ldr	r5, [pc, #188]	; (800f8a8 <pow+0x150>)
 800f7ec:	e7d9      	b.n	800f7a2 <pow+0x4a>
 800f7ee:	ec45 4b10 	vmov	d0, r4, r5
 800f7f2:	f001 fd14 	bl	801121e <finite>
 800f7f6:	bbb8      	cbnz	r0, 800f868 <pow+0x110>
 800f7f8:	ec49 8b10 	vmov	d0, r8, r9
 800f7fc:	f001 fd0f 	bl	801121e <finite>
 800f800:	b390      	cbz	r0, 800f868 <pow+0x110>
 800f802:	ec47 6b10 	vmov	d0, r6, r7
 800f806:	f001 fd0a 	bl	801121e <finite>
 800f80a:	b368      	cbz	r0, 800f868 <pow+0x110>
 800f80c:	4622      	mov	r2, r4
 800f80e:	462b      	mov	r3, r5
 800f810:	4620      	mov	r0, r4
 800f812:	4629      	mov	r1, r5
 800f814:	f7f1 f9aa 	bl	8000b6c <__aeabi_dcmpun>
 800f818:	b160      	cbz	r0, 800f834 <pow+0xdc>
 800f81a:	f7fc ffab 	bl	800c774 <__errno>
 800f81e:	2321      	movs	r3, #33	; 0x21
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	2200      	movs	r2, #0
 800f824:	2300      	movs	r3, #0
 800f826:	4610      	mov	r0, r2
 800f828:	4619      	mov	r1, r3
 800f82a:	f7f1 f82f 	bl	800088c <__aeabi_ddiv>
 800f82e:	4604      	mov	r4, r0
 800f830:	460d      	mov	r5, r1
 800f832:	e7b6      	b.n	800f7a2 <pow+0x4a>
 800f834:	f7fc ff9e 	bl	800c774 <__errno>
 800f838:	2322      	movs	r3, #34	; 0x22
 800f83a:	6003      	str	r3, [r0, #0]
 800f83c:	2200      	movs	r2, #0
 800f83e:	2300      	movs	r3, #0
 800f840:	4640      	mov	r0, r8
 800f842:	4649      	mov	r1, r9
 800f844:	f7f1 f96a 	bl	8000b1c <__aeabi_dcmplt>
 800f848:	2400      	movs	r4, #0
 800f84a:	b158      	cbz	r0, 800f864 <pow+0x10c>
 800f84c:	ec47 6b10 	vmov	d0, r6, r7
 800f850:	f001 fd72 	bl	8011338 <rint>
 800f854:	4632      	mov	r2, r6
 800f856:	ec51 0b10 	vmov	r0, r1, d0
 800f85a:	463b      	mov	r3, r7
 800f85c:	f7f1 f954 	bl	8000b08 <__aeabi_dcmpeq>
 800f860:	2800      	cmp	r0, #0
 800f862:	d0c2      	beq.n	800f7ea <pow+0x92>
 800f864:	4d11      	ldr	r5, [pc, #68]	; (800f8ac <pow+0x154>)
 800f866:	e79c      	b.n	800f7a2 <pow+0x4a>
 800f868:	2200      	movs	r2, #0
 800f86a:	2300      	movs	r3, #0
 800f86c:	4620      	mov	r0, r4
 800f86e:	4629      	mov	r1, r5
 800f870:	f7f1 f94a 	bl	8000b08 <__aeabi_dcmpeq>
 800f874:	2800      	cmp	r0, #0
 800f876:	d094      	beq.n	800f7a2 <pow+0x4a>
 800f878:	ec49 8b10 	vmov	d0, r8, r9
 800f87c:	f001 fccf 	bl	801121e <finite>
 800f880:	2800      	cmp	r0, #0
 800f882:	d08e      	beq.n	800f7a2 <pow+0x4a>
 800f884:	ec47 6b10 	vmov	d0, r6, r7
 800f888:	f001 fcc9 	bl	801121e <finite>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	d088      	beq.n	800f7a2 <pow+0x4a>
 800f890:	f7fc ff70 	bl	800c774 <__errno>
 800f894:	2322      	movs	r3, #34	; 0x22
 800f896:	6003      	str	r3, [r0, #0]
 800f898:	2400      	movs	r4, #0
 800f89a:	2500      	movs	r5, #0
 800f89c:	e781      	b.n	800f7a2 <pow+0x4a>
 800f89e:	4d04      	ldr	r5, [pc, #16]	; (800f8b0 <pow+0x158>)
 800f8a0:	2400      	movs	r4, #0
 800f8a2:	e77e      	b.n	800f7a2 <pow+0x4a>
 800f8a4:	200001e8 	.word	0x200001e8
 800f8a8:	fff00000 	.word	0xfff00000
 800f8ac:	7ff00000 	.word	0x7ff00000
 800f8b0:	3ff00000 	.word	0x3ff00000
 800f8b4:	00000000 	.word	0x00000000

0800f8b8 <__ieee754_pow>:
 800f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	ed2d 8b06 	vpush	{d8-d10}
 800f8c0:	b08d      	sub	sp, #52	; 0x34
 800f8c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f8c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800f8ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800f8ce:	ea56 0100 	orrs.w	r1, r6, r0
 800f8d2:	ec53 2b10 	vmov	r2, r3, d0
 800f8d6:	f000 84d1 	beq.w	801027c <__ieee754_pow+0x9c4>
 800f8da:	497f      	ldr	r1, [pc, #508]	; (800fad8 <__ieee754_pow+0x220>)
 800f8dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800f8e0:	428c      	cmp	r4, r1
 800f8e2:	ee10 8a10 	vmov	r8, s0
 800f8e6:	4699      	mov	r9, r3
 800f8e8:	dc09      	bgt.n	800f8fe <__ieee754_pow+0x46>
 800f8ea:	d103      	bne.n	800f8f4 <__ieee754_pow+0x3c>
 800f8ec:	b97a      	cbnz	r2, 800f90e <__ieee754_pow+0x56>
 800f8ee:	42a6      	cmp	r6, r4
 800f8f0:	dd02      	ble.n	800f8f8 <__ieee754_pow+0x40>
 800f8f2:	e00c      	b.n	800f90e <__ieee754_pow+0x56>
 800f8f4:	428e      	cmp	r6, r1
 800f8f6:	dc02      	bgt.n	800f8fe <__ieee754_pow+0x46>
 800f8f8:	428e      	cmp	r6, r1
 800f8fa:	d110      	bne.n	800f91e <__ieee754_pow+0x66>
 800f8fc:	b178      	cbz	r0, 800f91e <__ieee754_pow+0x66>
 800f8fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f902:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f906:	ea54 0308 	orrs.w	r3, r4, r8
 800f90a:	f000 84b7 	beq.w	801027c <__ieee754_pow+0x9c4>
 800f90e:	4873      	ldr	r0, [pc, #460]	; (800fadc <__ieee754_pow+0x224>)
 800f910:	b00d      	add	sp, #52	; 0x34
 800f912:	ecbd 8b06 	vpop	{d8-d10}
 800f916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91a:	f7ff b999 	b.w	800ec50 <nan>
 800f91e:	f1b9 0f00 	cmp.w	r9, #0
 800f922:	da36      	bge.n	800f992 <__ieee754_pow+0xda>
 800f924:	496e      	ldr	r1, [pc, #440]	; (800fae0 <__ieee754_pow+0x228>)
 800f926:	428e      	cmp	r6, r1
 800f928:	dc51      	bgt.n	800f9ce <__ieee754_pow+0x116>
 800f92a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800f92e:	428e      	cmp	r6, r1
 800f930:	f340 84af 	ble.w	8010292 <__ieee754_pow+0x9da>
 800f934:	1531      	asrs	r1, r6, #20
 800f936:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f93a:	2914      	cmp	r1, #20
 800f93c:	dd0f      	ble.n	800f95e <__ieee754_pow+0xa6>
 800f93e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800f942:	fa20 fc01 	lsr.w	ip, r0, r1
 800f946:	fa0c f101 	lsl.w	r1, ip, r1
 800f94a:	4281      	cmp	r1, r0
 800f94c:	f040 84a1 	bne.w	8010292 <__ieee754_pow+0x9da>
 800f950:	f00c 0c01 	and.w	ip, ip, #1
 800f954:	f1cc 0102 	rsb	r1, ip, #2
 800f958:	9100      	str	r1, [sp, #0]
 800f95a:	b180      	cbz	r0, 800f97e <__ieee754_pow+0xc6>
 800f95c:	e059      	b.n	800fa12 <__ieee754_pow+0x15a>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d155      	bne.n	800fa0e <__ieee754_pow+0x156>
 800f962:	f1c1 0114 	rsb	r1, r1, #20
 800f966:	fa46 fc01 	asr.w	ip, r6, r1
 800f96a:	fa0c f101 	lsl.w	r1, ip, r1
 800f96e:	42b1      	cmp	r1, r6
 800f970:	f040 848c 	bne.w	801028c <__ieee754_pow+0x9d4>
 800f974:	f00c 0c01 	and.w	ip, ip, #1
 800f978:	f1cc 0102 	rsb	r1, ip, #2
 800f97c:	9100      	str	r1, [sp, #0]
 800f97e:	4959      	ldr	r1, [pc, #356]	; (800fae4 <__ieee754_pow+0x22c>)
 800f980:	428e      	cmp	r6, r1
 800f982:	d12d      	bne.n	800f9e0 <__ieee754_pow+0x128>
 800f984:	2f00      	cmp	r7, #0
 800f986:	da79      	bge.n	800fa7c <__ieee754_pow+0x1c4>
 800f988:	4956      	ldr	r1, [pc, #344]	; (800fae4 <__ieee754_pow+0x22c>)
 800f98a:	2000      	movs	r0, #0
 800f98c:	f7f0 ff7e 	bl	800088c <__aeabi_ddiv>
 800f990:	e016      	b.n	800f9c0 <__ieee754_pow+0x108>
 800f992:	2100      	movs	r1, #0
 800f994:	9100      	str	r1, [sp, #0]
 800f996:	2800      	cmp	r0, #0
 800f998:	d13b      	bne.n	800fa12 <__ieee754_pow+0x15a>
 800f99a:	494f      	ldr	r1, [pc, #316]	; (800fad8 <__ieee754_pow+0x220>)
 800f99c:	428e      	cmp	r6, r1
 800f99e:	d1ee      	bne.n	800f97e <__ieee754_pow+0xc6>
 800f9a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f9a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f9a8:	ea53 0308 	orrs.w	r3, r3, r8
 800f9ac:	f000 8466 	beq.w	801027c <__ieee754_pow+0x9c4>
 800f9b0:	4b4d      	ldr	r3, [pc, #308]	; (800fae8 <__ieee754_pow+0x230>)
 800f9b2:	429c      	cmp	r4, r3
 800f9b4:	dd0d      	ble.n	800f9d2 <__ieee754_pow+0x11a>
 800f9b6:	2f00      	cmp	r7, #0
 800f9b8:	f280 8464 	bge.w	8010284 <__ieee754_pow+0x9cc>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	2100      	movs	r1, #0
 800f9c0:	ec41 0b10 	vmov	d0, r0, r1
 800f9c4:	b00d      	add	sp, #52	; 0x34
 800f9c6:	ecbd 8b06 	vpop	{d8-d10}
 800f9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ce:	2102      	movs	r1, #2
 800f9d0:	e7e0      	b.n	800f994 <__ieee754_pow+0xdc>
 800f9d2:	2f00      	cmp	r7, #0
 800f9d4:	daf2      	bge.n	800f9bc <__ieee754_pow+0x104>
 800f9d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800f9da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f9de:	e7ef      	b.n	800f9c0 <__ieee754_pow+0x108>
 800f9e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800f9e4:	d104      	bne.n	800f9f0 <__ieee754_pow+0x138>
 800f9e6:	4610      	mov	r0, r2
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	f7f0 fe25 	bl	8000638 <__aeabi_dmul>
 800f9ee:	e7e7      	b.n	800f9c0 <__ieee754_pow+0x108>
 800f9f0:	493e      	ldr	r1, [pc, #248]	; (800faec <__ieee754_pow+0x234>)
 800f9f2:	428f      	cmp	r7, r1
 800f9f4:	d10d      	bne.n	800fa12 <__ieee754_pow+0x15a>
 800f9f6:	f1b9 0f00 	cmp.w	r9, #0
 800f9fa:	db0a      	blt.n	800fa12 <__ieee754_pow+0x15a>
 800f9fc:	ec43 2b10 	vmov	d0, r2, r3
 800fa00:	b00d      	add	sp, #52	; 0x34
 800fa02:	ecbd 8b06 	vpop	{d8-d10}
 800fa06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0a:	f000 be83 	b.w	8010714 <__ieee754_sqrt>
 800fa0e:	2100      	movs	r1, #0
 800fa10:	9100      	str	r1, [sp, #0]
 800fa12:	ec43 2b10 	vmov	d0, r2, r3
 800fa16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa1a:	f001 fbf7 	bl	801120c <fabs>
 800fa1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa22:	ec51 0b10 	vmov	r0, r1, d0
 800fa26:	f1b8 0f00 	cmp.w	r8, #0
 800fa2a:	d12a      	bne.n	800fa82 <__ieee754_pow+0x1ca>
 800fa2c:	b12c      	cbz	r4, 800fa3a <__ieee754_pow+0x182>
 800fa2e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800fae4 <__ieee754_pow+0x22c>
 800fa32:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800fa36:	45e6      	cmp	lr, ip
 800fa38:	d123      	bne.n	800fa82 <__ieee754_pow+0x1ca>
 800fa3a:	2f00      	cmp	r7, #0
 800fa3c:	da05      	bge.n	800fa4a <__ieee754_pow+0x192>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	2000      	movs	r0, #0
 800fa44:	4927      	ldr	r1, [pc, #156]	; (800fae4 <__ieee754_pow+0x22c>)
 800fa46:	f7f0 ff21 	bl	800088c <__aeabi_ddiv>
 800fa4a:	f1b9 0f00 	cmp.w	r9, #0
 800fa4e:	dab7      	bge.n	800f9c0 <__ieee754_pow+0x108>
 800fa50:	9b00      	ldr	r3, [sp, #0]
 800fa52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fa56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fa5a:	4323      	orrs	r3, r4
 800fa5c:	d108      	bne.n	800fa70 <__ieee754_pow+0x1b8>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	460b      	mov	r3, r1
 800fa62:	4610      	mov	r0, r2
 800fa64:	4619      	mov	r1, r3
 800fa66:	f7f0 fc2f 	bl	80002c8 <__aeabi_dsub>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	e78d      	b.n	800f98c <__ieee754_pow+0xd4>
 800fa70:	9b00      	ldr	r3, [sp, #0]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d1a4      	bne.n	800f9c0 <__ieee754_pow+0x108>
 800fa76:	4602      	mov	r2, r0
 800fa78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa7c:	4610      	mov	r0, r2
 800fa7e:	4619      	mov	r1, r3
 800fa80:	e79e      	b.n	800f9c0 <__ieee754_pow+0x108>
 800fa82:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800fa86:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800fa8a:	950a      	str	r5, [sp, #40]	; 0x28
 800fa8c:	9d00      	ldr	r5, [sp, #0]
 800fa8e:	46ac      	mov	ip, r5
 800fa90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fa92:	ea5c 0505 	orrs.w	r5, ip, r5
 800fa96:	d0e4      	beq.n	800fa62 <__ieee754_pow+0x1aa>
 800fa98:	4b15      	ldr	r3, [pc, #84]	; (800faf0 <__ieee754_pow+0x238>)
 800fa9a:	429e      	cmp	r6, r3
 800fa9c:	f340 80fc 	ble.w	800fc98 <__ieee754_pow+0x3e0>
 800faa0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800faa4:	429e      	cmp	r6, r3
 800faa6:	4b10      	ldr	r3, [pc, #64]	; (800fae8 <__ieee754_pow+0x230>)
 800faa8:	dd07      	ble.n	800faba <__ieee754_pow+0x202>
 800faaa:	429c      	cmp	r4, r3
 800faac:	dc0a      	bgt.n	800fac4 <__ieee754_pow+0x20c>
 800faae:	2f00      	cmp	r7, #0
 800fab0:	da84      	bge.n	800f9bc <__ieee754_pow+0x104>
 800fab2:	a307      	add	r3, pc, #28	; (adr r3, 800fad0 <__ieee754_pow+0x218>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	e795      	b.n	800f9e6 <__ieee754_pow+0x12e>
 800faba:	429c      	cmp	r4, r3
 800fabc:	dbf7      	blt.n	800faae <__ieee754_pow+0x1f6>
 800fabe:	4b09      	ldr	r3, [pc, #36]	; (800fae4 <__ieee754_pow+0x22c>)
 800fac0:	429c      	cmp	r4, r3
 800fac2:	dd17      	ble.n	800faf4 <__ieee754_pow+0x23c>
 800fac4:	2f00      	cmp	r7, #0
 800fac6:	dcf4      	bgt.n	800fab2 <__ieee754_pow+0x1fa>
 800fac8:	e778      	b.n	800f9bc <__ieee754_pow+0x104>
 800faca:	bf00      	nop
 800facc:	f3af 8000 	nop.w
 800fad0:	8800759c 	.word	0x8800759c
 800fad4:	7e37e43c 	.word	0x7e37e43c
 800fad8:	7ff00000 	.word	0x7ff00000
 800fadc:	080119af 	.word	0x080119af
 800fae0:	433fffff 	.word	0x433fffff
 800fae4:	3ff00000 	.word	0x3ff00000
 800fae8:	3fefffff 	.word	0x3fefffff
 800faec:	3fe00000 	.word	0x3fe00000
 800faf0:	41e00000 	.word	0x41e00000
 800faf4:	4b64      	ldr	r3, [pc, #400]	; (800fc88 <__ieee754_pow+0x3d0>)
 800faf6:	2200      	movs	r2, #0
 800faf8:	f7f0 fbe6 	bl	80002c8 <__aeabi_dsub>
 800fafc:	a356      	add	r3, pc, #344	; (adr r3, 800fc58 <__ieee754_pow+0x3a0>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	4604      	mov	r4, r0
 800fb04:	460d      	mov	r5, r1
 800fb06:	f7f0 fd97 	bl	8000638 <__aeabi_dmul>
 800fb0a:	a355      	add	r3, pc, #340	; (adr r3, 800fc60 <__ieee754_pow+0x3a8>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	4606      	mov	r6, r0
 800fb12:	460f      	mov	r7, r1
 800fb14:	4620      	mov	r0, r4
 800fb16:	4629      	mov	r1, r5
 800fb18:	f7f0 fd8e 	bl	8000638 <__aeabi_dmul>
 800fb1c:	4b5b      	ldr	r3, [pc, #364]	; (800fc8c <__ieee754_pow+0x3d4>)
 800fb1e:	4682      	mov	sl, r0
 800fb20:	468b      	mov	fp, r1
 800fb22:	2200      	movs	r2, #0
 800fb24:	4620      	mov	r0, r4
 800fb26:	4629      	mov	r1, r5
 800fb28:	f7f0 fd86 	bl	8000638 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	a14d      	add	r1, pc, #308	; (adr r1, 800fc68 <__ieee754_pow+0x3b0>)
 800fb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb36:	f7f0 fbc7 	bl	80002c8 <__aeabi_dsub>
 800fb3a:	4622      	mov	r2, r4
 800fb3c:	462b      	mov	r3, r5
 800fb3e:	f7f0 fd7b 	bl	8000638 <__aeabi_dmul>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	2000      	movs	r0, #0
 800fb48:	4951      	ldr	r1, [pc, #324]	; (800fc90 <__ieee754_pow+0x3d8>)
 800fb4a:	f7f0 fbbd 	bl	80002c8 <__aeabi_dsub>
 800fb4e:	4622      	mov	r2, r4
 800fb50:	4680      	mov	r8, r0
 800fb52:	4689      	mov	r9, r1
 800fb54:	462b      	mov	r3, r5
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 fd6d 	bl	8000638 <__aeabi_dmul>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	4640      	mov	r0, r8
 800fb64:	4649      	mov	r1, r9
 800fb66:	f7f0 fd67 	bl	8000638 <__aeabi_dmul>
 800fb6a:	a341      	add	r3, pc, #260	; (adr r3, 800fc70 <__ieee754_pow+0x3b8>)
 800fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb70:	f7f0 fd62 	bl	8000638 <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4650      	mov	r0, sl
 800fb7a:	4659      	mov	r1, fp
 800fb7c:	f7f0 fba4 	bl	80002c8 <__aeabi_dsub>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4680      	mov	r8, r0
 800fb86:	4689      	mov	r9, r1
 800fb88:	4630      	mov	r0, r6
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7f0 fb9e 	bl	80002cc <__adddf3>
 800fb90:	2400      	movs	r4, #0
 800fb92:	4632      	mov	r2, r6
 800fb94:	463b      	mov	r3, r7
 800fb96:	4620      	mov	r0, r4
 800fb98:	460d      	mov	r5, r1
 800fb9a:	f7f0 fb95 	bl	80002c8 <__aeabi_dsub>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4640      	mov	r0, r8
 800fba4:	4649      	mov	r1, r9
 800fba6:	f7f0 fb8f 	bl	80002c8 <__aeabi_dsub>
 800fbaa:	9b00      	ldr	r3, [sp, #0]
 800fbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	4682      	mov	sl, r0
 800fbb4:	468b      	mov	fp, r1
 800fbb6:	f040 81f1 	bne.w	800ff9c <__ieee754_pow+0x6e4>
 800fbba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800fc78 <__ieee754_pow+0x3c0>
 800fbbe:	eeb0 8a47 	vmov.f32	s16, s14
 800fbc2:	eef0 8a67 	vmov.f32	s17, s15
 800fbc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbca:	2600      	movs	r6, #0
 800fbcc:	4632      	mov	r2, r6
 800fbce:	463b      	mov	r3, r7
 800fbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbd4:	f7f0 fb78 	bl	80002c8 <__aeabi_dsub>
 800fbd8:	4622      	mov	r2, r4
 800fbda:	462b      	mov	r3, r5
 800fbdc:	f7f0 fd2c 	bl	8000638 <__aeabi_dmul>
 800fbe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	4689      	mov	r9, r1
 800fbe8:	4650      	mov	r0, sl
 800fbea:	4659      	mov	r1, fp
 800fbec:	f7f0 fd24 	bl	8000638 <__aeabi_dmul>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4640      	mov	r0, r8
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	f7f0 fb68 	bl	80002cc <__adddf3>
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	463b      	mov	r3, r7
 800fc00:	4680      	mov	r8, r0
 800fc02:	4689      	mov	r9, r1
 800fc04:	4620      	mov	r0, r4
 800fc06:	4629      	mov	r1, r5
 800fc08:	f7f0 fd16 	bl	8000638 <__aeabi_dmul>
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	4604      	mov	r4, r0
 800fc10:	460d      	mov	r5, r1
 800fc12:	4602      	mov	r2, r0
 800fc14:	4649      	mov	r1, r9
 800fc16:	4640      	mov	r0, r8
 800fc18:	f7f0 fb58 	bl	80002cc <__adddf3>
 800fc1c:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <__ieee754_pow+0x3dc>)
 800fc1e:	4299      	cmp	r1, r3
 800fc20:	ec45 4b19 	vmov	d9, r4, r5
 800fc24:	4606      	mov	r6, r0
 800fc26:	460f      	mov	r7, r1
 800fc28:	468b      	mov	fp, r1
 800fc2a:	f340 82fe 	ble.w	801022a <__ieee754_pow+0x972>
 800fc2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fc32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fc36:	4303      	orrs	r3, r0
 800fc38:	f000 81f0 	beq.w	801001c <__ieee754_pow+0x764>
 800fc3c:	a310      	add	r3, pc, #64	; (adr r3, 800fc80 <__ieee754_pow+0x3c8>)
 800fc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc42:	ec51 0b18 	vmov	r0, r1, d8
 800fc46:	f7f0 fcf7 	bl	8000638 <__aeabi_dmul>
 800fc4a:	a30d      	add	r3, pc, #52	; (adr r3, 800fc80 <__ieee754_pow+0x3c8>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	e6cb      	b.n	800f9ea <__ieee754_pow+0x132>
 800fc52:	bf00      	nop
 800fc54:	f3af 8000 	nop.w
 800fc58:	60000000 	.word	0x60000000
 800fc5c:	3ff71547 	.word	0x3ff71547
 800fc60:	f85ddf44 	.word	0xf85ddf44
 800fc64:	3e54ae0b 	.word	0x3e54ae0b
 800fc68:	55555555 	.word	0x55555555
 800fc6c:	3fd55555 	.word	0x3fd55555
 800fc70:	652b82fe 	.word	0x652b82fe
 800fc74:	3ff71547 	.word	0x3ff71547
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	bff00000 	.word	0xbff00000
 800fc80:	8800759c 	.word	0x8800759c
 800fc84:	7e37e43c 	.word	0x7e37e43c
 800fc88:	3ff00000 	.word	0x3ff00000
 800fc8c:	3fd00000 	.word	0x3fd00000
 800fc90:	3fe00000 	.word	0x3fe00000
 800fc94:	408fffff 	.word	0x408fffff
 800fc98:	4bd7      	ldr	r3, [pc, #860]	; (800fff8 <__ieee754_pow+0x740>)
 800fc9a:	ea03 0309 	and.w	r3, r3, r9
 800fc9e:	2200      	movs	r2, #0
 800fca0:	b92b      	cbnz	r3, 800fcae <__ieee754_pow+0x3f6>
 800fca2:	4bd6      	ldr	r3, [pc, #856]	; (800fffc <__ieee754_pow+0x744>)
 800fca4:	f7f0 fcc8 	bl	8000638 <__aeabi_dmul>
 800fca8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fcac:	460c      	mov	r4, r1
 800fcae:	1523      	asrs	r3, r4, #20
 800fcb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fcb4:	4413      	add	r3, r2
 800fcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb8:	4bd1      	ldr	r3, [pc, #836]	; (8010000 <__ieee754_pow+0x748>)
 800fcba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fcbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fcc2:	429c      	cmp	r4, r3
 800fcc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fcc8:	dd08      	ble.n	800fcdc <__ieee754_pow+0x424>
 800fcca:	4bce      	ldr	r3, [pc, #824]	; (8010004 <__ieee754_pow+0x74c>)
 800fccc:	429c      	cmp	r4, r3
 800fcce:	f340 8163 	ble.w	800ff98 <__ieee754_pow+0x6e0>
 800fcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fcdc:	2400      	movs	r4, #0
 800fcde:	00e3      	lsls	r3, r4, #3
 800fce0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fce2:	4bc9      	ldr	r3, [pc, #804]	; (8010008 <__ieee754_pow+0x750>)
 800fce4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fce8:	ed93 7b00 	vldr	d7, [r3]
 800fcec:	4629      	mov	r1, r5
 800fcee:	ec53 2b17 	vmov	r2, r3, d7
 800fcf2:	eeb0 8a47 	vmov.f32	s16, s14
 800fcf6:	eef0 8a67 	vmov.f32	s17, s15
 800fcfa:	4682      	mov	sl, r0
 800fcfc:	f7f0 fae4 	bl	80002c8 <__aeabi_dsub>
 800fd00:	4652      	mov	r2, sl
 800fd02:	4606      	mov	r6, r0
 800fd04:	460f      	mov	r7, r1
 800fd06:	462b      	mov	r3, r5
 800fd08:	ec51 0b18 	vmov	r0, r1, d8
 800fd0c:	f7f0 fade 	bl	80002cc <__adddf3>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	2000      	movs	r0, #0
 800fd16:	49bd      	ldr	r1, [pc, #756]	; (801000c <__ieee754_pow+0x754>)
 800fd18:	f7f0 fdb8 	bl	800088c <__aeabi_ddiv>
 800fd1c:	ec41 0b19 	vmov	d9, r0, r1
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4630      	mov	r0, r6
 800fd26:	4639      	mov	r1, r7
 800fd28:	f7f0 fc86 	bl	8000638 <__aeabi_dmul>
 800fd2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fd30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd38:	2300      	movs	r3, #0
 800fd3a:	9304      	str	r3, [sp, #16]
 800fd3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fd40:	46ab      	mov	fp, r5
 800fd42:	106d      	asrs	r5, r5, #1
 800fd44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fd48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fd4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fd50:	2200      	movs	r2, #0
 800fd52:	4640      	mov	r0, r8
 800fd54:	4649      	mov	r1, r9
 800fd56:	4614      	mov	r4, r2
 800fd58:	461d      	mov	r5, r3
 800fd5a:	f7f0 fc6d 	bl	8000638 <__aeabi_dmul>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	f7f0 faaf 	bl	80002c8 <__aeabi_dsub>
 800fd6a:	ec53 2b18 	vmov	r2, r3, d8
 800fd6e:	4606      	mov	r6, r0
 800fd70:	460f      	mov	r7, r1
 800fd72:	4620      	mov	r0, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 faa7 	bl	80002c8 <__aeabi_dsub>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4650      	mov	r0, sl
 800fd80:	4659      	mov	r1, fp
 800fd82:	f7f0 faa1 	bl	80002c8 <__aeabi_dsub>
 800fd86:	4642      	mov	r2, r8
 800fd88:	464b      	mov	r3, r9
 800fd8a:	f7f0 fc55 	bl	8000638 <__aeabi_dmul>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4630      	mov	r0, r6
 800fd94:	4639      	mov	r1, r7
 800fd96:	f7f0 fa97 	bl	80002c8 <__aeabi_dsub>
 800fd9a:	ec53 2b19 	vmov	r2, r3, d9
 800fd9e:	f7f0 fc4b 	bl	8000638 <__aeabi_dmul>
 800fda2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fda6:	ec41 0b18 	vmov	d8, r0, r1
 800fdaa:	4610      	mov	r0, r2
 800fdac:	4619      	mov	r1, r3
 800fdae:	f7f0 fc43 	bl	8000638 <__aeabi_dmul>
 800fdb2:	a37d      	add	r3, pc, #500	; (adr r3, 800ffa8 <__ieee754_pow+0x6f0>)
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	f7f0 fc3c 	bl	8000638 <__aeabi_dmul>
 800fdc0:	a37b      	add	r3, pc, #492	; (adr r3, 800ffb0 <__ieee754_pow+0x6f8>)
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	f7f0 fa81 	bl	80002cc <__adddf3>
 800fdca:	4622      	mov	r2, r4
 800fdcc:	462b      	mov	r3, r5
 800fdce:	f7f0 fc33 	bl	8000638 <__aeabi_dmul>
 800fdd2:	a379      	add	r3, pc, #484	; (adr r3, 800ffb8 <__ieee754_pow+0x700>)
 800fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd8:	f7f0 fa78 	bl	80002cc <__adddf3>
 800fddc:	4622      	mov	r2, r4
 800fdde:	462b      	mov	r3, r5
 800fde0:	f7f0 fc2a 	bl	8000638 <__aeabi_dmul>
 800fde4:	a376      	add	r3, pc, #472	; (adr r3, 800ffc0 <__ieee754_pow+0x708>)
 800fde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdea:	f7f0 fa6f 	bl	80002cc <__adddf3>
 800fdee:	4622      	mov	r2, r4
 800fdf0:	462b      	mov	r3, r5
 800fdf2:	f7f0 fc21 	bl	8000638 <__aeabi_dmul>
 800fdf6:	a374      	add	r3, pc, #464	; (adr r3, 800ffc8 <__ieee754_pow+0x710>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f7f0 fa66 	bl	80002cc <__adddf3>
 800fe00:	4622      	mov	r2, r4
 800fe02:	462b      	mov	r3, r5
 800fe04:	f7f0 fc18 	bl	8000638 <__aeabi_dmul>
 800fe08:	a371      	add	r3, pc, #452	; (adr r3, 800ffd0 <__ieee754_pow+0x718>)
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	f7f0 fa5d 	bl	80002cc <__adddf3>
 800fe12:	4622      	mov	r2, r4
 800fe14:	4606      	mov	r6, r0
 800fe16:	460f      	mov	r7, r1
 800fe18:	462b      	mov	r3, r5
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	f7f0 fc0b 	bl	8000638 <__aeabi_dmul>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4630      	mov	r0, r6
 800fe28:	4639      	mov	r1, r7
 800fe2a:	f7f0 fc05 	bl	8000638 <__aeabi_dmul>
 800fe2e:	4642      	mov	r2, r8
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	464b      	mov	r3, r9
 800fe36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe3a:	f7f0 fa47 	bl	80002cc <__adddf3>
 800fe3e:	ec53 2b18 	vmov	r2, r3, d8
 800fe42:	f7f0 fbf9 	bl	8000638 <__aeabi_dmul>
 800fe46:	4622      	mov	r2, r4
 800fe48:	462b      	mov	r3, r5
 800fe4a:	f7f0 fa3f 	bl	80002cc <__adddf3>
 800fe4e:	4642      	mov	r2, r8
 800fe50:	4682      	mov	sl, r0
 800fe52:	468b      	mov	fp, r1
 800fe54:	464b      	mov	r3, r9
 800fe56:	4640      	mov	r0, r8
 800fe58:	4649      	mov	r1, r9
 800fe5a:	f7f0 fbed 	bl	8000638 <__aeabi_dmul>
 800fe5e:	4b6c      	ldr	r3, [pc, #432]	; (8010010 <__ieee754_pow+0x758>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	4606      	mov	r6, r0
 800fe64:	460f      	mov	r7, r1
 800fe66:	f7f0 fa31 	bl	80002cc <__adddf3>
 800fe6a:	4652      	mov	r2, sl
 800fe6c:	465b      	mov	r3, fp
 800fe6e:	f7f0 fa2d 	bl	80002cc <__adddf3>
 800fe72:	9c04      	ldr	r4, [sp, #16]
 800fe74:	460d      	mov	r5, r1
 800fe76:	4622      	mov	r2, r4
 800fe78:	460b      	mov	r3, r1
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	f7f0 fbdb 	bl	8000638 <__aeabi_dmul>
 800fe82:	4b63      	ldr	r3, [pc, #396]	; (8010010 <__ieee754_pow+0x758>)
 800fe84:	4680      	mov	r8, r0
 800fe86:	4689      	mov	r9, r1
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fa1b 	bl	80002c8 <__aeabi_dsub>
 800fe92:	4632      	mov	r2, r6
 800fe94:	463b      	mov	r3, r7
 800fe96:	f7f0 fa17 	bl	80002c8 <__aeabi_dsub>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	4650      	mov	r0, sl
 800fea0:	4659      	mov	r1, fp
 800fea2:	f7f0 fa11 	bl	80002c8 <__aeabi_dsub>
 800fea6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800feaa:	f7f0 fbc5 	bl	8000638 <__aeabi_dmul>
 800feae:	4622      	mov	r2, r4
 800feb0:	4606      	mov	r6, r0
 800feb2:	460f      	mov	r7, r1
 800feb4:	462b      	mov	r3, r5
 800feb6:	ec51 0b18 	vmov	r0, r1, d8
 800feba:	f7f0 fbbd 	bl	8000638 <__aeabi_dmul>
 800febe:	4602      	mov	r2, r0
 800fec0:	460b      	mov	r3, r1
 800fec2:	4630      	mov	r0, r6
 800fec4:	4639      	mov	r1, r7
 800fec6:	f7f0 fa01 	bl	80002cc <__adddf3>
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	4602      	mov	r2, r0
 800fed0:	460b      	mov	r3, r1
 800fed2:	4640      	mov	r0, r8
 800fed4:	4649      	mov	r1, r9
 800fed6:	f7f0 f9f9 	bl	80002cc <__adddf3>
 800feda:	9c04      	ldr	r4, [sp, #16]
 800fedc:	a33e      	add	r3, pc, #248	; (adr r3, 800ffd8 <__ieee754_pow+0x720>)
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	4620      	mov	r0, r4
 800fee4:	460d      	mov	r5, r1
 800fee6:	f7f0 fba7 	bl	8000638 <__aeabi_dmul>
 800feea:	4642      	mov	r2, r8
 800feec:	ec41 0b18 	vmov	d8, r0, r1
 800fef0:	464b      	mov	r3, r9
 800fef2:	4620      	mov	r0, r4
 800fef4:	4629      	mov	r1, r5
 800fef6:	f7f0 f9e7 	bl	80002c8 <__aeabi_dsub>
 800fefa:	4602      	mov	r2, r0
 800fefc:	460b      	mov	r3, r1
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 f9e1 	bl	80002c8 <__aeabi_dsub>
 800ff06:	a336      	add	r3, pc, #216	; (adr r3, 800ffe0 <__ieee754_pow+0x728>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	f7f0 fb94 	bl	8000638 <__aeabi_dmul>
 800ff10:	a335      	add	r3, pc, #212	; (adr r3, 800ffe8 <__ieee754_pow+0x730>)
 800ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff16:	4606      	mov	r6, r0
 800ff18:	460f      	mov	r7, r1
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	f7f0 fb8b 	bl	8000638 <__aeabi_dmul>
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4630      	mov	r0, r6
 800ff28:	4639      	mov	r1, r7
 800ff2a:	f7f0 f9cf 	bl	80002cc <__adddf3>
 800ff2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff30:	4b38      	ldr	r3, [pc, #224]	; (8010014 <__ieee754_pow+0x75c>)
 800ff32:	4413      	add	r3, r2
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f7f0 f9c8 	bl	80002cc <__adddf3>
 800ff3c:	4682      	mov	sl, r0
 800ff3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff40:	468b      	mov	fp, r1
 800ff42:	f7f0 fb0f 	bl	8000564 <__aeabi_i2d>
 800ff46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff48:	4b33      	ldr	r3, [pc, #204]	; (8010018 <__ieee754_pow+0x760>)
 800ff4a:	4413      	add	r3, r2
 800ff4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff50:	4606      	mov	r6, r0
 800ff52:	460f      	mov	r7, r1
 800ff54:	4652      	mov	r2, sl
 800ff56:	465b      	mov	r3, fp
 800ff58:	ec51 0b18 	vmov	r0, r1, d8
 800ff5c:	f7f0 f9b6 	bl	80002cc <__adddf3>
 800ff60:	4642      	mov	r2, r8
 800ff62:	464b      	mov	r3, r9
 800ff64:	f7f0 f9b2 	bl	80002cc <__adddf3>
 800ff68:	4632      	mov	r2, r6
 800ff6a:	463b      	mov	r3, r7
 800ff6c:	f7f0 f9ae 	bl	80002cc <__adddf3>
 800ff70:	9c04      	ldr	r4, [sp, #16]
 800ff72:	4632      	mov	r2, r6
 800ff74:	463b      	mov	r3, r7
 800ff76:	4620      	mov	r0, r4
 800ff78:	460d      	mov	r5, r1
 800ff7a:	f7f0 f9a5 	bl	80002c8 <__aeabi_dsub>
 800ff7e:	4642      	mov	r2, r8
 800ff80:	464b      	mov	r3, r9
 800ff82:	f7f0 f9a1 	bl	80002c8 <__aeabi_dsub>
 800ff86:	ec53 2b18 	vmov	r2, r3, d8
 800ff8a:	f7f0 f99d 	bl	80002c8 <__aeabi_dsub>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4650      	mov	r0, sl
 800ff94:	4659      	mov	r1, fp
 800ff96:	e606      	b.n	800fba6 <__ieee754_pow+0x2ee>
 800ff98:	2401      	movs	r4, #1
 800ff9a:	e6a0      	b.n	800fcde <__ieee754_pow+0x426>
 800ff9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800fff0 <__ieee754_pow+0x738>
 800ffa0:	e60d      	b.n	800fbbe <__ieee754_pow+0x306>
 800ffa2:	bf00      	nop
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	4a454eef 	.word	0x4a454eef
 800ffac:	3fca7e28 	.word	0x3fca7e28
 800ffb0:	93c9db65 	.word	0x93c9db65
 800ffb4:	3fcd864a 	.word	0x3fcd864a
 800ffb8:	a91d4101 	.word	0xa91d4101
 800ffbc:	3fd17460 	.word	0x3fd17460
 800ffc0:	518f264d 	.word	0x518f264d
 800ffc4:	3fd55555 	.word	0x3fd55555
 800ffc8:	db6fabff 	.word	0xdb6fabff
 800ffcc:	3fdb6db6 	.word	0x3fdb6db6
 800ffd0:	33333303 	.word	0x33333303
 800ffd4:	3fe33333 	.word	0x3fe33333
 800ffd8:	e0000000 	.word	0xe0000000
 800ffdc:	3feec709 	.word	0x3feec709
 800ffe0:	dc3a03fd 	.word	0xdc3a03fd
 800ffe4:	3feec709 	.word	0x3feec709
 800ffe8:	145b01f5 	.word	0x145b01f5
 800ffec:	be3e2fe0 	.word	0xbe3e2fe0
 800fff0:	00000000 	.word	0x00000000
 800fff4:	3ff00000 	.word	0x3ff00000
 800fff8:	7ff00000 	.word	0x7ff00000
 800fffc:	43400000 	.word	0x43400000
 8010000:	0003988e 	.word	0x0003988e
 8010004:	000bb679 	.word	0x000bb679
 8010008:	08011ae8 	.word	0x08011ae8
 801000c:	3ff00000 	.word	0x3ff00000
 8010010:	40080000 	.word	0x40080000
 8010014:	08011b08 	.word	0x08011b08
 8010018:	08011af8 	.word	0x08011af8
 801001c:	a3b5      	add	r3, pc, #724	; (adr r3, 80102f4 <__ieee754_pow+0xa3c>)
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	4640      	mov	r0, r8
 8010024:	4649      	mov	r1, r9
 8010026:	f7f0 f951 	bl	80002cc <__adddf3>
 801002a:	4622      	mov	r2, r4
 801002c:	ec41 0b1a 	vmov	d10, r0, r1
 8010030:	462b      	mov	r3, r5
 8010032:	4630      	mov	r0, r6
 8010034:	4639      	mov	r1, r7
 8010036:	f7f0 f947 	bl	80002c8 <__aeabi_dsub>
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	ec51 0b1a 	vmov	r0, r1, d10
 8010042:	f7f0 fd89 	bl	8000b58 <__aeabi_dcmpgt>
 8010046:	2800      	cmp	r0, #0
 8010048:	f47f adf8 	bne.w	800fc3c <__ieee754_pow+0x384>
 801004c:	4aa4      	ldr	r2, [pc, #656]	; (80102e0 <__ieee754_pow+0xa28>)
 801004e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010052:	4293      	cmp	r3, r2
 8010054:	f340 810b 	ble.w	801026e <__ieee754_pow+0x9b6>
 8010058:	151b      	asrs	r3, r3, #20
 801005a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801005e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010062:	fa4a f303 	asr.w	r3, sl, r3
 8010066:	445b      	add	r3, fp
 8010068:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801006c:	4e9d      	ldr	r6, [pc, #628]	; (80102e4 <__ieee754_pow+0xa2c>)
 801006e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010072:	4116      	asrs	r6, r2
 8010074:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010078:	2000      	movs	r0, #0
 801007a:	ea23 0106 	bic.w	r1, r3, r6
 801007e:	f1c2 0214 	rsb	r2, r2, #20
 8010082:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010086:	fa4a fa02 	asr.w	sl, sl, r2
 801008a:	f1bb 0f00 	cmp.w	fp, #0
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	4620      	mov	r0, r4
 8010094:	4629      	mov	r1, r5
 8010096:	bfb8      	it	lt
 8010098:	f1ca 0a00 	rsblt	sl, sl, #0
 801009c:	f7f0 f914 	bl	80002c8 <__aeabi_dsub>
 80100a0:	ec41 0b19 	vmov	d9, r0, r1
 80100a4:	4642      	mov	r2, r8
 80100a6:	464b      	mov	r3, r9
 80100a8:	ec51 0b19 	vmov	r0, r1, d9
 80100ac:	f7f0 f90e 	bl	80002cc <__adddf3>
 80100b0:	2400      	movs	r4, #0
 80100b2:	a379      	add	r3, pc, #484	; (adr r3, 8010298 <__ieee754_pow+0x9e0>)
 80100b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b8:	4620      	mov	r0, r4
 80100ba:	460d      	mov	r5, r1
 80100bc:	f7f0 fabc 	bl	8000638 <__aeabi_dmul>
 80100c0:	ec53 2b19 	vmov	r2, r3, d9
 80100c4:	4606      	mov	r6, r0
 80100c6:	460f      	mov	r7, r1
 80100c8:	4620      	mov	r0, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	f7f0 f8fc 	bl	80002c8 <__aeabi_dsub>
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	4640      	mov	r0, r8
 80100d6:	4649      	mov	r1, r9
 80100d8:	f7f0 f8f6 	bl	80002c8 <__aeabi_dsub>
 80100dc:	a370      	add	r3, pc, #448	; (adr r3, 80102a0 <__ieee754_pow+0x9e8>)
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	f7f0 faa9 	bl	8000638 <__aeabi_dmul>
 80100e6:	a370      	add	r3, pc, #448	; (adr r3, 80102a8 <__ieee754_pow+0x9f0>)
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	4680      	mov	r8, r0
 80100ee:	4689      	mov	r9, r1
 80100f0:	4620      	mov	r0, r4
 80100f2:	4629      	mov	r1, r5
 80100f4:	f7f0 faa0 	bl	8000638 <__aeabi_dmul>
 80100f8:	4602      	mov	r2, r0
 80100fa:	460b      	mov	r3, r1
 80100fc:	4640      	mov	r0, r8
 80100fe:	4649      	mov	r1, r9
 8010100:	f7f0 f8e4 	bl	80002cc <__adddf3>
 8010104:	4604      	mov	r4, r0
 8010106:	460d      	mov	r5, r1
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	4630      	mov	r0, r6
 801010e:	4639      	mov	r1, r7
 8010110:	f7f0 f8dc 	bl	80002cc <__adddf3>
 8010114:	4632      	mov	r2, r6
 8010116:	463b      	mov	r3, r7
 8010118:	4680      	mov	r8, r0
 801011a:	4689      	mov	r9, r1
 801011c:	f7f0 f8d4 	bl	80002c8 <__aeabi_dsub>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4620      	mov	r0, r4
 8010126:	4629      	mov	r1, r5
 8010128:	f7f0 f8ce 	bl	80002c8 <__aeabi_dsub>
 801012c:	4642      	mov	r2, r8
 801012e:	4606      	mov	r6, r0
 8010130:	460f      	mov	r7, r1
 8010132:	464b      	mov	r3, r9
 8010134:	4640      	mov	r0, r8
 8010136:	4649      	mov	r1, r9
 8010138:	f7f0 fa7e 	bl	8000638 <__aeabi_dmul>
 801013c:	a35c      	add	r3, pc, #368	; (adr r3, 80102b0 <__ieee754_pow+0x9f8>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	4604      	mov	r4, r0
 8010144:	460d      	mov	r5, r1
 8010146:	f7f0 fa77 	bl	8000638 <__aeabi_dmul>
 801014a:	a35b      	add	r3, pc, #364	; (adr r3, 80102b8 <__ieee754_pow+0xa00>)
 801014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010150:	f7f0 f8ba 	bl	80002c8 <__aeabi_dsub>
 8010154:	4622      	mov	r2, r4
 8010156:	462b      	mov	r3, r5
 8010158:	f7f0 fa6e 	bl	8000638 <__aeabi_dmul>
 801015c:	a358      	add	r3, pc, #352	; (adr r3, 80102c0 <__ieee754_pow+0xa08>)
 801015e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010162:	f7f0 f8b3 	bl	80002cc <__adddf3>
 8010166:	4622      	mov	r2, r4
 8010168:	462b      	mov	r3, r5
 801016a:	f7f0 fa65 	bl	8000638 <__aeabi_dmul>
 801016e:	a356      	add	r3, pc, #344	; (adr r3, 80102c8 <__ieee754_pow+0xa10>)
 8010170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010174:	f7f0 f8a8 	bl	80002c8 <__aeabi_dsub>
 8010178:	4622      	mov	r2, r4
 801017a:	462b      	mov	r3, r5
 801017c:	f7f0 fa5c 	bl	8000638 <__aeabi_dmul>
 8010180:	a353      	add	r3, pc, #332	; (adr r3, 80102d0 <__ieee754_pow+0xa18>)
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	f7f0 f8a1 	bl	80002cc <__adddf3>
 801018a:	4622      	mov	r2, r4
 801018c:	462b      	mov	r3, r5
 801018e:	f7f0 fa53 	bl	8000638 <__aeabi_dmul>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4640      	mov	r0, r8
 8010198:	4649      	mov	r1, r9
 801019a:	f7f0 f895 	bl	80002c8 <__aeabi_dsub>
 801019e:	4604      	mov	r4, r0
 80101a0:	460d      	mov	r5, r1
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4640      	mov	r0, r8
 80101a8:	4649      	mov	r1, r9
 80101aa:	f7f0 fa45 	bl	8000638 <__aeabi_dmul>
 80101ae:	2200      	movs	r2, #0
 80101b0:	ec41 0b19 	vmov	d9, r0, r1
 80101b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101b8:	4620      	mov	r0, r4
 80101ba:	4629      	mov	r1, r5
 80101bc:	f7f0 f884 	bl	80002c8 <__aeabi_dsub>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	ec51 0b19 	vmov	r0, r1, d9
 80101c8:	f7f0 fb60 	bl	800088c <__aeabi_ddiv>
 80101cc:	4632      	mov	r2, r6
 80101ce:	4604      	mov	r4, r0
 80101d0:	460d      	mov	r5, r1
 80101d2:	463b      	mov	r3, r7
 80101d4:	4640      	mov	r0, r8
 80101d6:	4649      	mov	r1, r9
 80101d8:	f7f0 fa2e 	bl	8000638 <__aeabi_dmul>
 80101dc:	4632      	mov	r2, r6
 80101de:	463b      	mov	r3, r7
 80101e0:	f7f0 f874 	bl	80002cc <__adddf3>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4620      	mov	r0, r4
 80101ea:	4629      	mov	r1, r5
 80101ec:	f7f0 f86c 	bl	80002c8 <__aeabi_dsub>
 80101f0:	4642      	mov	r2, r8
 80101f2:	464b      	mov	r3, r9
 80101f4:	f7f0 f868 	bl	80002c8 <__aeabi_dsub>
 80101f8:	460b      	mov	r3, r1
 80101fa:	4602      	mov	r2, r0
 80101fc:	493a      	ldr	r1, [pc, #232]	; (80102e8 <__ieee754_pow+0xa30>)
 80101fe:	2000      	movs	r0, #0
 8010200:	f7f0 f862 	bl	80002c8 <__aeabi_dsub>
 8010204:	e9cd 0100 	strd	r0, r1, [sp]
 8010208:	9b01      	ldr	r3, [sp, #4]
 801020a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801020e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010212:	da2f      	bge.n	8010274 <__ieee754_pow+0x9bc>
 8010214:	4650      	mov	r0, sl
 8010216:	ed9d 0b00 	vldr	d0, [sp]
 801021a:	f001 f919 	bl	8011450 <scalbn>
 801021e:	ec51 0b10 	vmov	r0, r1, d0
 8010222:	ec53 2b18 	vmov	r2, r3, d8
 8010226:	f7ff bbe0 	b.w	800f9ea <__ieee754_pow+0x132>
 801022a:	4b30      	ldr	r3, [pc, #192]	; (80102ec <__ieee754_pow+0xa34>)
 801022c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010230:	429e      	cmp	r6, r3
 8010232:	f77f af0b 	ble.w	801004c <__ieee754_pow+0x794>
 8010236:	4b2e      	ldr	r3, [pc, #184]	; (80102f0 <__ieee754_pow+0xa38>)
 8010238:	440b      	add	r3, r1
 801023a:	4303      	orrs	r3, r0
 801023c:	d00b      	beq.n	8010256 <__ieee754_pow+0x99e>
 801023e:	a326      	add	r3, pc, #152	; (adr r3, 80102d8 <__ieee754_pow+0xa20>)
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	ec51 0b18 	vmov	r0, r1, d8
 8010248:	f7f0 f9f6 	bl	8000638 <__aeabi_dmul>
 801024c:	a322      	add	r3, pc, #136	; (adr r3, 80102d8 <__ieee754_pow+0xa20>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	f7ff bbca 	b.w	800f9ea <__ieee754_pow+0x132>
 8010256:	4622      	mov	r2, r4
 8010258:	462b      	mov	r3, r5
 801025a:	f7f0 f835 	bl	80002c8 <__aeabi_dsub>
 801025e:	4642      	mov	r2, r8
 8010260:	464b      	mov	r3, r9
 8010262:	f7f0 fc6f 	bl	8000b44 <__aeabi_dcmpge>
 8010266:	2800      	cmp	r0, #0
 8010268:	f43f aef0 	beq.w	801004c <__ieee754_pow+0x794>
 801026c:	e7e7      	b.n	801023e <__ieee754_pow+0x986>
 801026e:	f04f 0a00 	mov.w	sl, #0
 8010272:	e717      	b.n	80100a4 <__ieee754_pow+0x7ec>
 8010274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010278:	4619      	mov	r1, r3
 801027a:	e7d2      	b.n	8010222 <__ieee754_pow+0x96a>
 801027c:	491a      	ldr	r1, [pc, #104]	; (80102e8 <__ieee754_pow+0xa30>)
 801027e:	2000      	movs	r0, #0
 8010280:	f7ff bb9e 	b.w	800f9c0 <__ieee754_pow+0x108>
 8010284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010288:	f7ff bb9a 	b.w	800f9c0 <__ieee754_pow+0x108>
 801028c:	9000      	str	r0, [sp, #0]
 801028e:	f7ff bb76 	b.w	800f97e <__ieee754_pow+0xc6>
 8010292:	2100      	movs	r1, #0
 8010294:	f7ff bb60 	b.w	800f958 <__ieee754_pow+0xa0>
 8010298:	00000000 	.word	0x00000000
 801029c:	3fe62e43 	.word	0x3fe62e43
 80102a0:	fefa39ef 	.word	0xfefa39ef
 80102a4:	3fe62e42 	.word	0x3fe62e42
 80102a8:	0ca86c39 	.word	0x0ca86c39
 80102ac:	be205c61 	.word	0xbe205c61
 80102b0:	72bea4d0 	.word	0x72bea4d0
 80102b4:	3e663769 	.word	0x3e663769
 80102b8:	c5d26bf1 	.word	0xc5d26bf1
 80102bc:	3ebbbd41 	.word	0x3ebbbd41
 80102c0:	af25de2c 	.word	0xaf25de2c
 80102c4:	3f11566a 	.word	0x3f11566a
 80102c8:	16bebd93 	.word	0x16bebd93
 80102cc:	3f66c16c 	.word	0x3f66c16c
 80102d0:	5555553e 	.word	0x5555553e
 80102d4:	3fc55555 	.word	0x3fc55555
 80102d8:	c2f8f359 	.word	0xc2f8f359
 80102dc:	01a56e1f 	.word	0x01a56e1f
 80102e0:	3fe00000 	.word	0x3fe00000
 80102e4:	000fffff 	.word	0x000fffff
 80102e8:	3ff00000 	.word	0x3ff00000
 80102ec:	4090cbff 	.word	0x4090cbff
 80102f0:	3f6f3400 	.word	0x3f6f3400
 80102f4:	652b82fe 	.word	0x652b82fe
 80102f8:	3c971547 	.word	0x3c971547
 80102fc:	00000000 	.word	0x00000000

08010300 <__ieee754_rem_pio2>:
 8010300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	ed2d 8b02 	vpush	{d8}
 8010308:	ec55 4b10 	vmov	r4, r5, d0
 801030c:	4bca      	ldr	r3, [pc, #808]	; (8010638 <__ieee754_rem_pio2+0x338>)
 801030e:	b08b      	sub	sp, #44	; 0x2c
 8010310:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010314:	4598      	cmp	r8, r3
 8010316:	4682      	mov	sl, r0
 8010318:	9502      	str	r5, [sp, #8]
 801031a:	dc08      	bgt.n	801032e <__ieee754_rem_pio2+0x2e>
 801031c:	2200      	movs	r2, #0
 801031e:	2300      	movs	r3, #0
 8010320:	ed80 0b00 	vstr	d0, [r0]
 8010324:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010328:	f04f 0b00 	mov.w	fp, #0
 801032c:	e028      	b.n	8010380 <__ieee754_rem_pio2+0x80>
 801032e:	4bc3      	ldr	r3, [pc, #780]	; (801063c <__ieee754_rem_pio2+0x33c>)
 8010330:	4598      	cmp	r8, r3
 8010332:	dc78      	bgt.n	8010426 <__ieee754_rem_pio2+0x126>
 8010334:	9b02      	ldr	r3, [sp, #8]
 8010336:	4ec2      	ldr	r6, [pc, #776]	; (8010640 <__ieee754_rem_pio2+0x340>)
 8010338:	2b00      	cmp	r3, #0
 801033a:	ee10 0a10 	vmov	r0, s0
 801033e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010600 <__ieee754_rem_pio2+0x300>)
 8010340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010344:	4629      	mov	r1, r5
 8010346:	dd39      	ble.n	80103bc <__ieee754_rem_pio2+0xbc>
 8010348:	f7ef ffbe 	bl	80002c8 <__aeabi_dsub>
 801034c:	45b0      	cmp	r8, r6
 801034e:	4604      	mov	r4, r0
 8010350:	460d      	mov	r5, r1
 8010352:	d01b      	beq.n	801038c <__ieee754_rem_pio2+0x8c>
 8010354:	a3ac      	add	r3, pc, #688	; (adr r3, 8010608 <__ieee754_rem_pio2+0x308>)
 8010356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035a:	f7ef ffb5 	bl	80002c8 <__aeabi_dsub>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	e9ca 2300 	strd	r2, r3, [sl]
 8010366:	4620      	mov	r0, r4
 8010368:	4629      	mov	r1, r5
 801036a:	f7ef ffad 	bl	80002c8 <__aeabi_dsub>
 801036e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010608 <__ieee754_rem_pio2+0x308>)
 8010370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010374:	f7ef ffa8 	bl	80002c8 <__aeabi_dsub>
 8010378:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801037c:	f04f 0b01 	mov.w	fp, #1
 8010380:	4658      	mov	r0, fp
 8010382:	b00b      	add	sp, #44	; 0x2c
 8010384:	ecbd 8b02 	vpop	{d8}
 8010388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801038c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010610 <__ieee754_rem_pio2+0x310>)
 801038e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010392:	f7ef ff99 	bl	80002c8 <__aeabi_dsub>
 8010396:	a3a0      	add	r3, pc, #640	; (adr r3, 8010618 <__ieee754_rem_pio2+0x318>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	4604      	mov	r4, r0
 801039e:	460d      	mov	r5, r1
 80103a0:	f7ef ff92 	bl	80002c8 <__aeabi_dsub>
 80103a4:	4602      	mov	r2, r0
 80103a6:	460b      	mov	r3, r1
 80103a8:	e9ca 2300 	strd	r2, r3, [sl]
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7ef ff8a 	bl	80002c8 <__aeabi_dsub>
 80103b4:	a398      	add	r3, pc, #608	; (adr r3, 8010618 <__ieee754_rem_pio2+0x318>)
 80103b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ba:	e7db      	b.n	8010374 <__ieee754_rem_pio2+0x74>
 80103bc:	f7ef ff86 	bl	80002cc <__adddf3>
 80103c0:	45b0      	cmp	r8, r6
 80103c2:	4604      	mov	r4, r0
 80103c4:	460d      	mov	r5, r1
 80103c6:	d016      	beq.n	80103f6 <__ieee754_rem_pio2+0xf6>
 80103c8:	a38f      	add	r3, pc, #572	; (adr r3, 8010608 <__ieee754_rem_pio2+0x308>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	f7ef ff7d 	bl	80002cc <__adddf3>
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	e9ca 2300 	strd	r2, r3, [sl]
 80103da:	4620      	mov	r0, r4
 80103dc:	4629      	mov	r1, r5
 80103de:	f7ef ff73 	bl	80002c8 <__aeabi_dsub>
 80103e2:	a389      	add	r3, pc, #548	; (adr r3, 8010608 <__ieee754_rem_pio2+0x308>)
 80103e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e8:	f7ef ff70 	bl	80002cc <__adddf3>
 80103ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80103f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80103f4:	e7c4      	b.n	8010380 <__ieee754_rem_pio2+0x80>
 80103f6:	a386      	add	r3, pc, #536	; (adr r3, 8010610 <__ieee754_rem_pio2+0x310>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7ef ff66 	bl	80002cc <__adddf3>
 8010400:	a385      	add	r3, pc, #532	; (adr r3, 8010618 <__ieee754_rem_pio2+0x318>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	4604      	mov	r4, r0
 8010408:	460d      	mov	r5, r1
 801040a:	f7ef ff5f 	bl	80002cc <__adddf3>
 801040e:	4602      	mov	r2, r0
 8010410:	460b      	mov	r3, r1
 8010412:	e9ca 2300 	strd	r2, r3, [sl]
 8010416:	4620      	mov	r0, r4
 8010418:	4629      	mov	r1, r5
 801041a:	f7ef ff55 	bl	80002c8 <__aeabi_dsub>
 801041e:	a37e      	add	r3, pc, #504	; (adr r3, 8010618 <__ieee754_rem_pio2+0x318>)
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	e7e0      	b.n	80103e8 <__ieee754_rem_pio2+0xe8>
 8010426:	4b87      	ldr	r3, [pc, #540]	; (8010644 <__ieee754_rem_pio2+0x344>)
 8010428:	4598      	cmp	r8, r3
 801042a:	f300 80d9 	bgt.w	80105e0 <__ieee754_rem_pio2+0x2e0>
 801042e:	f000 feed 	bl	801120c <fabs>
 8010432:	ec55 4b10 	vmov	r4, r5, d0
 8010436:	ee10 0a10 	vmov	r0, s0
 801043a:	a379      	add	r3, pc, #484	; (adr r3, 8010620 <__ieee754_rem_pio2+0x320>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	4629      	mov	r1, r5
 8010442:	f7f0 f8f9 	bl	8000638 <__aeabi_dmul>
 8010446:	4b80      	ldr	r3, [pc, #512]	; (8010648 <__ieee754_rem_pio2+0x348>)
 8010448:	2200      	movs	r2, #0
 801044a:	f7ef ff3f 	bl	80002cc <__adddf3>
 801044e:	f7f0 fba3 	bl	8000b98 <__aeabi_d2iz>
 8010452:	4683      	mov	fp, r0
 8010454:	f7f0 f886 	bl	8000564 <__aeabi_i2d>
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	ec43 2b18 	vmov	d8, r2, r3
 8010460:	a367      	add	r3, pc, #412	; (adr r3, 8010600 <__ieee754_rem_pio2+0x300>)
 8010462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010466:	f7f0 f8e7 	bl	8000638 <__aeabi_dmul>
 801046a:	4602      	mov	r2, r0
 801046c:	460b      	mov	r3, r1
 801046e:	4620      	mov	r0, r4
 8010470:	4629      	mov	r1, r5
 8010472:	f7ef ff29 	bl	80002c8 <__aeabi_dsub>
 8010476:	a364      	add	r3, pc, #400	; (adr r3, 8010608 <__ieee754_rem_pio2+0x308>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	4606      	mov	r6, r0
 801047e:	460f      	mov	r7, r1
 8010480:	ec51 0b18 	vmov	r0, r1, d8
 8010484:	f7f0 f8d8 	bl	8000638 <__aeabi_dmul>
 8010488:	f1bb 0f1f 	cmp.w	fp, #31
 801048c:	4604      	mov	r4, r0
 801048e:	460d      	mov	r5, r1
 8010490:	dc0d      	bgt.n	80104ae <__ieee754_rem_pio2+0x1ae>
 8010492:	4b6e      	ldr	r3, [pc, #440]	; (801064c <__ieee754_rem_pio2+0x34c>)
 8010494:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801049c:	4543      	cmp	r3, r8
 801049e:	d006      	beq.n	80104ae <__ieee754_rem_pio2+0x1ae>
 80104a0:	4622      	mov	r2, r4
 80104a2:	462b      	mov	r3, r5
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7ef ff0e 	bl	80002c8 <__aeabi_dsub>
 80104ac:	e00f      	b.n	80104ce <__ieee754_rem_pio2+0x1ce>
 80104ae:	462b      	mov	r3, r5
 80104b0:	4622      	mov	r2, r4
 80104b2:	4630      	mov	r0, r6
 80104b4:	4639      	mov	r1, r7
 80104b6:	f7ef ff07 	bl	80002c8 <__aeabi_dsub>
 80104ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80104be:	9303      	str	r3, [sp, #12]
 80104c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80104c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80104c8:	f1b8 0f10 	cmp.w	r8, #16
 80104cc:	dc02      	bgt.n	80104d4 <__ieee754_rem_pio2+0x1d4>
 80104ce:	e9ca 0100 	strd	r0, r1, [sl]
 80104d2:	e039      	b.n	8010548 <__ieee754_rem_pio2+0x248>
 80104d4:	a34e      	add	r3, pc, #312	; (adr r3, 8010610 <__ieee754_rem_pio2+0x310>)
 80104d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104da:	ec51 0b18 	vmov	r0, r1, d8
 80104de:	f7f0 f8ab 	bl	8000638 <__aeabi_dmul>
 80104e2:	4604      	mov	r4, r0
 80104e4:	460d      	mov	r5, r1
 80104e6:	4602      	mov	r2, r0
 80104e8:	460b      	mov	r3, r1
 80104ea:	4630      	mov	r0, r6
 80104ec:	4639      	mov	r1, r7
 80104ee:	f7ef feeb 	bl	80002c8 <__aeabi_dsub>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	4680      	mov	r8, r0
 80104f8:	4689      	mov	r9, r1
 80104fa:	4630      	mov	r0, r6
 80104fc:	4639      	mov	r1, r7
 80104fe:	f7ef fee3 	bl	80002c8 <__aeabi_dsub>
 8010502:	4622      	mov	r2, r4
 8010504:	462b      	mov	r3, r5
 8010506:	f7ef fedf 	bl	80002c8 <__aeabi_dsub>
 801050a:	a343      	add	r3, pc, #268	; (adr r3, 8010618 <__ieee754_rem_pio2+0x318>)
 801050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	ec51 0b18 	vmov	r0, r1, d8
 8010518:	f7f0 f88e 	bl	8000638 <__aeabi_dmul>
 801051c:	4622      	mov	r2, r4
 801051e:	462b      	mov	r3, r5
 8010520:	f7ef fed2 	bl	80002c8 <__aeabi_dsub>
 8010524:	4602      	mov	r2, r0
 8010526:	460b      	mov	r3, r1
 8010528:	4604      	mov	r4, r0
 801052a:	460d      	mov	r5, r1
 801052c:	4640      	mov	r0, r8
 801052e:	4649      	mov	r1, r9
 8010530:	f7ef feca 	bl	80002c8 <__aeabi_dsub>
 8010534:	9a03      	ldr	r2, [sp, #12]
 8010536:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	2b31      	cmp	r3, #49	; 0x31
 801053e:	dc24      	bgt.n	801058a <__ieee754_rem_pio2+0x28a>
 8010540:	e9ca 0100 	strd	r0, r1, [sl]
 8010544:	4646      	mov	r6, r8
 8010546:	464f      	mov	r7, r9
 8010548:	e9da 8900 	ldrd	r8, r9, [sl]
 801054c:	4630      	mov	r0, r6
 801054e:	4642      	mov	r2, r8
 8010550:	464b      	mov	r3, r9
 8010552:	4639      	mov	r1, r7
 8010554:	f7ef feb8 	bl	80002c8 <__aeabi_dsub>
 8010558:	462b      	mov	r3, r5
 801055a:	4622      	mov	r2, r4
 801055c:	f7ef feb4 	bl	80002c8 <__aeabi_dsub>
 8010560:	9b02      	ldr	r3, [sp, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010568:	f6bf af0a 	bge.w	8010380 <__ieee754_rem_pio2+0x80>
 801056c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010570:	f8ca 3004 	str.w	r3, [sl, #4]
 8010574:	f8ca 8000 	str.w	r8, [sl]
 8010578:	f8ca 0008 	str.w	r0, [sl, #8]
 801057c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010580:	f8ca 300c 	str.w	r3, [sl, #12]
 8010584:	f1cb 0b00 	rsb	fp, fp, #0
 8010588:	e6fa      	b.n	8010380 <__ieee754_rem_pio2+0x80>
 801058a:	a327      	add	r3, pc, #156	; (adr r3, 8010628 <__ieee754_rem_pio2+0x328>)
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	ec51 0b18 	vmov	r0, r1, d8
 8010594:	f7f0 f850 	bl	8000638 <__aeabi_dmul>
 8010598:	4604      	mov	r4, r0
 801059a:	460d      	mov	r5, r1
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	4640      	mov	r0, r8
 80105a2:	4649      	mov	r1, r9
 80105a4:	f7ef fe90 	bl	80002c8 <__aeabi_dsub>
 80105a8:	4602      	mov	r2, r0
 80105aa:	460b      	mov	r3, r1
 80105ac:	4606      	mov	r6, r0
 80105ae:	460f      	mov	r7, r1
 80105b0:	4640      	mov	r0, r8
 80105b2:	4649      	mov	r1, r9
 80105b4:	f7ef fe88 	bl	80002c8 <__aeabi_dsub>
 80105b8:	4622      	mov	r2, r4
 80105ba:	462b      	mov	r3, r5
 80105bc:	f7ef fe84 	bl	80002c8 <__aeabi_dsub>
 80105c0:	a31b      	add	r3, pc, #108	; (adr r3, 8010630 <__ieee754_rem_pio2+0x330>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	4604      	mov	r4, r0
 80105c8:	460d      	mov	r5, r1
 80105ca:	ec51 0b18 	vmov	r0, r1, d8
 80105ce:	f7f0 f833 	bl	8000638 <__aeabi_dmul>
 80105d2:	4622      	mov	r2, r4
 80105d4:	462b      	mov	r3, r5
 80105d6:	f7ef fe77 	bl	80002c8 <__aeabi_dsub>
 80105da:	4604      	mov	r4, r0
 80105dc:	460d      	mov	r5, r1
 80105de:	e75f      	b.n	80104a0 <__ieee754_rem_pio2+0x1a0>
 80105e0:	4b1b      	ldr	r3, [pc, #108]	; (8010650 <__ieee754_rem_pio2+0x350>)
 80105e2:	4598      	cmp	r8, r3
 80105e4:	dd36      	ble.n	8010654 <__ieee754_rem_pio2+0x354>
 80105e6:	ee10 2a10 	vmov	r2, s0
 80105ea:	462b      	mov	r3, r5
 80105ec:	4620      	mov	r0, r4
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7ef fe6a 	bl	80002c8 <__aeabi_dsub>
 80105f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80105f8:	e9ca 0100 	strd	r0, r1, [sl]
 80105fc:	e694      	b.n	8010328 <__ieee754_rem_pio2+0x28>
 80105fe:	bf00      	nop
 8010600:	54400000 	.word	0x54400000
 8010604:	3ff921fb 	.word	0x3ff921fb
 8010608:	1a626331 	.word	0x1a626331
 801060c:	3dd0b461 	.word	0x3dd0b461
 8010610:	1a600000 	.word	0x1a600000
 8010614:	3dd0b461 	.word	0x3dd0b461
 8010618:	2e037073 	.word	0x2e037073
 801061c:	3ba3198a 	.word	0x3ba3198a
 8010620:	6dc9c883 	.word	0x6dc9c883
 8010624:	3fe45f30 	.word	0x3fe45f30
 8010628:	2e000000 	.word	0x2e000000
 801062c:	3ba3198a 	.word	0x3ba3198a
 8010630:	252049c1 	.word	0x252049c1
 8010634:	397b839a 	.word	0x397b839a
 8010638:	3fe921fb 	.word	0x3fe921fb
 801063c:	4002d97b 	.word	0x4002d97b
 8010640:	3ff921fb 	.word	0x3ff921fb
 8010644:	413921fb 	.word	0x413921fb
 8010648:	3fe00000 	.word	0x3fe00000
 801064c:	08011b18 	.word	0x08011b18
 8010650:	7fefffff 	.word	0x7fefffff
 8010654:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010658:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801065c:	ee10 0a10 	vmov	r0, s0
 8010660:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010664:	ee10 6a10 	vmov	r6, s0
 8010668:	460f      	mov	r7, r1
 801066a:	f7f0 fa95 	bl	8000b98 <__aeabi_d2iz>
 801066e:	f7ef ff79 	bl	8000564 <__aeabi_i2d>
 8010672:	4602      	mov	r2, r0
 8010674:	460b      	mov	r3, r1
 8010676:	4630      	mov	r0, r6
 8010678:	4639      	mov	r1, r7
 801067a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801067e:	f7ef fe23 	bl	80002c8 <__aeabi_dsub>
 8010682:	4b22      	ldr	r3, [pc, #136]	; (801070c <__ieee754_rem_pio2+0x40c>)
 8010684:	2200      	movs	r2, #0
 8010686:	f7ef ffd7 	bl	8000638 <__aeabi_dmul>
 801068a:	460f      	mov	r7, r1
 801068c:	4606      	mov	r6, r0
 801068e:	f7f0 fa83 	bl	8000b98 <__aeabi_d2iz>
 8010692:	f7ef ff67 	bl	8000564 <__aeabi_i2d>
 8010696:	4602      	mov	r2, r0
 8010698:	460b      	mov	r3, r1
 801069a:	4630      	mov	r0, r6
 801069c:	4639      	mov	r1, r7
 801069e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106a2:	f7ef fe11 	bl	80002c8 <__aeabi_dsub>
 80106a6:	4b19      	ldr	r3, [pc, #100]	; (801070c <__ieee754_rem_pio2+0x40c>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	f7ef ffc5 	bl	8000638 <__aeabi_dmul>
 80106ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80106b2:	ad04      	add	r5, sp, #16
 80106b4:	f04f 0803 	mov.w	r8, #3
 80106b8:	46a9      	mov	r9, r5
 80106ba:	2600      	movs	r6, #0
 80106bc:	2700      	movs	r7, #0
 80106be:	4632      	mov	r2, r6
 80106c0:	463b      	mov	r3, r7
 80106c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80106c6:	46c3      	mov	fp, r8
 80106c8:	3d08      	subs	r5, #8
 80106ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80106ce:	f7f0 fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d1f3      	bne.n	80106be <__ieee754_rem_pio2+0x3be>
 80106d6:	4b0e      	ldr	r3, [pc, #56]	; (8010710 <__ieee754_rem_pio2+0x410>)
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	2302      	movs	r3, #2
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	4622      	mov	r2, r4
 80106e0:	465b      	mov	r3, fp
 80106e2:	4651      	mov	r1, sl
 80106e4:	4648      	mov	r0, r9
 80106e6:	f000 f993 	bl	8010a10 <__kernel_rem_pio2>
 80106ea:	9b02      	ldr	r3, [sp, #8]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	4683      	mov	fp, r0
 80106f0:	f6bf ae46 	bge.w	8010380 <__ieee754_rem_pio2+0x80>
 80106f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80106f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80106fc:	f8ca 3004 	str.w	r3, [sl, #4]
 8010700:	f8da 300c 	ldr.w	r3, [sl, #12]
 8010704:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010708:	e73a      	b.n	8010580 <__ieee754_rem_pio2+0x280>
 801070a:	bf00      	nop
 801070c:	41700000 	.word	0x41700000
 8010710:	08011b98 	.word	0x08011b98

08010714 <__ieee754_sqrt>:
 8010714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010718:	ec55 4b10 	vmov	r4, r5, d0
 801071c:	4e56      	ldr	r6, [pc, #344]	; (8010878 <__ieee754_sqrt+0x164>)
 801071e:	43ae      	bics	r6, r5
 8010720:	ee10 0a10 	vmov	r0, s0
 8010724:	ee10 3a10 	vmov	r3, s0
 8010728:	4629      	mov	r1, r5
 801072a:	462a      	mov	r2, r5
 801072c:	d110      	bne.n	8010750 <__ieee754_sqrt+0x3c>
 801072e:	ee10 2a10 	vmov	r2, s0
 8010732:	462b      	mov	r3, r5
 8010734:	f7ef ff80 	bl	8000638 <__aeabi_dmul>
 8010738:	4602      	mov	r2, r0
 801073a:	460b      	mov	r3, r1
 801073c:	4620      	mov	r0, r4
 801073e:	4629      	mov	r1, r5
 8010740:	f7ef fdc4 	bl	80002cc <__adddf3>
 8010744:	4604      	mov	r4, r0
 8010746:	460d      	mov	r5, r1
 8010748:	ec45 4b10 	vmov	d0, r4, r5
 801074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010750:	2d00      	cmp	r5, #0
 8010752:	dc10      	bgt.n	8010776 <__ieee754_sqrt+0x62>
 8010754:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010758:	4330      	orrs	r0, r6
 801075a:	d0f5      	beq.n	8010748 <__ieee754_sqrt+0x34>
 801075c:	b15d      	cbz	r5, 8010776 <__ieee754_sqrt+0x62>
 801075e:	ee10 2a10 	vmov	r2, s0
 8010762:	462b      	mov	r3, r5
 8010764:	ee10 0a10 	vmov	r0, s0
 8010768:	f7ef fdae 	bl	80002c8 <__aeabi_dsub>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	f7f0 f88c 	bl	800088c <__aeabi_ddiv>
 8010774:	e7e6      	b.n	8010744 <__ieee754_sqrt+0x30>
 8010776:	1509      	asrs	r1, r1, #20
 8010778:	d076      	beq.n	8010868 <__ieee754_sqrt+0x154>
 801077a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801077e:	07ce      	lsls	r6, r1, #31
 8010780:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010784:	bf5e      	ittt	pl
 8010786:	0fda      	lsrpl	r2, r3, #31
 8010788:	005b      	lslpl	r3, r3, #1
 801078a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801078e:	0fda      	lsrs	r2, r3, #31
 8010790:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010794:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010798:	2000      	movs	r0, #0
 801079a:	106d      	asrs	r5, r5, #1
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	f04f 0e16 	mov.w	lr, #22
 80107a2:	4684      	mov	ip, r0
 80107a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80107a8:	eb0c 0401 	add.w	r4, ip, r1
 80107ac:	4294      	cmp	r4, r2
 80107ae:	bfde      	ittt	le
 80107b0:	1b12      	suble	r2, r2, r4
 80107b2:	eb04 0c01 	addle.w	ip, r4, r1
 80107b6:	1840      	addle	r0, r0, r1
 80107b8:	0052      	lsls	r2, r2, #1
 80107ba:	f1be 0e01 	subs.w	lr, lr, #1
 80107be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80107c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80107c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80107ca:	d1ed      	bne.n	80107a8 <__ieee754_sqrt+0x94>
 80107cc:	4671      	mov	r1, lr
 80107ce:	2720      	movs	r7, #32
 80107d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80107d4:	4562      	cmp	r2, ip
 80107d6:	eb04 060e 	add.w	r6, r4, lr
 80107da:	dc02      	bgt.n	80107e2 <__ieee754_sqrt+0xce>
 80107dc:	d113      	bne.n	8010806 <__ieee754_sqrt+0xf2>
 80107de:	429e      	cmp	r6, r3
 80107e0:	d811      	bhi.n	8010806 <__ieee754_sqrt+0xf2>
 80107e2:	2e00      	cmp	r6, #0
 80107e4:	eb06 0e04 	add.w	lr, r6, r4
 80107e8:	da43      	bge.n	8010872 <__ieee754_sqrt+0x15e>
 80107ea:	f1be 0f00 	cmp.w	lr, #0
 80107ee:	db40      	blt.n	8010872 <__ieee754_sqrt+0x15e>
 80107f0:	f10c 0801 	add.w	r8, ip, #1
 80107f4:	eba2 020c 	sub.w	r2, r2, ip
 80107f8:	429e      	cmp	r6, r3
 80107fa:	bf88      	it	hi
 80107fc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010800:	1b9b      	subs	r3, r3, r6
 8010802:	4421      	add	r1, r4
 8010804:	46c4      	mov	ip, r8
 8010806:	0052      	lsls	r2, r2, #1
 8010808:	3f01      	subs	r7, #1
 801080a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801080e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010812:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010816:	d1dd      	bne.n	80107d4 <__ieee754_sqrt+0xc0>
 8010818:	4313      	orrs	r3, r2
 801081a:	d006      	beq.n	801082a <__ieee754_sqrt+0x116>
 801081c:	1c4c      	adds	r4, r1, #1
 801081e:	bf13      	iteet	ne
 8010820:	3101      	addne	r1, #1
 8010822:	3001      	addeq	r0, #1
 8010824:	4639      	moveq	r1, r7
 8010826:	f021 0101 	bicne.w	r1, r1, #1
 801082a:	1043      	asrs	r3, r0, #1
 801082c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010830:	0849      	lsrs	r1, r1, #1
 8010832:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010836:	07c2      	lsls	r2, r0, #31
 8010838:	bf48      	it	mi
 801083a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801083e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010842:	460c      	mov	r4, r1
 8010844:	463d      	mov	r5, r7
 8010846:	e77f      	b.n	8010748 <__ieee754_sqrt+0x34>
 8010848:	0ada      	lsrs	r2, r3, #11
 801084a:	3815      	subs	r0, #21
 801084c:	055b      	lsls	r3, r3, #21
 801084e:	2a00      	cmp	r2, #0
 8010850:	d0fa      	beq.n	8010848 <__ieee754_sqrt+0x134>
 8010852:	02d7      	lsls	r7, r2, #11
 8010854:	d50a      	bpl.n	801086c <__ieee754_sqrt+0x158>
 8010856:	f1c1 0420 	rsb	r4, r1, #32
 801085a:	fa23 f404 	lsr.w	r4, r3, r4
 801085e:	1e4d      	subs	r5, r1, #1
 8010860:	408b      	lsls	r3, r1
 8010862:	4322      	orrs	r2, r4
 8010864:	1b41      	subs	r1, r0, r5
 8010866:	e788      	b.n	801077a <__ieee754_sqrt+0x66>
 8010868:	4608      	mov	r0, r1
 801086a:	e7f0      	b.n	801084e <__ieee754_sqrt+0x13a>
 801086c:	0052      	lsls	r2, r2, #1
 801086e:	3101      	adds	r1, #1
 8010870:	e7ef      	b.n	8010852 <__ieee754_sqrt+0x13e>
 8010872:	46e0      	mov	r8, ip
 8010874:	e7be      	b.n	80107f4 <__ieee754_sqrt+0xe0>
 8010876:	bf00      	nop
 8010878:	7ff00000 	.word	0x7ff00000
 801087c:	00000000 	.word	0x00000000

08010880 <__kernel_cos>:
 8010880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	ec57 6b10 	vmov	r6, r7, d0
 8010888:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801088c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010890:	ed8d 1b00 	vstr	d1, [sp]
 8010894:	da07      	bge.n	80108a6 <__kernel_cos+0x26>
 8010896:	ee10 0a10 	vmov	r0, s0
 801089a:	4639      	mov	r1, r7
 801089c:	f7f0 f97c 	bl	8000b98 <__aeabi_d2iz>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	f000 8088 	beq.w	80109b6 <__kernel_cos+0x136>
 80108a6:	4632      	mov	r2, r6
 80108a8:	463b      	mov	r3, r7
 80108aa:	4630      	mov	r0, r6
 80108ac:	4639      	mov	r1, r7
 80108ae:	f7ef fec3 	bl	8000638 <__aeabi_dmul>
 80108b2:	4b51      	ldr	r3, [pc, #324]	; (80109f8 <__kernel_cos+0x178>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	f7ef febd 	bl	8000638 <__aeabi_dmul>
 80108be:	a340      	add	r3, pc, #256	; (adr r3, 80109c0 <__kernel_cos+0x140>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	4682      	mov	sl, r0
 80108c6:	468b      	mov	fp, r1
 80108c8:	4620      	mov	r0, r4
 80108ca:	4629      	mov	r1, r5
 80108cc:	f7ef feb4 	bl	8000638 <__aeabi_dmul>
 80108d0:	a33d      	add	r3, pc, #244	; (adr r3, 80109c8 <__kernel_cos+0x148>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f7ef fcf9 	bl	80002cc <__adddf3>
 80108da:	4622      	mov	r2, r4
 80108dc:	462b      	mov	r3, r5
 80108de:	f7ef feab 	bl	8000638 <__aeabi_dmul>
 80108e2:	a33b      	add	r3, pc, #236	; (adr r3, 80109d0 <__kernel_cos+0x150>)
 80108e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e8:	f7ef fcee 	bl	80002c8 <__aeabi_dsub>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef fea2 	bl	8000638 <__aeabi_dmul>
 80108f4:	a338      	add	r3, pc, #224	; (adr r3, 80109d8 <__kernel_cos+0x158>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fce7 	bl	80002cc <__adddf3>
 80108fe:	4622      	mov	r2, r4
 8010900:	462b      	mov	r3, r5
 8010902:	f7ef fe99 	bl	8000638 <__aeabi_dmul>
 8010906:	a336      	add	r3, pc, #216	; (adr r3, 80109e0 <__kernel_cos+0x160>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fcdc 	bl	80002c8 <__aeabi_dsub>
 8010910:	4622      	mov	r2, r4
 8010912:	462b      	mov	r3, r5
 8010914:	f7ef fe90 	bl	8000638 <__aeabi_dmul>
 8010918:	a333      	add	r3, pc, #204	; (adr r3, 80109e8 <__kernel_cos+0x168>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7ef fcd5 	bl	80002cc <__adddf3>
 8010922:	4622      	mov	r2, r4
 8010924:	462b      	mov	r3, r5
 8010926:	f7ef fe87 	bl	8000638 <__aeabi_dmul>
 801092a:	4622      	mov	r2, r4
 801092c:	462b      	mov	r3, r5
 801092e:	f7ef fe83 	bl	8000638 <__aeabi_dmul>
 8010932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010936:	4604      	mov	r4, r0
 8010938:	460d      	mov	r5, r1
 801093a:	4630      	mov	r0, r6
 801093c:	4639      	mov	r1, r7
 801093e:	f7ef fe7b 	bl	8000638 <__aeabi_dmul>
 8010942:	460b      	mov	r3, r1
 8010944:	4602      	mov	r2, r0
 8010946:	4629      	mov	r1, r5
 8010948:	4620      	mov	r0, r4
 801094a:	f7ef fcbd 	bl	80002c8 <__aeabi_dsub>
 801094e:	4b2b      	ldr	r3, [pc, #172]	; (80109fc <__kernel_cos+0x17c>)
 8010950:	4598      	cmp	r8, r3
 8010952:	4606      	mov	r6, r0
 8010954:	460f      	mov	r7, r1
 8010956:	dc10      	bgt.n	801097a <__kernel_cos+0xfa>
 8010958:	4602      	mov	r2, r0
 801095a:	460b      	mov	r3, r1
 801095c:	4650      	mov	r0, sl
 801095e:	4659      	mov	r1, fp
 8010960:	f7ef fcb2 	bl	80002c8 <__aeabi_dsub>
 8010964:	460b      	mov	r3, r1
 8010966:	4926      	ldr	r1, [pc, #152]	; (8010a00 <__kernel_cos+0x180>)
 8010968:	4602      	mov	r2, r0
 801096a:	2000      	movs	r0, #0
 801096c:	f7ef fcac 	bl	80002c8 <__aeabi_dsub>
 8010970:	ec41 0b10 	vmov	d0, r0, r1
 8010974:	b003      	add	sp, #12
 8010976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097a:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <__kernel_cos+0x184>)
 801097c:	4920      	ldr	r1, [pc, #128]	; (8010a00 <__kernel_cos+0x180>)
 801097e:	4598      	cmp	r8, r3
 8010980:	bfcc      	ite	gt
 8010982:	4d21      	ldrgt	r5, [pc, #132]	; (8010a08 <__kernel_cos+0x188>)
 8010984:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010988:	2400      	movs	r4, #0
 801098a:	4622      	mov	r2, r4
 801098c:	462b      	mov	r3, r5
 801098e:	2000      	movs	r0, #0
 8010990:	f7ef fc9a 	bl	80002c8 <__aeabi_dsub>
 8010994:	4622      	mov	r2, r4
 8010996:	4680      	mov	r8, r0
 8010998:	4689      	mov	r9, r1
 801099a:	462b      	mov	r3, r5
 801099c:	4650      	mov	r0, sl
 801099e:	4659      	mov	r1, fp
 80109a0:	f7ef fc92 	bl	80002c8 <__aeabi_dsub>
 80109a4:	4632      	mov	r2, r6
 80109a6:	463b      	mov	r3, r7
 80109a8:	f7ef fc8e 	bl	80002c8 <__aeabi_dsub>
 80109ac:	4602      	mov	r2, r0
 80109ae:	460b      	mov	r3, r1
 80109b0:	4640      	mov	r0, r8
 80109b2:	4649      	mov	r1, r9
 80109b4:	e7da      	b.n	801096c <__kernel_cos+0xec>
 80109b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80109f0 <__kernel_cos+0x170>
 80109ba:	e7db      	b.n	8010974 <__kernel_cos+0xf4>
 80109bc:	f3af 8000 	nop.w
 80109c0:	be8838d4 	.word	0xbe8838d4
 80109c4:	bda8fae9 	.word	0xbda8fae9
 80109c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80109cc:	3e21ee9e 	.word	0x3e21ee9e
 80109d0:	809c52ad 	.word	0x809c52ad
 80109d4:	3e927e4f 	.word	0x3e927e4f
 80109d8:	19cb1590 	.word	0x19cb1590
 80109dc:	3efa01a0 	.word	0x3efa01a0
 80109e0:	16c15177 	.word	0x16c15177
 80109e4:	3f56c16c 	.word	0x3f56c16c
 80109e8:	5555554c 	.word	0x5555554c
 80109ec:	3fa55555 	.word	0x3fa55555
 80109f0:	00000000 	.word	0x00000000
 80109f4:	3ff00000 	.word	0x3ff00000
 80109f8:	3fe00000 	.word	0x3fe00000
 80109fc:	3fd33332 	.word	0x3fd33332
 8010a00:	3ff00000 	.word	0x3ff00000
 8010a04:	3fe90000 	.word	0x3fe90000
 8010a08:	3fd20000 	.word	0x3fd20000
 8010a0c:	00000000 	.word	0x00000000

08010a10 <__kernel_rem_pio2>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	ed2d 8b02 	vpush	{d8}
 8010a18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010a1c:	f112 0f14 	cmn.w	r2, #20
 8010a20:	9308      	str	r3, [sp, #32]
 8010a22:	9101      	str	r1, [sp, #4]
 8010a24:	4bc6      	ldr	r3, [pc, #792]	; (8010d40 <__kernel_rem_pio2+0x330>)
 8010a26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010a28:	9009      	str	r0, [sp, #36]	; 0x24
 8010a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a2e:	9304      	str	r3, [sp, #16]
 8010a30:	9b08      	ldr	r3, [sp, #32]
 8010a32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010a36:	bfa8      	it	ge
 8010a38:	1ed4      	subge	r4, r2, #3
 8010a3a:	9306      	str	r3, [sp, #24]
 8010a3c:	bfb2      	itee	lt
 8010a3e:	2400      	movlt	r4, #0
 8010a40:	2318      	movge	r3, #24
 8010a42:	fb94 f4f3 	sdivge	r4, r4, r3
 8010a46:	f06f 0317 	mvn.w	r3, #23
 8010a4a:	fb04 3303 	mla	r3, r4, r3, r3
 8010a4e:	eb03 0a02 	add.w	sl, r3, r2
 8010a52:	9b04      	ldr	r3, [sp, #16]
 8010a54:	9a06      	ldr	r2, [sp, #24]
 8010a56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010d30 <__kernel_rem_pio2+0x320>
 8010a5a:	eb03 0802 	add.w	r8, r3, r2
 8010a5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010a60:	1aa7      	subs	r7, r4, r2
 8010a62:	ae20      	add	r6, sp, #128	; 0x80
 8010a64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010a68:	2500      	movs	r5, #0
 8010a6a:	4545      	cmp	r5, r8
 8010a6c:	dd18      	ble.n	8010aa0 <__kernel_rem_pio2+0x90>
 8010a6e:	9b08      	ldr	r3, [sp, #32]
 8010a70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010a74:	aa20      	add	r2, sp, #128	; 0x80
 8010a76:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8010d30 <__kernel_rem_pio2+0x320>
 8010a7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010a7e:	f1c3 0301 	rsb	r3, r3, #1
 8010a82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010a86:	9307      	str	r3, [sp, #28]
 8010a88:	9b07      	ldr	r3, [sp, #28]
 8010a8a:	9a04      	ldr	r2, [sp, #16]
 8010a8c:	4443      	add	r3, r8
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	db2f      	blt.n	8010af2 <__kernel_rem_pio2+0xe2>
 8010a92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010a96:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010a9a:	462f      	mov	r7, r5
 8010a9c:	2600      	movs	r6, #0
 8010a9e:	e01b      	b.n	8010ad8 <__kernel_rem_pio2+0xc8>
 8010aa0:	42ef      	cmn	r7, r5
 8010aa2:	d407      	bmi.n	8010ab4 <__kernel_rem_pio2+0xa4>
 8010aa4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010aa8:	f7ef fd5c 	bl	8000564 <__aeabi_i2d>
 8010aac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010ab0:	3501      	adds	r5, #1
 8010ab2:	e7da      	b.n	8010a6a <__kernel_rem_pio2+0x5a>
 8010ab4:	ec51 0b18 	vmov	r0, r1, d8
 8010ab8:	e7f8      	b.n	8010aac <__kernel_rem_pio2+0x9c>
 8010aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010abe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010ac2:	f7ef fdb9 	bl	8000638 <__aeabi_dmul>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ace:	f7ef fbfd 	bl	80002cc <__adddf3>
 8010ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ad6:	3601      	adds	r6, #1
 8010ad8:	9b06      	ldr	r3, [sp, #24]
 8010ada:	429e      	cmp	r6, r3
 8010adc:	f1a7 0708 	sub.w	r7, r7, #8
 8010ae0:	ddeb      	ble.n	8010aba <__kernel_rem_pio2+0xaa>
 8010ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ae6:	3508      	adds	r5, #8
 8010ae8:	ecab 7b02 	vstmia	fp!, {d7}
 8010aec:	f108 0801 	add.w	r8, r8, #1
 8010af0:	e7ca      	b.n	8010a88 <__kernel_rem_pio2+0x78>
 8010af2:	9b04      	ldr	r3, [sp, #16]
 8010af4:	aa0c      	add	r2, sp, #48	; 0x30
 8010af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010afc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010afe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010b02:	9c04      	ldr	r4, [sp, #16]
 8010b04:	930a      	str	r3, [sp, #40]	; 0x28
 8010b06:	ab98      	add	r3, sp, #608	; 0x260
 8010b08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b0c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010b10:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010b14:	f8cd b008 	str.w	fp, [sp, #8]
 8010b18:	4625      	mov	r5, r4
 8010b1a:	2d00      	cmp	r5, #0
 8010b1c:	dc78      	bgt.n	8010c10 <__kernel_rem_pio2+0x200>
 8010b1e:	ec47 6b10 	vmov	d0, r6, r7
 8010b22:	4650      	mov	r0, sl
 8010b24:	f000 fc94 	bl	8011450 <scalbn>
 8010b28:	ec57 6b10 	vmov	r6, r7, d0
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b32:	ee10 0a10 	vmov	r0, s0
 8010b36:	4639      	mov	r1, r7
 8010b38:	f7ef fd7e 	bl	8000638 <__aeabi_dmul>
 8010b3c:	ec41 0b10 	vmov	d0, r0, r1
 8010b40:	f000 fb7a 	bl	8011238 <floor>
 8010b44:	4b7f      	ldr	r3, [pc, #508]	; (8010d44 <__kernel_rem_pio2+0x334>)
 8010b46:	ec51 0b10 	vmov	r0, r1, d0
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f7ef fd74 	bl	8000638 <__aeabi_dmul>
 8010b50:	4602      	mov	r2, r0
 8010b52:	460b      	mov	r3, r1
 8010b54:	4630      	mov	r0, r6
 8010b56:	4639      	mov	r1, r7
 8010b58:	f7ef fbb6 	bl	80002c8 <__aeabi_dsub>
 8010b5c:	460f      	mov	r7, r1
 8010b5e:	4606      	mov	r6, r0
 8010b60:	f7f0 f81a 	bl	8000b98 <__aeabi_d2iz>
 8010b64:	9007      	str	r0, [sp, #28]
 8010b66:	f7ef fcfd 	bl	8000564 <__aeabi_i2d>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	4630      	mov	r0, r6
 8010b70:	4639      	mov	r1, r7
 8010b72:	f7ef fba9 	bl	80002c8 <__aeabi_dsub>
 8010b76:	f1ba 0f00 	cmp.w	sl, #0
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	460f      	mov	r7, r1
 8010b7e:	dd70      	ble.n	8010c62 <__kernel_rem_pio2+0x252>
 8010b80:	1e62      	subs	r2, r4, #1
 8010b82:	ab0c      	add	r3, sp, #48	; 0x30
 8010b84:	9d07      	ldr	r5, [sp, #28]
 8010b86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010b8a:	f1ca 0118 	rsb	r1, sl, #24
 8010b8e:	fa40 f301 	asr.w	r3, r0, r1
 8010b92:	441d      	add	r5, r3
 8010b94:	408b      	lsls	r3, r1
 8010b96:	1ac0      	subs	r0, r0, r3
 8010b98:	ab0c      	add	r3, sp, #48	; 0x30
 8010b9a:	9507      	str	r5, [sp, #28]
 8010b9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010ba0:	f1ca 0317 	rsb	r3, sl, #23
 8010ba4:	fa40 f303 	asr.w	r3, r0, r3
 8010ba8:	9302      	str	r3, [sp, #8]
 8010baa:	9b02      	ldr	r3, [sp, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	dd66      	ble.n	8010c7e <__kernel_rem_pio2+0x26e>
 8010bb0:	9b07      	ldr	r3, [sp, #28]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	9307      	str	r3, [sp, #28]
 8010bb8:	4615      	mov	r5, r2
 8010bba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010bbe:	4294      	cmp	r4, r2
 8010bc0:	f300 8099 	bgt.w	8010cf6 <__kernel_rem_pio2+0x2e6>
 8010bc4:	f1ba 0f00 	cmp.w	sl, #0
 8010bc8:	dd07      	ble.n	8010bda <__kernel_rem_pio2+0x1ca>
 8010bca:	f1ba 0f01 	cmp.w	sl, #1
 8010bce:	f000 80a5 	beq.w	8010d1c <__kernel_rem_pio2+0x30c>
 8010bd2:	f1ba 0f02 	cmp.w	sl, #2
 8010bd6:	f000 80c1 	beq.w	8010d5c <__kernel_rem_pio2+0x34c>
 8010bda:	9b02      	ldr	r3, [sp, #8]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d14e      	bne.n	8010c7e <__kernel_rem_pio2+0x26e>
 8010be0:	4632      	mov	r2, r6
 8010be2:	463b      	mov	r3, r7
 8010be4:	4958      	ldr	r1, [pc, #352]	; (8010d48 <__kernel_rem_pio2+0x338>)
 8010be6:	2000      	movs	r0, #0
 8010be8:	f7ef fb6e 	bl	80002c8 <__aeabi_dsub>
 8010bec:	4606      	mov	r6, r0
 8010bee:	460f      	mov	r7, r1
 8010bf0:	2d00      	cmp	r5, #0
 8010bf2:	d044      	beq.n	8010c7e <__kernel_rem_pio2+0x26e>
 8010bf4:	4650      	mov	r0, sl
 8010bf6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010d38 <__kernel_rem_pio2+0x328>
 8010bfa:	f000 fc29 	bl	8011450 <scalbn>
 8010bfe:	4630      	mov	r0, r6
 8010c00:	4639      	mov	r1, r7
 8010c02:	ec53 2b10 	vmov	r2, r3, d0
 8010c06:	f7ef fb5f 	bl	80002c8 <__aeabi_dsub>
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	460f      	mov	r7, r1
 8010c0e:	e036      	b.n	8010c7e <__kernel_rem_pio2+0x26e>
 8010c10:	4b4e      	ldr	r3, [pc, #312]	; (8010d4c <__kernel_rem_pio2+0x33c>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	4630      	mov	r0, r6
 8010c16:	4639      	mov	r1, r7
 8010c18:	f7ef fd0e 	bl	8000638 <__aeabi_dmul>
 8010c1c:	f7ef ffbc 	bl	8000b98 <__aeabi_d2iz>
 8010c20:	f7ef fca0 	bl	8000564 <__aeabi_i2d>
 8010c24:	4b4a      	ldr	r3, [pc, #296]	; (8010d50 <__kernel_rem_pio2+0x340>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef fb46 	bl	80002c8 <__aeabi_dsub>
 8010c3c:	f7ef ffac 	bl	8000b98 <__aeabi_d2iz>
 8010c40:	9b02      	ldr	r3, [sp, #8]
 8010c42:	f843 0b04 	str.w	r0, [r3], #4
 8010c46:	3d01      	subs	r5, #1
 8010c48:	9302      	str	r3, [sp, #8]
 8010c4a:	ab70      	add	r3, sp, #448	; 0x1c0
 8010c4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c54:	4640      	mov	r0, r8
 8010c56:	4649      	mov	r1, r9
 8010c58:	f7ef fb38 	bl	80002cc <__adddf3>
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	e75b      	b.n	8010b1a <__kernel_rem_pio2+0x10a>
 8010c62:	d105      	bne.n	8010c70 <__kernel_rem_pio2+0x260>
 8010c64:	1e63      	subs	r3, r4, #1
 8010c66:	aa0c      	add	r2, sp, #48	; 0x30
 8010c68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010c6c:	15c3      	asrs	r3, r0, #23
 8010c6e:	e79b      	b.n	8010ba8 <__kernel_rem_pio2+0x198>
 8010c70:	4b38      	ldr	r3, [pc, #224]	; (8010d54 <__kernel_rem_pio2+0x344>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	f7ef ff66 	bl	8000b44 <__aeabi_dcmpge>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d139      	bne.n	8010cf0 <__kernel_rem_pio2+0x2e0>
 8010c7c:	9002      	str	r0, [sp, #8]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	2300      	movs	r3, #0
 8010c82:	4630      	mov	r0, r6
 8010c84:	4639      	mov	r1, r7
 8010c86:	f7ef ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f000 80b4 	beq.w	8010df8 <__kernel_rem_pio2+0x3e8>
 8010c90:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8010c94:	465b      	mov	r3, fp
 8010c96:	2200      	movs	r2, #0
 8010c98:	9904      	ldr	r1, [sp, #16]
 8010c9a:	428b      	cmp	r3, r1
 8010c9c:	da65      	bge.n	8010d6a <__kernel_rem_pio2+0x35a>
 8010c9e:	2a00      	cmp	r2, #0
 8010ca0:	d07b      	beq.n	8010d9a <__kernel_rem_pio2+0x38a>
 8010ca2:	ab0c      	add	r3, sp, #48	; 0x30
 8010ca4:	f1aa 0a18 	sub.w	sl, sl, #24
 8010ca8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f000 80a0 	beq.w	8010df2 <__kernel_rem_pio2+0x3e2>
 8010cb2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010d38 <__kernel_rem_pio2+0x328>
 8010cb6:	4650      	mov	r0, sl
 8010cb8:	f000 fbca 	bl	8011450 <scalbn>
 8010cbc:	4f23      	ldr	r7, [pc, #140]	; (8010d4c <__kernel_rem_pio2+0x33c>)
 8010cbe:	ec55 4b10 	vmov	r4, r5, d0
 8010cc2:	46d8      	mov	r8, fp
 8010cc4:	2600      	movs	r6, #0
 8010cc6:	f1b8 0f00 	cmp.w	r8, #0
 8010cca:	f280 80cf 	bge.w	8010e6c <__kernel_rem_pio2+0x45c>
 8010cce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8010d30 <__kernel_rem_pio2+0x320>
 8010cd2:	465f      	mov	r7, fp
 8010cd4:	f04f 0800 	mov.w	r8, #0
 8010cd8:	2f00      	cmp	r7, #0
 8010cda:	f2c0 80fd 	blt.w	8010ed8 <__kernel_rem_pio2+0x4c8>
 8010cde:	ab70      	add	r3, sp, #448	; 0x1c0
 8010ce0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010d58 <__kernel_rem_pio2+0x348>
 8010ce4:	ec55 4b18 	vmov	r4, r5, d8
 8010ce8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8010cec:	2600      	movs	r6, #0
 8010cee:	e0e5      	b.n	8010ebc <__kernel_rem_pio2+0x4ac>
 8010cf0:	2302      	movs	r3, #2
 8010cf2:	9302      	str	r3, [sp, #8]
 8010cf4:	e75c      	b.n	8010bb0 <__kernel_rem_pio2+0x1a0>
 8010cf6:	f8db 3000 	ldr.w	r3, [fp]
 8010cfa:	b955      	cbnz	r5, 8010d12 <__kernel_rem_pio2+0x302>
 8010cfc:	b123      	cbz	r3, 8010d08 <__kernel_rem_pio2+0x2f8>
 8010cfe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010d02:	f8cb 3000 	str.w	r3, [fp]
 8010d06:	2301      	movs	r3, #1
 8010d08:	3201      	adds	r2, #1
 8010d0a:	f10b 0b04 	add.w	fp, fp, #4
 8010d0e:	461d      	mov	r5, r3
 8010d10:	e755      	b.n	8010bbe <__kernel_rem_pio2+0x1ae>
 8010d12:	1acb      	subs	r3, r1, r3
 8010d14:	f8cb 3000 	str.w	r3, [fp]
 8010d18:	462b      	mov	r3, r5
 8010d1a:	e7f5      	b.n	8010d08 <__kernel_rem_pio2+0x2f8>
 8010d1c:	1e62      	subs	r2, r4, #1
 8010d1e:	ab0c      	add	r3, sp, #48	; 0x30
 8010d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010d28:	a90c      	add	r1, sp, #48	; 0x30
 8010d2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010d2e:	e754      	b.n	8010bda <__kernel_rem_pio2+0x1ca>
	...
 8010d3c:	3ff00000 	.word	0x3ff00000
 8010d40:	08011ce0 	.word	0x08011ce0
 8010d44:	40200000 	.word	0x40200000
 8010d48:	3ff00000 	.word	0x3ff00000
 8010d4c:	3e700000 	.word	0x3e700000
 8010d50:	41700000 	.word	0x41700000
 8010d54:	3fe00000 	.word	0x3fe00000
 8010d58:	08011ca0 	.word	0x08011ca0
 8010d5c:	1e62      	subs	r2, r4, #1
 8010d5e:	ab0c      	add	r3, sp, #48	; 0x30
 8010d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010d68:	e7de      	b.n	8010d28 <__kernel_rem_pio2+0x318>
 8010d6a:	a90c      	add	r1, sp, #48	; 0x30
 8010d6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	430a      	orrs	r2, r1
 8010d74:	e790      	b.n	8010c98 <__kernel_rem_pio2+0x288>
 8010d76:	3301      	adds	r3, #1
 8010d78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010d7c:	2900      	cmp	r1, #0
 8010d7e:	d0fa      	beq.n	8010d76 <__kernel_rem_pio2+0x366>
 8010d80:	9a08      	ldr	r2, [sp, #32]
 8010d82:	18e3      	adds	r3, r4, r3
 8010d84:	18a6      	adds	r6, r4, r2
 8010d86:	aa20      	add	r2, sp, #128	; 0x80
 8010d88:	1c65      	adds	r5, r4, #1
 8010d8a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010d8e:	9302      	str	r3, [sp, #8]
 8010d90:	9b02      	ldr	r3, [sp, #8]
 8010d92:	42ab      	cmp	r3, r5
 8010d94:	da04      	bge.n	8010da0 <__kernel_rem_pio2+0x390>
 8010d96:	461c      	mov	r4, r3
 8010d98:	e6b5      	b.n	8010b06 <__kernel_rem_pio2+0xf6>
 8010d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	e7eb      	b.n	8010d78 <__kernel_rem_pio2+0x368>
 8010da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010da6:	f7ef fbdd 	bl	8000564 <__aeabi_i2d>
 8010daa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db0:	46b3      	mov	fp, r6
 8010db2:	461c      	mov	r4, r3
 8010db4:	2700      	movs	r7, #0
 8010db6:	f04f 0800 	mov.w	r8, #0
 8010dba:	f04f 0900 	mov.w	r9, #0
 8010dbe:	9b06      	ldr	r3, [sp, #24]
 8010dc0:	429f      	cmp	r7, r3
 8010dc2:	dd06      	ble.n	8010dd2 <__kernel_rem_pio2+0x3c2>
 8010dc4:	ab70      	add	r3, sp, #448	; 0x1c0
 8010dc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010dca:	e9c3 8900 	strd	r8, r9, [r3]
 8010dce:	3501      	adds	r5, #1
 8010dd0:	e7de      	b.n	8010d90 <__kernel_rem_pio2+0x380>
 8010dd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010dd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010dda:	f7ef fc2d 	bl	8000638 <__aeabi_dmul>
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	4640      	mov	r0, r8
 8010de4:	4649      	mov	r1, r9
 8010de6:	f7ef fa71 	bl	80002cc <__adddf3>
 8010dea:	3701      	adds	r7, #1
 8010dec:	4680      	mov	r8, r0
 8010dee:	4689      	mov	r9, r1
 8010df0:	e7e5      	b.n	8010dbe <__kernel_rem_pio2+0x3ae>
 8010df2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010df6:	e754      	b.n	8010ca2 <__kernel_rem_pio2+0x292>
 8010df8:	ec47 6b10 	vmov	d0, r6, r7
 8010dfc:	f1ca 0000 	rsb	r0, sl, #0
 8010e00:	f000 fb26 	bl	8011450 <scalbn>
 8010e04:	ec57 6b10 	vmov	r6, r7, d0
 8010e08:	4b9f      	ldr	r3, [pc, #636]	; (8011088 <__kernel_rem_pio2+0x678>)
 8010e0a:	ee10 0a10 	vmov	r0, s0
 8010e0e:	2200      	movs	r2, #0
 8010e10:	4639      	mov	r1, r7
 8010e12:	f7ef fe97 	bl	8000b44 <__aeabi_dcmpge>
 8010e16:	b300      	cbz	r0, 8010e5a <__kernel_rem_pio2+0x44a>
 8010e18:	4b9c      	ldr	r3, [pc, #624]	; (801108c <__kernel_rem_pio2+0x67c>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	4639      	mov	r1, r7
 8010e20:	f7ef fc0a 	bl	8000638 <__aeabi_dmul>
 8010e24:	f7ef feb8 	bl	8000b98 <__aeabi_d2iz>
 8010e28:	4605      	mov	r5, r0
 8010e2a:	f7ef fb9b 	bl	8000564 <__aeabi_i2d>
 8010e2e:	4b96      	ldr	r3, [pc, #600]	; (8011088 <__kernel_rem_pio2+0x678>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	f7ef fc01 	bl	8000638 <__aeabi_dmul>
 8010e36:	460b      	mov	r3, r1
 8010e38:	4602      	mov	r2, r0
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	4630      	mov	r0, r6
 8010e3e:	f7ef fa43 	bl	80002c8 <__aeabi_dsub>
 8010e42:	f7ef fea9 	bl	8000b98 <__aeabi_d2iz>
 8010e46:	f104 0b01 	add.w	fp, r4, #1
 8010e4a:	ab0c      	add	r3, sp, #48	; 0x30
 8010e4c:	f10a 0a18 	add.w	sl, sl, #24
 8010e50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e54:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010e58:	e72b      	b.n	8010cb2 <__kernel_rem_pio2+0x2a2>
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f7ef fe9b 	bl	8000b98 <__aeabi_d2iz>
 8010e62:	ab0c      	add	r3, sp, #48	; 0x30
 8010e64:	46a3      	mov	fp, r4
 8010e66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e6a:	e722      	b.n	8010cb2 <__kernel_rem_pio2+0x2a2>
 8010e6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8010e6e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8010e72:	ab0c      	add	r3, sp, #48	; 0x30
 8010e74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010e78:	f7ef fb74 	bl	8000564 <__aeabi_i2d>
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	462b      	mov	r3, r5
 8010e80:	f7ef fbda 	bl	8000638 <__aeabi_dmul>
 8010e84:	4632      	mov	r2, r6
 8010e86:	e9c9 0100 	strd	r0, r1, [r9]
 8010e8a:	463b      	mov	r3, r7
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	4629      	mov	r1, r5
 8010e90:	f7ef fbd2 	bl	8000638 <__aeabi_dmul>
 8010e94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010e98:	4604      	mov	r4, r0
 8010e9a:	460d      	mov	r5, r1
 8010e9c:	e713      	b.n	8010cc6 <__kernel_rem_pio2+0x2b6>
 8010e9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010ea2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010ea6:	f7ef fbc7 	bl	8000638 <__aeabi_dmul>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4620      	mov	r0, r4
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7ef fa0b 	bl	80002cc <__adddf3>
 8010eb6:	3601      	adds	r6, #1
 8010eb8:	4604      	mov	r4, r0
 8010eba:	460d      	mov	r5, r1
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	429e      	cmp	r6, r3
 8010ec0:	dc01      	bgt.n	8010ec6 <__kernel_rem_pio2+0x4b6>
 8010ec2:	45b0      	cmp	r8, r6
 8010ec4:	daeb      	bge.n	8010e9e <__kernel_rem_pio2+0x48e>
 8010ec6:	ab48      	add	r3, sp, #288	; 0x120
 8010ec8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010ecc:	e9c3 4500 	strd	r4, r5, [r3]
 8010ed0:	3f01      	subs	r7, #1
 8010ed2:	f108 0801 	add.w	r8, r8, #1
 8010ed6:	e6ff      	b.n	8010cd8 <__kernel_rem_pio2+0x2c8>
 8010ed8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	dc0b      	bgt.n	8010ef6 <__kernel_rem_pio2+0x4e6>
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	dc6e      	bgt.n	8010fc0 <__kernel_rem_pio2+0x5b0>
 8010ee2:	d045      	beq.n	8010f70 <__kernel_rem_pio2+0x560>
 8010ee4:	9b07      	ldr	r3, [sp, #28]
 8010ee6:	f003 0007 	and.w	r0, r3, #7
 8010eea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010eee:	ecbd 8b02 	vpop	{d8}
 8010ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ef8:	2b03      	cmp	r3, #3
 8010efa:	d1f3      	bne.n	8010ee4 <__kernel_rem_pio2+0x4d4>
 8010efc:	ab48      	add	r3, sp, #288	; 0x120
 8010efe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010f02:	46d0      	mov	r8, sl
 8010f04:	46d9      	mov	r9, fp
 8010f06:	f1b9 0f00 	cmp.w	r9, #0
 8010f0a:	f1a8 0808 	sub.w	r8, r8, #8
 8010f0e:	dc64      	bgt.n	8010fda <__kernel_rem_pio2+0x5ca>
 8010f10:	465c      	mov	r4, fp
 8010f12:	2c01      	cmp	r4, #1
 8010f14:	f1aa 0a08 	sub.w	sl, sl, #8
 8010f18:	dc7e      	bgt.n	8011018 <__kernel_rem_pio2+0x608>
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	f1bb 0f01 	cmp.w	fp, #1
 8010f22:	f300 8097 	bgt.w	8011054 <__kernel_rem_pio2+0x644>
 8010f26:	9b02      	ldr	r3, [sp, #8]
 8010f28:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8010f2c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f040 8099 	bne.w	8011068 <__kernel_rem_pio2+0x658>
 8010f36:	9b01      	ldr	r3, [sp, #4]
 8010f38:	e9c3 5600 	strd	r5, r6, [r3]
 8010f3c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010f40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010f44:	e7ce      	b.n	8010ee4 <__kernel_rem_pio2+0x4d4>
 8010f46:	ab48      	add	r3, sp, #288	; 0x120
 8010f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f50:	f7ef f9bc 	bl	80002cc <__adddf3>
 8010f54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010f58:	f1bb 0f00 	cmp.w	fp, #0
 8010f5c:	daf3      	bge.n	8010f46 <__kernel_rem_pio2+0x536>
 8010f5e:	9b02      	ldr	r3, [sp, #8]
 8010f60:	b113      	cbz	r3, 8010f68 <__kernel_rem_pio2+0x558>
 8010f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f66:	4619      	mov	r1, r3
 8010f68:	9b01      	ldr	r3, [sp, #4]
 8010f6a:	e9c3 0100 	strd	r0, r1, [r3]
 8010f6e:	e7b9      	b.n	8010ee4 <__kernel_rem_pio2+0x4d4>
 8010f70:	2000      	movs	r0, #0
 8010f72:	2100      	movs	r1, #0
 8010f74:	e7f0      	b.n	8010f58 <__kernel_rem_pio2+0x548>
 8010f76:	ab48      	add	r3, sp, #288	; 0x120
 8010f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef f9a4 	bl	80002cc <__adddf3>
 8010f84:	3c01      	subs	r4, #1
 8010f86:	2c00      	cmp	r4, #0
 8010f88:	daf5      	bge.n	8010f76 <__kernel_rem_pio2+0x566>
 8010f8a:	9b02      	ldr	r3, [sp, #8]
 8010f8c:	b1e3      	cbz	r3, 8010fc8 <__kernel_rem_pio2+0x5b8>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f94:	9c01      	ldr	r4, [sp, #4]
 8010f96:	e9c4 2300 	strd	r2, r3, [r4]
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010fa2:	f7ef f991 	bl	80002c8 <__aeabi_dsub>
 8010fa6:	ad4a      	add	r5, sp, #296	; 0x128
 8010fa8:	2401      	movs	r4, #1
 8010faa:	45a3      	cmp	fp, r4
 8010fac:	da0f      	bge.n	8010fce <__kernel_rem_pio2+0x5be>
 8010fae:	9b02      	ldr	r3, [sp, #8]
 8010fb0:	b113      	cbz	r3, 8010fb8 <__kernel_rem_pio2+0x5a8>
 8010fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	9b01      	ldr	r3, [sp, #4]
 8010fba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010fbe:	e791      	b.n	8010ee4 <__kernel_rem_pio2+0x4d4>
 8010fc0:	465c      	mov	r4, fp
 8010fc2:	2000      	movs	r0, #0
 8010fc4:	2100      	movs	r1, #0
 8010fc6:	e7de      	b.n	8010f86 <__kernel_rem_pio2+0x576>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	e7e2      	b.n	8010f94 <__kernel_rem_pio2+0x584>
 8010fce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010fd2:	f7ef f97b 	bl	80002cc <__adddf3>
 8010fd6:	3401      	adds	r4, #1
 8010fd8:	e7e7      	b.n	8010faa <__kernel_rem_pio2+0x59a>
 8010fda:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010fde:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4632      	mov	r2, r6
 8010fe6:	463b      	mov	r3, r7
 8010fe8:	4629      	mov	r1, r5
 8010fea:	f7ef f96f 	bl	80002cc <__adddf3>
 8010fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	f7ef f965 	bl	80002c8 <__aeabi_dsub>
 8010ffe:	4632      	mov	r2, r6
 8011000:	463b      	mov	r3, r7
 8011002:	f7ef f963 	bl	80002cc <__adddf3>
 8011006:	ed9d 7b04 	vldr	d7, [sp, #16]
 801100a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801100e:	ed88 7b00 	vstr	d7, [r8]
 8011012:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011016:	e776      	b.n	8010f06 <__kernel_rem_pio2+0x4f6>
 8011018:	e9da 8900 	ldrd	r8, r9, [sl]
 801101c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011020:	4640      	mov	r0, r8
 8011022:	4632      	mov	r2, r6
 8011024:	463b      	mov	r3, r7
 8011026:	4649      	mov	r1, r9
 8011028:	f7ef f950 	bl	80002cc <__adddf3>
 801102c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011030:	4602      	mov	r2, r0
 8011032:	460b      	mov	r3, r1
 8011034:	4640      	mov	r0, r8
 8011036:	4649      	mov	r1, r9
 8011038:	f7ef f946 	bl	80002c8 <__aeabi_dsub>
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	f7ef f944 	bl	80002cc <__adddf3>
 8011044:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011048:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801104c:	ed8a 7b00 	vstr	d7, [sl]
 8011050:	3c01      	subs	r4, #1
 8011052:	e75e      	b.n	8010f12 <__kernel_rem_pio2+0x502>
 8011054:	ab48      	add	r3, sp, #288	; 0x120
 8011056:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	f7ef f935 	bl	80002cc <__adddf3>
 8011062:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011066:	e75a      	b.n	8010f1e <__kernel_rem_pio2+0x50e>
 8011068:	9b01      	ldr	r3, [sp, #4]
 801106a:	9a01      	ldr	r2, [sp, #4]
 801106c:	601d      	str	r5, [r3, #0]
 801106e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011072:	605c      	str	r4, [r3, #4]
 8011074:	609f      	str	r7, [r3, #8]
 8011076:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801107a:	60d3      	str	r3, [r2, #12]
 801107c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011080:	6110      	str	r0, [r2, #16]
 8011082:	6153      	str	r3, [r2, #20]
 8011084:	e72e      	b.n	8010ee4 <__kernel_rem_pio2+0x4d4>
 8011086:	bf00      	nop
 8011088:	41700000 	.word	0x41700000
 801108c:	3e700000 	.word	0x3e700000

08011090 <__kernel_sin>:
 8011090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011094:	ed2d 8b04 	vpush	{d8-d9}
 8011098:	eeb0 8a41 	vmov.f32	s16, s2
 801109c:	eef0 8a61 	vmov.f32	s17, s3
 80110a0:	ec55 4b10 	vmov	r4, r5, d0
 80110a4:	b083      	sub	sp, #12
 80110a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80110aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80110ae:	9001      	str	r0, [sp, #4]
 80110b0:	da06      	bge.n	80110c0 <__kernel_sin+0x30>
 80110b2:	ee10 0a10 	vmov	r0, s0
 80110b6:	4629      	mov	r1, r5
 80110b8:	f7ef fd6e 	bl	8000b98 <__aeabi_d2iz>
 80110bc:	2800      	cmp	r0, #0
 80110be:	d051      	beq.n	8011164 <__kernel_sin+0xd4>
 80110c0:	4622      	mov	r2, r4
 80110c2:	462b      	mov	r3, r5
 80110c4:	4620      	mov	r0, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ef fab6 	bl	8000638 <__aeabi_dmul>
 80110cc:	4682      	mov	sl, r0
 80110ce:	468b      	mov	fp, r1
 80110d0:	4602      	mov	r2, r0
 80110d2:	460b      	mov	r3, r1
 80110d4:	4620      	mov	r0, r4
 80110d6:	4629      	mov	r1, r5
 80110d8:	f7ef faae 	bl	8000638 <__aeabi_dmul>
 80110dc:	a341      	add	r3, pc, #260	; (adr r3, 80111e4 <__kernel_sin+0x154>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	4680      	mov	r8, r0
 80110e4:	4689      	mov	r9, r1
 80110e6:	4650      	mov	r0, sl
 80110e8:	4659      	mov	r1, fp
 80110ea:	f7ef faa5 	bl	8000638 <__aeabi_dmul>
 80110ee:	a33f      	add	r3, pc, #252	; (adr r3, 80111ec <__kernel_sin+0x15c>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	f7ef f8e8 	bl	80002c8 <__aeabi_dsub>
 80110f8:	4652      	mov	r2, sl
 80110fa:	465b      	mov	r3, fp
 80110fc:	f7ef fa9c 	bl	8000638 <__aeabi_dmul>
 8011100:	a33c      	add	r3, pc, #240	; (adr r3, 80111f4 <__kernel_sin+0x164>)
 8011102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011106:	f7ef f8e1 	bl	80002cc <__adddf3>
 801110a:	4652      	mov	r2, sl
 801110c:	465b      	mov	r3, fp
 801110e:	f7ef fa93 	bl	8000638 <__aeabi_dmul>
 8011112:	a33a      	add	r3, pc, #232	; (adr r3, 80111fc <__kernel_sin+0x16c>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	f7ef f8d6 	bl	80002c8 <__aeabi_dsub>
 801111c:	4652      	mov	r2, sl
 801111e:	465b      	mov	r3, fp
 8011120:	f7ef fa8a 	bl	8000638 <__aeabi_dmul>
 8011124:	a337      	add	r3, pc, #220	; (adr r3, 8011204 <__kernel_sin+0x174>)
 8011126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112a:	f7ef f8cf 	bl	80002cc <__adddf3>
 801112e:	9b01      	ldr	r3, [sp, #4]
 8011130:	4606      	mov	r6, r0
 8011132:	460f      	mov	r7, r1
 8011134:	b9eb      	cbnz	r3, 8011172 <__kernel_sin+0xe2>
 8011136:	4602      	mov	r2, r0
 8011138:	460b      	mov	r3, r1
 801113a:	4650      	mov	r0, sl
 801113c:	4659      	mov	r1, fp
 801113e:	f7ef fa7b 	bl	8000638 <__aeabi_dmul>
 8011142:	a325      	add	r3, pc, #148	; (adr r3, 80111d8 <__kernel_sin+0x148>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f8be 	bl	80002c8 <__aeabi_dsub>
 801114c:	4642      	mov	r2, r8
 801114e:	464b      	mov	r3, r9
 8011150:	f7ef fa72 	bl	8000638 <__aeabi_dmul>
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	4620      	mov	r0, r4
 801115a:	4629      	mov	r1, r5
 801115c:	f7ef f8b6 	bl	80002cc <__adddf3>
 8011160:	4604      	mov	r4, r0
 8011162:	460d      	mov	r5, r1
 8011164:	ec45 4b10 	vmov	d0, r4, r5
 8011168:	b003      	add	sp, #12
 801116a:	ecbd 8b04 	vpop	{d8-d9}
 801116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011172:	4b1b      	ldr	r3, [pc, #108]	; (80111e0 <__kernel_sin+0x150>)
 8011174:	ec51 0b18 	vmov	r0, r1, d8
 8011178:	2200      	movs	r2, #0
 801117a:	f7ef fa5d 	bl	8000638 <__aeabi_dmul>
 801117e:	4632      	mov	r2, r6
 8011180:	ec41 0b19 	vmov	d9, r0, r1
 8011184:	463b      	mov	r3, r7
 8011186:	4640      	mov	r0, r8
 8011188:	4649      	mov	r1, r9
 801118a:	f7ef fa55 	bl	8000638 <__aeabi_dmul>
 801118e:	4602      	mov	r2, r0
 8011190:	460b      	mov	r3, r1
 8011192:	ec51 0b19 	vmov	r0, r1, d9
 8011196:	f7ef f897 	bl	80002c8 <__aeabi_dsub>
 801119a:	4652      	mov	r2, sl
 801119c:	465b      	mov	r3, fp
 801119e:	f7ef fa4b 	bl	8000638 <__aeabi_dmul>
 80111a2:	ec53 2b18 	vmov	r2, r3, d8
 80111a6:	f7ef f88f 	bl	80002c8 <__aeabi_dsub>
 80111aa:	a30b      	add	r3, pc, #44	; (adr r3, 80111d8 <__kernel_sin+0x148>)
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	4606      	mov	r6, r0
 80111b2:	460f      	mov	r7, r1
 80111b4:	4640      	mov	r0, r8
 80111b6:	4649      	mov	r1, r9
 80111b8:	f7ef fa3e 	bl	8000638 <__aeabi_dmul>
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	4630      	mov	r0, r6
 80111c2:	4639      	mov	r1, r7
 80111c4:	f7ef f882 	bl	80002cc <__adddf3>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4620      	mov	r0, r4
 80111ce:	4629      	mov	r1, r5
 80111d0:	f7ef f87a 	bl	80002c8 <__aeabi_dsub>
 80111d4:	e7c4      	b.n	8011160 <__kernel_sin+0xd0>
 80111d6:	bf00      	nop
 80111d8:	55555549 	.word	0x55555549
 80111dc:	3fc55555 	.word	0x3fc55555
 80111e0:	3fe00000 	.word	0x3fe00000
 80111e4:	5acfd57c 	.word	0x5acfd57c
 80111e8:	3de5d93a 	.word	0x3de5d93a
 80111ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80111f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80111f4:	57b1fe7d 	.word	0x57b1fe7d
 80111f8:	3ec71de3 	.word	0x3ec71de3
 80111fc:	19c161d5 	.word	0x19c161d5
 8011200:	3f2a01a0 	.word	0x3f2a01a0
 8011204:	1110f8a6 	.word	0x1110f8a6
 8011208:	3f811111 	.word	0x3f811111

0801120c <fabs>:
 801120c:	ec51 0b10 	vmov	r0, r1, d0
 8011210:	ee10 2a10 	vmov	r2, s0
 8011214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011218:	ec43 2b10 	vmov	d0, r2, r3
 801121c:	4770      	bx	lr

0801121e <finite>:
 801121e:	b082      	sub	sp, #8
 8011220:	ed8d 0b00 	vstr	d0, [sp]
 8011224:	9801      	ldr	r0, [sp, #4]
 8011226:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801122a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801122e:	0fc0      	lsrs	r0, r0, #31
 8011230:	b002      	add	sp, #8
 8011232:	4770      	bx	lr
 8011234:	0000      	movs	r0, r0
	...

08011238 <floor>:
 8011238:	ec51 0b10 	vmov	r0, r1, d0
 801123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011248:	2e13      	cmp	r6, #19
 801124a:	ee10 5a10 	vmov	r5, s0
 801124e:	ee10 8a10 	vmov	r8, s0
 8011252:	460c      	mov	r4, r1
 8011254:	dc32      	bgt.n	80112bc <floor+0x84>
 8011256:	2e00      	cmp	r6, #0
 8011258:	da14      	bge.n	8011284 <floor+0x4c>
 801125a:	a333      	add	r3, pc, #204	; (adr r3, 8011328 <floor+0xf0>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	f7ef f834 	bl	80002cc <__adddf3>
 8011264:	2200      	movs	r2, #0
 8011266:	2300      	movs	r3, #0
 8011268:	f7ef fc76 	bl	8000b58 <__aeabi_dcmpgt>
 801126c:	b138      	cbz	r0, 801127e <floor+0x46>
 801126e:	2c00      	cmp	r4, #0
 8011270:	da57      	bge.n	8011322 <floor+0xea>
 8011272:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011276:	431d      	orrs	r5, r3
 8011278:	d001      	beq.n	801127e <floor+0x46>
 801127a:	4c2d      	ldr	r4, [pc, #180]	; (8011330 <floor+0xf8>)
 801127c:	2500      	movs	r5, #0
 801127e:	4621      	mov	r1, r4
 8011280:	4628      	mov	r0, r5
 8011282:	e025      	b.n	80112d0 <floor+0x98>
 8011284:	4f2b      	ldr	r7, [pc, #172]	; (8011334 <floor+0xfc>)
 8011286:	4137      	asrs	r7, r6
 8011288:	ea01 0307 	and.w	r3, r1, r7
 801128c:	4303      	orrs	r3, r0
 801128e:	d01f      	beq.n	80112d0 <floor+0x98>
 8011290:	a325      	add	r3, pc, #148	; (adr r3, 8011328 <floor+0xf0>)
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	f7ef f819 	bl	80002cc <__adddf3>
 801129a:	2200      	movs	r2, #0
 801129c:	2300      	movs	r3, #0
 801129e:	f7ef fc5b 	bl	8000b58 <__aeabi_dcmpgt>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	d0eb      	beq.n	801127e <floor+0x46>
 80112a6:	2c00      	cmp	r4, #0
 80112a8:	bfbe      	ittt	lt
 80112aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80112ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80112b2:	19a4      	addlt	r4, r4, r6
 80112b4:	ea24 0407 	bic.w	r4, r4, r7
 80112b8:	2500      	movs	r5, #0
 80112ba:	e7e0      	b.n	801127e <floor+0x46>
 80112bc:	2e33      	cmp	r6, #51	; 0x33
 80112be:	dd0b      	ble.n	80112d8 <floor+0xa0>
 80112c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80112c4:	d104      	bne.n	80112d0 <floor+0x98>
 80112c6:	ee10 2a10 	vmov	r2, s0
 80112ca:	460b      	mov	r3, r1
 80112cc:	f7ee fffe 	bl	80002cc <__adddf3>
 80112d0:	ec41 0b10 	vmov	d0, r0, r1
 80112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80112dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112e0:	fa23 f707 	lsr.w	r7, r3, r7
 80112e4:	4207      	tst	r7, r0
 80112e6:	d0f3      	beq.n	80112d0 <floor+0x98>
 80112e8:	a30f      	add	r3, pc, #60	; (adr r3, 8011328 <floor+0xf0>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	f7ee ffed 	bl	80002cc <__adddf3>
 80112f2:	2200      	movs	r2, #0
 80112f4:	2300      	movs	r3, #0
 80112f6:	f7ef fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d0bf      	beq.n	801127e <floor+0x46>
 80112fe:	2c00      	cmp	r4, #0
 8011300:	da02      	bge.n	8011308 <floor+0xd0>
 8011302:	2e14      	cmp	r6, #20
 8011304:	d103      	bne.n	801130e <floor+0xd6>
 8011306:	3401      	adds	r4, #1
 8011308:	ea25 0507 	bic.w	r5, r5, r7
 801130c:	e7b7      	b.n	801127e <floor+0x46>
 801130e:	2301      	movs	r3, #1
 8011310:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011314:	fa03 f606 	lsl.w	r6, r3, r6
 8011318:	4435      	add	r5, r6
 801131a:	4545      	cmp	r5, r8
 801131c:	bf38      	it	cc
 801131e:	18e4      	addcc	r4, r4, r3
 8011320:	e7f2      	b.n	8011308 <floor+0xd0>
 8011322:	2500      	movs	r5, #0
 8011324:	462c      	mov	r4, r5
 8011326:	e7aa      	b.n	801127e <floor+0x46>
 8011328:	8800759c 	.word	0x8800759c
 801132c:	7e37e43c 	.word	0x7e37e43c
 8011330:	bff00000 	.word	0xbff00000
 8011334:	000fffff 	.word	0x000fffff

08011338 <rint>:
 8011338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801133a:	ec51 0b10 	vmov	r0, r1, d0
 801133e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011342:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011346:	2e13      	cmp	r6, #19
 8011348:	ee10 4a10 	vmov	r4, s0
 801134c:	460b      	mov	r3, r1
 801134e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011352:	dc58      	bgt.n	8011406 <rint+0xce>
 8011354:	2e00      	cmp	r6, #0
 8011356:	da2b      	bge.n	80113b0 <rint+0x78>
 8011358:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801135c:	4302      	orrs	r2, r0
 801135e:	d023      	beq.n	80113a8 <rint+0x70>
 8011360:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011364:	4302      	orrs	r2, r0
 8011366:	4254      	negs	r4, r2
 8011368:	4314      	orrs	r4, r2
 801136a:	0c4b      	lsrs	r3, r1, #17
 801136c:	0b24      	lsrs	r4, r4, #12
 801136e:	045b      	lsls	r3, r3, #17
 8011370:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011374:	ea44 0103 	orr.w	r1, r4, r3
 8011378:	4b32      	ldr	r3, [pc, #200]	; (8011444 <rint+0x10c>)
 801137a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801137e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4630      	mov	r0, r6
 8011388:	4639      	mov	r1, r7
 801138a:	f7ee ff9f 	bl	80002cc <__adddf3>
 801138e:	e9cd 0100 	strd	r0, r1, [sp]
 8011392:	463b      	mov	r3, r7
 8011394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011398:	4632      	mov	r2, r6
 801139a:	f7ee ff95 	bl	80002c8 <__aeabi_dsub>
 801139e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80113a6:	4639      	mov	r1, r7
 80113a8:	ec41 0b10 	vmov	d0, r0, r1
 80113ac:	b003      	add	sp, #12
 80113ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b0:	4a25      	ldr	r2, [pc, #148]	; (8011448 <rint+0x110>)
 80113b2:	4132      	asrs	r2, r6
 80113b4:	ea01 0702 	and.w	r7, r1, r2
 80113b8:	4307      	orrs	r7, r0
 80113ba:	d0f5      	beq.n	80113a8 <rint+0x70>
 80113bc:	0851      	lsrs	r1, r2, #1
 80113be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80113c2:	4314      	orrs	r4, r2
 80113c4:	d00c      	beq.n	80113e0 <rint+0xa8>
 80113c6:	ea23 0201 	bic.w	r2, r3, r1
 80113ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113ce:	2e13      	cmp	r6, #19
 80113d0:	fa43 f606 	asr.w	r6, r3, r6
 80113d4:	bf0c      	ite	eq
 80113d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80113da:	2400      	movne	r4, #0
 80113dc:	ea42 0306 	orr.w	r3, r2, r6
 80113e0:	4918      	ldr	r1, [pc, #96]	; (8011444 <rint+0x10c>)
 80113e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80113e6:	4622      	mov	r2, r4
 80113e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80113ec:	4620      	mov	r0, r4
 80113ee:	4629      	mov	r1, r5
 80113f0:	f7ee ff6c 	bl	80002cc <__adddf3>
 80113f4:	e9cd 0100 	strd	r0, r1, [sp]
 80113f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113fc:	4622      	mov	r2, r4
 80113fe:	462b      	mov	r3, r5
 8011400:	f7ee ff62 	bl	80002c8 <__aeabi_dsub>
 8011404:	e7d0      	b.n	80113a8 <rint+0x70>
 8011406:	2e33      	cmp	r6, #51	; 0x33
 8011408:	dd07      	ble.n	801141a <rint+0xe2>
 801140a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801140e:	d1cb      	bne.n	80113a8 <rint+0x70>
 8011410:	ee10 2a10 	vmov	r2, s0
 8011414:	f7ee ff5a 	bl	80002cc <__adddf3>
 8011418:	e7c6      	b.n	80113a8 <rint+0x70>
 801141a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801141e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011422:	40d6      	lsrs	r6, r2
 8011424:	4230      	tst	r0, r6
 8011426:	d0bf      	beq.n	80113a8 <rint+0x70>
 8011428:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801142c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011430:	bf1f      	itttt	ne
 8011432:	ea24 0101 	bicne.w	r1, r4, r1
 8011436:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801143a:	fa44 f202 	asrne.w	r2, r4, r2
 801143e:	ea41 0402 	orrne.w	r4, r1, r2
 8011442:	e7cd      	b.n	80113e0 <rint+0xa8>
 8011444:	08011cf0 	.word	0x08011cf0
 8011448:	000fffff 	.word	0x000fffff
 801144c:	00000000 	.word	0x00000000

08011450 <scalbn>:
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	ec55 4b10 	vmov	r4, r5, d0
 8011456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801145a:	4606      	mov	r6, r0
 801145c:	462b      	mov	r3, r5
 801145e:	b99a      	cbnz	r2, 8011488 <scalbn+0x38>
 8011460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011464:	4323      	orrs	r3, r4
 8011466:	d036      	beq.n	80114d6 <scalbn+0x86>
 8011468:	4b39      	ldr	r3, [pc, #228]	; (8011550 <scalbn+0x100>)
 801146a:	4629      	mov	r1, r5
 801146c:	ee10 0a10 	vmov	r0, s0
 8011470:	2200      	movs	r2, #0
 8011472:	f7ef f8e1 	bl	8000638 <__aeabi_dmul>
 8011476:	4b37      	ldr	r3, [pc, #220]	; (8011554 <scalbn+0x104>)
 8011478:	429e      	cmp	r6, r3
 801147a:	4604      	mov	r4, r0
 801147c:	460d      	mov	r5, r1
 801147e:	da10      	bge.n	80114a2 <scalbn+0x52>
 8011480:	a32b      	add	r3, pc, #172	; (adr r3, 8011530 <scalbn+0xe0>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	e03a      	b.n	80114fe <scalbn+0xae>
 8011488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801148c:	428a      	cmp	r2, r1
 801148e:	d10c      	bne.n	80114aa <scalbn+0x5a>
 8011490:	ee10 2a10 	vmov	r2, s0
 8011494:	4620      	mov	r0, r4
 8011496:	4629      	mov	r1, r5
 8011498:	f7ee ff18 	bl	80002cc <__adddf3>
 801149c:	4604      	mov	r4, r0
 801149e:	460d      	mov	r5, r1
 80114a0:	e019      	b.n	80114d6 <scalbn+0x86>
 80114a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114a6:	460b      	mov	r3, r1
 80114a8:	3a36      	subs	r2, #54	; 0x36
 80114aa:	4432      	add	r2, r6
 80114ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80114b0:	428a      	cmp	r2, r1
 80114b2:	dd08      	ble.n	80114c6 <scalbn+0x76>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	a120      	add	r1, pc, #128	; (adr r1, 8011538 <scalbn+0xe8>)
 80114b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114bc:	da1c      	bge.n	80114f8 <scalbn+0xa8>
 80114be:	a120      	add	r1, pc, #128	; (adr r1, 8011540 <scalbn+0xf0>)
 80114c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c4:	e018      	b.n	80114f8 <scalbn+0xa8>
 80114c6:	2a00      	cmp	r2, #0
 80114c8:	dd08      	ble.n	80114dc <scalbn+0x8c>
 80114ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80114d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80114d6:	ec45 4b10 	vmov	d0, r4, r5
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80114e0:	da19      	bge.n	8011516 <scalbn+0xc6>
 80114e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80114e6:	429e      	cmp	r6, r3
 80114e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80114ec:	dd0a      	ble.n	8011504 <scalbn+0xb4>
 80114ee:	a112      	add	r1, pc, #72	; (adr r1, 8011538 <scalbn+0xe8>)
 80114f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1e2      	bne.n	80114be <scalbn+0x6e>
 80114f8:	a30f      	add	r3, pc, #60	; (adr r3, 8011538 <scalbn+0xe8>)
 80114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fe:	f7ef f89b 	bl	8000638 <__aeabi_dmul>
 8011502:	e7cb      	b.n	801149c <scalbn+0x4c>
 8011504:	a10a      	add	r1, pc, #40	; (adr r1, 8011530 <scalbn+0xe0>)
 8011506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0b8      	beq.n	8011480 <scalbn+0x30>
 801150e:	a10e      	add	r1, pc, #56	; (adr r1, 8011548 <scalbn+0xf8>)
 8011510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011514:	e7b4      	b.n	8011480 <scalbn+0x30>
 8011516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801151a:	3236      	adds	r2, #54	; 0x36
 801151c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011524:	4620      	mov	r0, r4
 8011526:	4b0c      	ldr	r3, [pc, #48]	; (8011558 <scalbn+0x108>)
 8011528:	2200      	movs	r2, #0
 801152a:	e7e8      	b.n	80114fe <scalbn+0xae>
 801152c:	f3af 8000 	nop.w
 8011530:	c2f8f359 	.word	0xc2f8f359
 8011534:	01a56e1f 	.word	0x01a56e1f
 8011538:	8800759c 	.word	0x8800759c
 801153c:	7e37e43c 	.word	0x7e37e43c
 8011540:	8800759c 	.word	0x8800759c
 8011544:	fe37e43c 	.word	0xfe37e43c
 8011548:	c2f8f359 	.word	0xc2f8f359
 801154c:	81a56e1f 	.word	0x81a56e1f
 8011550:	43500000 	.word	0x43500000
 8011554:	ffff3cb0 	.word	0xffff3cb0
 8011558:	3c900000 	.word	0x3c900000

0801155c <_init>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	bf00      	nop
 8011560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011562:	bc08      	pop	{r3}
 8011564:	469e      	mov	lr, r3
 8011566:	4770      	bx	lr

08011568 <_fini>:
 8011568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156a:	bf00      	nop
 801156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801156e:	bc08      	pop	{r3}
 8011570:	469e      	mov	lr, r3
 8011572:	4770      	bx	lr
